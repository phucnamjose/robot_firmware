
DMA_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001abc4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b28  0801ad58  0801ad58  0002ad58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b880  0801b880  00031030  2**0
                  CONTENTS
  4 .ARM          00000008  0801b880  0801b880  0002b880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b888  0801b888  00031030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b888  0801b888  0002b888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b88c  0801b88c  0002b88c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001030  20000000  0801b890  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005e54  20001030  0801c8c0  00031030  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20006e84  0801c8c0  00036e84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00031030  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e0ec  00000000  00000000  00031060  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006211  00000000  00000000  0005f14c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001d38  00000000  00000000  00065360  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001ae0  00000000  00000000  00067098  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000299b3  00000000  00000000  00068b78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001f158  00000000  00000000  0009252b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dc9d9  00000000  00000000  000b1683  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018e05c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008d6c  00000000  00000000  0018e0d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20001030 	.word	0x20001030
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801ad3c 	.word	0x0801ad3c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20001034 	.word	0x20001034
 80001cc:	0801ad3c 	.word	0x0801ad3c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b972 	b.w	8000fa4 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9e08      	ldr	r6, [sp, #32]
 8000cde:	4604      	mov	r4, r0
 8000ce0:	4688      	mov	r8, r1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d14b      	bne.n	8000d7e <__udivmoddi4+0xa6>
 8000ce6:	428a      	cmp	r2, r1
 8000ce8:	4615      	mov	r5, r2
 8000cea:	d967      	bls.n	8000dbc <__udivmoddi4+0xe4>
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	b14a      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf2:	f1c2 0720 	rsb	r7, r2, #32
 8000cf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cfe:	4095      	lsls	r5, r2
 8000d00:	ea47 0803 	orr.w	r8, r7, r3
 8000d04:	4094      	lsls	r4, r2
 8000d06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d0a:	0c23      	lsrs	r3, r4, #16
 8000d0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d10:	fa1f fc85 	uxth.w	ip, r5
 8000d14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x60>
 8000d24:	18eb      	adds	r3, r5, r3
 8000d26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d2a:	f080 811b 	bcs.w	8000f64 <__udivmoddi4+0x28c>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 8118 	bls.w	8000f64 <__udivmoddi4+0x28c>
 8000d34:	3f02      	subs	r7, #2
 8000d36:	442b      	add	r3, r5
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d4c:	45a4      	cmp	ip, r4
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x8c>
 8000d50:	192c      	adds	r4, r5, r4
 8000d52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d56:	f080 8107 	bcs.w	8000f68 <__udivmoddi4+0x290>
 8000d5a:	45a4      	cmp	ip, r4
 8000d5c:	f240 8104 	bls.w	8000f68 <__udivmoddi4+0x290>
 8000d60:	3802      	subs	r0, #2
 8000d62:	442c      	add	r4, r5
 8000d64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d68:	eba4 040c 	sub.w	r4, r4, ip
 8000d6c:	2700      	movs	r7, #0
 8000d6e:	b11e      	cbz	r6, 8000d78 <__udivmoddi4+0xa0>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c6 4300 	strd	r4, r3, [r6]
 8000d78:	4639      	mov	r1, r7
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0xbe>
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	f000 80eb 	beq.w	8000f5e <__udivmoddi4+0x286>
 8000d88:	2700      	movs	r7, #0
 8000d8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d8e:	4638      	mov	r0, r7
 8000d90:	4639      	mov	r1, r7
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f783 	clz	r7, r3
 8000d9a:	2f00      	cmp	r7, #0
 8000d9c:	d147      	bne.n	8000e2e <__udivmoddi4+0x156>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0xd0>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80fa 	bhi.w	8000f9c <__udivmoddi4+0x2c4>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	4698      	mov	r8, r3
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	d0e0      	beq.n	8000d78 <__udivmoddi4+0xa0>
 8000db6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dba:	e7dd      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000dbc:	b902      	cbnz	r2, 8000dc0 <__udivmoddi4+0xe8>
 8000dbe:	deff      	udf	#255	; 0xff
 8000dc0:	fab2 f282 	clz	r2, r2
 8000dc4:	2a00      	cmp	r2, #0
 8000dc6:	f040 808f 	bne.w	8000ee8 <__udivmoddi4+0x210>
 8000dca:	1b49      	subs	r1, r1, r5
 8000dcc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dd0:	fa1f f885 	uxth.w	r8, r5
 8000dd4:	2701      	movs	r7, #1
 8000dd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dda:	0c23      	lsrs	r3, r4, #16
 8000ddc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000de0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de4:	fb08 f10c 	mul.w	r1, r8, ip
 8000de8:	4299      	cmp	r1, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x124>
 8000dec:	18eb      	adds	r3, r5, r3
 8000dee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x122>
 8000df4:	4299      	cmp	r1, r3
 8000df6:	f200 80cd 	bhi.w	8000f94 <__udivmoddi4+0x2bc>
 8000dfa:	4684      	mov	ip, r0
 8000dfc:	1a59      	subs	r1, r3, r1
 8000dfe:	b2a3      	uxth	r3, r4
 8000e00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e0c:	fb08 f800 	mul.w	r8, r8, r0
 8000e10:	45a0      	cmp	r8, r4
 8000e12:	d907      	bls.n	8000e24 <__udivmoddi4+0x14c>
 8000e14:	192c      	adds	r4, r5, r4
 8000e16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x14a>
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	f200 80b6 	bhi.w	8000f8e <__udivmoddi4+0x2b6>
 8000e22:	4618      	mov	r0, r3
 8000e24:	eba4 0408 	sub.w	r4, r4, r8
 8000e28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e2c:	e79f      	b.n	8000d6e <__udivmoddi4+0x96>
 8000e2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e32:	40bb      	lsls	r3, r7
 8000e34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e4c:	4325      	orrs	r5, r4
 8000e4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e52:	0c2c      	lsrs	r4, r5, #16
 8000e54:	fb08 3319 	mls	r3, r8, r9, r3
 8000e58:	fa1f fa8e 	uxth.w	sl, lr
 8000e5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e60:	fb09 f40a 	mul.w	r4, r9, sl
 8000e64:	429c      	cmp	r4, r3
 8000e66:	fa02 f207 	lsl.w	r2, r2, r7
 8000e6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e6e:	d90b      	bls.n	8000e88 <__udivmoddi4+0x1b0>
 8000e70:	eb1e 0303 	adds.w	r3, lr, r3
 8000e74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e78:	f080 8087 	bcs.w	8000f8a <__udivmoddi4+0x2b2>
 8000e7c:	429c      	cmp	r4, r3
 8000e7e:	f240 8084 	bls.w	8000f8a <__udivmoddi4+0x2b2>
 8000e82:	f1a9 0902 	sub.w	r9, r9, #2
 8000e86:	4473      	add	r3, lr
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	b2ad      	uxth	r5, r5
 8000e8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e90:	fb08 3310 	mls	r3, r8, r0, r3
 8000e94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e9c:	45a2      	cmp	sl, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x1da>
 8000ea0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ea4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ea8:	d26b      	bcs.n	8000f82 <__udivmoddi4+0x2aa>
 8000eaa:	45a2      	cmp	sl, r4
 8000eac:	d969      	bls.n	8000f82 <__udivmoddi4+0x2aa>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	4474      	add	r4, lr
 8000eb2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eba:	eba4 040a 	sub.w	r4, r4, sl
 8000ebe:	454c      	cmp	r4, r9
 8000ec0:	46c2      	mov	sl, r8
 8000ec2:	464b      	mov	r3, r9
 8000ec4:	d354      	bcc.n	8000f70 <__udivmoddi4+0x298>
 8000ec6:	d051      	beq.n	8000f6c <__udivmoddi4+0x294>
 8000ec8:	2e00      	cmp	r6, #0
 8000eca:	d069      	beq.n	8000fa0 <__udivmoddi4+0x2c8>
 8000ecc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ed0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ed4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ed8:	40fd      	lsrs	r5, r7
 8000eda:	40fc      	lsrs	r4, r7
 8000edc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ee0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ee4:	2700      	movs	r7, #0
 8000ee6:	e747      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000ee8:	f1c2 0320 	rsb	r3, r2, #32
 8000eec:	fa20 f703 	lsr.w	r7, r0, r3
 8000ef0:	4095      	lsls	r5, r2
 8000ef2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ef6:	fa21 f303 	lsr.w	r3, r1, r3
 8000efa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000efe:	4338      	orrs	r0, r7
 8000f00:	0c01      	lsrs	r1, r0, #16
 8000f02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f06:	fa1f f885 	uxth.w	r8, r5
 8000f0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb07 f308 	mul.w	r3, r7, r8
 8000f16:	428b      	cmp	r3, r1
 8000f18:	fa04 f402 	lsl.w	r4, r4, r2
 8000f1c:	d907      	bls.n	8000f2e <__udivmoddi4+0x256>
 8000f1e:	1869      	adds	r1, r5, r1
 8000f20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f24:	d22f      	bcs.n	8000f86 <__udivmoddi4+0x2ae>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	d92d      	bls.n	8000f86 <__udivmoddi4+0x2ae>
 8000f2a:	3f02      	subs	r7, #2
 8000f2c:	4429      	add	r1, r5
 8000f2e:	1acb      	subs	r3, r1, r3
 8000f30:	b281      	uxth	r1, r0
 8000f32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f3e:	fb00 f308 	mul.w	r3, r0, r8
 8000f42:	428b      	cmp	r3, r1
 8000f44:	d907      	bls.n	8000f56 <__udivmoddi4+0x27e>
 8000f46:	1869      	adds	r1, r5, r1
 8000f48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f4c:	d217      	bcs.n	8000f7e <__udivmoddi4+0x2a6>
 8000f4e:	428b      	cmp	r3, r1
 8000f50:	d915      	bls.n	8000f7e <__udivmoddi4+0x2a6>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4429      	add	r1, r5
 8000f56:	1ac9      	subs	r1, r1, r3
 8000f58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f5c:	e73b      	b.n	8000dd6 <__udivmoddi4+0xfe>
 8000f5e:	4637      	mov	r7, r6
 8000f60:	4630      	mov	r0, r6
 8000f62:	e709      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000f64:	4607      	mov	r7, r0
 8000f66:	e6e7      	b.n	8000d38 <__udivmoddi4+0x60>
 8000f68:	4618      	mov	r0, r3
 8000f6a:	e6fb      	b.n	8000d64 <__udivmoddi4+0x8c>
 8000f6c:	4541      	cmp	r1, r8
 8000f6e:	d2ab      	bcs.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f74:	eb69 020e 	sbc.w	r2, r9, lr
 8000f78:	3801      	subs	r0, #1
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	e7a4      	b.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f7e:	4660      	mov	r0, ip
 8000f80:	e7e9      	b.n	8000f56 <__udivmoddi4+0x27e>
 8000f82:	4618      	mov	r0, r3
 8000f84:	e795      	b.n	8000eb2 <__udivmoddi4+0x1da>
 8000f86:	4667      	mov	r7, ip
 8000f88:	e7d1      	b.n	8000f2e <__udivmoddi4+0x256>
 8000f8a:	4681      	mov	r9, r0
 8000f8c:	e77c      	b.n	8000e88 <__udivmoddi4+0x1b0>
 8000f8e:	3802      	subs	r0, #2
 8000f90:	442c      	add	r4, r5
 8000f92:	e747      	b.n	8000e24 <__udivmoddi4+0x14c>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	442b      	add	r3, r5
 8000f9a:	e72f      	b.n	8000dfc <__udivmoddi4+0x124>
 8000f9c:	4638      	mov	r0, r7
 8000f9e:	e708      	b.n	8000db2 <__udivmoddi4+0xda>
 8000fa0:	4637      	mov	r7, r6
 8000fa2:	e6e9      	b.n	8000d78 <__udivmoddi4+0xa0>

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <commandRead>:
												"STOP",
												"ERRO",
												"OKAY"};


Robot_CommandTypedef 	commandRead	(uint8_t *message, int32_t *id_command, DUTY_Command_TypeDef *duty_cmd) {
 8000fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fac:	b0b4      	sub	sp, #208	; 0xd0
 8000fae:	af0a      	add	r7, sp, #40	; 0x28
 8000fb0:	60f8      	str	r0, [r7, #12]
 8000fb2:	60b9      	str	r1, [r7, #8]
 8000fb4:	607a      	str	r2, [r7, #4]
	char command[10];
	char para[70];
	int32_t result;
	memset(para, 0, 70*sizeof(char));
 8000fb6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000fba:	2246      	movs	r2, #70	; 0x46
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f014 f83a 	bl	8015038 <memset>
	result = sscanf((char*)message, "%d %s %70c",(int*) id_command, command, para);
 8000fc4:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8000fc8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000fcc:	9300      	str	r3, [sp, #0]
 8000fce:	4613      	mov	r3, r2
 8000fd0:	68ba      	ldr	r2, [r7, #8]
 8000fd2:	49b0      	ldr	r1, [pc, #704]	; (8001294 <commandRead+0x2ec>)
 8000fd4:	68f8      	ldr	r0, [r7, #12]
 8000fd6:	f014 ff87 	bl	8015ee8 <siscanf>
 8000fda:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
	duty_cmd->id_command = *id_command;
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	605a      	str	r2, [r3, #4]
	// Stop Now
	if ( 0 == strcmp( command, ROBOTCOMMAND[CMD_STOPNOW])) {
 8000fe6:	4bac      	ldr	r3, [pc, #688]	; (8001298 <commandRead+0x2f0>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000fee:	4611      	mov	r1, r2
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff f8ed 	bl	80001d0 <strcmp>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d10a      	bne.n	8001012 <commandRead+0x6a>
		duty_cmd->robot_mode = SCARA_MODE_STOP;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2200      	movs	r2, #0
 8001000:	709a      	strb	r2, [r3, #2]
		duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2201      	movs	r2, #1
 8001006:	705a      	strb	r2, [r3, #1]
		duty_cmd->change_method = FALSE;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2200      	movs	r2, #0
 800100c:	701a      	strb	r2, [r3, #0]
		return CMD_STOPNOW;
 800100e:	2300      	movs	r3, #0
 8001010:	e37e      	b.n	8001710 <commandRead+0x768>

	// Scan Limit
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_SCAN_LIMIT])) {
 8001012:	4ba1      	ldr	r3, [pc, #644]	; (8001298 <commandRead+0x2f0>)
 8001014:	685a      	ldr	r2, [r3, #4]
 8001016:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800101a:	4611      	mov	r1, r2
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff f8d7 	bl	80001d0 <strcmp>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d10a      	bne.n	800103e <commandRead+0x96>
		duty_cmd->robot_mode = SCARA_MODE_SCAN;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2201      	movs	r2, #1
 800102c:	709a      	strb	r2, [r3, #2]
		duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2201      	movs	r2, #1
 8001032:	705a      	strb	r2, [r3, #1]
		duty_cmd->change_method = FALSE;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2200      	movs	r2, #0
 8001038:	701a      	strb	r2, [r3, #0]
		return CMD_SCAN_LIMIT;
 800103a:	2301      	movs	r3, #1
 800103c:	e368      	b.n	8001710 <commandRead+0x768>

	// Move Home
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_MOVE_HOME])) {
 800103e:	4b96      	ldr	r3, [pc, #600]	; (8001298 <commandRead+0x2f0>)
 8001040:	689a      	ldr	r2, [r3, #8]
 8001042:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001046:	4611      	mov	r1, r2
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff f8c1 	bl	80001d0 <strcmp>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d145      	bne.n	80010e0 <commandRead+0x138>
		if (3 == result) {
 8001054:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001058:	2b03      	cmp	r3, #3
 800105a:	d112      	bne.n	8001082 <commandRead+0xda>
			result = sscanf( para, "%lf %lf",
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8001068:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800106c:	498b      	ldr	r1, [pc, #556]	; (800129c <commandRead+0x2f4>)
 800106e:	f014 ff3b 	bl	8015ee8 <siscanf>
 8001072:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
							&(duty_cmd->v_factor),
							&(duty_cmd->a_factor));
			if (2 != result) {
 8001076:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800107a:	2b02      	cmp	r3, #2
 800107c:	d003      	beq.n	8001086 <commandRead+0xde>
				return CMD_ERROR;
 800107e:	2314      	movs	r3, #20
 8001080:	e346      	b.n	8001710 <commandRead+0x768>
			}
		} else {
			return CMD_ERROR;
 8001082:	2314      	movs	r3, #20
 8001084:	e344      	b.n	8001710 <commandRead+0x768>
		}
		duty_cmd->target_point.x = 250;
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	f04f 0300 	mov.w	r3, #0
 800108c:	4c84      	ldr	r4, [pc, #528]	; (80012a0 <commandRead+0x2f8>)
 800108e:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		duty_cmd->target_point.y = -200;
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	f04f 0300 	mov.w	r3, #0
 8001098:	4c82      	ldr	r4, [pc, #520]	; (80012a4 <commandRead+0x2fc>)
 800109a:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
		duty_cmd->target_point.z = 120;
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	f04f 0300 	mov.w	r3, #0
 80010a4:	4c80      	ldr	r4, [pc, #512]	; (80012a8 <commandRead+0x300>)
 80010a6:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
		duty_cmd->target_point.roll = 0;
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	f04f 0300 	mov.w	r3, #0
 80010b0:	f04f 0400 	mov.w	r4, #0
 80010b4:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88

		duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2200      	movs	r2, #0
 80010bc:	735a      	strb	r2, [r3, #13]
		duty_cmd->space_type = DUTY_SPACE_JOINT;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2201      	movs	r2, #1
 80010c2:	725a      	strb	r2, [r3, #9]
		duty_cmd->joint_type = DUTY_JOINT_4DOF;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2201      	movs	r2, #1
 80010c8:	72da      	strb	r2, [r3, #11]
		duty_cmd->robot_mode = SCARA_MODE_DUTY;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2202      	movs	r2, #2
 80010ce:	709a      	strb	r2, [r3, #2]
		duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2201      	movs	r2, #1
 80010d4:	705a      	strb	r2, [r3, #1]
		duty_cmd->change_method = FALSE;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2200      	movs	r2, #0
 80010da:	701a      	strb	r2, [r3, #0]
		return CMD_MOVE_HOME;
 80010dc:	2302      	movs	r3, #2
 80010de:	e317      	b.n	8001710 <commandRead+0x768>

	// Move Line
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_MOVE_LINE])) {
 80010e0:	4b6d      	ldr	r3, [pc, #436]	; (8001298 <commandRead+0x2f0>)
 80010e2:	68da      	ldr	r2, [r3, #12]
 80010e4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80010e8:	4611      	mov	r1, r2
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff f870 	bl	80001d0 <strcmp>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d158      	bne.n	80011a8 <commandRead+0x200>
		if (3 == result) {
 80010f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80010fa:	2b03      	cmp	r3, #3
 80010fc:	d147      	bne.n	800118e <commandRead+0x1e6>
			double temp_fl;
			int8_t mode_init;
			result = sscanf( para, "%lf %lf %lf %lf %lf %d %lf",
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	f103 0570 	add.w	r5, r3, #112	; 0x70
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f103 0678 	add.w	r6, r3, #120	; 0x78
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	3380      	adds	r3, #128	; 0x80
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	3288      	adds	r2, #136	; 0x88
 8001112:	6879      	ldr	r1, [r7, #4]
 8001114:	f501 71cc 	add.w	r1, r1, #408	; 0x198
 8001118:	f107 0450 	add.w	r4, r7, #80	; 0x50
 800111c:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8001120:	9004      	str	r0, [sp, #16]
 8001122:	f107 0047 	add.w	r0, r7, #71	; 0x47
 8001126:	9003      	str	r0, [sp, #12]
 8001128:	9102      	str	r1, [sp, #8]
 800112a:	9201      	str	r2, [sp, #4]
 800112c:	9300      	str	r3, [sp, #0]
 800112e:	4633      	mov	r3, r6
 8001130:	462a      	mov	r2, r5
 8001132:	495e      	ldr	r1, [pc, #376]	; (80012ac <commandRead+0x304>)
 8001134:	4620      	mov	r0, r4
 8001136:	f014 fed7 	bl	8015ee8 <siscanf>
 800113a:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
							&(duty_cmd->target_point.roll),
							&(duty_cmd->v_factor),
							(int *)&mode_init,
							&temp_fl);

			if (7 != result) {
 800113e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001142:	2b07      	cmp	r3, #7
 8001144:	d001      	beq.n	800114a <commandRead+0x1a2>
				return CMD_ERROR;
 8001146:	2314      	movs	r3, #20
 8001148:	e2e2      	b.n	8001710 <commandRead+0x768>
			}
			duty_cmd->path_type = DUTY_PATH_LINE;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2200      	movs	r2, #0
 800114e:	729a      	strb	r2, [r3, #10]
			duty_cmd->space_type = DUTY_SPACE_TASK;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2200      	movs	r2, #0
 8001154:	725a      	strb	r2, [r3, #9]

			if ( DUTY_MODE_INIT_QVA == mode_init) {
 8001156:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800115a:	2b00      	cmp	r3, #0
 800115c:	d108      	bne.n	8001170 <commandRead+0x1c8>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2200      	movs	r2, #0
 8001162:	735a      	strb	r2, [r3, #13]
				duty_cmd->a_factor		= temp_fl;
 8001164:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8001168:	687a      	ldr	r2, [r7, #4]
 800116a:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0
 800116e:	e010      	b.n	8001192 <commandRead+0x1ea>
			} else if ( DUTY_MODE_INIT_QVT == mode_init) {
 8001170:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8001174:	2b01      	cmp	r3, #1
 8001176:	d108      	bne.n	800118a <commandRead+0x1e2>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2201      	movs	r2, #1
 800117c:	735a      	strb	r2, [r3, #13]
				duty_cmd->time_total	= temp_fl;
 800117e:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	e9c2 3408 	strd	r3, r4, [r2, #32]
 8001188:	e003      	b.n	8001192 <commandRead+0x1ea>
			} else {
				return CMD_ERROR;
 800118a:	2314      	movs	r3, #20
 800118c:	e2c0      	b.n	8001710 <commandRead+0x768>
			}
		} else {
			return CMD_ERROR;
 800118e:	2314      	movs	r3, #20
 8001190:	e2be      	b.n	8001710 <commandRead+0x768>
		}
		duty_cmd->robot_mode = SCARA_MODE_DUTY;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2202      	movs	r2, #2
 8001196:	709a      	strb	r2, [r3, #2]
		duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2201      	movs	r2, #1
 800119c:	705a      	strb	r2, [r3, #1]
		duty_cmd->change_method = FALSE;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2200      	movs	r2, #0
 80011a2:	701a      	strb	r2, [r3, #0]
		return CMD_MOVE_LINE;
 80011a4:	2303      	movs	r3, #3
 80011a6:	e2b3      	b.n	8001710 <commandRead+0x768>

	// Move Circle
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_MOVE_CIRCLE])) {
 80011a8:	4b3b      	ldr	r3, [pc, #236]	; (8001298 <commandRead+0x2f0>)
 80011aa:	691a      	ldr	r2, [r3, #16]
 80011ac:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80011b0:	4611      	mov	r1, r2
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff f80c 	bl	80001d0 <strcmp>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d17a      	bne.n	80012b4 <commandRead+0x30c>
		if (3 == result) {
 80011be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80011c2:	2b03      	cmp	r3, #3
 80011c4:	d158      	bne.n	8001278 <commandRead+0x2d0>
			double temp_fl;
			int8_t mode_init;
			result = sscanf( para, "%lf %lf %lf %lf %lf %lf %lf %d %lf %d %lf",
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f103 0e70 	add.w	lr, r3, #112	; 0x70
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f103 0878 	add.w	r8, r3, #120	; 0x78
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	3380      	adds	r3, #128	; 0x80
 80011d6:	603b      	str	r3, [r7, #0]
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	3288      	adds	r2, #136	; 0x88
 80011dc:	6879      	ldr	r1, [r7, #4]
 80011de:	f501 7194 	add.w	r1, r1, #296	; 0x128
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f500 7098 	add.w	r0, r0, #304	; 0x130
 80011e8:	687c      	ldr	r4, [r7, #4]
 80011ea:	f504 749c 	add.w	r4, r4, #312	; 0x138
							&(duty_cmd->target_point.z),
							&(duty_cmd->target_point.roll),
							&(duty_cmd->sub_point.x),
							&(duty_cmd->sub_point.y),
							&(duty_cmd->sub_point.z),
							(int *)&(duty_cmd->sub_para_int), // dir
 80011ee:	687d      	ldr	r5, [r7, #4]
 80011f0:	3510      	adds	r5, #16
			result = sscanf( para, "%lf %lf %lf %lf %lf %lf %lf %d %lf %d %lf",
 80011f2:	687e      	ldr	r6, [r7, #4]
 80011f4:	f506 76cc 	add.w	r6, r6, #408	; 0x198
 80011f8:	f107 0c50 	add.w	ip, r7, #80	; 0x50
 80011fc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001200:	9308      	str	r3, [sp, #32]
 8001202:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8001206:	9307      	str	r3, [sp, #28]
 8001208:	9606      	str	r6, [sp, #24]
 800120a:	9505      	str	r5, [sp, #20]
 800120c:	9404      	str	r4, [sp, #16]
 800120e:	9003      	str	r0, [sp, #12]
 8001210:	9102      	str	r1, [sp, #8]
 8001212:	9201      	str	r2, [sp, #4]
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	9300      	str	r3, [sp, #0]
 8001218:	4643      	mov	r3, r8
 800121a:	4672      	mov	r2, lr
 800121c:	4924      	ldr	r1, [pc, #144]	; (80012b0 <commandRead+0x308>)
 800121e:	4660      	mov	r0, ip
 8001220:	f014 fe62 	bl	8015ee8 <siscanf>
 8001224:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
							&(duty_cmd->v_factor),
							(int *)&mode_init,
							&temp_fl);

			if (11 != result) {
 8001228:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800122c:	2b0b      	cmp	r3, #11
 800122e:	d001      	beq.n	8001234 <commandRead+0x28c>
				return CMD_ERROR;
 8001230:	2314      	movs	r3, #20
 8001232:	e26d      	b.n	8001710 <commandRead+0x768>
			}
			duty_cmd->path_type = DUTY_PATH_CIRCLE;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2201      	movs	r2, #1
 8001238:	729a      	strb	r2, [r3, #10]
			duty_cmd->space_type = DUTY_SPACE_TASK;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2200      	movs	r2, #0
 800123e:	725a      	strb	r2, [r3, #9]

			if ( DUTY_MODE_INIT_QVA == mode_init) {
 8001240:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001244:	2b00      	cmp	r3, #0
 8001246:	d108      	bne.n	800125a <commandRead+0x2b2>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2200      	movs	r2, #0
 800124c:	735a      	strb	r2, [r3, #13]
				duty_cmd->a_factor		= temp_fl;
 800124e:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0
 8001258:	e010      	b.n	800127c <commandRead+0x2d4>
			} else if ( DUTY_MODE_INIT_QVT == mode_init) {
 800125a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800125e:	2b01      	cmp	r3, #1
 8001260:	d108      	bne.n	8001274 <commandRead+0x2cc>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2201      	movs	r2, #1
 8001266:	735a      	strb	r2, [r3, #13]
				duty_cmd->time_total	= temp_fl;
 8001268:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	e9c2 3408 	strd	r3, r4, [r2, #32]
 8001272:	e003      	b.n	800127c <commandRead+0x2d4>
			} else {
				return CMD_ERROR;
 8001274:	2314      	movs	r3, #20
 8001276:	e24b      	b.n	8001710 <commandRead+0x768>
			}
		} else {
			return CMD_ERROR;
 8001278:	2314      	movs	r3, #20
 800127a:	e249      	b.n	8001710 <commandRead+0x768>
		}
		duty_cmd->robot_mode = SCARA_MODE_DUTY;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2202      	movs	r2, #2
 8001280:	709a      	strb	r2, [r3, #2]
		duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2201      	movs	r2, #1
 8001286:	705a      	strb	r2, [r3, #1]
		duty_cmd->change_method = FALSE;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2200      	movs	r2, #0
 800128c:	701a      	strb	r2, [r3, #0]
		return CMD_MOVE_CIRCLE;
 800128e:	2304      	movs	r3, #4
 8001290:	e23e      	b.n	8001710 <commandRead+0x768>
 8001292:	bf00      	nop
 8001294:	0801ae30 	.word	0x0801ae30
 8001298:	20000000 	.word	0x20000000
 800129c:	0801ae3c 	.word	0x0801ae3c
 80012a0:	406f4000 	.word	0x406f4000
 80012a4:	c0690000 	.word	0xc0690000
 80012a8:	405e0000 	.word	0x405e0000
 80012ac:	0801ae44 	.word	0x0801ae44
 80012b0:	0801ae60 	.word	0x0801ae60

	// Move Joint
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_MOVE_JOINT])) {
 80012b4:	4bba      	ldr	r3, [pc, #744]	; (80015a0 <commandRead+0x5f8>)
 80012b6:	695a      	ldr	r2, [r3, #20]
 80012b8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80012bc:	4611      	mov	r1, r2
 80012be:	4618      	mov	r0, r3
 80012c0:	f7fe ff86 	bl	80001d0 <strcmp>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d158      	bne.n	800137c <commandRead+0x3d4>
		if (3 == result) {
 80012ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80012ce:	2b03      	cmp	r3, #3
 80012d0:	d147      	bne.n	8001362 <commandRead+0x3ba>
			double temp_fl;
			int8_t mode_init;
			result = sscanf( para, "%lf %lf %lf %lf %lf %d %lf",
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f103 0570 	add.w	r5, r3, #112	; 0x70
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f103 0678 	add.w	r6, r3, #120	; 0x78
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	3380      	adds	r3, #128	; 0x80
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	3288      	adds	r2, #136	; 0x88
 80012e6:	6879      	ldr	r1, [r7, #4]
 80012e8:	f501 71cc 	add.w	r1, r1, #408	; 0x198
 80012ec:	f107 0450 	add.w	r4, r7, #80	; 0x50
 80012f0:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80012f4:	9004      	str	r0, [sp, #16]
 80012f6:	f107 0027 	add.w	r0, r7, #39	; 0x27
 80012fa:	9003      	str	r0, [sp, #12]
 80012fc:	9102      	str	r1, [sp, #8]
 80012fe:	9201      	str	r2, [sp, #4]
 8001300:	9300      	str	r3, [sp, #0]
 8001302:	4633      	mov	r3, r6
 8001304:	462a      	mov	r2, r5
 8001306:	49a7      	ldr	r1, [pc, #668]	; (80015a4 <commandRead+0x5fc>)
 8001308:	4620      	mov	r0, r4
 800130a:	f014 fded 	bl	8015ee8 <siscanf>
 800130e:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
							&(duty_cmd->target_point.roll),
							&(duty_cmd->v_factor),
							(int *)&mode_init,
							&temp_fl);

			if (7 != result) {
 8001312:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001316:	2b07      	cmp	r3, #7
 8001318:	d001      	beq.n	800131e <commandRead+0x376>
				return CMD_ERROR;
 800131a:	2314      	movs	r3, #20
 800131c:	e1f8      	b.n	8001710 <commandRead+0x768>
			}
			duty_cmd->space_type = DUTY_SPACE_JOINT;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2201      	movs	r2, #1
 8001322:	725a      	strb	r2, [r3, #9]
			duty_cmd->joint_type = DUTY_JOINT_4DOF;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2201      	movs	r2, #1
 8001328:	72da      	strb	r2, [r3, #11]

			if ( DUTY_MODE_INIT_QVA == mode_init) {
 800132a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800132e:	2b00      	cmp	r3, #0
 8001330:	d108      	bne.n	8001344 <commandRead+0x39c>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2200      	movs	r2, #0
 8001336:	735a      	strb	r2, [r3, #13]
				duty_cmd->a_factor		= temp_fl;
 8001338:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0
 8001342:	e010      	b.n	8001366 <commandRead+0x3be>
			} else if ( DUTY_MODE_INIT_QVT == mode_init) {
 8001344:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001348:	2b01      	cmp	r3, #1
 800134a:	d108      	bne.n	800135e <commandRead+0x3b6>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2201      	movs	r2, #1
 8001350:	735a      	strb	r2, [r3, #13]
				duty_cmd->time_total	= temp_fl;
 8001352:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	e9c2 3408 	strd	r3, r4, [r2, #32]
 800135c:	e003      	b.n	8001366 <commandRead+0x3be>
			} else {
				return CMD_ERROR;
 800135e:	2314      	movs	r3, #20
 8001360:	e1d6      	b.n	8001710 <commandRead+0x768>
			}
		} else {
			return CMD_ERROR;
 8001362:	2314      	movs	r3, #20
 8001364:	e1d4      	b.n	8001710 <commandRead+0x768>
		}
		duty_cmd->robot_mode = SCARA_MODE_DUTY;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2202      	movs	r2, #2
 800136a:	709a      	strb	r2, [r3, #2]
		duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2201      	movs	r2, #1
 8001370:	705a      	strb	r2, [r3, #1]
		duty_cmd->change_method = FALSE;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2200      	movs	r2, #0
 8001376:	701a      	strb	r2, [r3, #0]

		return CMD_MOVE_JOINT;
 8001378:	2305      	movs	r3, #5
 800137a:	e1c9      	b.n	8001710 <commandRead+0x768>

	// Rotate Single
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_ROTATE_SINGLE])) {
 800137c:	4b88      	ldr	r3, [pc, #544]	; (80015a0 <commandRead+0x5f8>)
 800137e:	699a      	ldr	r2, [r3, #24]
 8001380:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001384:	4611      	mov	r1, r2
 8001386:	4618      	mov	r0, r3
 8001388:	f7fe ff22 	bl	80001d0 <strcmp>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d151      	bne.n	8001436 <commandRead+0x48e>
		if (3 == result) {
 8001392:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001396:	2b03      	cmp	r3, #3
 8001398:	d140      	bne.n	800141c <commandRead+0x474>
			double temp_fl;
			int8_t mode_init;
			result = sscanf( para, "%d %lf %lf %d %lf",
							(int *)&(duty_cmd->sub_para_int),
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f103 0110 	add.w	r1, r3, #16
			result = sscanf( para, "%d %lf %lf %d %lf",
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f103 0418 	add.w	r4, r3, #24
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 80013ac:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80013b0:	f107 0218 	add.w	r2, r7, #24
 80013b4:	9202      	str	r2, [sp, #8]
 80013b6:	f107 0217 	add.w	r2, r7, #23
 80013ba:	9201      	str	r2, [sp, #4]
 80013bc:	9300      	str	r3, [sp, #0]
 80013be:	4623      	mov	r3, r4
 80013c0:	460a      	mov	r2, r1
 80013c2:	4979      	ldr	r1, [pc, #484]	; (80015a8 <commandRead+0x600>)
 80013c4:	f014 fd90 	bl	8015ee8 <siscanf>
 80013c8:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
							&(duty_cmd->sub_para_double),
							&(duty_cmd->v_factor),
							(int *)&mode_init,
							&temp_fl);

			if (5 != result) {
 80013cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80013d0:	2b05      	cmp	r3, #5
 80013d2:	d001      	beq.n	80013d8 <commandRead+0x430>
				return CMD_ERROR;
 80013d4:	2314      	movs	r3, #20
 80013d6:	e19b      	b.n	8001710 <commandRead+0x768>
			}
			duty_cmd->space_type = DUTY_SPACE_JOINT;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2201      	movs	r2, #1
 80013dc:	725a      	strb	r2, [r3, #9]
			duty_cmd->joint_type = DUTY_JOINT_SINGLE;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2200      	movs	r2, #0
 80013e2:	72da      	strb	r2, [r3, #11]

			if ( DUTY_MODE_INIT_QVA == mode_init) {
 80013e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d108      	bne.n	80013fe <commandRead+0x456>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2200      	movs	r2, #0
 80013f0:	735a      	strb	r2, [r3, #13]
				duty_cmd->a_factor		= temp_fl;
 80013f2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0
 80013fc:	e010      	b.n	8001420 <commandRead+0x478>
			} else if ( DUTY_MODE_INIT_QVT == mode_init) {
 80013fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d108      	bne.n	8001418 <commandRead+0x470>
				duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2201      	movs	r2, #1
 800140a:	735a      	strb	r2, [r3, #13]
				duty_cmd->time_total	= temp_fl;
 800140c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	e9c2 3408 	strd	r3, r4, [r2, #32]
 8001416:	e003      	b.n	8001420 <commandRead+0x478>
			} else {
				return CMD_ERROR;
 8001418:	2314      	movs	r3, #20
 800141a:	e179      	b.n	8001710 <commandRead+0x768>
			}
		} else {
			return CMD_ERROR;
 800141c:	2314      	movs	r3, #20
 800141e:	e177      	b.n	8001710 <commandRead+0x768>
		}
		duty_cmd->robot_mode = SCARA_MODE_DUTY;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2202      	movs	r2, #2
 8001424:	709a      	strb	r2, [r3, #2]
		duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2201      	movs	r2, #1
 800142a:	705a      	strb	r2, [r3, #1]
		duty_cmd->change_method = FALSE;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	701a      	strb	r2, [r3, #0]

		return CMD_ROTATE_SINGLE;
 8001432:	2306      	movs	r3, #6
 8001434:	e16c      	b.n	8001710 <commandRead+0x768>

	// Set Output
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_OUTPUT])) {
 8001436:	4b5a      	ldr	r3, [pc, #360]	; (80015a0 <commandRead+0x5f8>)
 8001438:	69da      	ldr	r2, [r3, #28]
 800143a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800143e:	4611      	mov	r1, r2
 8001440:	4618      	mov	r0, r3
 8001442:	f7fe fec5 	bl	80001d0 <strcmp>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d112      	bne.n	8001472 <commandRead+0x4ca>
		result = sscanf( para, "%d",(int *)&(duty_cmd->sub_para_int));
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f103 0210 	add.w	r2, r3, #16
 8001452:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001456:	4955      	ldr	r1, [pc, #340]	; (80015ac <commandRead+0x604>)
 8001458:	4618      	mov	r0, r3
 800145a:	f014 fd45 	bl	8015ee8 <siscanf>
 800145e:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4

		if (1 != result) {
 8001462:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001466:	2b01      	cmp	r3, #1
 8001468:	d001      	beq.n	800146e <commandRead+0x4c6>
			return CMD_ERROR;
 800146a:	2314      	movs	r3, #20
 800146c:	e150      	b.n	8001710 <commandRead+0x768>
		}

		return CMD_OUTPUT;
 800146e:	2307      	movs	r3, #7
 8001470:	e14e      	b.n	8001710 <commandRead+0x768>

	// Read Status
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_READ_STATUS])) {
 8001472:	4b4b      	ldr	r3, [pc, #300]	; (80015a0 <commandRead+0x5f8>)
 8001474:	6a1a      	ldr	r2, [r3, #32]
 8001476:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800147a:	4611      	mov	r1, r2
 800147c:	4618      	mov	r0, r3
 800147e:	f7fe fea7 	bl	80001d0 <strcmp>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d101      	bne.n	800148c <commandRead+0x4e4>
		return CMD_READ_STATUS;
 8001488:	2308      	movs	r3, #8
 800148a:	e141      	b.n	8001710 <commandRead+0x768>

	// Read Position
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_READ_POSITION])) {
 800148c:	4b44      	ldr	r3, [pc, #272]	; (80015a0 <commandRead+0x5f8>)
 800148e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001490:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001494:	4611      	mov	r1, r2
 8001496:	4618      	mov	r0, r3
 8001498:	f7fe fe9a 	bl	80001d0 <strcmp>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d101      	bne.n	80014a6 <commandRead+0x4fe>
			return CMD_READ_POSITION;
 80014a2:	2309      	movs	r3, #9
 80014a4:	e134      	b.n	8001710 <commandRead+0x768>

	// Setting
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_SETTING])) {
 80014a6:	4b3e      	ldr	r3, [pc, #248]	; (80015a0 <commandRead+0x5f8>)
 80014a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014aa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80014ae:	4611      	mov	r1, r2
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7fe fe8d 	bl	80001d0 <strcmp>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d136      	bne.n	800152a <commandRead+0x582>
		int8_t mode_trajec;
		int8_t mode_coordinate;
		result = sscanf( para, "%d %d",
 80014bc:	f107 0316 	add.w	r3, r7, #22
 80014c0:	f107 0215 	add.w	r2, r7, #21
 80014c4:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80014c8:	4939      	ldr	r1, [pc, #228]	; (80015b0 <commandRead+0x608>)
 80014ca:	f014 fd0d 	bl	8015ee8 <siscanf>
 80014ce:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
						(int *)&mode_coordinate,
						(int *)&mode_trajec);

		if (2 != result) {
 80014d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d001      	beq.n	80014de <commandRead+0x536>
			return CMD_ERROR;
 80014da:	2314      	movs	r3, #20
 80014dc:	e118      	b.n	8001710 <commandRead+0x768>
		}

		if ( DUTY_COORDINATES_ABS == mode_coordinate) {
 80014de:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d103      	bne.n	80014ee <commandRead+0x546>
			duty_cmd->coordinate_type = DUTY_COORDINATES_ABS;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	721a      	strb	r2, [r3, #8]
 80014ec:	e009      	b.n	8001502 <commandRead+0x55a>
		} else if ( DUTY_COORDINATES_REL == mode_coordinate) {
 80014ee:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d103      	bne.n	80014fe <commandRead+0x556>
			duty_cmd->coordinate_type = DUTY_COORDINATES_REL;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2201      	movs	r2, #1
 80014fa:	721a      	strb	r2, [r3, #8]
 80014fc:	e001      	b.n	8001502 <commandRead+0x55a>
		} else {
			return CMD_ERROR;
 80014fe:	2314      	movs	r3, #20
 8001500:	e106      	b.n	8001710 <commandRead+0x768>
		}

		if ( DUTY_TRAJECTORY_LSPB == mode_trajec) {
 8001502:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d103      	bne.n	8001512 <commandRead+0x56a>
			duty_cmd->trajec_type = DUTY_TRAJECTORY_LSPB;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2200      	movs	r2, #0
 800150e:	731a      	strb	r2, [r3, #12]
 8001510:	e009      	b.n	8001526 <commandRead+0x57e>
		} else if ( DUTY_TRAJECTORY_SCURVE == mode_trajec) {
 8001512:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d103      	bne.n	8001522 <commandRead+0x57a>
			duty_cmd->trajec_type = DUTY_TRAJECTORY_SCURVE;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2201      	movs	r2, #1
 800151e:	731a      	strb	r2, [r3, #12]
 8001520:	e001      	b.n	8001526 <commandRead+0x57e>
		} else {
			return CMD_ERROR;
 8001522:	2314      	movs	r3, #20
 8001524:	e0f4      	b.n	8001710 <commandRead+0x768>
		}
		return CMD_SETTING;
 8001526:	230a      	movs	r3, #10
 8001528:	e0f2      	b.n	8001710 <commandRead+0x768>

	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_METHOD_CHANGE])) {
 800152a:	4b1d      	ldr	r3, [pc, #116]	; (80015a0 <commandRead+0x5f8>)
 800152c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800152e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001532:	4611      	mov	r1, r2
 8001534:	4618      	mov	r0, r3
 8001536:	f7fe fe4b 	bl	80001d0 <strcmp>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d139      	bne.n	80015b4 <commandRead+0x60c>
		int8_t method;
		result = sscanf( para, "%d",
 8001540:	f107 0214 	add.w	r2, r7, #20
 8001544:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001548:	4918      	ldr	r1, [pc, #96]	; (80015ac <commandRead+0x604>)
 800154a:	4618      	mov	r0, r3
 800154c:	f014 fccc 	bl	8015ee8 <siscanf>
 8001550:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
						(int *)&method);
		if (1 != result) {
 8001554:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001558:	2b01      	cmp	r3, #1
 800155a:	d001      	beq.n	8001560 <commandRead+0x5b8>
			return CMD_ERROR;
 800155c:	2314      	movs	r3, #20
 800155e:	e0d7      	b.n	8001710 <commandRead+0x768>
		}
		if (SCARA_METHOD_MANUAL == method) {
 8001560:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d103      	bne.n	8001570 <commandRead+0x5c8>
			duty_cmd->robot_method = SCARA_METHOD_MANUAL;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	705a      	strb	r2, [r3, #1]
 800156e:	e011      	b.n	8001594 <commandRead+0x5ec>
		} else if (SCARA_METHOD_SEMI_AUTO == method) {
 8001570:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d103      	bne.n	8001580 <commandRead+0x5d8>
			duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2201      	movs	r2, #1
 800157c:	705a      	strb	r2, [r3, #1]
 800157e:	e009      	b.n	8001594 <commandRead+0x5ec>
		} else if (SCARA_METHOD_AUTO == method) {
 8001580:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8001584:	2b02      	cmp	r3, #2
 8001586:	d103      	bne.n	8001590 <commandRead+0x5e8>
			duty_cmd->robot_method = SCARA_METHOD_AUTO;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2202      	movs	r2, #2
 800158c:	705a      	strb	r2, [r3, #1]
 800158e:	e001      	b.n	8001594 <commandRead+0x5ec>
		} else {
			return CMD_ERROR;
 8001590:	2314      	movs	r3, #20
 8001592:	e0bd      	b.n	8001710 <commandRead+0x768>
		}
		duty_cmd->change_method = TRUE;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2201      	movs	r2, #1
 8001598:	701a      	strb	r2, [r3, #0]
		return CMD_METHOD_CHANGE;
 800159a:	230b      	movs	r3, #11
 800159c:	e0b8      	b.n	8001710 <commandRead+0x768>
 800159e:	bf00      	nop
 80015a0:	20000000 	.word	0x20000000
 80015a4:	0801ae44 	.word	0x0801ae44
 80015a8:	0801ae8c 	.word	0x0801ae8c
 80015ac:	0801aea0 	.word	0x0801aea0
 80015b0:	0801aea4 	.word	0x0801aea4
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_JOB_NEW])) {
 80015b4:	4b59      	ldr	r3, [pc, #356]	; (800171c <commandRead+0x774>)
 80015b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015b8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80015bc:	4611      	mov	r1, r2
 80015be:	4618      	mov	r0, r3
 80015c0:	f7fe fe06 	bl	80001d0 <strcmp>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d107      	bne.n	80015da <commandRead+0x632>
		duty_cmd->robot_method = SCARA_METHOD_AUTO;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2202      	movs	r2, #2
 80015ce:	705a      	strb	r2, [r3, #1]
		duty_cmd->change_method = FALSE;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2200      	movs	r2, #0
 80015d4:	701a      	strb	r2, [r3, #0]
		return CMD_JOB_NEW;
 80015d6:	230c      	movs	r3, #12
 80015d8:	e09a      	b.n	8001710 <commandRead+0x768>
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_JOB_DELETE])) {
 80015da:	4b50      	ldr	r3, [pc, #320]	; (800171c <commandRead+0x774>)
 80015dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015de:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80015e2:	4611      	mov	r1, r2
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7fe fdf3 	bl	80001d0 <strcmp>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d107      	bne.n	8001600 <commandRead+0x658>
		duty_cmd->robot_method = SCARA_METHOD_AUTO;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2202      	movs	r2, #2
 80015f4:	705a      	strb	r2, [r3, #1]
		duty_cmd->change_method = FALSE;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2200      	movs	r2, #0
 80015fa:	701a      	strb	r2, [r3, #0]
		return CMD_JOB_DELETE;
 80015fc:	230d      	movs	r3, #13
 80015fe:	e087      	b.n	8001710 <commandRead+0x768>
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_JOB_PUSH_MOVE_LINE])) {
 8001600:	4b46      	ldr	r3, [pc, #280]	; (800171c <commandRead+0x774>)
 8001602:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001604:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001608:	4611      	mov	r1, r2
 800160a:	4618      	mov	r0, r3
 800160c:	f7fe fde0 	bl	80001d0 <strcmp>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d107      	bne.n	8001626 <commandRead+0x67e>
		duty_cmd->robot_method = SCARA_METHOD_AUTO;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2202      	movs	r2, #2
 800161a:	705a      	strb	r2, [r3, #1]
		duty_cmd->change_method = FALSE;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	701a      	strb	r2, [r3, #0]
		return CMD_JOB_PUSH_MOVE_LINE;
 8001622:	230e      	movs	r3, #14
 8001624:	e074      	b.n	8001710 <commandRead+0x768>
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_JOB_PUSH_MOVE_JOINT])) {
 8001626:	4b3d      	ldr	r3, [pc, #244]	; (800171c <commandRead+0x774>)
 8001628:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800162a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800162e:	4611      	mov	r1, r2
 8001630:	4618      	mov	r0, r3
 8001632:	f7fe fdcd 	bl	80001d0 <strcmp>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d107      	bne.n	800164c <commandRead+0x6a4>
		duty_cmd->robot_method = SCARA_METHOD_AUTO;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2202      	movs	r2, #2
 8001640:	705a      	strb	r2, [r3, #1]
		duty_cmd->change_method = FALSE;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	701a      	strb	r2, [r3, #0]
		return CMD_JOB_PUSH_MOVE_JOINT;
 8001648:	230f      	movs	r3, #15
 800164a:	e061      	b.n	8001710 <commandRead+0x768>
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_JOB_PUSH_OUTPUT])) {
 800164c:	4b33      	ldr	r3, [pc, #204]	; (800171c <commandRead+0x774>)
 800164e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001650:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001654:	4611      	mov	r1, r2
 8001656:	4618      	mov	r0, r3
 8001658:	f7fe fdba 	bl	80001d0 <strcmp>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d107      	bne.n	8001672 <commandRead+0x6ca>
		duty_cmd->robot_method = SCARA_METHOD_AUTO;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2202      	movs	r2, #2
 8001666:	705a      	strb	r2, [r3, #1]
		duty_cmd->change_method = FALSE;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2200      	movs	r2, #0
 800166c:	701a      	strb	r2, [r3, #0]
		return CMD_JOB_PUSH_OUTPUT;
 800166e:	2310      	movs	r3, #16
 8001670:	e04e      	b.n	8001710 <commandRead+0x768>
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_JOB_TEST])) {
 8001672:	4b2a      	ldr	r3, [pc, #168]	; (800171c <commandRead+0x774>)
 8001674:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001676:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800167a:	4611      	mov	r1, r2
 800167c:	4618      	mov	r0, r3
 800167e:	f7fe fda7 	bl	80001d0 <strcmp>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d107      	bne.n	8001698 <commandRead+0x6f0>
		duty_cmd->robot_method = SCARA_METHOD_AUTO;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2202      	movs	r2, #2
 800168c:	705a      	strb	r2, [r3, #1]
		duty_cmd->change_method = FALSE;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	701a      	strb	r2, [r3, #0]
		return CMD_JOB_TEST;
 8001694:	2311      	movs	r3, #17
 8001696:	e03b      	b.n	8001710 <commandRead+0x768>
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_JOB_RUN])) {
 8001698:	4b20      	ldr	r3, [pc, #128]	; (800171c <commandRead+0x774>)
 800169a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800169c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80016a0:	4611      	mov	r1, r2
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7fe fd94 	bl	80001d0 <strcmp>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d107      	bne.n	80016be <commandRead+0x716>
		duty_cmd->robot_method = SCARA_METHOD_AUTO;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2202      	movs	r2, #2
 80016b2:	705a      	strb	r2, [r3, #1]
		duty_cmd->change_method = FALSE;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2200      	movs	r2, #0
 80016b8:	701a      	strb	r2, [r3, #0]
		return CMD_JOB_RUN;
 80016ba:	2312      	movs	r3, #18
 80016bc:	e028      	b.n	8001710 <commandRead+0x768>
	} else if  ( 0 == strcmp( command, ROBOTCOMMAND[CMD_KEYBOARD])) {
 80016be:	4b17      	ldr	r3, [pc, #92]	; (800171c <commandRead+0x774>)
 80016c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016c2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80016c6:	4611      	mov	r1, r2
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7fe fd81 	bl	80001d0 <strcmp>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d11c      	bne.n	800170e <commandRead+0x766>
		int8_t key_num;
		result = sscanf( para, "%d",
 80016d4:	f107 0213 	add.w	r2, r7, #19
 80016d8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80016dc:	4910      	ldr	r1, [pc, #64]	; (8001720 <commandRead+0x778>)
 80016de:	4618      	mov	r0, r3
 80016e0:	f014 fc02 	bl	8015ee8 <siscanf>
 80016e4:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
						(int *)&key_num);
		if (1 != result) {
 80016e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d001      	beq.n	80016f4 <commandRead+0x74c>
			return CMD_ERROR;
 80016f0:	2314      	movs	r3, #20
 80016f2:	e00d      	b.n	8001710 <commandRead+0x768>
		}
		duty_cmd->keyboard = (SCARA_KeyTypeDef)key_num;
 80016f4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80016f8:	b2da      	uxtb	r2, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	70da      	strb	r2, [r3, #3]
		duty_cmd->robot_method = SCARA_METHOD_MANUAL;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	705a      	strb	r2, [r3, #1]
		duty_cmd->change_method = FALSE;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	701a      	strb	r2, [r3, #0]
		return CMD_KEYBOARD;
 800170a:	2313      	movs	r3, #19
 800170c:	e000      	b.n	8001710 <commandRead+0x768>
	}
	// Error command
	else {
		return CMD_ERROR;
 800170e:	2314      	movs	r3, #20
	}
}
 8001710:	4618      	mov	r0, r3
 8001712:	37a8      	adds	r7, #168	; 0xa8
 8001714:	46bd      	mov	sp, r7
 8001716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800171a:	bf00      	nop
 800171c:	20000000 	.word	0x20000000
 8001720:	0801aea0 	.word	0x0801aea0

08001724 <commandReply>:

Robot_RespondTypedef	commandReply	(Robot_CommandTypedef cmd_type,
										DUTY_Command_TypeDef duty_cmd,
										uint8_t *detail) {
 8001724:	b082      	sub	sp, #8
 8001726:	b5b0      	push	{r4, r5, r7, lr}
 8001728:	b0de      	sub	sp, #376	; 0x178
 800172a:	af2c      	add	r7, sp, #176	; 0xb0
 800172c:	4601      	mov	r1, r0
 800172e:	f107 00d8 	add.w	r0, r7, #216	; 0xd8
 8001732:	e880 000c 	stmia.w	r0, {r2, r3}
 8001736:	460b      	mov	r3, r1
 8001738:	71fb      	strb	r3, [r7, #7]
	Robot_RespondTypedef ret;

	switch(cmd_type) {
 800173a:	79fb      	ldrb	r3, [r7, #7]
 800173c:	2b14      	cmp	r3, #20
 800173e:	f200 8110 	bhi.w	8001962 <commandReply+0x23e>
 8001742:	a201      	add	r2, pc, #4	; (adr r2, 8001748 <commandReply+0x24>)
 8001744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001748:	0800179d 	.word	0x0800179d
 800174c:	0800179d 	.word	0x0800179d
 8001750:	0800179d 	.word	0x0800179d
 8001754:	0800179d 	.word	0x0800179d
 8001758:	0800179d 	.word	0x0800179d
 800175c:	0800179d 	.word	0x0800179d
 8001760:	0800179d 	.word	0x0800179d
 8001764:	080017a5 	.word	0x080017a5
 8001768:	0800180f 	.word	0x0800180f
 800176c:	08001843 	.word	0x08001843
 8001770:	08001871 	.word	0x08001871
 8001774:	0800192b 	.word	0x0800192b
 8001778:	0800197f 	.word	0x0800197f
 800177c:	0800197f 	.word	0x0800197f
 8001780:	0800197f 	.word	0x0800197f
 8001784:	0800197f 	.word	0x0800197f
 8001788:	0800197f 	.word	0x0800197f
 800178c:	0800197f 	.word	0x0800197f
 8001790:	08001933 	.word	0x08001933
 8001794:	0800193b 	.word	0x0800193b
 8001798:	08001943 	.word	0x08001943
	case CMD_MOVE_HOME:
	case CMD_MOVE_LINE:
	case CMD_MOVE_CIRCLE:
	case CMD_MOVE_JOINT:
	case CMD_ROTATE_SINGLE:
		ret = RPD_DUTY;
 800179c:	2309      	movs	r3, #9
 800179e:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		break;
 80017a2:	e0ed      	b.n	8001980 <commandReply+0x25c>
	case CMD_OUTPUT:
		{
			if (1 == duty_cmd.sub_para_int) {
 80017a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d10d      	bne.n	80017c8 <commandReply+0xa4>
				scaraSetOutput(1);
 80017ac:	2001      	movs	r0, #1
 80017ae:	f007 fd2b 	bl	8009208 <scaraSetOutput>
				strcpy( (char *)detail, "Output ON");
 80017b2:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 80017b6:	4977      	ldr	r1, [pc, #476]	; (8001994 <commandReply+0x270>)
 80017b8:	461a      	mov	r2, r3
 80017ba:	460b      	mov	r3, r1
 80017bc:	cb03      	ldmia	r3!, {r0, r1}
 80017be:	6010      	str	r0, [r2, #0]
 80017c0:	6051      	str	r1, [r2, #4]
 80017c2:	881b      	ldrh	r3, [r3, #0]
 80017c4:	8113      	strh	r3, [r2, #8]
 80017c6:	e01e      	b.n	8001806 <commandReply+0xe2>
			} else if (0 == duty_cmd.sub_para_int) {
 80017c8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d10f      	bne.n	80017f0 <commandReply+0xcc>
				scaraSetOutput(0);
 80017d0:	2000      	movs	r0, #0
 80017d2:	f007 fd19 	bl	8009208 <scaraSetOutput>
				strcpy( (char *)detail, "Output OFF");
 80017d6:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 80017da:	496f      	ldr	r1, [pc, #444]	; (8001998 <commandReply+0x274>)
 80017dc:	461a      	mov	r2, r3
 80017de:	460b      	mov	r3, r1
 80017e0:	cb03      	ldmia	r3!, {r0, r1}
 80017e2:	6010      	str	r0, [r2, #0]
 80017e4:	6051      	str	r1, [r2, #4]
 80017e6:	8819      	ldrh	r1, [r3, #0]
 80017e8:	789b      	ldrb	r3, [r3, #2]
 80017ea:	8111      	strh	r1, [r2, #8]
 80017ec:	7293      	strb	r3, [r2, #10]
 80017ee:	e00a      	b.n	8001806 <commandReply+0xe2>
			} else {
				strcpy( (char *)detail, "Wrong Value");
 80017f0:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 80017f4:	4a69      	ldr	r2, [pc, #420]	; (800199c <commandReply+0x278>)
 80017f6:	461c      	mov	r4, r3
 80017f8:	4613      	mov	r3, r2
 80017fa:	cb07      	ldmia	r3!, {r0, r1, r2}
 80017fc:	6020      	str	r0, [r4, #0]
 80017fe:	6061      	str	r1, [r4, #4]
 8001800:	60a2      	str	r2, [r4, #8]
				return RPD_ERROR;
 8001802:	2307      	movs	r3, #7
 8001804:	e0be      	b.n	8001984 <commandReply+0x260>
			}
			ret = RPD_OK;
 8001806:	2308      	movs	r3, #8
 8001808:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		}
		break;
 800180c:	e0b8      	b.n	8001980 <commandReply+0x25c>
	case CMD_READ_STATUS:
		{
			SCARA_ModeTypeDef		current_mode;
			SCARA_DutyStateTypeDef 	current_state;
			current_mode	 = scaraGetMode();
 800180e:	f007 fd3d 	bl	800928c <scaraGetMode>
 8001812:	4603      	mov	r3, r0
 8001814:	f887 30c6 	strb.w	r3, [r7, #198]	; 0xc6
			current_state	 = scaraGetDutyState();
 8001818:	f007 fd50 	bl	80092bc <scaraGetDutyState>
 800181c:	4603      	mov	r3, r0
 800181e:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
			if ( SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_state) {
 8001822:	f897 30c6 	ldrb.w	r3, [r7, #198]	; 0xc6
 8001826:	2b02      	cmp	r3, #2
 8001828:	d107      	bne.n	800183a <commandReply+0x116>
 800182a:	f897 30c5 	ldrb.w	r3, [r7, #197]	; 0xc5
 800182e:	2b00      	cmp	r3, #0
 8001830:	d103      	bne.n	800183a <commandReply+0x116>
				ret = RPD_IDLE;
 8001832:	2300      	movs	r3, #0
 8001834:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
			} else {
				ret = RPD_BUSY;
			}
		}
		break;
 8001838:	e0a2      	b.n	8001980 <commandReply+0x25c>
				ret = RPD_BUSY;
 800183a:	2301      	movs	r3, #1
 800183c:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		break;
 8001840:	e09e      	b.n	8001980 <commandReply+0x25c>
	case CMD_READ_POSITION:
		{
			SCARA_PositionTypeDef position;
			scaraGetPosition(&position);
 8001842:	f107 0308 	add.w	r3, r7, #8
 8001846:	4618      	mov	r0, r3
 8001848:	f007 fd10 	bl	800926c <scaraGetPosition>
			scaraPosition2String((char *)detail, position);
 800184c:	4668      	mov	r0, sp
 800184e:	f107 0310 	add.w	r3, r7, #16
 8001852:	22b0      	movs	r2, #176	; 0xb0
 8001854:	4619      	mov	r1, r3
 8001856:	f013 fbcb 	bl	8014ff0 <memcpy>
 800185a:	f107 0308 	add.w	r3, r7, #8
 800185e:	cb0c      	ldmia	r3, {r2, r3}
 8001860:	f8d7 0280 	ldr.w	r0, [r7, #640]	; 0x280
 8001864:	f007 fd70 	bl	8009348 <scaraPosition2String>
			ret =  RPD_POSITION;
 8001868:	2302      	movs	r3, #2
 800186a:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		}
		break;
 800186e:	e087      	b.n	8001980 <commandReply+0x25c>
	case CMD_SETTING:
		if ( DUTY_COORDINATES_ABS == duty_cmd.coordinate_type) {
 8001870:	f897 30e0 	ldrb.w	r3, [r7, #224]	; 0xe0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d10a      	bne.n	800188e <commandReply+0x16a>
			strcpy( (char *)detail, "ABSOLUTE.");
 8001878:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 800187c:	4948      	ldr	r1, [pc, #288]	; (80019a0 <commandReply+0x27c>)
 800187e:	461a      	mov	r2, r3
 8001880:	460b      	mov	r3, r1
 8001882:	cb03      	ldmia	r3!, {r0, r1}
 8001884:	6010      	str	r0, [r2, #0]
 8001886:	6051      	str	r1, [r2, #4]
 8001888:	881b      	ldrh	r3, [r3, #0]
 800188a:	8113      	strh	r3, [r2, #8]
 800188c:	e017      	b.n	80018be <commandReply+0x19a>
		} else if ( DUTY_COORDINATES_REL == duty_cmd.coordinate_type) {
 800188e:	f897 30e0 	ldrb.w	r3, [r7, #224]	; 0xe0
 8001892:	2b01      	cmp	r3, #1
 8001894:	d10a      	bne.n	80018ac <commandReply+0x188>
			strcpy( (char *)detail, "RELATIVE.");
 8001896:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 800189a:	4942      	ldr	r1, [pc, #264]	; (80019a4 <commandReply+0x280>)
 800189c:	461a      	mov	r2, r3
 800189e:	460b      	mov	r3, r1
 80018a0:	cb03      	ldmia	r3!, {r0, r1}
 80018a2:	6010      	str	r0, [r2, #0]
 80018a4:	6051      	str	r1, [r2, #4]
 80018a6:	881b      	ldrh	r3, [r3, #0]
 80018a8:	8113      	strh	r3, [r2, #8]
 80018aa:	e008      	b.n	80018be <commandReply+0x19a>
		} else {
			strcat((char *)detail, DETAIL_STATUS[SCARA_STATUS_ERROR_COORDINATE]);
 80018ac:	4b3e      	ldr	r3, [pc, #248]	; (80019a8 <commandReply+0x284>)
 80018ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b0:	4619      	mov	r1, r3
 80018b2:	f8d7 0280 	ldr.w	r0, [r7, #640]	; 0x280
 80018b6:	f014 fb43 	bl	8015f40 <strcat>
			return RPD_ERROR;
 80018ba:	2307      	movs	r3, #7
 80018bc:	e062      	b.n	8001984 <commandReply+0x260>
		}

		if ( DUTY_TRAJECTORY_LSPB == duty_cmd.trajec_type) {
 80018be:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d10e      	bne.n	80018e4 <commandReply+0x1c0>
			strcat((char *)detail, " LSPB");
 80018c6:	f8d7 0280 	ldr.w	r0, [r7, #640]	; 0x280
 80018ca:	f7fe fc8b 	bl	80001e4 <strlen>
 80018ce:	4603      	mov	r3, r0
 80018d0:	461a      	mov	r2, r3
 80018d2:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 80018d6:	4413      	add	r3, r2
 80018d8:	4a34      	ldr	r2, [pc, #208]	; (80019ac <commandReply+0x288>)
 80018da:	6810      	ldr	r0, [r2, #0]
 80018dc:	6018      	str	r0, [r3, #0]
 80018de:	8892      	ldrh	r2, [r2, #4]
 80018e0:	809a      	strh	r2, [r3, #4]
 80018e2:	e01e      	b.n	8001922 <commandReply+0x1fe>
		} else if ( DUTY_TRAJECTORY_SCURVE == duty_cmd.trajec_type) {
 80018e4:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d111      	bne.n	8001910 <commandReply+0x1ec>
			strcat((char *)detail, " S-CURVE");
 80018ec:	f8d7 0280 	ldr.w	r0, [r7, #640]	; 0x280
 80018f0:	f7fe fc78 	bl	80001e4 <strlen>
 80018f4:	4603      	mov	r3, r0
 80018f6:	461a      	mov	r2, r3
 80018f8:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 80018fc:	4413      	add	r3, r2
 80018fe:	492c      	ldr	r1, [pc, #176]	; (80019b0 <commandReply+0x28c>)
 8001900:	461a      	mov	r2, r3
 8001902:	460b      	mov	r3, r1
 8001904:	cb03      	ldmia	r3!, {r0, r1}
 8001906:	6010      	str	r0, [r2, #0]
 8001908:	6051      	str	r1, [r2, #4]
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	7213      	strb	r3, [r2, #8]
 800190e:	e008      	b.n	8001922 <commandReply+0x1fe>
		} else {
			strcat((char *)detail, DETAIL_STATUS[SCARA_STATUS_ERROR_TRAJECTORY]);
 8001910:	4b25      	ldr	r3, [pc, #148]	; (80019a8 <commandReply+0x284>)
 8001912:	695b      	ldr	r3, [r3, #20]
 8001914:	4619      	mov	r1, r3
 8001916:	f8d7 0280 	ldr.w	r0, [r7, #640]	; 0x280
 800191a:	f014 fb11 	bl	8015f40 <strcat>
			return RPD_ERROR;
 800191e:	2307      	movs	r3, #7
 8001920:	e030      	b.n	8001984 <commandReply+0x260>
		}
		ret = RPD_OK;
 8001922:	2308      	movs	r3, #8
 8001924:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		break;
 8001928:	e02a      	b.n	8001980 <commandReply+0x25c>
	case CMD_METHOD_CHANGE:
		ret = RPD_DUTY;
 800192a:	2309      	movs	r3, #9
 800192c:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		break;
 8001930:	e026      	b.n	8001980 <commandReply+0x25c>
	case CMD_JOB_PUSH_OUTPUT:
		break;
	case CMD_JOB_TEST:
		break;
	case CMD_JOB_RUN:
		ret = RPD_DUTY;
 8001932:	2309      	movs	r3, #9
 8001934:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		break;
 8001938:	e022      	b.n	8001980 <commandReply+0x25c>
	case CMD_KEYBOARD:
		ret = RPD_DUTY;
 800193a:	2309      	movs	r3, #9
 800193c:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		break;
 8001940:	e01e      	b.n	8001980 <commandReply+0x25c>
	case CMD_ERROR:
		strcpy( (char *)detail, "Check parameters");
 8001942:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 8001946:	4a1b      	ldr	r2, [pc, #108]	; (80019b4 <commandReply+0x290>)
 8001948:	461d      	mov	r5, r3
 800194a:	4614      	mov	r4, r2
 800194c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800194e:	6028      	str	r0, [r5, #0]
 8001950:	6069      	str	r1, [r5, #4]
 8001952:	60aa      	str	r2, [r5, #8]
 8001954:	60eb      	str	r3, [r5, #12]
 8001956:	7823      	ldrb	r3, [r4, #0]
 8001958:	742b      	strb	r3, [r5, #16]
		ret = RPD_ERROR;
 800195a:	2307      	movs	r3, #7
 800195c:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		break;
 8001960:	e00e      	b.n	8001980 <commandReply+0x25c>
	default:
		strcpy( (char *)detail, "Unknown command");
 8001962:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 8001966:	4a14      	ldr	r2, [pc, #80]	; (80019b8 <commandReply+0x294>)
 8001968:	461c      	mov	r4, r3
 800196a:	4615      	mov	r5, r2
 800196c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800196e:	6020      	str	r0, [r4, #0]
 8001970:	6061      	str	r1, [r4, #4]
 8001972:	60a2      	str	r2, [r4, #8]
 8001974:	60e3      	str	r3, [r4, #12]
		ret = RPD_ERROR;
 8001976:	2307      	movs	r3, #7
 8001978:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
 800197c:	e000      	b.n	8001980 <commandReply+0x25c>
		break;
 800197e:	bf00      	nop
	}
	return ret;
 8001980:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
}
 8001984:	4618      	mov	r0, r3
 8001986:	37c8      	adds	r7, #200	; 0xc8
 8001988:	46bd      	mov	sp, r7
 800198a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800198e:	b002      	add	sp, #8
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	0801aeac 	.word	0x0801aeac
 8001998:	0801aeb8 	.word	0x0801aeb8
 800199c:	0801aec4 	.word	0x0801aec4
 80019a0:	0801aed0 	.word	0x0801aed0
 80019a4:	0801aedc 	.word	0x0801aedc
 80019a8:	20000ca8 	.word	0x20000ca8
 80019ac:	0801aee8 	.word	0x0801aee8
 80019b0:	0801aef0 	.word	0x0801aef0
 80019b4:	0801aefc 	.word	0x0801aefc
 80019b8:	0801af10 	.word	0x0801af10

080019bc <commandRespond>:


int32_t				commandRespond	(Robot_RespondTypedef rpd,
										int32_t id_command,
										char *detail,
										char *respond) {
 80019bc:	b580      	push	{r7, lr}
 80019be:	b088      	sub	sp, #32
 80019c0:	af02      	add	r7, sp, #8
 80019c2:	60b9      	str	r1, [r7, #8]
 80019c4:	607a      	str	r2, [r7, #4]
 80019c6:	603b      	str	r3, [r7, #0]
 80019c8:	4603      	mov	r3, r0
 80019ca:	73fb      	strb	r3, [r7, #15]
	int out_lenght;
	switch(rpd) {
 80019cc:	7bfb      	ldrb	r3, [r7, #15]
 80019ce:	2b08      	cmp	r3, #8
 80019d0:	d836      	bhi.n	8001a40 <commandRespond+0x84>
 80019d2:	a201      	add	r2, pc, #4	; (adr r2, 80019d8 <commandRespond+0x1c>)
 80019d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019d8:	080019fd 	.word	0x080019fd
 80019dc:	080019fd 	.word	0x080019fd
 80019e0:	08001a23 	.word	0x08001a23
 80019e4:	08001a23 	.word	0x08001a23
 80019e8:	08001a23 	.word	0x08001a23
 80019ec:	08001a23 	.word	0x08001a23
 80019f0:	08001a23 	.word	0x08001a23
 80019f4:	08001a23 	.word	0x08001a23
 80019f8:	08001a23 	.word	0x08001a23
	case RPD_IDLE:
	case RPD_BUSY:
		{
			uint8_t		isScanLitmit;
			isScanLitmit = scaraIsScanLimit();
 80019fc:	f007 fc6a 	bl	80092d4 <scaraIsScanLimit>
 8001a00:	4603      	mov	r3, r0
 8001a02:	74fb      	strb	r3, [r7, #19]
			out_lenght = snprintf( (char *)respond,
 8001a04:	7bfb      	ldrb	r3, [r7, #15]
 8001a06:	4a12      	ldr	r2, [pc, #72]	; (8001a50 <commandRespond+0x94>)
 8001a08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a0c:	7cfa      	ldrb	r2, [r7, #19]
 8001a0e:	9201      	str	r2, [sp, #4]
 8001a10:	9300      	str	r3, [sp, #0]
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	4a0f      	ldr	r2, [pc, #60]	; (8001a54 <commandRespond+0x98>)
 8001a16:	2114      	movs	r1, #20
 8001a18:	6838      	ldr	r0, [r7, #0]
 8001a1a:	f014 fa11 	bl	8015e40 <sniprintf>
 8001a1e:	6178      	str	r0, [r7, #20]
									"%d %s %d",
									(int)id_command,
									ROBOTRESPOND[rpd],
									(int)isScanLitmit);
		}
		break;
 8001a20:	e010      	b.n	8001a44 <commandRespond+0x88>
	case RPD_STOP:
	case RPD_ERROR:
	case RPD_OK:

		{
			out_lenght = snprintf( (char *)respond,
 8001a22:	7bfb      	ldrb	r3, [r7, #15]
 8001a24:	4a0a      	ldr	r2, [pc, #40]	; (8001a50 <commandRespond+0x94>)
 8001a26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	9201      	str	r2, [sp, #4]
 8001a2e:	9300      	str	r3, [sp, #0]
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	4a09      	ldr	r2, [pc, #36]	; (8001a58 <commandRespond+0x9c>)
 8001a34:	2191      	movs	r1, #145	; 0x91
 8001a36:	6838      	ldr	r0, [r7, #0]
 8001a38:	f014 fa02 	bl	8015e40 <sniprintf>
 8001a3c:	6178      	str	r0, [r7, #20]
									"%d %s %s",
									(int)id_command,
									ROBOTRESPOND[rpd],
									(char *)detail);
		}
		break;
 8001a3e:	e001      	b.n	8001a44 <commandRespond+0x88>
	default:
		out_lenght = 0;
 8001a40:	2300      	movs	r3, #0
 8001a42:	617b      	str	r3, [r7, #20]
	}

	return (int32_t)out_lenght;
 8001a44:	697b      	ldr	r3, [r7, #20]
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3718      	adds	r7, #24
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20000050 	.word	0x20000050
 8001a54:	0801af20 	.word	0x0801af20
 8001a58:	0801af2c 	.word	0x0801af2c

08001a5c <LOG_REPORT>:
 *  line		: line code number
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t LOG_REPORT(char *message, uint16_t line) {
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b096      	sub	sp, #88	; 0x58
 8001a60:	af02      	add	r7, sp, #8
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	460b      	mov	r3, r1
 8001a66:	807b      	strh	r3, [r7, #2]
	uint8_t temp_buff[64];
	int32_t len;

	len = snprintf((char*)temp_buff, 63, "%d, %s \r\n", line, message);
 8001a68:	887a      	ldrh	r2, [r7, #2]
 8001a6a:	f107 0008 	add.w	r0, r7, #8
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	9300      	str	r3, [sp, #0]
 8001a72:	4613      	mov	r3, r2
 8001a74:	4a17      	ldr	r2, [pc, #92]	; (8001ad4 <LOG_REPORT+0x78>)
 8001a76:	213f      	movs	r1, #63	; 0x3f
 8001a78:	f014 f9e2 	bl	8015e40 <sniprintf>
 8001a7c:	64f8      	str	r0, [r7, #76]	; 0x4c
	if (-1 == len) {
 8001a7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a84:	d101      	bne.n	8001a8a <LOG_REPORT+0x2e>
		return FALSE;
 8001a86:	2300      	movs	r3, #0
 8001a88:	e01f      	b.n	8001aca <LOG_REPORT+0x6e>
	}
	ringBuff_PushArray(&uart_tx_ringbuff, temp_buff, len);
 8001a8a:	f107 0308 	add.w	r3, r7, #8
 8001a8e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001a90:	4619      	mov	r1, r3
 8001a92:	4811      	ldr	r0, [pc, #68]	; (8001ad8 <LOG_REPORT+0x7c>)
 8001a94:	f002 f87f 	bl	8003b96 <ringBuff_PushArray>
	if (HAL_DMA_GetState(&hdma_uart4_tx) == HAL_DMA_STATE_BUSY) {
 8001a98:	4810      	ldr	r0, [pc, #64]	; (8001adc <LOG_REPORT+0x80>)
 8001a9a:	f009 f9ed 	bl	800ae78 <HAL_DMA_GetState>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d101      	bne.n	8001aa8 <LOG_REPORT+0x4c>
		return TRUE;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e010      	b.n	8001aca <LOG_REPORT+0x6e>
	}// dma busy
	uint16_t size_dma;
	size_dma = ringBuff_PopArray(&uart_tx_ringbuff, log_uart_dma_buff, LOG_BUFFER_SIZE);
 8001aa8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001aac:	490c      	ldr	r1, [pc, #48]	; (8001ae0 <LOG_REPORT+0x84>)
 8001aae:	480a      	ldr	r0, [pc, #40]	; (8001ad8 <LOG_REPORT+0x7c>)
 8001ab0:	f002 f899 	bl	8003be6 <ringBuff_PopArray>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	HAL_UART_Transmit_DMA(&huart4, log_uart_dma_buff, size_dma);
 8001aba:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001abe:	461a      	mov	r2, r3
 8001ac0:	4907      	ldr	r1, [pc, #28]	; (8001ae0 <LOG_REPORT+0x84>)
 8001ac2:	4808      	ldr	r0, [pc, #32]	; (8001ae4 <LOG_REPORT+0x88>)
 8001ac4:	f00b fdea 	bl	800d69c <HAL_UART_Transmit_DMA>
	return TRUE;
 8001ac8:	2301      	movs	r3, #1
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3750      	adds	r7, #80	; 0x50
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	0801af38 	.word	0x0801af38
 8001ad8:	20000890 	.word	0x20000890
 8001adc:	20006170 	.word	0x20006170
 8001ae0:	20005204 	.word	0x20005204
 8001ae4:	20006130 	.word	0x20006130

08001ae8 <double2string>:

int32_t	double2string( uint8_t *result, double value, uint8_t precision) {
 8001ae8:	b5b0      	push	{r4, r5, r7, lr}
 8001aea:	b090      	sub	sp, #64	; 0x40
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	ed87 0b00 	vstr	d0, [r7]
 8001af4:	460b      	mov	r3, r1
 8001af6:	72fb      	strb	r3, [r7, #11]
	uint8_t le[6];
	int8_t sign;
	double temp1, temp2;
	int32_t index;

	if((precision < 0) || (6 < precision)) {
 8001af8:	7afb      	ldrb	r3, [r7, #11]
 8001afa:	2b06      	cmp	r3, #6
 8001afc:	d901      	bls.n	8001b02 <double2string+0x1a>
		precision = 6;
 8001afe:	2306      	movs	r3, #6
 8001b00:	72fb      	strb	r3, [r7, #11]
	}

	if(value < 0) {
 8001b02:	f04f 0200 	mov.w	r2, #0
 8001b06:	f04f 0300 	mov.w	r3, #0
 8001b0a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b0e:	f7fe fff5 	bl	8000afc <__aeabi_dcmplt>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d003      	beq.n	8001b20 <double2string+0x38>
		sign = -1;
 8001b18:	23ff      	movs	r3, #255	; 0xff
 8001b1a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001b1e:	e002      	b.n	8001b26 <double2string+0x3e>
	} else {
		sign = 1;
 8001b20:	2301      	movs	r3, #1
 8001b22:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}
	value = value*sign;
 8001b26:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7fe fd0a 	bl	8000544 <__aeabi_i2d>
 8001b30:	4603      	mov	r3, r0
 8001b32:	460c      	mov	r4, r1
 8001b34:	461a      	mov	r2, r3
 8001b36:	4623      	mov	r3, r4
 8001b38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b3c:	f7fe fd6c 	bl	8000618 <__aeabi_dmul>
 8001b40:	4603      	mov	r3, r0
 8001b42:	460c      	mov	r4, r1
 8001b44:	e9c7 3400 	strd	r3, r4, [r7]

	if (value > 10000.0f) {
 8001b48:	a307      	add	r3, pc, #28	; (adr r3, 8001b68 <double2string+0x80>)
 8001b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b4e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b52:	f7fe fff1 	bl	8000b38 <__aeabi_dcmpgt>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d009      	beq.n	8001b70 <double2string+0x88>
		return -1;
 8001b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b60:	e265      	b.n	800202e <double2string+0x546>
 8001b62:	bf00      	nop
 8001b64:	f3af 8000 	nop.w
 8001b68:	00000000 	.word	0x00000000
 8001b6c:	40c38800 	.word	0x40c38800
	}

	nguyen[0] 	= (int32_t)value/1000;
 8001b70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b74:	f7ff f800 	bl	8000b78 <__aeabi_d2iz>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	4acf      	ldr	r2, [pc, #828]	; (8001eb8 <double2string+0x3d0>)
 8001b7c:	fb82 1203 	smull	r1, r2, r2, r3
 8001b80:	1192      	asrs	r2, r2, #6
 8001b82:	17db      	asrs	r3, r3, #31
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	773b      	strb	r3, [r7, #28]
	nguyen[1]	= (int32_t)value/100 - nguyen[0]*10;
 8001b8a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b8e:	f7fe fff3 	bl	8000b78 <__aeabi_d2iz>
 8001b92:	4603      	mov	r3, r0
 8001b94:	4ac9      	ldr	r2, [pc, #804]	; (8001ebc <double2string+0x3d4>)
 8001b96:	fb82 1203 	smull	r1, r2, r2, r3
 8001b9a:	1152      	asrs	r2, r2, #5
 8001b9c:	17db      	asrs	r3, r3, #31
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	b2da      	uxtb	r2, r3
 8001ba2:	7f3b      	ldrb	r3, [r7, #28]
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	0149      	lsls	r1, r1, #5
 8001ba8:	1ac9      	subs	r1, r1, r3
 8001baa:	0089      	lsls	r1, r1, #2
 8001bac:	1acb      	subs	r3, r1, r3
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	4413      	add	r3, r2
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	777b      	strb	r3, [r7, #29]
	nguyen[2]	= (int32_t)value/10 - nguyen[0]*100 - nguyen[1]*10;
 8001bb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001bbc:	f7fe ffdc 	bl	8000b78 <__aeabi_d2iz>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	4abf      	ldr	r2, [pc, #764]	; (8001ec0 <double2string+0x3d8>)
 8001bc4:	fb82 1203 	smull	r1, r2, r2, r3
 8001bc8:	1092      	asrs	r2, r2, #2
 8001bca:	17db      	asrs	r3, r3, #31
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	b2da      	uxtb	r2, r3
 8001bd0:	7f7b      	ldrb	r3, [r7, #29]
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	0149      	lsls	r1, r1, #5
 8001bd6:	1ac9      	subs	r1, r1, r3
 8001bd8:	0089      	lsls	r1, r1, #2
 8001bda:	1acb      	subs	r3, r1, r3
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	b2d9      	uxtb	r1, r3
 8001be0:	7f3b      	ldrb	r3, [r7, #28]
 8001be2:	4618      	mov	r0, r3
 8001be4:	0080      	lsls	r0, r0, #2
 8001be6:	4418      	add	r0, r3
 8001be8:	00c0      	lsls	r0, r0, #3
 8001bea:	1ac3      	subs	r3, r0, r3
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	440b      	add	r3, r1
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	4413      	add	r3, r2
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	77bb      	strb	r3, [r7, #30]
	nguyen[3]	= (int32_t)value - nguyen[0]*1000 - nguyen[1]*100 - nguyen[2]*10;
 8001bfa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001bfe:	f7fe ffbb 	bl	8000b78 <__aeabi_d2iz>
 8001c02:	4603      	mov	r3, r0
 8001c04:	b2da      	uxtb	r2, r3
 8001c06:	7f7b      	ldrb	r3, [r7, #29]
 8001c08:	4619      	mov	r1, r3
 8001c0a:	0089      	lsls	r1, r1, #2
 8001c0c:	4419      	add	r1, r3
 8001c0e:	00c9      	lsls	r1, r1, #3
 8001c10:	1acb      	subs	r3, r1, r3
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	b2d9      	uxtb	r1, r3
 8001c16:	7f3b      	ldrb	r3, [r7, #28]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	0040      	lsls	r0, r0, #1
 8001c1c:	4403      	add	r3, r0
 8001c1e:	00db      	lsls	r3, r3, #3
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	440b      	add	r3, r1
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	4413      	add	r3, r2
 8001c28:	b2da      	uxtb	r2, r3
 8001c2a:	7fbb      	ldrb	r3, [r7, #30]
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	0149      	lsls	r1, r1, #5
 8001c30:	1ac9      	subs	r1, r1, r3
 8001c32:	0089      	lsls	r1, r1, #2
 8001c34:	1acb      	subs	r3, r1, r3
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	4413      	add	r3, r2
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	77fb      	strb	r3, [r7, #31]

	temp1	= (value - nguyen[0]*1000 - nguyen[1]*100 - nguyen[2]*10 - nguyen[3])*1000;
 8001c40:	7f3b      	ldrb	r3, [r7, #28]
 8001c42:	461a      	mov	r2, r3
 8001c44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c48:	fb03 f302 	mul.w	r3, r3, r2
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7fe fc79 	bl	8000544 <__aeabi_i2d>
 8001c52:	4603      	mov	r3, r0
 8001c54:	460c      	mov	r4, r1
 8001c56:	461a      	mov	r2, r3
 8001c58:	4623      	mov	r3, r4
 8001c5a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c5e:	f7fe fb23 	bl	80002a8 <__aeabi_dsub>
 8001c62:	4603      	mov	r3, r0
 8001c64:	460c      	mov	r4, r1
 8001c66:	4625      	mov	r5, r4
 8001c68:	461c      	mov	r4, r3
 8001c6a:	7f7b      	ldrb	r3, [r7, #29]
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	2364      	movs	r3, #100	; 0x64
 8001c70:	fb03 f302 	mul.w	r3, r3, r2
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7fe fc65 	bl	8000544 <__aeabi_i2d>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	4620      	mov	r0, r4
 8001c80:	4629      	mov	r1, r5
 8001c82:	f7fe fb11 	bl	80002a8 <__aeabi_dsub>
 8001c86:	4603      	mov	r3, r0
 8001c88:	460c      	mov	r4, r1
 8001c8a:	4625      	mov	r5, r4
 8001c8c:	461c      	mov	r4, r3
 8001c8e:	7fbb      	ldrb	r3, [r7, #30]
 8001c90:	461a      	mov	r2, r3
 8001c92:	4613      	mov	r3, r2
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	4413      	add	r3, r2
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7fe fc52 	bl	8000544 <__aeabi_i2d>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	4620      	mov	r0, r4
 8001ca6:	4629      	mov	r1, r5
 8001ca8:	f7fe fafe 	bl	80002a8 <__aeabi_dsub>
 8001cac:	4603      	mov	r3, r0
 8001cae:	460c      	mov	r4, r1
 8001cb0:	4625      	mov	r5, r4
 8001cb2:	461c      	mov	r4, r3
 8001cb4:	7ffb      	ldrb	r3, [r7, #31]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7fe fc44 	bl	8000544 <__aeabi_i2d>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	4620      	mov	r0, r4
 8001cc2:	4629      	mov	r1, r5
 8001cc4:	f7fe faf0 	bl	80002a8 <__aeabi_dsub>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	460c      	mov	r4, r1
 8001ccc:	4618      	mov	r0, r3
 8001cce:	4621      	mov	r1, r4
 8001cd0:	f04f 0200 	mov.w	r2, #0
 8001cd4:	4b7b      	ldr	r3, [pc, #492]	; (8001ec4 <double2string+0x3dc>)
 8001cd6:	f7fe fc9f 	bl	8000618 <__aeabi_dmul>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	460c      	mov	r4, r1
 8001cde:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	le[0] 	= (int32_t)temp1/100;
 8001ce2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001ce6:	f7fe ff47 	bl	8000b78 <__aeabi_d2iz>
 8001cea:	4603      	mov	r3, r0
 8001cec:	4a73      	ldr	r2, [pc, #460]	; (8001ebc <double2string+0x3d4>)
 8001cee:	fb82 1203 	smull	r1, r2, r2, r3
 8001cf2:	1152      	asrs	r2, r2, #5
 8001cf4:	17db      	asrs	r3, r3, #31
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	753b      	strb	r3, [r7, #20]
	le[1] 	= (int32_t)temp1/10 - le[0]*10;
 8001cfc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001d00:	f7fe ff3a 	bl	8000b78 <__aeabi_d2iz>
 8001d04:	4603      	mov	r3, r0
 8001d06:	4a6e      	ldr	r2, [pc, #440]	; (8001ec0 <double2string+0x3d8>)
 8001d08:	fb82 1203 	smull	r1, r2, r2, r3
 8001d0c:	1092      	asrs	r2, r2, #2
 8001d0e:	17db      	asrs	r3, r3, #31
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	b2da      	uxtb	r2, r3
 8001d14:	7d3b      	ldrb	r3, [r7, #20]
 8001d16:	4619      	mov	r1, r3
 8001d18:	0149      	lsls	r1, r1, #5
 8001d1a:	1ac9      	subs	r1, r1, r3
 8001d1c:	0089      	lsls	r1, r1, #2
 8001d1e:	1acb      	subs	r3, r1, r3
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	4413      	add	r3, r2
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	757b      	strb	r3, [r7, #21]
	le[2]	= (int32_t)temp1 - le[0]*100 - le[1]*10;
 8001d2a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001d2e:	f7fe ff23 	bl	8000b78 <__aeabi_d2iz>
 8001d32:	4603      	mov	r3, r0
 8001d34:	b2da      	uxtb	r2, r3
 8001d36:	7d7b      	ldrb	r3, [r7, #21]
 8001d38:	4619      	mov	r1, r3
 8001d3a:	0149      	lsls	r1, r1, #5
 8001d3c:	1ac9      	subs	r1, r1, r3
 8001d3e:	0089      	lsls	r1, r1, #2
 8001d40:	1acb      	subs	r3, r1, r3
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	b2d9      	uxtb	r1, r3
 8001d46:	7d3b      	ldrb	r3, [r7, #20]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	0080      	lsls	r0, r0, #2
 8001d4c:	4418      	add	r0, r3
 8001d4e:	00c0      	lsls	r0, r0, #3
 8001d50:	1ac3      	subs	r3, r0, r3
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	440b      	add	r3, r1
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	4413      	add	r3, r2
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	75bb      	strb	r3, [r7, #22]

	temp2	= (temp1 - le[0]*100 - le[1]*10 - le[2])*1000;
 8001d60:	7d3b      	ldrb	r3, [r7, #20]
 8001d62:	461a      	mov	r2, r3
 8001d64:	2364      	movs	r3, #100	; 0x64
 8001d66:	fb03 f302 	mul.w	r3, r3, r2
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7fe fbea 	bl	8000544 <__aeabi_i2d>
 8001d70:	4603      	mov	r3, r0
 8001d72:	460c      	mov	r4, r1
 8001d74:	461a      	mov	r2, r3
 8001d76:	4623      	mov	r3, r4
 8001d78:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001d7c:	f7fe fa94 	bl	80002a8 <__aeabi_dsub>
 8001d80:	4603      	mov	r3, r0
 8001d82:	460c      	mov	r4, r1
 8001d84:	4625      	mov	r5, r4
 8001d86:	461c      	mov	r4, r3
 8001d88:	7d7b      	ldrb	r3, [r7, #21]
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	4413      	add	r3, r2
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7fe fbd5 	bl	8000544 <__aeabi_i2d>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	4620      	mov	r0, r4
 8001da0:	4629      	mov	r1, r5
 8001da2:	f7fe fa81 	bl	80002a8 <__aeabi_dsub>
 8001da6:	4603      	mov	r3, r0
 8001da8:	460c      	mov	r4, r1
 8001daa:	4625      	mov	r5, r4
 8001dac:	461c      	mov	r4, r3
 8001dae:	7dbb      	ldrb	r3, [r7, #22]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7fe fbc7 	bl	8000544 <__aeabi_i2d>
 8001db6:	4602      	mov	r2, r0
 8001db8:	460b      	mov	r3, r1
 8001dba:	4620      	mov	r0, r4
 8001dbc:	4629      	mov	r1, r5
 8001dbe:	f7fe fa73 	bl	80002a8 <__aeabi_dsub>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	460c      	mov	r4, r1
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	4621      	mov	r1, r4
 8001dca:	f04f 0200 	mov.w	r2, #0
 8001dce:	4b3d      	ldr	r3, [pc, #244]	; (8001ec4 <double2string+0x3dc>)
 8001dd0:	f7fe fc22 	bl	8000618 <__aeabi_dmul>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	460c      	mov	r4, r1
 8001dd8:	e9c7 3408 	strd	r3, r4, [r7, #32]
	le[3] 	= (int32_t)temp2/100;
 8001ddc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001de0:	f7fe feca 	bl	8000b78 <__aeabi_d2iz>
 8001de4:	4603      	mov	r3, r0
 8001de6:	4a35      	ldr	r2, [pc, #212]	; (8001ebc <double2string+0x3d4>)
 8001de8:	fb82 1203 	smull	r1, r2, r2, r3
 8001dec:	1152      	asrs	r2, r2, #5
 8001dee:	17db      	asrs	r3, r3, #31
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	75fb      	strb	r3, [r7, #23]
	le[4] 	= (int32_t)temp2/10 - le[3]*10;
 8001df6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001dfa:	f7fe febd 	bl	8000b78 <__aeabi_d2iz>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	4a2f      	ldr	r2, [pc, #188]	; (8001ec0 <double2string+0x3d8>)
 8001e02:	fb82 1203 	smull	r1, r2, r2, r3
 8001e06:	1092      	asrs	r2, r2, #2
 8001e08:	17db      	asrs	r3, r3, #31
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	b2da      	uxtb	r2, r3
 8001e0e:	7dfb      	ldrb	r3, [r7, #23]
 8001e10:	4619      	mov	r1, r3
 8001e12:	0149      	lsls	r1, r1, #5
 8001e14:	1ac9      	subs	r1, r1, r3
 8001e16:	0089      	lsls	r1, r1, #2
 8001e18:	1acb      	subs	r3, r1, r3
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	4413      	add	r3, r2
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	763b      	strb	r3, [r7, #24]
	le[5]	= (int32_t)temp2 - le[3]*100 - le[4]*10;
 8001e24:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e28:	f7fe fea6 	bl	8000b78 <__aeabi_d2iz>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	b2da      	uxtb	r2, r3
 8001e30:	7e3b      	ldrb	r3, [r7, #24]
 8001e32:	4619      	mov	r1, r3
 8001e34:	0149      	lsls	r1, r1, #5
 8001e36:	1ac9      	subs	r1, r1, r3
 8001e38:	0089      	lsls	r1, r1, #2
 8001e3a:	1acb      	subs	r3, r1, r3
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	b2d9      	uxtb	r1, r3
 8001e40:	7dfb      	ldrb	r3, [r7, #23]
 8001e42:	4618      	mov	r0, r3
 8001e44:	0080      	lsls	r0, r0, #2
 8001e46:	4418      	add	r0, r3
 8001e48:	00c0      	lsls	r0, r0, #3
 8001e4a:	1ac3      	subs	r3, r0, r3
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	440b      	add	r3, r1
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	4413      	add	r3, r2
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	767b      	strb	r3, [r7, #25]
	// Rounding
	if ((temp2 - le[3]*1000 - le[4]*100 - le[5]) >= 0.5) {
 8001e5a:	7dfb      	ldrb	r3, [r7, #23]
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e62:	fb03 f302 	mul.w	r3, r3, r2
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7fe fb6c 	bl	8000544 <__aeabi_i2d>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	460c      	mov	r4, r1
 8001e70:	461a      	mov	r2, r3
 8001e72:	4623      	mov	r3, r4
 8001e74:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e78:	f7fe fa16 	bl	80002a8 <__aeabi_dsub>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	460c      	mov	r4, r1
 8001e80:	4625      	mov	r5, r4
 8001e82:	461c      	mov	r4, r3
 8001e84:	7e3b      	ldrb	r3, [r7, #24]
 8001e86:	461a      	mov	r2, r3
 8001e88:	2364      	movs	r3, #100	; 0x64
 8001e8a:	fb03 f302 	mul.w	r3, r3, r2
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7fe fb58 	bl	8000544 <__aeabi_i2d>
 8001e94:	4602      	mov	r2, r0
 8001e96:	460b      	mov	r3, r1
 8001e98:	4620      	mov	r0, r4
 8001e9a:	4629      	mov	r1, r5
 8001e9c:	f7fe fa04 	bl	80002a8 <__aeabi_dsub>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	460c      	mov	r4, r1
 8001ea4:	4625      	mov	r5, r4
 8001ea6:	461c      	mov	r4, r3
 8001ea8:	7e7b      	ldrb	r3, [r7, #25]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7fe fb4a 	bl	8000544 <__aeabi_i2d>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	e008      	b.n	8001ec8 <double2string+0x3e0>
 8001eb6:	bf00      	nop
 8001eb8:	10624dd3 	.word	0x10624dd3
 8001ebc:	51eb851f 	.word	0x51eb851f
 8001ec0:	66666667 	.word	0x66666667
 8001ec4:	408f4000 	.word	0x408f4000
 8001ec8:	4620      	mov	r0, r4
 8001eca:	4629      	mov	r1, r5
 8001ecc:	f7fe f9ec 	bl	80002a8 <__aeabi_dsub>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	460c      	mov	r4, r1
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	4621      	mov	r1, r4
 8001ed8:	f04f 0200 	mov.w	r2, #0
 8001edc:	4b56      	ldr	r3, [pc, #344]	; (8002038 <double2string+0x550>)
 8001ede:	f7fe fe21 	bl	8000b24 <__aeabi_dcmpge>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d003      	beq.n	8001ef0 <double2string+0x408>
		le[5]++;
 8001ee8:	7e7b      	ldrb	r3, [r7, #25]
 8001eea:	3301      	adds	r3, #1
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	767b      	strb	r3, [r7, #25]
	}

	index = 0;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	63bb      	str	r3, [r7, #56]	; 0x38

	if( -1 == sign) {
 8001ef4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8001ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001efc:	d107      	bne.n	8001f0e <double2string+0x426>
		*(result + index++) = '-'; // Negative
 8001efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f00:	1c5a      	adds	r2, r3, #1
 8001f02:	63ba      	str	r2, [r7, #56]	; 0x38
 8001f04:	461a      	mov	r2, r3
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	4413      	add	r3, r2
 8001f0a:	222d      	movs	r2, #45	; 0x2d
 8001f0c:	701a      	strb	r2, [r3, #0]
	}
	// Find first position
	if ( value < 1) {
 8001f0e:	f04f 0200 	mov.w	r2, #0
 8001f12:	4b4a      	ldr	r3, [pc, #296]	; (800203c <double2string+0x554>)
 8001f14:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f18:	f7fe fdf0 	bl	8000afc <__aeabi_dcmplt>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d008      	beq.n	8001f34 <double2string+0x44c>
		*(result + index++) = 0x30;
 8001f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f24:	1c5a      	adds	r2, r3, #1
 8001f26:	63ba      	str	r2, [r7, #56]	; 0x38
 8001f28:	461a      	mov	r2, r3
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	2230      	movs	r2, #48	; 0x30
 8001f30:	701a      	strb	r2, [r3, #0]
 8001f32:	e04b      	b.n	8001fcc <double2string+0x4e4>
	} else {
		int8_t i = 0;
 8001f34:	2300      	movs	r3, #0
 8001f36:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		for( ; i < 4; i++) {
 8001f3a:	e027      	b.n	8001f8c <double2string+0x4a4>
			if (nguyen[i] > 0) {
 8001f3c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001f40:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001f44:	4413      	add	r3, r2
 8001f46:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d017      	beq.n	8001f7e <double2string+0x496>
				*(result + index++) = nguyen[i] + 0x30;
 8001f4e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001f52:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001f56:	4413      	add	r3, r2
 8001f58:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 8001f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f5e:	1c59      	adds	r1, r3, #1
 8001f60:	63b9      	str	r1, [r7, #56]	; 0x38
 8001f62:	4619      	mov	r1, r3
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	440b      	add	r3, r1
 8001f68:	3230      	adds	r2, #48	; 0x30
 8001f6a:	b2d2      	uxtb	r2, r2
 8001f6c:	701a      	strb	r2, [r3, #0]
				i++;
 8001f6e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	3301      	adds	r3, #1
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 8001f7c:	e00a      	b.n	8001f94 <double2string+0x4ac>
		for( ; i < 4; i++) {
 8001f7e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	3301      	adds	r3, #1
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001f8c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001f90:	2b03      	cmp	r3, #3
 8001f92:	ddd3      	ble.n	8001f3c <double2string+0x454>
			}
		}

		for( ; i < 4; i++) {
 8001f94:	e016      	b.n	8001fc4 <double2string+0x4dc>
		*(result + index++) = nguyen[i] + 0x30;
 8001f96:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001f9a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001f9e:	4413      	add	r3, r2
 8001fa0:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 8001fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fa6:	1c59      	adds	r1, r3, #1
 8001fa8:	63b9      	str	r1, [r7, #56]	; 0x38
 8001faa:	4619      	mov	r1, r3
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	440b      	add	r3, r1
 8001fb0:	3230      	adds	r2, #48	; 0x30
 8001fb2:	b2d2      	uxtb	r2, r2
 8001fb4:	701a      	strb	r2, [r3, #0]
		for( ; i < 4; i++) {
 8001fb6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001fc4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001fc8:	2b03      	cmp	r3, #3
 8001fca:	dde4      	ble.n	8001f96 <double2string+0x4ae>
		}
	}
	*(result + index++) = '.';
 8001fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fce:	1c5a      	adds	r2, r3, #1
 8001fd0:	63ba      	str	r2, [r7, #56]	; 0x38
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	222e      	movs	r2, #46	; 0x2e
 8001fda:	701a      	strb	r2, [r3, #0]
	for( int8_t i = 0; i < precision; i++) {
 8001fdc:	2300      	movs	r3, #0
 8001fde:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001fe2:	e016      	b.n	8002012 <double2string+0x52a>
			*(result + index++) = le[i] + 0x30;
 8001fe4:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8001fe8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001fec:	4413      	add	r3, r2
 8001fee:	f813 2c2c 	ldrb.w	r2, [r3, #-44]
 8001ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ff4:	1c59      	adds	r1, r3, #1
 8001ff6:	63b9      	str	r1, [r7, #56]	; 0x38
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	440b      	add	r3, r1
 8001ffe:	3230      	adds	r2, #48	; 0x30
 8002000:	b2d2      	uxtb	r2, r2
 8002002:	701a      	strb	r2, [r3, #0]
	for( int8_t i = 0; i < precision; i++) {
 8002004:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8002008:	b2db      	uxtb	r3, r3
 800200a:	3301      	adds	r3, #1
 800200c:	b2db      	uxtb	r3, r3
 800200e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002012:	f997 2036 	ldrsb.w	r2, [r7, #54]	; 0x36
 8002016:	7afb      	ldrb	r3, [r7, #11]
 8002018:	429a      	cmp	r2, r3
 800201a:	dbe3      	blt.n	8001fe4 <double2string+0x4fc>
	}

	// Chua giai quyet van de lam tron chu so thap phan
	*(result + index++) = 0;
 800201c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800201e:	1c5a      	adds	r2, r3, #1
 8002020:	63ba      	str	r2, [r7, #56]	; 0x38
 8002022:	461a      	mov	r2, r3
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	4413      	add	r3, r2
 8002028:	2200      	movs	r2, #0
 800202a:	701a      	strb	r2, [r3, #0]
	return index;
 800202c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800202e:	4618      	mov	r0, r3
 8002030:	3740      	adds	r7, #64	; 0x40
 8002032:	46bd      	mov	sp, r7
 8002034:	bdb0      	pop	{r4, r5, r7, pc}
 8002036:	bf00      	nop
 8002038:	3fe00000 	.word	0x3fe00000
 800203c:	3ff00000 	.word	0x3ff00000

08002040 <packPayload>:
 *  in_lenght		: lenght of input_buff
 *
 *  returns:		: lenght of output_buff
 *  				  -1 if error
 */
int32_t	packPayload		(uint8_t *input_buff, uint8_t *output_buff, int32_t in_lenght) {
 8002040:	b5b0      	push	{r4, r5, r7, lr}
 8002042:	b088      	sub	sp, #32
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
 800204c:	466b      	mov	r3, sp
 800204e:	461d      	mov	r5, r3
	if (NULL == input_buff) {
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d102      	bne.n	800205c <packPayload+0x1c>
		return -1;
 8002056:	f04f 33ff 	mov.w	r3, #4294967295
 800205a:	e056      	b.n	800210a <packPayload+0xca>
	}

	if (NULL == output_buff) {
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d102      	bne.n	8002068 <packPayload+0x28>
		return -1;
 8002062:	f04f 33ff 	mov.w	r3, #4294967295
 8002066:	e050      	b.n	800210a <packPayload+0xca>
	}

	int32_t out_lenght = 0;
 8002068:	2300      	movs	r3, #0
 800206a:	61bb      	str	r3, [r7, #24]

	out_lenght = in_lenght + 2;//lenght of start char and end char
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3302      	adds	r3, #2
 8002070:	61bb      	str	r3, [r7, #24]
//		if ( (START_CHAR == input_buff[i]) ||	(END_CHAR == input_buff[i])	|| (ADD_CHAR == input_buff[i]) ) {
//			out_lenght++;
//		}
//	}// compute output buffer lenght

	uint8_t temp_buff[out_lenght];
 8002072:	69b8      	ldr	r0, [r7, #24]
 8002074:	1e43      	subs	r3, r0, #1
 8002076:	617b      	str	r3, [r7, #20]
 8002078:	4603      	mov	r3, r0
 800207a:	4619      	mov	r1, r3
 800207c:	f04f 0200 	mov.w	r2, #0
 8002080:	f04f 0300 	mov.w	r3, #0
 8002084:	f04f 0400 	mov.w	r4, #0
 8002088:	00d4      	lsls	r4, r2, #3
 800208a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800208e:	00cb      	lsls	r3, r1, #3
 8002090:	4603      	mov	r3, r0
 8002092:	4619      	mov	r1, r3
 8002094:	f04f 0200 	mov.w	r2, #0
 8002098:	f04f 0300 	mov.w	r3, #0
 800209c:	f04f 0400 	mov.w	r4, #0
 80020a0:	00d4      	lsls	r4, r2, #3
 80020a2:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80020a6:	00cb      	lsls	r3, r1, #3
 80020a8:	4603      	mov	r3, r0
 80020aa:	3307      	adds	r3, #7
 80020ac:	08db      	lsrs	r3, r3, #3
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	ebad 0d03 	sub.w	sp, sp, r3
 80020b4:	466b      	mov	r3, sp
 80020b6:	3300      	adds	r3, #0
 80020b8:	613b      	str	r3, [r7, #16]

	out_lenght = 0;
 80020ba:	2300      	movs	r3, #0
 80020bc:	61bb      	str	r3, [r7, #24]
	temp_buff[out_lenght++] = START_CHAR;
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	1c5a      	adds	r2, r3, #1
 80020c2:	61ba      	str	r2, [r7, #24]
 80020c4:	693a      	ldr	r2, [r7, #16]
 80020c6:	2128      	movs	r1, #40	; 0x28
 80020c8:	54d1      	strb	r1, [r2, r3]
	for (int32_t i = 0; i < in_lenght; i++) {
 80020ca:	2300      	movs	r3, #0
 80020cc:	61fb      	str	r3, [r7, #28]
 80020ce:	e00b      	b.n	80020e8 <packPayload+0xa8>
//			temp_buff[out_lenght++] = ADD_CHAR;
//			temp_buff[out_lenght++] = input_buff[i] ^ XOR_CHAR;
//		} else {
//			temp_buff[out_lenght++] = input_buff[i];
//		}
		temp_buff[out_lenght++] = input_buff[i];
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	68fa      	ldr	r2, [r7, #12]
 80020d4:	441a      	add	r2, r3
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	1c59      	adds	r1, r3, #1
 80020da:	61b9      	str	r1, [r7, #24]
 80020dc:	7811      	ldrb	r1, [r2, #0]
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	54d1      	strb	r1, [r2, r3]
	for (int32_t i = 0; i < in_lenght; i++) {
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	3301      	adds	r3, #1
 80020e6:	61fb      	str	r3, [r7, #28]
 80020e8:	69fa      	ldr	r2, [r7, #28]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	dbef      	blt.n	80020d0 <packPayload+0x90>
	}
	temp_buff[out_lenght++] = END_CHAR;
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	1c5a      	adds	r2, r3, #1
 80020f4:	61ba      	str	r2, [r7, #24]
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	2129      	movs	r1, #41	; 0x29
 80020fa:	54d1      	strb	r1, [r2, r3]

	memmove(output_buff, temp_buff, out_lenght);
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	4619      	mov	r1, r3
 8002102:	68b8      	ldr	r0, [r7, #8]
 8002104:	f012 ff7f 	bl	8015006 <memmove>

	return out_lenght;
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	46ad      	mov	sp, r5
}
 800210c:	4618      	mov	r0, r3
 800210e:	3720      	adds	r7, #32
 8002110:	46bd      	mov	sp, r7
 8002112:	bdb0      	pop	{r4, r5, r7, pc}

08002114 <unPackPayload>:
 *  in_lenght		: lenght of input_buff
 *
 *  returns:		: lenght of output_buff
 *  				  -1 if error
 */
int32_t	unPackPayload	(uint8_t *message_buff, int32_t in_lenght) {
 8002114:	b5b0      	push	{r4, r5, r7, lr}
 8002116:	b086      	sub	sp, #24
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
 800211e:	466b      	mov	r3, sp
 8002120:	461d      	mov	r5, r3
	if (in_lenght < MIN_MESSAGE_LENGHT) {
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	2b05      	cmp	r3, #5
 8002126:	dc02      	bgt.n	800212e <unPackPayload+0x1a>
		return -1;
 8002128:	f04f 33ff 	mov.w	r3, #4294967295
 800212c:	e063      	b.n	80021f6 <unPackPayload+0xe2>
	}// check minimum lenght

	if ( (START_CHAR != message_buff[0]) || (END_CHAR != message_buff[in_lenght - 1]) ) {
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	2b28      	cmp	r3, #40	; 0x28
 8002134:	d106      	bne.n	8002144 <unPackPayload+0x30>
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	3b01      	subs	r3, #1
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	4413      	add	r3, r2
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	2b29      	cmp	r3, #41	; 0x29
 8002142:	d002      	beq.n	800214a <unPackPayload+0x36>
		return -1;
 8002144:	f04f 33ff 	mov.w	r3, #4294967295
 8002148:	e055      	b.n	80021f6 <unPackPayload+0xe2>
	}// check start char and end char

	int32_t out_lenght = in_lenght - 2;
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	3b02      	subs	r3, #2
 800214e:	613b      	str	r3, [r7, #16]
//		if ( (START_CHAR == message_buff[i]) || (END_CHAR == message_buff[i]) || (ADD_CHAR == message_buff[i]) ) {
//			out_lenght--;
//		}
//	}// compute output buffer lenght

	uint8_t temp_buff[out_lenght];
 8002150:	6938      	ldr	r0, [r7, #16]
 8002152:	1e43      	subs	r3, r0, #1
 8002154:	60fb      	str	r3, [r7, #12]
 8002156:	4603      	mov	r3, r0
 8002158:	4619      	mov	r1, r3
 800215a:	f04f 0200 	mov.w	r2, #0
 800215e:	f04f 0300 	mov.w	r3, #0
 8002162:	f04f 0400 	mov.w	r4, #0
 8002166:	00d4      	lsls	r4, r2, #3
 8002168:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800216c:	00cb      	lsls	r3, r1, #3
 800216e:	4603      	mov	r3, r0
 8002170:	4619      	mov	r1, r3
 8002172:	f04f 0200 	mov.w	r2, #0
 8002176:	f04f 0300 	mov.w	r3, #0
 800217a:	f04f 0400 	mov.w	r4, #0
 800217e:	00d4      	lsls	r4, r2, #3
 8002180:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002184:	00cb      	lsls	r3, r1, #3
 8002186:	4603      	mov	r3, r0
 8002188:	3307      	adds	r3, #7
 800218a:	08db      	lsrs	r3, r3, #3
 800218c:	00db      	lsls	r3, r3, #3
 800218e:	ebad 0d03 	sub.w	sp, sp, r3
 8002192:	466b      	mov	r3, sp
 8002194:	3300      	adds	r3, #0
 8002196:	60bb      	str	r3, [r7, #8]

	out_lenght = 0;
 8002198:	2300      	movs	r3, #0
 800219a:	613b      	str	r3, [r7, #16]
	for (int32_t i = 0; i < (in_lenght - 1); i++) {
 800219c:	2300      	movs	r3, #0
 800219e:	617b      	str	r3, [r7, #20]
 80021a0:	e017      	b.n	80021d2 <unPackPayload+0xbe>
		if ( (START_CHAR == message_buff[i]) ||	(END_CHAR == message_buff[i]) ) {
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	4413      	add	r3, r2
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	2b28      	cmp	r3, #40	; 0x28
 80021ac:	d00e      	beq.n	80021cc <unPackPayload+0xb8>
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	4413      	add	r3, r2
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	2b29      	cmp	r3, #41	; 0x29
 80021b8:	d008      	beq.n	80021cc <unPackPayload+0xb8>
			;
//		} else if ( (ADD_CHAR == message_buff[i]) ) {
//			temp_buff[out_lenght++] = message_buff[++i] ^ XOR_CHAR;
		}
		else {
			temp_buff[out_lenght++] = message_buff[i];
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	441a      	add	r2, r3
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	1c59      	adds	r1, r3, #1
 80021c4:	6139      	str	r1, [r7, #16]
 80021c6:	7811      	ldrb	r1, [r2, #0]
 80021c8:	68ba      	ldr	r2, [r7, #8]
 80021ca:	54d1      	strb	r1, [r2, r3]
	for (int32_t i = 0; i < (in_lenght - 1); i++) {
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	3301      	adds	r3, #1
 80021d0:	617b      	str	r3, [r7, #20]
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	3b01      	subs	r3, #1
 80021d6:	697a      	ldr	r2, [r7, #20]
 80021d8:	429a      	cmp	r2, r3
 80021da:	dbe2      	blt.n	80021a2 <unPackPayload+0x8e>
		}
	}
	memset((uint8_t*)message_buff, 0, in_lenght);
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	461a      	mov	r2, r3
 80021e0:	2100      	movs	r1, #0
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f012 ff28 	bl	8015038 <memset>
	memmove(message_buff, temp_buff, out_lenght);
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	693a      	ldr	r2, [r7, #16]
 80021ec:	4619      	mov	r1, r3
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f012 ff09 	bl	8015006 <memmove>

	return out_lenght;
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	46ad      	mov	sp, r5
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3718      	adds	r7, #24
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bdb0      	pop	{r4, r5, r7, pc}

08002200 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002206:	2300      	movs	r3, #0
 8002208:	607b      	str	r3, [r7, #4]
 800220a:	4b0c      	ldr	r3, [pc, #48]	; (800223c <MX_DMA_Init+0x3c>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	4a0b      	ldr	r2, [pc, #44]	; (800223c <MX_DMA_Init+0x3c>)
 8002210:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002214:	6313      	str	r3, [r2, #48]	; 0x30
 8002216:	4b09      	ldr	r3, [pc, #36]	; (800223c <MX_DMA_Init+0x3c>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800221e:	607b      	str	r3, [r7, #4]
 8002220:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8002222:	2200      	movs	r2, #0
 8002224:	2105      	movs	r1, #5
 8002226:	200f      	movs	r0, #15
 8002228:	f008 fb4a 	bl	800a8c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800222c:	200f      	movs	r0, #15
 800222e:	f008 fb63 	bl	800a8f8 <HAL_NVIC_EnableIRQ>

}
 8002232:	bf00      	nop
 8002234:	3708      	adds	r7, #8
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	40023800 	.word	0x40023800

08002240 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	4a07      	ldr	r2, [pc, #28]	; (800226c <vApplicationGetIdleTaskMemory+0x2c>)
 8002250:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	4a06      	ldr	r2, [pc, #24]	; (8002270 <vApplicationGetIdleTaskMemory+0x30>)
 8002256:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800225e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8002260:	bf00      	nop
 8002262:	3714      	adds	r7, #20
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
 800226c:	2000104c 	.word	0x2000104c
 8002270:	200010a0 	.word	0x200010a0

08002274 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002274:	b5b0      	push	{r4, r5, r7, lr}
 8002276:	b094      	sub	sp, #80	; 0x50
 8002278:	af00      	add	r7, sp, #0
       
  /* USER CODE END Init */

  /* Create the mutex(es) */
  /* definition and creation of usbTxMutex */
  osMutexDef(usbTxMutex);
 800227a:	2300      	movs	r3, #0
 800227c:	64bb      	str	r3, [r7, #72]	; 0x48
 800227e:	2300      	movs	r3, #0
 8002280:	64fb      	str	r3, [r7, #76]	; 0x4c
  usbTxMutexHandle = osMutexCreate(osMutex(usbTxMutex));
 8002282:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002286:	4618      	mov	r0, r3
 8002288:	f00f f8c0 	bl	801140c <osMutexCreate>
 800228c:	4602      	mov	r2, r0
 800228e:	4b1d      	ldr	r3, [pc, #116]	; (8002304 <MX_FREERTOS_Init+0x90>)
 8002290:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
	  /* Create the queue(s) */
	  /* definition and creation of commandMail */
	  osMailQDef(commandMail, 1, DUTY_Command_TypeDef);
 8002292:	2301      	movs	r3, #1
 8002294:	63bb      	str	r3, [r7, #56]	; 0x38
 8002296:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
 800229a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800229c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80022a0:	643b      	str	r3, [r7, #64]	; 0x40
	  commandMailHandle = osMailCreate(osMailQ(commandMail), NULL);
 80022a2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80022a6:	2100      	movs	r1, #0
 80022a8:	4618      	mov	r0, r3
 80022aa:	f00f fa4b 	bl	8011744 <osMailCreate>
 80022ae:	4602      	mov	r2, r0
 80022b0:	4b15      	ldr	r3, [pc, #84]	; (8002308 <MX_FREERTOS_Init+0x94>)
 80022b2:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityHigh, 0, 2048);
 80022b4:	4b15      	ldr	r3, [pc, #84]	; (800230c <MX_FREERTOS_Init+0x98>)
 80022b6:	f107 041c 	add.w	r4, r7, #28
 80022ba:	461d      	mov	r5, r3
 80022bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80022c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80022c8:	f107 031c 	add.w	r3, r7, #28
 80022cc:	2100      	movs	r1, #0
 80022ce:	4618      	mov	r0, r3
 80022d0:	f00e ffaf 	bl	8011232 <osThreadCreate>
 80022d4:	4602      	mov	r2, r0
 80022d6:	4b0e      	ldr	r3, [pc, #56]	; (8002310 <MX_FREERTOS_Init+0x9c>)
 80022d8:	601a      	str	r2, [r3, #0]

  /* definition and creation of USB_RX_Check_ */
  osThreadDef(USB_RX_Check_, Start_USB_RX_Task, osPriorityNormal, 0, 1024);
 80022da:	4b0e      	ldr	r3, [pc, #56]	; (8002314 <MX_FREERTOS_Init+0xa0>)
 80022dc:	463c      	mov	r4, r7
 80022de:	461d      	mov	r5, r3
 80022e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80022e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  USB_RX_Check_Handle = osThreadCreate(osThread(USB_RX_Check_), NULL);
 80022ec:	463b      	mov	r3, r7
 80022ee:	2100      	movs	r1, #0
 80022f0:	4618      	mov	r0, r3
 80022f2:	f00e ff9e 	bl	8011232 <osThreadCreate>
 80022f6:	4602      	mov	r2, r0
 80022f8:	4b07      	ldr	r3, [pc, #28]	; (8002318 <MX_FREERTOS_Init+0xa4>)
 80022fa:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80022fc:	bf00      	nop
 80022fe:	3750      	adds	r7, #80	; 0x50
 8002300:	46bd      	mov	sp, r7
 8002302:	bdb0      	pop	{r4, r5, r7, pc}
 8002304:	20005308 	.word	0x20005308
 8002308:	2000530c 	.word	0x2000530c
 800230c:	0801af50 	.word	0x0801af50
 8002310:	20005304 	.word	0x20005304
 8002314:	0801af7c 	.word	0x0801af7c
 8002318:	20005310 	.word	0x20005310
 800231c:	00000000 	.word	0x00000000

08002320 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002320:	b5b0      	push	{r4, r5, r7, lr}
 8002322:	ed2d 8b02 	vpush	{d8}
 8002326:	f5ad 6df4 	sub.w	sp, sp, #1952	; 0x7a0
 800232a:	af66      	add	r7, sp, #408	; 0x198
 800232c:	f107 0314 	add.w	r3, r7, #20
 8002330:	6018      	str	r0, [r3, #0]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8002332:	f012 f8e3 	bl	80144fc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  HAL_GPIO_WritePin(USB_SIGN_GPIO_Port, USB_SIGN_Pin, GPIO_PIN_SET); // Pull-up Resistor
 8002336:	2201      	movs	r2, #1
 8002338:	2110      	movs	r1, #16
 800233a:	48c9      	ldr	r0, [pc, #804]	; (8002660 <StartDefaultTask+0x340>)
 800233c:	f009 f822 	bl	800b384 <HAL_GPIO_WritePin>

  osEvent 				ret_mail;
  DUTY_Command_TypeDef 	duty_cmd;
  DUTY_Command_TypeDef 	*dataMail;
  uint8_t 				isNewDuty = FALSE;
 8002340:	2300      	movs	r3, #0
 8002342:	f887 3607 	strb.w	r3, [r7, #1543]	; 0x607
  SCARA_ScanStateTypeDef	current_scan_state;
  SCARA_KeyStateTypeDef		current_key_state;
  SCARA_KeyTypeDef			current_key;
  double						run_time;

  LOG_REPORT("free_rtos.c: PROGRAM START...", __LINE__);
 8002346:	21cc      	movs	r1, #204	; 0xcc
 8002348:	48c6      	ldr	r0, [pc, #792]	; (8002664 <StartDefaultTask+0x344>)
 800234a:	f7ff fb87 	bl	8001a5c <LOG_REPORT>

  // Init value
  current_method = scaraGetMethod();
 800234e:	f006 ffa9 	bl	80092a4 <scaraGetMethod>
 8002352:	4603      	mov	r3, r0
 8002354:	f887 35f3 	strb.w	r3, [r7, #1523]	; 0x5f3
  current_mode	 = scaraGetMode();
 8002358:	f006 ff98 	bl	800928c <scaraGetMode>
 800235c:	4603      	mov	r3, r0
 800235e:	f887 35f2 	strb.w	r3, [r7, #1522]	; 0x5f2
  current_duty_state	 = scaraGetDutyState();
 8002362:	f006 ffab 	bl	80092bc <scaraGetDutyState>
 8002366:	4603      	mov	r3, r0
 8002368:	f887 35f1 	strb.w	r3, [r7, #1521]	; 0x5f1

  // Start up robot
  scaraStartup();
 800236c:	f002 fbd8 	bl	8004b20 <scaraStartup>
  osDelay(10);
 8002370:	200a      	movs	r0, #10
 8002372:	f00e ffaa 	bl	80112ca <osDelay>

  positionNext.Theta1 = -PI/3;
 8002376:	4abc      	ldr	r2, [pc, #752]	; (8002668 <StartDefaultTask+0x348>)
 8002378:	a4b5      	add	r4, pc, #724	; (adr r4, 8002650 <StartDefaultTask+0x330>)
 800237a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800237e:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
  positionNext.Theta2 = PI/3;
 8002382:	4ab9      	ldr	r2, [pc, #740]	; (8002668 <StartDefaultTask+0x348>)
 8002384:	a4b4      	add	r4, pc, #720	; (adr r4, 8002658 <StartDefaultTask+0x338>)
 8002386:	e9d4 3400 	ldrd	r3, r4, [r4]
 800238a:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
  positionNext.D3 = 10;
 800238e:	4ab6      	ldr	r2, [pc, #728]	; (8002668 <StartDefaultTask+0x348>)
 8002390:	f04f 0300 	mov.w	r3, #0
 8002394:	4cb5      	ldr	r4, [pc, #724]	; (800266c <StartDefaultTask+0x34c>)
 8002396:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
  positionNext.Theta4 = 0;
 800239a:	4ab3      	ldr	r2, [pc, #716]	; (8002668 <StartDefaultTask+0x348>)
 800239c:	f04f 0300 	mov.w	r3, #0
 80023a0:	f04f 0400 	mov.w	r4, #0
 80023a4:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
  positionNext.t = 0;
 80023a8:	4aaf      	ldr	r2, [pc, #700]	; (8002668 <StartDefaultTask+0x348>)
 80023aa:	f04f 0300 	mov.w	r3, #0
 80023ae:	f04f 0400 	mov.w	r4, #0
 80023b2:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
  kinematicForward(&positionNext);
 80023b6:	48ac      	ldr	r0, [pc, #688]	; (8002668 <StartDefaultTask+0x348>)
 80023b8:	f000 ffaa 	bl	8003310 <kinematicForward>
  /* Infinite loop */
//Start Timer 7
	  HAL_TIM_Base_Start_IT(&htim7);
 80023bc:	48ac      	ldr	r0, [pc, #688]	; (8002670 <StartDefaultTask+0x350>)
 80023be:	f00a fe9a 	bl	800d0f6 <HAL_TIM_Base_Start_IT>
  for(;;)
  {
	  /*---------Wait for Timer Trigger-----------*/
	  osSignalWait(0x01, osWaitForever); // Very Important
 80023c2:	463b      	mov	r3, r7
 80023c4:	f04f 32ff 	mov.w	r2, #4294967295
 80023c8:	2101      	movs	r1, #1
 80023ca:	4618      	mov	r0, r3
 80023cc:	f00e ffd2 	bl	8011374 <osSignalWait>
	  /* 1--- Reset Value ---*/
	  respond_lenght		= 0;
 80023d0:	2300      	movs	r3, #0
 80023d2:	f8c7 3600 	str.w	r3, [r7, #1536]	; 0x600
	  respond_packed_lenght = 0;
 80023d6:	2300      	movs	r3, #0
 80023d8:	f8c7 35f8 	str.w	r3, [r7, #1528]	; 0x5f8
	  infor_lenght			= 0;
 80023dc:	2300      	movs	r3, #0
 80023de:	f8c7 35fc 	str.w	r3, [r7, #1532]	; 0x5fc
	  infor_packed_lenght	= 0;
 80023e2:	2300      	movs	r3, #0
 80023e4:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
	  task_usb_lenght		= 0;
 80023e8:	2300      	movs	r3, #0
 80023ea:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8
	  usb_lenght			= 0;
 80023ee:	2300      	movs	r3, #0
 80023f0:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
	  // Update new position
	  memcpy(&positionPrevios, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 80023f4:	4a9f      	ldr	r2, [pc, #636]	; (8002674 <StartDefaultTask+0x354>)
 80023f6:	4ba0      	ldr	r3, [pc, #640]	; (8002678 <StartDefaultTask+0x358>)
 80023f8:	4610      	mov	r0, r2
 80023fa:	4619      	mov	r1, r3
 80023fc:	23b8      	movs	r3, #184	; 0xb8
 80023fe:	461a      	mov	r2, r3
 8002400:	f012 fdf6 	bl	8014ff0 <memcpy>
	  memcpy(&positionCurrent, &positionNext, sizeof(SCARA_PositionTypeDef));
 8002404:	4a9c      	ldr	r2, [pc, #624]	; (8002678 <StartDefaultTask+0x358>)
 8002406:	4b98      	ldr	r3, [pc, #608]	; (8002668 <StartDefaultTask+0x348>)
 8002408:	4610      	mov	r0, r2
 800240a:	4619      	mov	r1, r3
 800240c:	23b8      	movs	r3, #184	; 0xb8
 800240e:	461a      	mov	r2, r3
 8002410:	f012 fdee 	bl	8014ff0 <memcpy>
#ifndef SIMULATION
	  if(scaraIsScanLimit()) {
 8002414:	f006 ff5e 	bl	80092d4 <scaraIsScanLimit>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d017      	beq.n	800244e <StartDefaultTask+0x12e>
		  lowlayer_readTruePosition(&positionTrue);
 800241e:	4897      	ldr	r0, [pc, #604]	; (800267c <StartDefaultTask+0x35c>)
 8002420:	f001 fe66 	bl	80040f0 <lowlayer_readTruePosition>
		  kinematicForward(&positionTrue);
 8002424:	4895      	ldr	r0, [pc, #596]	; (800267c <StartDefaultTask+0x35c>)
 8002426:	f000 ff73 	bl	8003310 <kinematicForward>
		  positionTrue.t = positionCurrent.t;
 800242a:	4b93      	ldr	r3, [pc, #588]	; (8002678 <StartDefaultTask+0x358>)
 800242c:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8002430:	4a92      	ldr	r2, [pc, #584]	; (800267c <StartDefaultTask+0x35c>)
 8002432:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
		  positionTrue.total_time = positionCurrent.total_time;
 8002436:	4b90      	ldr	r3, [pc, #576]	; (8002678 <StartDefaultTask+0x358>)
 8002438:	e9d3 3410 	ldrd	r3, r4, [r3, #64]	; 0x40
 800243c:	4a8f      	ldr	r2, [pc, #572]	; (800267c <StartDefaultTask+0x35c>)
 800243e:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
		  positionTrue.q = positionCurrent.q;
 8002442:	4b8d      	ldr	r3, [pc, #564]	; (8002678 <StartDefaultTask+0x358>)
 8002444:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002448:	4a8c      	ldr	r2, [pc, #560]	; (800267c <StartDefaultTask+0x35c>)
 800244a:	e9c2 3400 	strd	r3, r4, [r2]
	  }
#endif
	  /* 2--- Check New Duty Phase ---*/
	  // Check mail
	  ret_mail = osMailGet(commandMailHandle, 0);
 800244e:	4b8c      	ldr	r3, [pc, #560]	; (8002680 <StartDefaultTask+0x360>)
 8002450:	6819      	ldr	r1, [r3, #0]
 8002452:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8002456:	2200      	movs	r2, #0
 8002458:	4618      	mov	r0, r3
 800245a:	f00f fa1f 	bl	801189c <osMailGet>
	  if ( ret_mail.status == osEventMail) {
 800245e:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	; 0x5d0
 8002462:	2b20      	cmp	r3, #32
 8002464:	d116      	bne.n	8002494 <StartDefaultTask+0x174>
		   dataMail = ret_mail.value.p;
 8002466:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 800246a:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
		   memcpy( &duty_cmd, dataMail, sizeof(DUTY_Command_TypeDef));
 800246e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002472:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
 8002476:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 800247a:	4618      	mov	r0, r3
 800247c:	f012 fdb8 	bl	8014ff0 <memcpy>
		   isNewDuty = TRUE;
 8002480:	2301      	movs	r3, #1
 8002482:	f887 3607 	strb.w	r3, [r7, #1543]	; 0x607
		   osMailFree(commandMailHandle, dataMail);/* free memory allocated for mail */
 8002486:	4b7e      	ldr	r3, [pc, #504]	; (8002680 <StartDefaultTask+0x360>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 800248e:	4618      	mov	r0, r3
 8002490:	f00f fa78 	bl	8011984 <osMailFree>
	  }
	  if(isNewDuty) {
 8002494:	f897 3607 	ldrb.w	r3, [r7, #1543]	; 0x607
 8002498:	2b00      	cmp	r3, #0
 800249a:	f000 8145 	beq.w	8002728 <StartDefaultTask+0x408>
		  memset(respond, 0, 40);
 800249e:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80024a2:	2228      	movs	r2, #40	; 0x28
 80024a4:	2100      	movs	r1, #0
 80024a6:	4618      	mov	r0, r3
 80024a8:	f012 fdc6 	bl	8015038 <memset>
		  // Check change method
		  if (duty_cmd.change_method == TRUE) {
 80024ac:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d13c      	bne.n	8002530 <StartDefaultTask+0x210>
			  if (SCARA_METHOD_MANUAL == duty_cmd.robot_method) {
 80024b6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80024ba:	785b      	ldrb	r3, [r3, #1]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d10e      	bne.n	80024de <StartDefaultTask+0x1be>
				  current_method = SCARA_METHOD_MANUAL;
 80024c0:	2300      	movs	r3, #0
 80024c2:	f887 35f3 	strb.w	r3, [r7, #1523]	; 0x5f3
				  respond_lenght = commandRespond(RPD_OK,
 80024c6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80024ca:	6859      	ldr	r1, [r3, #4]
 80024cc:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80024d0:	4a6c      	ldr	r2, [pc, #432]	; (8002684 <StartDefaultTask+0x364>)
 80024d2:	2008      	movs	r0, #8
 80024d4:	f7ff fa72 	bl	80019bc <commandRespond>
 80024d8:	f8c7 0600 	str.w	r0, [r7, #1536]	; 0x600
 80024dc:	e121      	b.n	8002722 <StartDefaultTask+0x402>
												duty_cmd.id_command,
												"Changed MANUAL Method",
												(char *)respond);
			  } else if (SCARA_METHOD_SEMI_AUTO == duty_cmd.robot_method) {
 80024de:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80024e2:	785b      	ldrb	r3, [r3, #1]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d10e      	bne.n	8002506 <StartDefaultTask+0x1e6>
				  current_method = SCARA_METHOD_SEMI_AUTO;
 80024e8:	2301      	movs	r3, #1
 80024ea:	f887 35f3 	strb.w	r3, [r7, #1523]	; 0x5f3
				  respond_lenght = commandRespond(RPD_OK,
 80024ee:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80024f2:	6859      	ldr	r1, [r3, #4]
 80024f4:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80024f8:	4a63      	ldr	r2, [pc, #396]	; (8002688 <StartDefaultTask+0x368>)
 80024fa:	2008      	movs	r0, #8
 80024fc:	f7ff fa5e 	bl	80019bc <commandRespond>
 8002500:	f8c7 0600 	str.w	r0, [r7, #1536]	; 0x600
 8002504:	e10d      	b.n	8002722 <StartDefaultTask+0x402>
												duty_cmd.id_command,
												"Changed SEMI AUTO Method",
												(char *)respond);
			  } else if (SCARA_METHOD_AUTO == duty_cmd.robot_method) {
 8002506:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800250a:	785b      	ldrb	r3, [r3, #1]
 800250c:	2b02      	cmp	r3, #2
 800250e:	f040 8108 	bne.w	8002722 <StartDefaultTask+0x402>
				  current_method = SCARA_METHOD_AUTO;
 8002512:	2302      	movs	r3, #2
 8002514:	f887 35f3 	strb.w	r3, [r7, #1523]	; 0x5f3
				  respond_lenght = commandRespond(RPD_OK,
 8002518:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800251c:	6859      	ldr	r1, [r3, #4]
 800251e:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8002522:	4a5a      	ldr	r2, [pc, #360]	; (800268c <StartDefaultTask+0x36c>)
 8002524:	2008      	movs	r0, #8
 8002526:	f7ff fa49 	bl	80019bc <commandRespond>
 800252a:	f8c7 0600 	str.w	r0, [r7, #1536]	; 0x600
 800252e:	e0f8      	b.n	8002722 <StartDefaultTask+0x402>
												"Changed AUTO Method",
												(char *)respond);
			  }
		  } else {
			  	  // Check current method & cmd method
			  	  if (current_method == duty_cmd.robot_method) {
 8002530:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002534:	785b      	ldrb	r3, [r3, #1]
 8002536:	f897 25f3 	ldrb.w	r2, [r7, #1523]	; 0x5f3
 800253a:	429a      	cmp	r2, r3
 800253c:	f040 80e2 	bne.w	8002704 <StartDefaultTask+0x3e4>
				  	  switch( duty_cmd.robot_method) {
 8002540:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002544:	785b      	ldrb	r3, [r3, #1]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d023      	beq.n	8002592 <StartDefaultTask+0x272>
 800254a:	2b02      	cmp	r3, #2
 800254c:	f000 80e6 	beq.w	800271c <StartDefaultTask+0x3fc>
 8002550:	2b00      	cmp	r3, #0
 8002552:	f040 80d1 	bne.w	80026f8 <StartDefaultTask+0x3d8>
				  	  case SCARA_METHOD_MANUAL:
				  	  {
				  		  if (current_key_state == SCARA_KEY_STATE_READY) {
 8002556:	f897 35ef 	ldrb.w	r3, [r7, #1519]	; 0x5ef
 800255a:	2b00      	cmp	r3, #0
 800255c:	d108      	bne.n	8002570 <StartDefaultTask+0x250>
				  			  current_key = duty_cmd.keyboard;
 800255e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002562:	78db      	ldrb	r3, [r3, #3]
 8002564:	f887 35ee 	strb.w	r3, [r7, #1518]	; 0x5ee
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Init new path
 8002568:	2301      	movs	r3, #1
 800256a:	f887 35ef 	strb.w	r3, [r7, #1519]	; 0x5ef
				  		  } else if (current_key == duty_cmd.keyboard && current_key_state == SCARA_KEY_STATE_FLOW) {
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Continue old path
				  		  }
				  	  }
				  	  break;
 800256e:	e0d7      	b.n	8002720 <StartDefaultTask+0x400>
				  		  } else if (current_key == duty_cmd.keyboard && current_key_state == SCARA_KEY_STATE_FLOW) {
 8002570:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002574:	78db      	ldrb	r3, [r3, #3]
 8002576:	f897 25ee 	ldrb.w	r2, [r7, #1518]	; 0x5ee
 800257a:	429a      	cmp	r2, r3
 800257c:	f040 80d0 	bne.w	8002720 <StartDefaultTask+0x400>
 8002580:	f897 35ef 	ldrb.w	r3, [r7, #1519]	; 0x5ef
 8002584:	2b02      	cmp	r3, #2
 8002586:	f040 80cb 	bne.w	8002720 <StartDefaultTask+0x400>
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Continue old path
 800258a:	2301      	movs	r3, #1
 800258c:	f887 35ef 	strb.w	r3, [r7, #1519]	; 0x5ef
				  	  break;
 8002590:	e0c6      	b.n	8002720 <StartDefaultTask+0x400>
				  	  case SCARA_METHOD_SEMI_AUTO:
				  	  {
						  switch( duty_cmd.robot_mode) {
 8002592:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002596:	789b      	ldrb	r3, [r3, #2]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d018      	beq.n	80025ce <StartDefaultTask+0x2ae>
 800259c:	2b02      	cmp	r3, #2
 800259e:	d041      	beq.n	8002624 <StartDefaultTask+0x304>
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f040 80a2 	bne.w	80026ea <StartDefaultTask+0x3ca>
						  case SCARA_MODE_STOP:
							  {
								  current_mode	 = SCARA_MODE_STOP;
 80025a6:	2300      	movs	r3, #0
 80025a8:	f887 35f2 	strb.w	r3, [r7, #1522]	; 0x5f2
								  respond_lenght = commandRespond(RPD_OK,
 80025ac:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80025b0:	6859      	ldr	r1, [r3, #4]
 80025b2:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80025b6:	4a36      	ldr	r2, [pc, #216]	; (8002690 <StartDefaultTask+0x370>)
 80025b8:	2008      	movs	r0, #8
 80025ba:	f7ff f9ff 	bl	80019bc <commandRespond>
 80025be:	f8c7 0600 	str.w	r0, [r7, #1536]	; 0x600
																  duty_cmd.id_command,
																  "Stop Now",
																  (char *)respond);
								  LOG_REPORT("ROBOT STOP !!!", __LINE__);
 80025c2:	f240 112f 	movw	r1, #303	; 0x12f
 80025c6:	4833      	ldr	r0, [pc, #204]	; (8002694 <StartDefaultTask+0x374>)
 80025c8:	f7ff fa48 	bl	8001a5c <LOG_REPORT>
							  }
							  break;
 80025cc:	e093      	b.n	80026f6 <StartDefaultTask+0x3d6>

						  case SCARA_MODE_SCAN:
							  {
								  if (SCARA_MODE_DUTY == current_mode
 80025ce:	f897 35f2 	ldrb.w	r3, [r7, #1522]	; 0x5f2
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d115      	bne.n	8002602 <StartDefaultTask+0x2e2>
									  && SCARA_DUTY_STATE_READY == current_duty_state) {
 80025d6:	f897 35f1 	ldrb.w	r3, [r7, #1521]	; 0x5f1
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d111      	bne.n	8002602 <StartDefaultTask+0x2e2>
									  current_mode = SCARA_MODE_SCAN;
 80025de:	2301      	movs	r3, #1
 80025e0:	f887 35f2 	strb.w	r3, [r7, #1522]	; 0x5f2
									  current_scan_state = SCARA_SCAN_STATE_INIT;
 80025e4:	2300      	movs	r3, #0
 80025e6:	f887 35f0 	strb.w	r3, [r7, #1520]	; 0x5f0
									  respond_lenght = commandRespond(RPD_OK,
 80025ea:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80025ee:	6859      	ldr	r1, [r3, #4]
 80025f0:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80025f4:	4a28      	ldr	r2, [pc, #160]	; (8002698 <StartDefaultTask+0x378>)
 80025f6:	2008      	movs	r0, #8
 80025f8:	f7ff f9e0 	bl	80019bc <commandRespond>
 80025fc:	f8c7 0600 	str.w	r0, [r7, #1536]	; 0x600
																	  "Busy",
																	  (char *)respond);
									  LOG_REPORT("SCAN FAIL: BUSY", __LINE__);
								  }
							  }
							  break;
 8002600:	e079      	b.n	80026f6 <StartDefaultTask+0x3d6>
									  respond_lenght = commandRespond(RPD_ERROR,
 8002602:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002606:	6859      	ldr	r1, [r3, #4]
 8002608:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800260c:	4a23      	ldr	r2, [pc, #140]	; (800269c <StartDefaultTask+0x37c>)
 800260e:	2007      	movs	r0, #7
 8002610:	f7ff f9d4 	bl	80019bc <commandRespond>
 8002614:	f8c7 0600 	str.w	r0, [r7, #1536]	; 0x600
									  LOG_REPORT("SCAN FAIL: BUSY", __LINE__);
 8002618:	f44f 71a1 	mov.w	r1, #322	; 0x142
 800261c:	4820      	ldr	r0, [pc, #128]	; (80026a0 <StartDefaultTask+0x380>)
 800261e:	f7ff fa1d 	bl	8001a5c <LOG_REPORT>
							  break;
 8002622:	e068      	b.n	80026f6 <StartDefaultTask+0x3d6>

						  case SCARA_MODE_DUTY:
							  {
								  if (SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_duty_state) {
 8002624:	f897 35f2 	ldrb.w	r3, [r7, #1522]	; 0x5f2
 8002628:	2b02      	cmp	r3, #2
 800262a:	d14c      	bne.n	80026c6 <StartDefaultTask+0x3a6>
 800262c:	f897 35f1 	ldrb.w	r3, [r7, #1521]	; 0x5f1
 8002630:	2b00      	cmp	r3, #0
 8002632:	d148      	bne.n	80026c6 <StartDefaultTask+0x3a6>
									  if (scaraIsScanLimit()) {
 8002634:	f006 fe4e 	bl	80092d4 <scaraIsScanLimit>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d032      	beq.n	80026a4 <StartDefaultTask+0x384>
										  current_mode	 = SCARA_MODE_DUTY;
 800263e:	2302      	movs	r3, #2
 8002640:	f887 35f2 	strb.w	r3, [r7, #1522]	; 0x5f2
										  current_duty_state	 = SCARA_DUTY_STATE_INIT;
 8002644:	2301      	movs	r3, #1
 8002646:	f887 35f1 	strb.w	r3, [r7, #1521]	; 0x5f1
									  if (scaraIsScanLimit()) {
 800264a:	e04d      	b.n	80026e8 <StartDefaultTask+0x3c8>
 800264c:	f3af 8000 	nop.w
 8002650:	40000000 	.word	0x40000000
 8002654:	bff0c152 	.word	0xbff0c152
 8002658:	40000000 	.word	0x40000000
 800265c:	3ff0c152 	.word	0x3ff0c152
 8002660:	40020400 	.word	0x40020400
 8002664:	0801af98 	.word	0x0801af98
 8002668:	20005ff8 	.word	0x20005ff8
 800266c:	40240000 	.word	0x40240000
 8002670:	200060f0 	.word	0x200060f0
 8002674:	20005d18 	.word	0x20005d18
 8002678:	20005e88 	.word	0x20005e88
 800267c:	20005f40 	.word	0x20005f40
 8002680:	2000530c 	.word	0x2000530c
 8002684:	0801afb8 	.word	0x0801afb8
 8002688:	0801afd0 	.word	0x0801afd0
 800268c:	0801afec 	.word	0x0801afec
 8002690:	0801b000 	.word	0x0801b000
 8002694:	0801b00c 	.word	0x0801b00c
 8002698:	0801b01c 	.word	0x0801b01c
 800269c:	0801b028 	.word	0x0801b028
 80026a0:	0801b030 	.word	0x0801b030
									  } else {
										  respond_lenght = commandRespond(RPD_ERROR,
 80026a4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80026a8:	6859      	ldr	r1, [r3, #4]
 80026aa:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80026ae:	4ad0      	ldr	r2, [pc, #832]	; (80029f0 <StartDefaultTask+0x6d0>)
 80026b0:	2007      	movs	r0, #7
 80026b2:	f7ff f983 	bl	80019bc <commandRespond>
 80026b6:	f8c7 0600 	str.w	r0, [r7, #1536]	; 0x600
																		  duty_cmd.id_command,
																		  "Has Not Scan Yet.",
																		  (char *)respond);
										  LOG_REPORT("MOVE FAIL:NOT SCAN", __LINE__);
 80026ba:	f44f 71a9 	mov.w	r1, #338	; 0x152
 80026be:	48cd      	ldr	r0, [pc, #820]	; (80029f4 <StartDefaultTask+0x6d4>)
 80026c0:	f7ff f9cc 	bl	8001a5c <LOG_REPORT>
									  if (scaraIsScanLimit()) {
 80026c4:	e010      	b.n	80026e8 <StartDefaultTask+0x3c8>
									  }
								  } else {
									  respond_lenght	= commandRespond(RPD_ERROR,
 80026c6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80026ca:	6859      	ldr	r1, [r3, #4]
 80026cc:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80026d0:	4ac9      	ldr	r2, [pc, #804]	; (80029f8 <StartDefaultTask+0x6d8>)
 80026d2:	2007      	movs	r0, #7
 80026d4:	f7ff f972 	bl	80019bc <commandRespond>
 80026d8:	f8c7 0600 	str.w	r0, [r7, #1536]	; 0x600
																		  duty_cmd.id_command,
																		  "Busy.",
																		  (char *)respond);
									  LOG_REPORT("MOVE FAIL:BUSY", __LINE__);
 80026dc:	f240 1159 	movw	r1, #345	; 0x159
 80026e0:	48c6      	ldr	r0, [pc, #792]	; (80029fc <StartDefaultTask+0x6dc>)
 80026e2:	f7ff f9bb 	bl	8001a5c <LOG_REPORT>
								  }
							  }
							  break;
 80026e6:	e006      	b.n	80026f6 <StartDefaultTask+0x3d6>
 80026e8:	e005      	b.n	80026f6 <StartDefaultTask+0x3d6>
						  default:
							  {
								  LOG_REPORT("CMD Error Mode !!!", __LINE__);
 80026ea:	f240 115f 	movw	r1, #351	; 0x15f
 80026ee:	48c4      	ldr	r0, [pc, #784]	; (8002a00 <StartDefaultTask+0x6e0>)
 80026f0:	f7ff f9b4 	bl	8001a5c <LOG_REPORT>
							  }
						  }
					  }
					  break;
 80026f4:	e015      	b.n	8002722 <StartDefaultTask+0x402>
 80026f6:	e014      	b.n	8002722 <StartDefaultTask+0x402>

				  	  }
				  	  break;
				  	  default:
				  	  {
				  		  LOG_REPORT("CMD Error Method !!!", __LINE__);
 80026f8:	f240 116b 	movw	r1, #363	; 0x16b
 80026fc:	48c1      	ldr	r0, [pc, #772]	; (8002a04 <StartDefaultTask+0x6e4>)
 80026fe:	f7ff f9ad 	bl	8001a5c <LOG_REPORT>
 8002702:	e00e      	b.n	8002722 <StartDefaultTask+0x402>
				  	  }
				  	  }
			  	  } else {
					  respond_lenght = commandRespond(RPD_ERROR,
 8002704:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002708:	6859      	ldr	r1, [r3, #4]
 800270a:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800270e:	4abe      	ldr	r2, [pc, #760]	; (8002a08 <StartDefaultTask+0x6e8>)
 8002710:	2007      	movs	r0, #7
 8002712:	f7ff f953 	bl	80019bc <commandRespond>
 8002716:	f8c7 0600 	str.w	r0, [r7, #1536]	; 0x600
 800271a:	e002      	b.n	8002722 <StartDefaultTask+0x402>
				  	  break;
 800271c:	bf00      	nop
 800271e:	e000      	b.n	8002722 <StartDefaultTask+0x402>
				  	  break;
 8002720:	bf00      	nop
													"METHOD isn't correct",
													(char *)respond);
			  	  }

			  }
		  isNewDuty = FALSE;
 8002722:	2300      	movs	r3, #0
 8002724:	f887 3607 	strb.w	r3, [r7, #1543]	; 0x607
	  }

	  /* 3--- Execute Phase ---*/
	  switch(current_method) {
 8002728:	f897 35f3 	ldrb.w	r3, [r7, #1523]	; 0x5f3
 800272c:	2b01      	cmp	r3, #1
 800272e:	f000 80dd 	beq.w	80028ec <StartDefaultTask+0x5cc>
 8002732:	2b02      	cmp	r3, #2
 8002734:	f000 82b7 	beq.w	8002ca6 <StartDefaultTask+0x986>
 8002738:	2b00      	cmp	r3, #0
 800273a:	f040 82b7 	bne.w	8002cac <StartDefaultTask+0x98c>
	  case SCARA_METHOD_MANUAL:
	  {
		  switch( current_key_state) {
 800273e:	f897 35ef 	ldrb.w	r3, [r7, #1519]	; 0x5ef
 8002742:	2b03      	cmp	r3, #3
 8002744:	f200 82b1 	bhi.w	8002caa <StartDefaultTask+0x98a>
 8002748:	a201      	add	r2, pc, #4	; (adr r2, 8002750 <StartDefaultTask+0x430>)
 800274a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800274e:	bf00      	nop
 8002750:	080028e9 	.word	0x080028e9
 8002754:	08002761 	.word	0x08002761
 8002758:	080027b9 	.word	0x080027b9
 800275c:	080028b7 	.word	0x080028b7
		  case SCARA_KEY_STATE_READY:
			  /* Wait for application keyboard , do nothing*/
		  break;
		  case SCARA_KEY_STATE_INIT:
		  {
			  if (scaraKeyInit(current_key, &run_time) == SCARA_STATUS_OK) {
 8002760:	f107 0218 	add.w	r2, r7, #24
 8002764:	f897 35ee 	ldrb.w	r3, [r7, #1518]	; 0x5ee
 8002768:	4611      	mov	r1, r2
 800276a:	4618      	mov	r0, r3
 800276c:	f006 fefc 	bl	8009568 <scaraKeyInit>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d11c      	bne.n	80027b0 <StartDefaultTask+0x490>
				  current_key_state = SCARA_KEY_STATE_FLOW;
 8002776:	2302      	movs	r3, #2
 8002778:	f887 35ef 	strb.w	r3, [r7, #1519]	; 0x5ef
#ifdef SIMULATION
				  scaraPosition2String((char *)position, positionCurrent);
#else
				  scaraPosition2String((char *)position, positionTrue);
 800277c:	4ca3      	ldr	r4, [pc, #652]	; (8002a0c <StartDefaultTask+0x6ec>)
 800277e:	f507 755e 	add.w	r5, r7, #888	; 0x378
 8002782:	4668      	mov	r0, sp
 8002784:	f104 0308 	add.w	r3, r4, #8
 8002788:	22b0      	movs	r2, #176	; 0xb0
 800278a:	4619      	mov	r1, r3
 800278c:	f012 fc30 	bl	8014ff0 <memcpy>
 8002790:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002794:	4628      	mov	r0, r5
 8002796:	f006 fdd7 	bl	8009348 <scaraPosition2String>
#endif
				  infor_lenght 		= commandRespond(RPD_START,
 800279a:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 800279e:	f507 725e 	add.w	r2, r7, #888	; 0x378
 80027a2:	2100      	movs	r1, #0
 80027a4:	2003      	movs	r0, #3
 80027a6:	f7ff f909 	bl	80019bc <commandRespond>
 80027aa:	f8c7 05fc 	str.w	r0, [r7, #1532]	; 0x5fc
													  (char *)infor);
			  } else {
				  current_key_state = SCARA_KEY_STATE_READY;
			  }
		  }
		  break;
 80027ae:	e09c      	b.n	80028ea <StartDefaultTask+0x5ca>
				  current_key_state = SCARA_KEY_STATE_READY;
 80027b0:	2300      	movs	r3, #0
 80027b2:	f887 35ef 	strb.w	r3, [r7, #1519]	; 0x5ef
		  break;
 80027b6:	e098      	b.n	80028ea <StartDefaultTask+0x5ca>
		  case SCARA_KEY_STATE_FLOW:
		  {
			  SCARA_StatusTypeDef status;
			  // Increase run time
			  run_time += T_SAMPLING;
 80027b8:	f107 0318 	add.w	r3, r7, #24
 80027bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027c0:	a389      	add	r3, pc, #548	; (adr r3, 80029e8 <StartDefaultTask+0x6c8>)
 80027c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c6:	f7fd fd71 	bl	80002ac <__adddf3>
 80027ca:	4603      	mov	r3, r0
 80027cc:	460c      	mov	r4, r1
 80027ce:	f107 0218 	add.w	r2, r7, #24
 80027d2:	e9c2 3400 	strd	r3, r4, [r2]
			  // Check Time Out
			  if (scaraIsFinish(run_time)) {
 80027d6:	f107 0318 	add.w	r3, r7, #24
 80027da:	ed93 7b00 	vldr	d7, [r3]
 80027de:	eeb0 0a47 	vmov.f32	s0, s14
 80027e2:	eef0 0a67 	vmov.f32	s1, s15
 80027e6:	f006 fd83 	bl	80092f0 <scaraIsFinish>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d003      	beq.n	80027f8 <StartDefaultTask+0x4d8>
				  current_key_state = SCARA_KEY_STATE_FINISH;// Key Done
 80027f0:	2303      	movs	r3, #3
 80027f2:	f887 35ef 	strb.w	r3, [r7, #1519]	; 0x5ef
													(char *)infor);
					  LOG_REPORT("STOP KEY", __LINE__);
				  }
			  }
		  }
		  break;
 80027f6:	e078      	b.n	80028ea <StartDefaultTask+0x5ca>
				  status = scaraKeyFlow(run_time, &positionNext, positionCurrent);
 80027f8:	f107 0318 	add.w	r3, r7, #24
 80027fc:	ed93 8b00 	vldr	d8, [r3]
 8002800:	4c83      	ldr	r4, [pc, #524]	; (8002a10 <StartDefaultTask+0x6f0>)
 8002802:	4668      	mov	r0, sp
 8002804:	f104 0308 	add.w	r3, r4, #8
 8002808:	22b0      	movs	r2, #176	; 0xb0
 800280a:	4619      	mov	r1, r3
 800280c:	f012 fbf0 	bl	8014ff0 <memcpy>
 8002810:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002814:	487f      	ldr	r0, [pc, #508]	; (8002a14 <StartDefaultTask+0x6f4>)
 8002816:	eeb0 0a48 	vmov.f32	s0, s16
 800281a:	eef0 0a68 	vmov.f32	s1, s17
 800281e:	f007 f9d7 	bl	8009bd0 <scaraKeyFlow>
 8002822:	4603      	mov	r3, r0
 8002824:	f887 35dc 	strb.w	r3, [r7, #1500]	; 0x5dc
				  if ( SCARA_STATUS_OK == status) {
 8002828:	f897 35dc 	ldrb.w	r3, [r7, #1500]	; 0x5dc
 800282c:	2b00      	cmp	r3, #0
 800282e:	d12c      	bne.n	800288a <StartDefaultTask+0x56a>
					  lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 8002830:	4c77      	ldr	r4, [pc, #476]	; (8002a10 <StartDefaultTask+0x6f0>)
 8002832:	4a78      	ldr	r2, [pc, #480]	; (8002a14 <StartDefaultTask+0x6f4>)
 8002834:	ab2a      	add	r3, sp, #168	; 0xa8
 8002836:	4611      	mov	r1, r2
 8002838:	22b8      	movs	r2, #184	; 0xb8
 800283a:	4618      	mov	r0, r3
 800283c:	f012 fbd8 	bl	8014ff0 <memcpy>
 8002840:	4668      	mov	r0, sp
 8002842:	f104 0310 	add.w	r3, r4, #16
 8002846:	22a8      	movs	r2, #168	; 0xa8
 8002848:	4619      	mov	r1, r3
 800284a:	f012 fbd1 	bl	8014ff0 <memcpy>
 800284e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002852:	f001 fddd 	bl	8004410 <lowlayer_computeAndWritePulse>
					  scaraPosition2String((char *)position, positionTrue);
 8002856:	4c6d      	ldr	r4, [pc, #436]	; (8002a0c <StartDefaultTask+0x6ec>)
 8002858:	f507 755e 	add.w	r5, r7, #888	; 0x378
 800285c:	4668      	mov	r0, sp
 800285e:	f104 0308 	add.w	r3, r4, #8
 8002862:	22b0      	movs	r2, #176	; 0xb0
 8002864:	4619      	mov	r1, r3
 8002866:	f012 fbc3 	bl	8014ff0 <memcpy>
 800286a:	e894 000c 	ldmia.w	r4, {r2, r3}
 800286e:	4628      	mov	r0, r5
 8002870:	f006 fd6a 	bl	8009348 <scaraPosition2String>
					  infor_lenght = commandRespond(RPD_RUNNING,
 8002874:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8002878:	f507 725e 	add.w	r2, r7, #888	; 0x378
 800287c:	2100      	movs	r1, #0
 800287e:	2004      	movs	r0, #4
 8002880:	f7ff f89c 	bl	80019bc <commandRespond>
 8002884:	f8c7 05fc 	str.w	r0, [r7, #1532]	; 0x5fc
		  break;
 8002888:	e02f      	b.n	80028ea <StartDefaultTask+0x5ca>
					  current_key_state = SCARA_KEY_STATE_FINISH;
 800288a:	2303      	movs	r3, #3
 800288c:	f887 35ef 	strb.w	r3, [r7, #1519]	; 0x5ef
					  infor_lenght = commandRespond(RPD_STOP,
 8002890:	f897 35dc 	ldrb.w	r3, [r7, #1500]	; 0x5dc
													(char *)DETAIL_STATUS[status],
 8002894:	4a60      	ldr	r2, [pc, #384]	; (8002a18 <StartDefaultTask+0x6f8>)
 8002896:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
					  infor_lenght = commandRespond(RPD_STOP,
 800289a:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 800289e:	2100      	movs	r1, #0
 80028a0:	2006      	movs	r0, #6
 80028a2:	f7ff f88b 	bl	80019bc <commandRespond>
 80028a6:	f8c7 05fc 	str.w	r0, [r7, #1532]	; 0x5fc
					  LOG_REPORT("STOP KEY", __LINE__);
 80028aa:	f240 11b1 	movw	r1, #433	; 0x1b1
 80028ae:	485b      	ldr	r0, [pc, #364]	; (8002a1c <StartDefaultTask+0x6fc>)
 80028b0:	f7ff f8d4 	bl	8001a5c <LOG_REPORT>
		  break;
 80028b4:	e019      	b.n	80028ea <StartDefaultTask+0x5ca>
		  case SCARA_KEY_STATE_FINISH:
		  {
			  current_key_state = SCARA_KEY_STATE_READY;
 80028b6:	2300      	movs	r3, #0
 80028b8:	f887 35ef 	strb.w	r3, [r7, #1519]	; 0x5ef
			  positionNext.t = 0;
 80028bc:	4a55      	ldr	r2, [pc, #340]	; (8002a14 <StartDefaultTask+0x6f4>)
 80028be:	f04f 0300 	mov.w	r3, #0
 80028c2:	f04f 0400 	mov.w	r4, #0
 80028c6:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
			  positionNext.total_time = 0;
 80028ca:	4a52      	ldr	r2, [pc, #328]	; (8002a14 <StartDefaultTask+0x6f4>)
 80028cc:	f04f 0300 	mov.w	r3, #0
 80028d0:	f04f 0400 	mov.w	r4, #0
 80028d4:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
			  positionNext.q = 0;
 80028d8:	4a4e      	ldr	r2, [pc, #312]	; (8002a14 <StartDefaultTask+0x6f4>)
 80028da:	f04f 0300 	mov.w	r3, #0
 80028de:	f04f 0400 	mov.w	r4, #0
 80028e2:	e9c2 3400 	strd	r3, r4, [r2]
		  }
		  break;
 80028e6:	e000      	b.n	80028ea <StartDefaultTask+0x5ca>
		  break;
 80028e8:	bf00      	nop
		  }
	  }
	  break;
 80028ea:	e1de      	b.n	8002caa <StartDefaultTask+0x98a>

	  case SCARA_METHOD_SEMI_AUTO:
	  {
		  switch( current_mode) {
 80028ec:	f897 35f2 	ldrb.w	r3, [r7, #1522]	; 0x5f2
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d00b      	beq.n	800290c <StartDefaultTask+0x5ec>
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d064      	beq.n	80029c2 <StartDefaultTask+0x6a2>
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	f040 81cd 	bne.w	8002c98 <StartDefaultTask+0x978>
		  case SCARA_MODE_STOP:
			  {
				  current_mode 	= SCARA_MODE_DUTY;
 80028fe:	2302      	movs	r3, #2
 8002900:	f887 35f2 	strb.w	r3, [r7, #1522]	; 0x5f2
				  current_duty_state = SCARA_DUTY_STATE_READY;
 8002904:	2300      	movs	r3, #0
 8002906:	f887 35f1 	strb.w	r3, [r7, #1521]	; 0x5f1
			  }
			  break;
 800290a:	e1cb      	b.n	8002ca4 <StartDefaultTask+0x984>

		  case SCARA_MODE_SCAN:
			  {
				  switch (current_scan_state) {
 800290c:	f897 35f0 	ldrb.w	r3, [r7, #1520]	; 0x5f0
 8002910:	2b03      	cmp	r3, #3
 8002912:	d84c      	bhi.n	80029ae <StartDefaultTask+0x68e>
 8002914:	a201      	add	r2, pc, #4	; (adr r2, 800291c <StartDefaultTask+0x5fc>)
 8002916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800291a:	bf00      	nop
 800291c:	0800292d 	.word	0x0800292d
 8002920:	08002939 	.word	0x08002939
 8002924:	0800294b 	.word	0x0800294b
 8002928:	0800295f 	.word	0x0800295f
				  case SCARA_SCAN_STATE_INIT:
					  {
						  lowlayer_scanReset();
 800292c:	f001 f9d8 	bl	8003ce0 <lowlayer_scanReset>
						  current_scan_state = SCARA_SCAN_STATE_HARD;
 8002930:	2301      	movs	r3, #1
 8002932:	f887 35f0 	strb.w	r3, [r7, #1520]	; 0x5f0
					  }
					  break;
 8002936:	e043      	b.n	80029c0 <StartDefaultTask+0x6a0>
				  case SCARA_SCAN_STATE_HARD:
					  {
						  if(lowlayer_scanFlow()) {
 8002938:	f001 fa02 	bl	8003d40 <lowlayer_scanFlow>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d03b      	beq.n	80029ba <StartDefaultTask+0x69a>
							  current_scan_state = SCARA_SCAN_STATE_SOFT;
 8002942:	2302      	movs	r3, #2
 8002944:	f887 35f0 	strb.w	r3, [r7, #1520]	; 0x5f0
						  }
					  }
					  break;
 8002948:	e037      	b.n	80029ba <StartDefaultTask+0x69a>
				  case SCARA_SCAN_STATE_SOFT:
					  {
						  if(lowlayer_goToSoftLimit(&positionNext)) {
 800294a:	4832      	ldr	r0, [pc, #200]	; (8002a14 <StartDefaultTask+0x6f4>)
 800294c:	f001 fb54 	bl	8003ff8 <lowlayer_goToSoftLimit>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d033      	beq.n	80029be <StartDefaultTask+0x69e>
							  current_scan_state = SCARA_SCAN_STATE_FINISH;
 8002956:	2303      	movs	r3, #3
 8002958:	f887 35f0 	strb.w	r3, [r7, #1520]	; 0x5f0
							}
					  }
					  break;
 800295c:	e02f      	b.n	80029be <StartDefaultTask+0x69e>
				  case SCARA_SCAN_STATE_FINISH:
					  {
						  lowlayer_readSetPosition(&positionNext);
 800295e:	482d      	ldr	r0, [pc, #180]	; (8002a14 <StartDefaultTask+0x6f4>)
 8002960:	f001 fca2 	bl	80042a8 <lowlayer_readSetPosition>
						  current_mode 	= SCARA_MODE_DUTY;
 8002964:	2302      	movs	r3, #2
 8002966:	f887 35f2 	strb.w	r3, [r7, #1522]	; 0x5f2
						  current_duty_state = SCARA_DUTY_STATE_READY;
 800296a:	2300      	movs	r3, #0
 800296c:	f887 35f1 	strb.w	r3, [r7, #1521]	; 0x5f1
						  kinematicForward(&positionNext);
 8002970:	4828      	ldr	r0, [pc, #160]	; (8002a14 <StartDefaultTask+0x6f4>)
 8002972:	f000 fccd 	bl	8003310 <kinematicForward>
						  scaraSetScanFlag();
 8002976:	f006 fc3b 	bl	80091f0 <scaraSetScanFlag>
						  //Done Inform
						  scaraPosition2String((char *)position, positionNext);
 800297a:	4c26      	ldr	r4, [pc, #152]	; (8002a14 <StartDefaultTask+0x6f4>)
 800297c:	f507 755e 	add.w	r5, r7, #888	; 0x378
 8002980:	4668      	mov	r0, sp
 8002982:	f104 0308 	add.w	r3, r4, #8
 8002986:	22b0      	movs	r2, #176	; 0xb0
 8002988:	4619      	mov	r1, r3
 800298a:	f012 fb31 	bl	8014ff0 <memcpy>
 800298e:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002992:	4628      	mov	r0, r5
 8002994:	f006 fcd8 	bl	8009348 <scaraPosition2String>
						  infor_lenght 		= commandRespond(RPD_DONE,
 8002998:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 800299c:	f507 725e 	add.w	r2, r7, #888	; 0x378
 80029a0:	2100      	movs	r1, #0
 80029a2:	2005      	movs	r0, #5
 80029a4:	f7ff f80a 	bl	80019bc <commandRespond>
 80029a8:	f8c7 05fc 	str.w	r0, [r7, #1532]	; 0x5fc
															 0,
															(char *)position,
															(char *)infor);
					  }
					  break;
 80029ac:	e008      	b.n	80029c0 <StartDefaultTask+0x6a0>
				  default:
					  {
						  LOG_REPORT("ERROR STATE !!!", __LINE__);
 80029ae:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80029b2:	481b      	ldr	r0, [pc, #108]	; (8002a20 <StartDefaultTask+0x700>)
 80029b4:	f7ff f852 	bl	8001a5c <LOG_REPORT>
						  while(1);
 80029b8:	e7fe      	b.n	80029b8 <StartDefaultTask+0x698>
					  break;
 80029ba:	bf00      	nop
 80029bc:	e172      	b.n	8002ca4 <StartDefaultTask+0x984>
					  break;
 80029be:	bf00      	nop
					  }
				  }

			  }
			  break;
 80029c0:	e170      	b.n	8002ca4 <StartDefaultTask+0x984>

		  case SCARA_MODE_DUTY:
			  {
				  switch (current_duty_state) {
 80029c2:	f897 35f1 	ldrb.w	r3, [r7, #1521]	; 0x5f1
 80029c6:	2b03      	cmp	r3, #3
 80029c8:	f200 815f 	bhi.w	8002c8a <StartDefaultTask+0x96a>
 80029cc:	a201      	add	r2, pc, #4	; (adr r2, 80029d4 <StartDefaultTask+0x6b4>)
 80029ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029d2:	bf00      	nop
 80029d4:	080029e5 	.word	0x080029e5
 80029d8:	08002a25 	.word	0x08002a25
 80029dc:	08002b29 	.word	0x08002b29
 80029e0:	08002c27 	.word	0x08002c27
				  case SCARA_DUTY_STATE_READY:
					  {
						  // Do nothing();
						  __NOP();
 80029e4:	bf00      	nop
					  }
				  break;
 80029e6:	e156      	b.n	8002c96 <StartDefaultTask+0x976>
 80029e8:	40000000 	.word	0x40000000
 80029ec:	3f847ae1 	.word	0x3f847ae1
 80029f0:	0801b040 	.word	0x0801b040
 80029f4:	0801b054 	.word	0x0801b054
 80029f8:	0801b068 	.word	0x0801b068
 80029fc:	0801b070 	.word	0x0801b070
 8002a00:	0801b080 	.word	0x0801b080
 8002a04:	0801b094 	.word	0x0801b094
 8002a08:	0801b0ac 	.word	0x0801b0ac
 8002a0c:	20005f40 	.word	0x20005f40
 8002a10:	20005e88 	.word	0x20005e88
 8002a14:	20005ff8 	.word	0x20005ff8
 8002a18:	20000ca8 	.word	0x20000ca8
 8002a1c:	0801b0c4 	.word	0x0801b0c4
 8002a20:	0801b0d0 	.word	0x0801b0d0

				  case SCARA_DUTY_STATE_INIT:
					  {
						  SCARA_StatusTypeDef status1, status2;
						  status1 = scaraInitDuty(duty_cmd);
 8002a24:	f507 6485 	add.w	r4, r7, #1064	; 0x428
 8002a28:	4668      	mov	r0, sp
 8002a2a:	f104 0310 	add.w	r3, r4, #16
 8002a2e:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8002a32:	4619      	mov	r1, r3
 8002a34:	f012 fadc 	bl	8014ff0 <memcpy>
 8002a38:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002a3c:	f002 f880 	bl	8004b40 <scaraInitDuty>
 8002a40:	4603      	mov	r3, r0
 8002a42:	f887 35de 	strb.w	r3, [r7, #1502]	; 0x5de
						  if ( SCARA_STATUS_OK == status1) {
 8002a46:	f897 35de 	ldrb.w	r3, [r7, #1502]	; 0x5de
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d154      	bne.n	8002af8 <StartDefaultTask+0x7d8>
							  status2 = scaraTestDuty();
 8002a4e:	f006 fb53 	bl	80090f8 <scaraTestDuty>
 8002a52:	4603      	mov	r3, r0
 8002a54:	f887 35dd 	strb.w	r3, [r7, #1501]	; 0x5dd
							  if (SCARA_STATUS_OK == status2) {
 8002a58:	f897 35dd 	ldrb.w	r3, [r7, #1501]	; 0x5dd
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d133      	bne.n	8002ac8 <StartDefaultTask+0x7a8>
							  current_duty_state		= SCARA_DUTY_STATE_FLOW;
 8002a60:	2302      	movs	r3, #2
 8002a62:	f887 35f1 	strb.w	r3, [r7, #1521]	; 0x5f1
							  run_time			= 0;
 8002a66:	f107 0218 	add.w	r2, r7, #24
 8002a6a:	f04f 0300 	mov.w	r3, #0
 8002a6e:	f04f 0400 	mov.w	r4, #0
 8002a72:	e9c2 3400 	strd	r3, r4, [r2]
							  // Respond
							  respond_lenght 	= commandRespond(RPD_OK,
 8002a76:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002a7a:	6859      	ldr	r1, [r3, #4]
 8002a7c:	f897 35de 	ldrb.w	r3, [r7, #1502]	; 0x5de
																  duty_cmd.id_command,
																  (char *)DETAIL_STATUS[status1],
 8002a80:	4acd      	ldr	r2, [pc, #820]	; (8002db8 <StartDefaultTask+0xa98>)
 8002a82:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
							  respond_lenght 	= commandRespond(RPD_OK,
 8002a86:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8002a8a:	2008      	movs	r0, #8
 8002a8c:	f7fe ff96 	bl	80019bc <commandRespond>
 8002a90:	f8c7 0600 	str.w	r0, [r7, #1536]	; 0x600
																  (char *)respond);
#ifdef SIMULATION
							  scaraPosition2String((char *)position, positionCurrent);
#else
							  scaraPosition2String((char *)position, positionTrue);
 8002a94:	4cc9      	ldr	r4, [pc, #804]	; (8002dbc <StartDefaultTask+0xa9c>)
 8002a96:	f507 755e 	add.w	r5, r7, #888	; 0x378
 8002a9a:	4668      	mov	r0, sp
 8002a9c:	f104 0308 	add.w	r3, r4, #8
 8002aa0:	22b0      	movs	r2, #176	; 0xb0
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	f012 faa4 	bl	8014ff0 <memcpy>
 8002aa8:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002aac:	4628      	mov	r0, r5
 8002aae:	f006 fc4b 	bl	8009348 <scaraPosition2String>
#endif
							  // Start Inform
							  infor_lenght 		= commandRespond(RPD_START,
 8002ab2:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8002ab6:	f507 725e 	add.w	r2, r7, #888	; 0x378
 8002aba:	2100      	movs	r1, #0
 8002abc:	2003      	movs	r0, #3
 8002abe:	f7fe ff7d 	bl	80019bc <commandRespond>
 8002ac2:	f8c7 05fc 	str.w	r0, [r7, #1532]	; 0x5fc
																  (char *)DETAIL_STATUS[status1],
																  (char *)respond);
							  LOG_REPORT("INIT FAIL", __LINE__);
						  }
					  }
				  break;
 8002ac6:	e0e6      	b.n	8002c96 <StartDefaultTask+0x976>
								  current_duty_state 	= SCARA_DUTY_STATE_READY;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	f887 35f1 	strb.w	r3, [r7, #1521]	; 0x5f1
								  respond_lenght	= commandRespond(RPD_ERROR,
 8002ace:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002ad2:	6859      	ldr	r1, [r3, #4]
 8002ad4:	f897 35dd 	ldrb.w	r3, [r7, #1501]	; 0x5dd
																	  (char *)DETAIL_STATUS[status2],
 8002ad8:	4ab7      	ldr	r2, [pc, #732]	; (8002db8 <StartDefaultTask+0xa98>)
 8002ada:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
								  respond_lenght	= commandRespond(RPD_ERROR,
 8002ade:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8002ae2:	2007      	movs	r0, #7
 8002ae4:	f7fe ff6a 	bl	80019bc <commandRespond>
 8002ae8:	f8c7 0600 	str.w	r0, [r7, #1536]	; 0x600
								  LOG_REPORT("TEST FAIL", __LINE__);
 8002aec:	f44f 7109 	mov.w	r1, #548	; 0x224
 8002af0:	48b3      	ldr	r0, [pc, #716]	; (8002dc0 <StartDefaultTask+0xaa0>)
 8002af2:	f7fe ffb3 	bl	8001a5c <LOG_REPORT>
				  break;
 8002af6:	e0ce      	b.n	8002c96 <StartDefaultTask+0x976>
							  current_duty_state 	= SCARA_DUTY_STATE_READY;
 8002af8:	2300      	movs	r3, #0
 8002afa:	f887 35f1 	strb.w	r3, [r7, #1521]	; 0x5f1
							  respond_lenght	= commandRespond(RPD_ERROR,
 8002afe:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002b02:	6859      	ldr	r1, [r3, #4]
 8002b04:	f897 35de 	ldrb.w	r3, [r7, #1502]	; 0x5de
																  (char *)DETAIL_STATUS[status1],
 8002b08:	4aab      	ldr	r2, [pc, #684]	; (8002db8 <StartDefaultTask+0xa98>)
 8002b0a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
							  respond_lenght	= commandRespond(RPD_ERROR,
 8002b0e:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8002b12:	2007      	movs	r0, #7
 8002b14:	f7fe ff52 	bl	80019bc <commandRespond>
 8002b18:	f8c7 0600 	str.w	r0, [r7, #1536]	; 0x600
							  LOG_REPORT("INIT FAIL", __LINE__);
 8002b1c:	f44f 710b 	mov.w	r1, #556	; 0x22c
 8002b20:	48a8      	ldr	r0, [pc, #672]	; (8002dc4 <StartDefaultTask+0xaa4>)
 8002b22:	f7fe ff9b 	bl	8001a5c <LOG_REPORT>
				  break;
 8002b26:	e0b6      	b.n	8002c96 <StartDefaultTask+0x976>

				  case SCARA_DUTY_STATE_FLOW:
					  {
						  SCARA_StatusTypeDef status;
						  // Increase run time
						  run_time += T_SAMPLING;
 8002b28:	f107 0318 	add.w	r3, r7, #24
 8002b2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b30:	a39f      	add	r3, pc, #636	; (adr r3, 8002db0 <StartDefaultTask+0xa90>)
 8002b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b36:	f7fd fbb9 	bl	80002ac <__adddf3>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	460c      	mov	r4, r1
 8002b3e:	f107 0218 	add.w	r2, r7, #24
 8002b42:	e9c2 3400 	strd	r3, r4, [r2]
						  // Check Time Out
						  if (scaraIsFinish(run_time)) {
 8002b46:	f107 0318 	add.w	r3, r7, #24
 8002b4a:	ed93 7b00 	vldr	d7, [r3]
 8002b4e:	eeb0 0a47 	vmov.f32	s0, s14
 8002b52:	eef0 0a67 	vmov.f32	s1, s15
 8002b56:	f006 fbcb 	bl	80092f0 <scaraIsFinish>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d003      	beq.n	8002b68 <StartDefaultTask+0x848>
							  current_duty_state = SCARA_DUTY_STATE_FINISH;// Work Done
 8002b60:	2303      	movs	r3, #3
 8002b62:	f887 35f1 	strb.w	r3, [r7, #1521]	; 0x5f1
																(char *)infor);
								  LOG_REPORT("STOP DUTY", __LINE__);
							  }
						  }
					  }
				  break;
 8002b66:	e096      	b.n	8002c96 <StartDefaultTask+0x976>
							  status = scaraFlowDuty(run_time , &positionNext, positionCurrent);
 8002b68:	f107 0318 	add.w	r3, r7, #24
 8002b6c:	ed93 8b00 	vldr	d8, [r3]
 8002b70:	4c95      	ldr	r4, [pc, #596]	; (8002dc8 <StartDefaultTask+0xaa8>)
 8002b72:	4668      	mov	r0, sp
 8002b74:	f104 0308 	add.w	r3, r4, #8
 8002b78:	22b0      	movs	r2, #176	; 0xb0
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	f012 fa38 	bl	8014ff0 <memcpy>
 8002b80:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002b84:	4891      	ldr	r0, [pc, #580]	; (8002dcc <StartDefaultTask+0xaac>)
 8002b86:	eeb0 0a48 	vmov.f32	s0, s16
 8002b8a:	eef0 0a68 	vmov.f32	s1, s17
 8002b8e:	f004 fc95 	bl	80074bc <scaraFlowDuty>
 8002b92:	4603      	mov	r3, r0
 8002b94:	f887 35df 	strb.w	r3, [r7, #1503]	; 0x5df
							  if ( SCARA_STATUS_OK == status) {
 8002b98:	f897 35df 	ldrb.w	r3, [r7, #1503]	; 0x5df
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d12c      	bne.n	8002bfa <StartDefaultTask+0x8da>
								  lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 8002ba0:	4c89      	ldr	r4, [pc, #548]	; (8002dc8 <StartDefaultTask+0xaa8>)
 8002ba2:	4a8a      	ldr	r2, [pc, #552]	; (8002dcc <StartDefaultTask+0xaac>)
 8002ba4:	ab2a      	add	r3, sp, #168	; 0xa8
 8002ba6:	4611      	mov	r1, r2
 8002ba8:	22b8      	movs	r2, #184	; 0xb8
 8002baa:	4618      	mov	r0, r3
 8002bac:	f012 fa20 	bl	8014ff0 <memcpy>
 8002bb0:	4668      	mov	r0, sp
 8002bb2:	f104 0310 	add.w	r3, r4, #16
 8002bb6:	22a8      	movs	r2, #168	; 0xa8
 8002bb8:	4619      	mov	r1, r3
 8002bba:	f012 fa19 	bl	8014ff0 <memcpy>
 8002bbe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002bc2:	f001 fc25 	bl	8004410 <lowlayer_computeAndWritePulse>
								  scaraPosition2String((char *)position, positionTrue);
 8002bc6:	4c7d      	ldr	r4, [pc, #500]	; (8002dbc <StartDefaultTask+0xa9c>)
 8002bc8:	f507 755e 	add.w	r5, r7, #888	; 0x378
 8002bcc:	4668      	mov	r0, sp
 8002bce:	f104 0308 	add.w	r3, r4, #8
 8002bd2:	22b0      	movs	r2, #176	; 0xb0
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	f012 fa0b 	bl	8014ff0 <memcpy>
 8002bda:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002bde:	4628      	mov	r0, r5
 8002be0:	f006 fbb2 	bl	8009348 <scaraPosition2String>
								  infor_lenght = commandRespond(RPD_RUNNING,
 8002be4:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8002be8:	f507 725e 	add.w	r2, r7, #888	; 0x378
 8002bec:	2100      	movs	r1, #0
 8002bee:	2004      	movs	r0, #4
 8002bf0:	f7fe fee4 	bl	80019bc <commandRespond>
 8002bf4:	f8c7 05fc 	str.w	r0, [r7, #1532]	; 0x5fc
				  break;
 8002bf8:	e04d      	b.n	8002c96 <StartDefaultTask+0x976>
								  current_duty_state = SCARA_DUTY_STATE_FINISH;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	f887 35f1 	strb.w	r3, [r7, #1521]	; 0x5f1
								  infor_lenght = commandRespond(RPD_STOP,
 8002c00:	f897 35df 	ldrb.w	r3, [r7, #1503]	; 0x5df
																(char *)DETAIL_STATUS[status],
 8002c04:	4a6c      	ldr	r2, [pc, #432]	; (8002db8 <StartDefaultTask+0xa98>)
 8002c06:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
								  infor_lenght = commandRespond(RPD_STOP,
 8002c0a:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8002c0e:	2100      	movs	r1, #0
 8002c10:	2006      	movs	r0, #6
 8002c12:	f7fe fed3 	bl	80019bc <commandRespond>
 8002c16:	f8c7 05fc 	str.w	r0, [r7, #1532]	; 0x5fc
								  LOG_REPORT("STOP DUTY", __LINE__);
 8002c1a:	f240 214f 	movw	r1, #591	; 0x24f
 8002c1e:	486c      	ldr	r0, [pc, #432]	; (8002dd0 <StartDefaultTask+0xab0>)
 8002c20:	f7fe ff1c 	bl	8001a5c <LOG_REPORT>
				  break;
 8002c24:	e037      	b.n	8002c96 <StartDefaultTask+0x976>

				  case SCARA_DUTY_STATE_FINISH:
					  {
						  current_duty_state = SCARA_DUTY_STATE_READY;
 8002c26:	2300      	movs	r3, #0
 8002c28:	f887 35f1 	strb.w	r3, [r7, #1521]	; 0x5f1
						  positionNext.t = 0;
 8002c2c:	4a67      	ldr	r2, [pc, #412]	; (8002dcc <StartDefaultTask+0xaac>)
 8002c2e:	f04f 0300 	mov.w	r3, #0
 8002c32:	f04f 0400 	mov.w	r4, #0
 8002c36:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
						  positionNext.total_time = 0;
 8002c3a:	4a64      	ldr	r2, [pc, #400]	; (8002dcc <StartDefaultTask+0xaac>)
 8002c3c:	f04f 0300 	mov.w	r3, #0
 8002c40:	f04f 0400 	mov.w	r4, #0
 8002c44:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
						  positionNext.q = 0;
 8002c48:	4a60      	ldr	r2, [pc, #384]	; (8002dcc <StartDefaultTask+0xaac>)
 8002c4a:	f04f 0300 	mov.w	r3, #0
 8002c4e:	f04f 0400 	mov.w	r4, #0
 8002c52:	e9c2 3400 	strd	r3, r4, [r2]
						  // Done Inform
#ifdef SIMULATION
						  scaraPosition2String((char *)position, positionCurrent);
#else
						  scaraPosition2String((char *)position, positionTrue);
 8002c56:	4c59      	ldr	r4, [pc, #356]	; (8002dbc <StartDefaultTask+0xa9c>)
 8002c58:	f507 755e 	add.w	r5, r7, #888	; 0x378
 8002c5c:	4668      	mov	r0, sp
 8002c5e:	f104 0308 	add.w	r3, r4, #8
 8002c62:	22b0      	movs	r2, #176	; 0xb0
 8002c64:	4619      	mov	r1, r3
 8002c66:	f012 f9c3 	bl	8014ff0 <memcpy>
 8002c6a:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002c6e:	4628      	mov	r0, r5
 8002c70:	f006 fb6a 	bl	8009348 <scaraPosition2String>
#endif
						  infor_lenght 		= commandRespond(RPD_DONE,
 8002c74:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8002c78:	f507 725e 	add.w	r2, r7, #888	; 0x378
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	2005      	movs	r0, #5
 8002c80:	f7fe fe9c 	bl	80019bc <commandRespond>
 8002c84:	f8c7 05fc 	str.w	r0, [r7, #1532]	; 0x5fc
															 0,
															 (char *)position,
															 (char *)infor);
					  }
				  break;
 8002c88:	e005      	b.n	8002c96 <StartDefaultTask+0x976>

				  default:
					  {
						  LOG_REPORT("ERROR STATE !!!", __LINE__);
 8002c8a:	f240 216a 	movw	r1, #618	; 0x26a
 8002c8e:	4851      	ldr	r0, [pc, #324]	; (8002dd4 <StartDefaultTask+0xab4>)
 8002c90:	f7fe fee4 	bl	8001a5c <LOG_REPORT>
						  while(1);
 8002c94:	e7fe      	b.n	8002c94 <StartDefaultTask+0x974>
					  }
				  }

			  }
			  break;
 8002c96:	e005      	b.n	8002ca4 <StartDefaultTask+0x984>

		  default:
			  {
				  LOG_REPORT("ERROR MODE !!!", __LINE__);
 8002c98:	f44f 711d 	mov.w	r1, #628	; 0x274
 8002c9c:	484e      	ldr	r0, [pc, #312]	; (8002dd8 <StartDefaultTask+0xab8>)
 8002c9e:	f7fe fedd 	bl	8001a5c <LOG_REPORT>
				  while(1);
 8002ca2:	e7fe      	b.n	8002ca2 <StartDefaultTask+0x982>
			  }
		  }
	  }
	  break;
 8002ca4:	e002      	b.n	8002cac <StartDefaultTask+0x98c>
	  case SCARA_METHOD_AUTO:
	  {

	  }

	  break;
 8002ca6:	bf00      	nop
 8002ca8:	e000      	b.n	8002cac <StartDefaultTask+0x98c>
	  break;
 8002caa:	bf00      	nop
	  }
	  }

	  /* 4--- Send to PC Phase ---*/
	  // Check buffer from USB task
	  osMutexWait(usbTxMutexHandle, osWaitForever);
 8002cac:	4b4b      	ldr	r3, [pc, #300]	; (8002ddc <StartDefaultTask+0xabc>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f04f 31ff 	mov.w	r1, #4294967295
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f00e fbc1 	bl	801143c <osMutexWait>
	  task_usb_lenght = ringBuff_PopArray(&cmd_tx_ringbuff, task_usb, RINGBUFFER_SIZE);
 8002cba:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8002cbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	4846      	ldr	r0, [pc, #280]	; (8002de0 <StartDefaultTask+0xac0>)
 8002cc6:	f000 ff8e 	bl	8003be6 <ringBuff_PopArray>
 8002cca:	f8c7 05e8 	str.w	r0, [r7, #1512]	; 0x5e8
	  osMutexRelease(usbTxMutexHandle);
 8002cce:	4b43      	ldr	r3, [pc, #268]	; (8002ddc <StartDefaultTask+0xabc>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f00e fc00 	bl	80114d8 <osMutexRelease>
	  // Intergrate to 1 buffer
	  if (respond_lenght > 0) {
 8002cd8:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	dd13      	ble.n	8002d08 <StartDefaultTask+0x9e8>
		  respond_packed_lenght = packPayload(respond, respond_packed, respond_lenght);
 8002ce0:	f507 7106 	add.w	r1, r7, #536	; 0x218
 8002ce4:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8002ce8:	f8d7 2600 	ldr.w	r2, [r7, #1536]	; 0x600
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7ff f9a7 	bl	8002040 <packPayload>
 8002cf2:	f8c7 05f8 	str.w	r0, [r7, #1528]	; 0x5f8
		  memcpy(usb_buff, respond_packed, respond_packed_lenght);
 8002cf6:	f8d7 25f8 	ldr.w	r2, [r7, #1528]	; 0x5f8
 8002cfa:	f507 7106 	add.w	r1, r7, #536	; 0x218
 8002cfe:	f107 0320 	add.w	r3, r7, #32
 8002d02:	4618      	mov	r0, r3
 8002d04:	f012 f974 	bl	8014ff0 <memcpy>
	  }
	  if (task_usb_lenght > 0) {
 8002d08:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	; 0x5e8
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	dd0b      	ble.n	8002d28 <StartDefaultTask+0xa08>
		  memcpy(usb_buff + respond_packed_lenght, task_usb, task_usb_lenght);
 8002d10:	f8d7 35f8 	ldr.w	r3, [r7, #1528]	; 0x5f8
 8002d14:	f107 0220 	add.w	r2, r7, #32
 8002d18:	4413      	add	r3, r2
 8002d1a:	f8d7 25e8 	ldr.w	r2, [r7, #1512]	; 0x5e8
 8002d1e:	f507 7113 	add.w	r1, r7, #588	; 0x24c
 8002d22:	4618      	mov	r0, r3
 8002d24:	f012 f964 	bl	8014ff0 <memcpy>
	  }
	  if (infor_lenght > 0) {
 8002d28:	f8d7 35fc 	ldr.w	r3, [r7, #1532]	; 0x5fc
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	dd19      	ble.n	8002d64 <StartDefaultTask+0xa44>
		  infor_packed_lenght 	= packPayload(infor, infor_packed, infor_lenght);
 8002d30:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 8002d34:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8002d38:	f8d7 25fc 	ldr.w	r2, [r7, #1532]	; 0x5fc
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7ff f97f 	bl	8002040 <packPayload>
 8002d42:	f8c7 05f4 	str.w	r0, [r7, #1524]	; 0x5f4
		  memcpy(usb_buff + respond_packed_lenght + task_usb_lenght, infor_packed, infor_packed_lenght);
 8002d46:	f8d7 25f8 	ldr.w	r2, [r7, #1528]	; 0x5f8
 8002d4a:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	; 0x5e8
 8002d4e:	4413      	add	r3, r2
 8002d50:	f107 0220 	add.w	r2, r7, #32
 8002d54:	4413      	add	r3, r2
 8002d56:	f8d7 25f4 	ldr.w	r2, [r7, #1524]	; 0x5f4
 8002d5a:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f012 f946 	bl	8014ff0 <memcpy>
	  }
	  usb_lenght = respond_packed_lenght + task_usb_lenght + infor_packed_lenght;
 8002d64:	f8d7 25f8 	ldr.w	r2, [r7, #1528]	; 0x5f8
 8002d68:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	; 0x5e8
 8002d6c:	4413      	add	r3, r2
 8002d6e:	f8d7 25f4 	ldr.w	r2, [r7, #1524]	; 0x5f4
 8002d72:	4413      	add	r3, r2
 8002d74:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
	  // Send through USB
	  if (usb_lenght > 0) {
 8002d78:	f8d7 35e4 	ldr.w	r3, [r7, #1508]	; 0x5e4
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	dd08      	ble.n	8002d92 <StartDefaultTask+0xa72>
		  CDC_Transmit_FS(usb_buff, (uint16_t)usb_lenght);
 8002d80:	f8d7 35e4 	ldr.w	r3, [r7, #1508]	; 0x5e4
 8002d84:	b29a      	uxth	r2, r3
 8002d86:	f107 0320 	add.w	r3, r7, #32
 8002d8a:	4611      	mov	r1, r2
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f011 fcc1 	bl	8014714 <CDC_Transmit_FS>
	  }

	  /* 5--- Update ---*/
	  scaraSetMode(current_mode);
 8002d92:	f897 35f2 	ldrb.w	r3, [r7, #1522]	; 0x5f2
 8002d96:	4618      	mov	r0, r3
 8002d98:	f006 fa58 	bl	800924c <scaraSetMode>
	  scaraSetDutyState(current_duty_state);
 8002d9c:	f897 35f1 	ldrb.w	r3, [r7, #1521]	; 0x5f1
 8002da0:	4618      	mov	r0, r3
 8002da2:	f006 fa43 	bl	800922c <scaraSetDutyState>

    osDelay(1);
 8002da6:	2001      	movs	r0, #1
 8002da8:	f00e fa8f 	bl	80112ca <osDelay>
	  osSignalWait(0x01, osWaitForever); // Very Important
 8002dac:	f7ff bb09 	b.w	80023c2 <StartDefaultTask+0xa2>
 8002db0:	40000000 	.word	0x40000000
 8002db4:	3f847ae1 	.word	0x3f847ae1
 8002db8:	20000ca8 	.word	0x20000ca8
 8002dbc:	20005f40 	.word	0x20005f40
 8002dc0:	0801b0e0 	.word	0x0801b0e0
 8002dc4:	0801b0ec 	.word	0x0801b0ec
 8002dc8:	20005e88 	.word	0x20005e88
 8002dcc:	20005ff8 	.word	0x20005ff8
 8002dd0:	0801b0f8 	.word	0x0801b0f8
 8002dd4:	0801b0d0 	.word	0x0801b0d0
 8002dd8:	0801b104 	.word	0x0801b104
 8002ddc:	20005308 	.word	0x20005308
 8002de0:	20000484 	.word	0x20000484

08002de4 <Start_USB_RX_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_USB_RX_Task */
void Start_USB_RX_Task(void const * argument)
{
 8002de4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002de6:	f2ad 5d3c 	subw	sp, sp, #1340	; 0x53c
 8002dea:	af6a      	add	r7, sp, #424	; 0x1a8
 8002dec:	1d3b      	adds	r3, r7, #4
 8002dee:	6018      	str	r0, [r3, #0]

  /* Infinite loop */
  for(;;)
  {
	  for(;;) {
		  distance = ringBuff_DistanceOf(&usb_rx_ringbuff, END_CHAR);
 8002df0:	2129      	movs	r1, #41	; 0x29
 8002df2:	4873      	ldr	r0, [pc, #460]	; (8002fc0 <Start_USB_RX_Task+0x1dc>)
 8002df4:	f000 ff18 	bl	8003c28 <ringBuff_DistanceOf>
 8002df8:	f8c7 0388 	str.w	r0, [r7, #904]	; 0x388
		  if ( -1 != distance ) {
 8002dfc:	f8d7 3388 	ldr.w	r3, [r7, #904]	; 0x388
 8002e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e04:	d0f4      	beq.n	8002df0 <Start_USB_RX_Task+0xc>
 8002e06:	466b      	mov	r3, sp
 8002e08:	461e      	mov	r6, r3
			  uint8_t temp[distance+1];
 8002e0a:	f8d7 3388 	ldr.w	r3, [r7, #904]	; 0x388
 8002e0e:	1c58      	adds	r0, r3, #1
 8002e10:	1e43      	subs	r3, r0, #1
 8002e12:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
 8002e16:	4603      	mov	r3, r0
 8002e18:	4619      	mov	r1, r3
 8002e1a:	f04f 0200 	mov.w	r2, #0
 8002e1e:	f04f 0300 	mov.w	r3, #0
 8002e22:	f04f 0400 	mov.w	r4, #0
 8002e26:	00d4      	lsls	r4, r2, #3
 8002e28:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002e2c:	00cb      	lsls	r3, r1, #3
 8002e2e:	4603      	mov	r3, r0
 8002e30:	4619      	mov	r1, r3
 8002e32:	f04f 0200 	mov.w	r2, #0
 8002e36:	f04f 0300 	mov.w	r3, #0
 8002e3a:	f04f 0400 	mov.w	r4, #0
 8002e3e:	00d4      	lsls	r4, r2, #3
 8002e40:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002e44:	00cb      	lsls	r3, r1, #3
 8002e46:	4603      	mov	r3, r0
 8002e48:	3307      	adds	r3, #7
 8002e4a:	08db      	lsrs	r3, r3, #3
 8002e4c:	00db      	lsls	r3, r3, #3
 8002e4e:	ebad 0d03 	sub.w	sp, sp, r3
 8002e52:	ab6a      	add	r3, sp, #424	; 0x1a8
 8002e54:	3300      	adds	r3, #0
 8002e56:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
			  int32_t ret;
			  ringBuff_PopArray(&usb_rx_ringbuff, temp, distance + 1);
 8002e5a:	f8d7 1380 	ldr.w	r1, [r7, #896]	; 0x380
 8002e5e:	f8d7 3388 	ldr.w	r3, [r7, #904]	; 0x388
 8002e62:	3301      	adds	r3, #1
 8002e64:	461a      	mov	r2, r3
 8002e66:	4856      	ldr	r0, [pc, #344]	; (8002fc0 <Start_USB_RX_Task+0x1dc>)
 8002e68:	f000 febd 	bl	8003be6 <ringBuff_PopArray>
			  ret = unPackPayload(temp, distance + 1);
 8002e6c:	f8d7 2380 	ldr.w	r2, [r7, #896]	; 0x380
 8002e70:	f8d7 3388 	ldr.w	r3, [r7, #904]	; 0x388
 8002e74:	3301      	adds	r3, #1
 8002e76:	4619      	mov	r1, r3
 8002e78:	4610      	mov	r0, r2
 8002e7a:	f7ff f94b 	bl	8002114 <unPackPayload>
 8002e7e:	f8c7 037c 	str.w	r0, [r7, #892]	; 0x37c
			  if( -1 == ret) {
 8002e82:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 8002e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e8a:	d105      	bne.n	8002e98 <Start_USB_RX_Task+0xb4>
				  LOG_REPORT("UNPACK FAIL", __LINE__);
 8002e8c:	f44f 7132 	mov.w	r1, #712	; 0x2c8
 8002e90:	484c      	ldr	r0, [pc, #304]	; (8002fc4 <Start_USB_RX_Task+0x1e0>)
 8002e92:	f7fe fde3 	bl	8001a5c <LOG_REPORT>
 8002e96:	e091      	b.n	8002fbc <Start_USB_RX_Task+0x1d8>
			  } else {
				  LOG_REPORT((char*) temp, __LINE__);
 8002e98:	f8d7 3380 	ldr.w	r3, [r7, #896]	; 0x380
 8002e9c:	f240 21ca 	movw	r1, #714	; 0x2ca
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7fe fddb 	bl	8001a5c <LOG_REPORT>
				  cmd_type = commandRead(temp, &id_command, &duty_cmd);
 8002ea6:	f8d7 3380 	ldr.w	r3, [r7, #896]	; 0x380
 8002eaa:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
 8002eae:	f507 715a 	add.w	r1, r7, #872	; 0x368
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7fe f878 	bl	8000fa8 <commandRead>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	f887 337b 	strb.w	r3, [r7, #891]	; 0x37b
				  memset(detail, 0, sizeof(detail));
 8002ebe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002ec2:	2287      	movs	r2, #135	; 0x87
 8002ec4:	2100      	movs	r1, #0
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f012 f8b6 	bl	8015038 <memset>
				  rpd_type = commandReply(cmd_type, duty_cmd, detail);
 8002ecc:	f507 74e0 	add.w	r4, r7, #448	; 0x1c0
 8002ed0:	f897 537b 	ldrb.w	r5, [r7, #891]	; 0x37b
 8002ed4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002ed8:	9368      	str	r3, [sp, #416]	; 0x1a0
 8002eda:	4668      	mov	r0, sp
 8002edc:	f104 0308 	add.w	r3, r4, #8
 8002ee0:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	f012 f883 	bl	8014ff0 <memcpy>
 8002eea:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002eee:	4628      	mov	r0, r5
 8002ef0:	f7fe fc18 	bl	8001724 <commandReply>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	f887 337a 	strb.w	r3, [r7, #890]	; 0x37a

				  if ( RPD_DUTY == rpd_type) {
 8002efa:	f897 337a 	ldrb.w	r3, [r7, #890]	; 0x37a
 8002efe:	2b09      	cmp	r3, #9
 8002f00:	d123      	bne.n	8002f4a <Start_USB_RX_Task+0x166>
					  DUTY_Command_TypeDef *dataMail;
					  dataMail = NULL;
 8002f02:	2300      	movs	r3, #0
 8002f04:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
					  // Wait allocate
					  while (dataMail == NULL) {
 8002f08:	e008      	b.n	8002f1c <Start_USB_RX_Task+0x138>
						  dataMail = osMailAlloc(commandMailHandle, osWaitForever);
 8002f0a:	4b2f      	ldr	r3, [pc, #188]	; (8002fc8 <Start_USB_RX_Task+0x1e4>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f04f 31ff 	mov.w	r1, #4294967295
 8002f12:	4618      	mov	r0, r3
 8002f14:	f00e fc6e 	bl	80117f4 <osMailAlloc>
 8002f18:	f8c7 038c 	str.w	r0, [r7, #908]	; 0x38c
					  while (dataMail == NULL) {
 8002f1c:	f8d7 338c 	ldr.w	r3, [r7, #908]	; 0x38c
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d0f2      	beq.n	8002f0a <Start_USB_RX_Task+0x126>
					  }
					  memcpy( dataMail, &duty_cmd, sizeof(DUTY_Command_TypeDef));
 8002f24:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002f28:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	f8d7 038c 	ldr.w	r0, [r7, #908]	; 0x38c
 8002f32:	f012 f85d 	bl	8014ff0 <memcpy>
					  osStatus result;
					  result = osMailPut(commandMailHandle, dataMail);
 8002f36:	4b24      	ldr	r3, [pc, #144]	; (8002fc8 <Start_USB_RX_Task+0x1e4>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f8d7 138c 	ldr.w	r1, [r7, #908]	; 0x38c
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f00e fc6e 	bl	8011820 <osMailPut>
 8002f44:	f8c7 036c 	str.w	r0, [r7, #876]	; 0x36c
 8002f48:	e038      	b.n	8002fbc <Start_USB_RX_Task+0x1d8>
					  if (osOK == result) {
						  //LOG_REPORT("DUTY SEND", __LINE__);
					  }

				  } else {
					  memset(respond, 0, sizeof(respond));
 8002f4a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002f4e:	2291      	movs	r2, #145	; 0x91
 8002f50:	2100      	movs	r1, #0
 8002f52:	4618      	mov	r0, r3
 8002f54:	f012 f870 	bl	8015038 <memset>
					  memset(message, 0, sizeof(message));
 8002f58:	f107 030c 	add.w	r3, r7, #12
 8002f5c:	2296      	movs	r2, #150	; 0x96
 8002f5e:	2100      	movs	r1, #0
 8002f60:	4618      	mov	r0, r3
 8002f62:	f012 f869 	bl	8015038 <memset>
					  respond_lenght	= commandRespond(rpd_type, id_command,
 8002f66:	f8d7 1368 	ldr.w	r1, [r7, #872]	; 0x368
 8002f6a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002f6e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8002f72:	f897 037a 	ldrb.w	r0, [r7, #890]	; 0x37a
 8002f76:	f7fe fd21 	bl	80019bc <commandRespond>
 8002f7a:	f8c7 0374 	str.w	r0, [r7, #884]	; 0x374
							  	  	  	  (char *)detail,
										  (char *)respond);
					  message_lenght	= packPayload(respond, message, respond_lenght);
 8002f7e:	f107 010c 	add.w	r1, r7, #12
 8002f82:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002f86:	f8d7 2374 	ldr.w	r2, [r7, #884]	; 0x374
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7ff f858 	bl	8002040 <packPayload>
 8002f90:	f8c7 0370 	str.w	r0, [r7, #880]	; 0x370
					  // Mutex
					  osMutexWait(usbTxMutexHandle, osWaitForever);
 8002f94:	4b0d      	ldr	r3, [pc, #52]	; (8002fcc <Start_USB_RX_Task+0x1e8>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f04f 31ff 	mov.w	r1, #4294967295
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f00e fa4d 	bl	801143c <osMutexWait>
					  ringBuff_PushArray(&cmd_tx_ringbuff, message, message_lenght);
 8002fa2:	f107 030c 	add.w	r3, r7, #12
 8002fa6:	f8d7 2370 	ldr.w	r2, [r7, #880]	; 0x370
 8002faa:	4619      	mov	r1, r3
 8002fac:	4808      	ldr	r0, [pc, #32]	; (8002fd0 <Start_USB_RX_Task+0x1ec>)
 8002fae:	f000 fdf2 	bl	8003b96 <ringBuff_PushArray>
					  osMutexRelease(usbTxMutexHandle);
 8002fb2:	4b06      	ldr	r3, [pc, #24]	; (8002fcc <Start_USB_RX_Task+0x1e8>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f00e fa8e 	bl	80114d8 <osMutexRelease>
 8002fbc:	46b5      	mov	sp, r6
		  distance = ringBuff_DistanceOf(&usb_rx_ringbuff, END_CHAR);
 8002fbe:	e717      	b.n	8002df0 <Start_USB_RX_Task+0xc>
 8002fc0:	20000078 	.word	0x20000078
 8002fc4:	0801b114 	.word	0x0801b114
 8002fc8:	2000530c 	.word	0x2000530c
 8002fcc:	20005308 	.word	0x20005308
 8002fd0:	20000484 	.word	0x20000484

08002fd4 <FSMC_Write>:
/* Includes ------------------------------------------------------------------*/
#include "fsmc.h"

/* USER CODE BEGIN 0 */
void FSMC_Write(uint32_t ui_address, uint32_t ui_data)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
	*(volatile uint16_t *)ui_address = ui_data;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	b292      	uxth	r2, r2
 8002fe4:	801a      	strh	r2, [r3, #0]
}
 8002fe6:	bf00      	nop
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr

08002ff2 <FSMC_Read>:

uint16_t FSMC_Read(uint32_t ui_address) {
 8002ff2:	b480      	push	{r7}
 8002ff4:	b083      	sub	sp, #12
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
	return *(volatile uint16_t *)ui_address;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	881b      	ldrh	r3, [r3, #0]
 8002ffe:	b29b      	uxth	r3, r3
}
 8003000:	4618      	mov	r0, r3
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <MX_FSMC_Init>:

NOR_HandleTypeDef hnor1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b088      	sub	sp, #32
 8003010:	af00      	add	r7, sp, #0
  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8003012:	1d3b      	adds	r3, r7, #4
 8003014:	2200      	movs	r2, #0
 8003016:	601a      	str	r2, [r3, #0]
 8003018:	605a      	str	r2, [r3, #4]
 800301a:	609a      	str	r2, [r3, #8]
 800301c:	60da      	str	r2, [r3, #12]
 800301e:	611a      	str	r2, [r3, #16]
 8003020:	615a      	str	r2, [r3, #20]
 8003022:	619a      	str	r2, [r3, #24]

  /** Perform the NOR1 memory initialization sequence
  */
  hnor1.Instance = FSMC_NORSRAM_DEVICE;
 8003024:	4b27      	ldr	r3, [pc, #156]	; (80030c4 <MX_FSMC_Init+0xb8>)
 8003026:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800302a:	601a      	str	r2, [r3, #0]
  hnor1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 800302c:	4b25      	ldr	r3, [pc, #148]	; (80030c4 <MX_FSMC_Init+0xb8>)
 800302e:	4a26      	ldr	r2, [pc, #152]	; (80030c8 <MX_FSMC_Init+0xbc>)
 8003030:	605a      	str	r2, [r3, #4]
  /* hnor1.Init */
  hnor1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8003032:	4b24      	ldr	r3, [pc, #144]	; (80030c4 <MX_FSMC_Init+0xb8>)
 8003034:	2200      	movs	r2, #0
 8003036:	609a      	str	r2, [r3, #8]
  hnor1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_ENABLE;
 8003038:	4b22      	ldr	r3, [pc, #136]	; (80030c4 <MX_FSMC_Init+0xb8>)
 800303a:	2202      	movs	r2, #2
 800303c:	60da      	str	r2, [r3, #12]
  hnor1.Init.MemoryType = FSMC_MEMORY_TYPE_NOR;
 800303e:	4b21      	ldr	r3, [pc, #132]	; (80030c4 <MX_FSMC_Init+0xb8>)
 8003040:	2208      	movs	r2, #8
 8003042:	611a      	str	r2, [r3, #16]
  hnor1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8003044:	4b1f      	ldr	r3, [pc, #124]	; (80030c4 <MX_FSMC_Init+0xb8>)
 8003046:	2210      	movs	r2, #16
 8003048:	615a      	str	r2, [r3, #20]
  hnor1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800304a:	4b1e      	ldr	r3, [pc, #120]	; (80030c4 <MX_FSMC_Init+0xb8>)
 800304c:	2200      	movs	r2, #0
 800304e:	619a      	str	r2, [r3, #24]
  hnor1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8003050:	4b1c      	ldr	r3, [pc, #112]	; (80030c4 <MX_FSMC_Init+0xb8>)
 8003052:	2200      	movs	r2, #0
 8003054:	61da      	str	r2, [r3, #28]
  hnor1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8003056:	4b1b      	ldr	r3, [pc, #108]	; (80030c4 <MX_FSMC_Init+0xb8>)
 8003058:	2200      	movs	r2, #0
 800305a:	621a      	str	r2, [r3, #32]
  hnor1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800305c:	4b19      	ldr	r3, [pc, #100]	; (80030c4 <MX_FSMC_Init+0xb8>)
 800305e:	2200      	movs	r2, #0
 8003060:	625a      	str	r2, [r3, #36]	; 0x24
  hnor1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8003062:	4b18      	ldr	r3, [pc, #96]	; (80030c4 <MX_FSMC_Init+0xb8>)
 8003064:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003068:	629a      	str	r2, [r3, #40]	; 0x28
  hnor1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800306a:	4b16      	ldr	r3, [pc, #88]	; (80030c4 <MX_FSMC_Init+0xb8>)
 800306c:	2200      	movs	r2, #0
 800306e:	62da      	str	r2, [r3, #44]	; 0x2c
  hnor1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8003070:	4b14      	ldr	r3, [pc, #80]	; (80030c4 <MX_FSMC_Init+0xb8>)
 8003072:	2200      	movs	r2, #0
 8003074:	631a      	str	r2, [r3, #48]	; 0x30
  hnor1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8003076:	4b13      	ldr	r3, [pc, #76]	; (80030c4 <MX_FSMC_Init+0xb8>)
 8003078:	2200      	movs	r2, #0
 800307a:	635a      	str	r2, [r3, #52]	; 0x34
  hnor1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800307c:	4b11      	ldr	r3, [pc, #68]	; (80030c4 <MX_FSMC_Init+0xb8>)
 800307e:	2200      	movs	r2, #0
 8003080:	639a      	str	r2, [r3, #56]	; 0x38
  hnor1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8003082:	4b10      	ldr	r3, [pc, #64]	; (80030c4 <MX_FSMC_Init+0xb8>)
 8003084:	2200      	movs	r2, #0
 8003086:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8003088:	230f      	movs	r3, #15
 800308a:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 800308c:	230f      	movs	r3, #15
 800308e:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8003090:	23ff      	movs	r3, #255	; 0xff
 8003092:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8003094:	230f      	movs	r3, #15
 8003096:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8003098:	2310      	movs	r3, #16
 800309a:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800309c:	2311      	movs	r3, #17
 800309e:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80030a0:	2300      	movs	r3, #0
 80030a2:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_NOR_Init(&hnor1, &Timing, NULL) != HAL_OK)
 80030a4:	1d3b      	adds	r3, r7, #4
 80030a6:	2200      	movs	r2, #0
 80030a8:	4619      	mov	r1, r3
 80030aa:	4806      	ldr	r0, [pc, #24]	; (80030c4 <MX_FSMC_Init+0xb8>)
 80030ac:	f008 f984 	bl	800b3b8 <HAL_NOR_Init>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 80030b6:	f000 fcf7 	bl	8003aa8 <Error_Handler>
  }

}
 80030ba:	bf00      	nop
 80030bc:	3720      	adds	r7, #32
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	20005314 	.word	0x20005314
 80030c8:	a0000104 	.word	0xa0000104

080030cc <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b086      	sub	sp, #24
 80030d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030d2:	1d3b      	adds	r3, r7, #4
 80030d4:	2200      	movs	r2, #0
 80030d6:	601a      	str	r2, [r3, #0]
 80030d8:	605a      	str	r2, [r3, #4]
 80030da:	609a      	str	r2, [r3, #8]
 80030dc:	60da      	str	r2, [r3, #12]
 80030de:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80030e0:	4b24      	ldr	r3, [pc, #144]	; (8003174 <HAL_FSMC_MspInit+0xa8>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d140      	bne.n	800316a <HAL_FSMC_MspInit+0x9e>
    return;
  }
  FSMC_Initialized = 1;
 80030e8:	4b22      	ldr	r3, [pc, #136]	; (8003174 <HAL_FSMC_MspInit+0xa8>)
 80030ea:	2201      	movs	r2, #1
 80030ec:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80030ee:	2300      	movs	r3, #0
 80030f0:	603b      	str	r3, [r7, #0]
 80030f2:	4b21      	ldr	r3, [pc, #132]	; (8003178 <HAL_FSMC_MspInit+0xac>)
 80030f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f6:	4a20      	ldr	r2, [pc, #128]	; (8003178 <HAL_FSMC_MspInit+0xac>)
 80030f8:	f043 0301 	orr.w	r3, r3, #1
 80030fc:	6393      	str	r3, [r2, #56]	; 0x38
 80030fe:	4b1e      	ldr	r3, [pc, #120]	; (8003178 <HAL_FSMC_MspInit+0xac>)
 8003100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	603b      	str	r3, [r7, #0]
 8003108:	683b      	ldr	r3, [r7, #0]
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  PB7   ------> FSMC_NL
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 800310a:	f64f 7380 	movw	r3, #65408	; 0xff80
 800310e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003110:	2302      	movs	r3, #2
 8003112:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003114:	2300      	movs	r3, #0
 8003116:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003118:	2303      	movs	r3, #3
 800311a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800311c:	230c      	movs	r3, #12
 800311e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003120:	1d3b      	adds	r3, r7, #4
 8003122:	4619      	mov	r1, r3
 8003124:	4815      	ldr	r0, [pc, #84]	; (800317c <HAL_FSMC_MspInit+0xb0>)
 8003126:	f007 ff93 	bl	800b050 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14 
 800312a:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 800312e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4 
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003130:	2302      	movs	r3, #2
 8003132:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003134:	2300      	movs	r3, #0
 8003136:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003138:	2303      	movs	r3, #3
 800313a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800313c:	230c      	movs	r3, #12
 800313e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003140:	1d3b      	adds	r3, r7, #4
 8003142:	4619      	mov	r1, r3
 8003144:	480e      	ldr	r0, [pc, #56]	; (8003180 <HAL_FSMC_MspInit+0xb4>)
 8003146:	f007 ff83 	bl	800b050 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800314a:	2380      	movs	r3, #128	; 0x80
 800314c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800314e:	2302      	movs	r3, #2
 8003150:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003152:	2300      	movs	r3, #0
 8003154:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003156:	2303      	movs	r3, #3
 8003158:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800315a:	230c      	movs	r3, #12
 800315c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800315e:	1d3b      	adds	r3, r7, #4
 8003160:	4619      	mov	r1, r3
 8003162:	4808      	ldr	r0, [pc, #32]	; (8003184 <HAL_FSMC_MspInit+0xb8>)
 8003164:	f007 ff74 	bl	800b050 <HAL_GPIO_Init>
 8003168:	e000      	b.n	800316c <HAL_FSMC_MspInit+0xa0>
    return;
 800316a:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800316c:	3718      	adds	r7, #24
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	200014a0 	.word	0x200014a0
 8003178:	40023800 	.word	0x40023800
 800317c:	40021000 	.word	0x40021000
 8003180:	40020c00 	.word	0x40020c00
 8003184:	40020400 	.word	0x40020400

08003188 <HAL_NOR_MspInit>:

void HAL_NOR_MspInit(NOR_HandleTypeDef* norHandle){
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NOR_MspInit 0 */

  /* USER CODE END NOR_MspInit 0 */
  HAL_FSMC_MspInit();
 8003190:	f7ff ff9c 	bl	80030cc <HAL_FSMC_MspInit>
  /* USER CODE BEGIN NOR_MspInit 1 */

  /* USER CODE END NOR_MspInit 1 */
}
 8003194:	bf00      	nop
 8003196:	3708      	adds	r7, #8
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b08a      	sub	sp, #40	; 0x28
 80031a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031a2:	f107 0314 	add.w	r3, r7, #20
 80031a6:	2200      	movs	r2, #0
 80031a8:	601a      	str	r2, [r3, #0]
 80031aa:	605a      	str	r2, [r3, #4]
 80031ac:	609a      	str	r2, [r3, #8]
 80031ae:	60da      	str	r2, [r3, #12]
 80031b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80031b2:	2300      	movs	r3, #0
 80031b4:	613b      	str	r3, [r7, #16]
 80031b6:	4b51      	ldr	r3, [pc, #324]	; (80032fc <MX_GPIO_Init+0x160>)
 80031b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ba:	4a50      	ldr	r2, [pc, #320]	; (80032fc <MX_GPIO_Init+0x160>)
 80031bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031c0:	6313      	str	r3, [r2, #48]	; 0x30
 80031c2:	4b4e      	ldr	r3, [pc, #312]	; (80032fc <MX_GPIO_Init+0x160>)
 80031c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ca:	613b      	str	r3, [r7, #16]
 80031cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80031ce:	2300      	movs	r3, #0
 80031d0:	60fb      	str	r3, [r7, #12]
 80031d2:	4b4a      	ldr	r3, [pc, #296]	; (80032fc <MX_GPIO_Init+0x160>)
 80031d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d6:	4a49      	ldr	r2, [pc, #292]	; (80032fc <MX_GPIO_Init+0x160>)
 80031d8:	f043 0301 	orr.w	r3, r3, #1
 80031dc:	6313      	str	r3, [r2, #48]	; 0x30
 80031de:	4b47      	ldr	r3, [pc, #284]	; (80032fc <MX_GPIO_Init+0x160>)
 80031e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	60fb      	str	r3, [r7, #12]
 80031e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80031ea:	2300      	movs	r3, #0
 80031ec:	60bb      	str	r3, [r7, #8]
 80031ee:	4b43      	ldr	r3, [pc, #268]	; (80032fc <MX_GPIO_Init+0x160>)
 80031f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f2:	4a42      	ldr	r2, [pc, #264]	; (80032fc <MX_GPIO_Init+0x160>)
 80031f4:	f043 0310 	orr.w	r3, r3, #16
 80031f8:	6313      	str	r3, [r2, #48]	; 0x30
 80031fa:	4b40      	ldr	r3, [pc, #256]	; (80032fc <MX_GPIO_Init+0x160>)
 80031fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fe:	f003 0310 	and.w	r3, r3, #16
 8003202:	60bb      	str	r3, [r7, #8]
 8003204:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003206:	2300      	movs	r3, #0
 8003208:	607b      	str	r3, [r7, #4]
 800320a:	4b3c      	ldr	r3, [pc, #240]	; (80032fc <MX_GPIO_Init+0x160>)
 800320c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320e:	4a3b      	ldr	r2, [pc, #236]	; (80032fc <MX_GPIO_Init+0x160>)
 8003210:	f043 0302 	orr.w	r3, r3, #2
 8003214:	6313      	str	r3, [r2, #48]	; 0x30
 8003216:	4b39      	ldr	r3, [pc, #228]	; (80032fc <MX_GPIO_Init+0x160>)
 8003218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	607b      	str	r3, [r7, #4]
 8003220:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003222:	2300      	movs	r3, #0
 8003224:	603b      	str	r3, [r7, #0]
 8003226:	4b35      	ldr	r3, [pc, #212]	; (80032fc <MX_GPIO_Init+0x160>)
 8003228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322a:	4a34      	ldr	r2, [pc, #208]	; (80032fc <MX_GPIO_Init+0x160>)
 800322c:	f043 0308 	orr.w	r3, r3, #8
 8003230:	6313      	str	r3, [r2, #48]	; 0x30
 8003232:	4b32      	ldr	r3, [pc, #200]	; (80032fc <MX_GPIO_Init+0x160>)
 8003234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003236:	f003 0308 	and.w	r3, r3, #8
 800323a:	603b      	str	r3, [r7, #0]
 800323c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUTPUT_1_Pin|OUTPUT_2_Pin|USB_SIGN_Pin, GPIO_PIN_RESET);
 800323e:	2200      	movs	r2, #0
 8003240:	f44f 6141 	mov.w	r1, #3088	; 0xc10
 8003244:	482e      	ldr	r0, [pc, #184]	; (8003300 <MX_GPIO_Init+0x164>)
 8003246:	f008 f89d 	bl	800b384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ENCODER_RESET_Pin|PULSE_WRITE_Pin|CAPTURE_ENABLE_Pin|STOP_Pin, GPIO_PIN_RESET);
 800324a:	2200      	movs	r2, #0
 800324c:	f641 0148 	movw	r1, #6216	; 0x1848
 8003250:	482c      	ldr	r0, [pc, #176]	; (8003304 <MX_GPIO_Init+0x168>)
 8003252:	f008 f897 	bl	800b384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STEP_SLEEP_Pin|STEP_RESET_Pin|STEP_ENABLE_Pin, GPIO_PIN_RESET);
 8003256:	2200      	movs	r2, #0
 8003258:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800325c:	482a      	ldr	r0, [pc, #168]	; (8003308 <MX_GPIO_Init+0x16c>)
 800325e:	f008 f891 	bl	800b384 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OUTPUT_1_Pin|OUTPUT_2_Pin|USB_SIGN_Pin;
 8003262:	f44f 6341 	mov.w	r3, #3088	; 0xc10
 8003266:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003268:	2301      	movs	r3, #1
 800326a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800326c:	2300      	movs	r3, #0
 800326e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003270:	2300      	movs	r3, #0
 8003272:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003274:	f107 0314 	add.w	r3, r7, #20
 8003278:	4619      	mov	r1, r3
 800327a:	4821      	ldr	r0, [pc, #132]	; (8003300 <MX_GPIO_Init+0x164>)
 800327c:	f007 fee8 	bl	800b050 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = ENCODER_RESET_Pin|CAPTURE_ENABLE_Pin|STOP_Pin;
 8003280:	f640 0348 	movw	r3, #2120	; 0x848
 8003284:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003286:	2301      	movs	r3, #1
 8003288:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800328a:	2300      	movs	r3, #0
 800328c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800328e:	2300      	movs	r3, #0
 8003290:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003292:	f107 0314 	add.w	r3, r7, #20
 8003296:	4619      	mov	r1, r3
 8003298:	481a      	ldr	r0, [pc, #104]	; (8003304 <MX_GPIO_Init+0x168>)
 800329a:	f007 fed9 	bl	800b050 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PULSE_WRITE_Pin;
 800329e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032a4:	2301      	movs	r3, #1
 80032a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a8:	2300      	movs	r3, #0
 80032aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032ac:	2303      	movs	r3, #3
 80032ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PULSE_WRITE_GPIO_Port, &GPIO_InitStruct);
 80032b0:	f107 0314 	add.w	r3, r7, #20
 80032b4:	4619      	mov	r1, r3
 80032b6:	4813      	ldr	r0, [pc, #76]	; (8003304 <MX_GPIO_Init+0x168>)
 80032b8:	f007 feca 	bl	800b050 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = CPLD_LIMIT_Pin|CPLD_BUSY_Pin;
 80032bc:	f242 0304 	movw	r3, #8196	; 0x2004
 80032c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032c2:	2300      	movs	r3, #0
 80032c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032c6:	2301      	movs	r3, #1
 80032c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80032ca:	f107 0314 	add.w	r3, r7, #20
 80032ce:	4619      	mov	r1, r3
 80032d0:	480c      	ldr	r0, [pc, #48]	; (8003304 <MX_GPIO_Init+0x168>)
 80032d2:	f007 febd 	bl	800b050 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = STEP_SLEEP_Pin|STEP_RESET_Pin|STEP_ENABLE_Pin;
 80032d6:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80032da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032dc:	2301      	movs	r3, #1
 80032de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e0:	2300      	movs	r3, #0
 80032e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032e4:	2300      	movs	r3, #0
 80032e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032e8:	f107 0314 	add.w	r3, r7, #20
 80032ec:	4619      	mov	r1, r3
 80032ee:	4806      	ldr	r0, [pc, #24]	; (8003308 <MX_GPIO_Init+0x16c>)
 80032f0:	f007 feae 	bl	800b050 <HAL_GPIO_Init>

}
 80032f4:	bf00      	nop
 80032f6:	3728      	adds	r7, #40	; 0x28
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	40023800 	.word	0x40023800
 8003300:	40020400 	.word	0x40020400
 8003304:	40020c00 	.word	0x40020c00
 8003308:	40020000 	.word	0x40020000
 800330c:	00000000 	.word	0x00000000

08003310 <kinematicForward>:
#include "kinematic.h"
#include "common_def.h"
#include "math.h"
#include "system_params.h"

uint8_t		kinematicForward(SCARA_PositionTypeDef *pnt) {
 8003310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003312:	b08b      	sub	sp, #44	; 0x2c
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
	double x, y, z, roll;

	x =   a1*cos(pnt->Theta1)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 800331e:	eeb0 0a47 	vmov.f32	s0, s14
 8003322:	eef0 0a67 	vmov.f32	s1, s15
 8003326:	f016 f893 	bl	8019450 <cos>
 800332a:	ec51 0b10 	vmov	r0, r1, d0
 800332e:	a38e      	add	r3, pc, #568	; (adr r3, 8003568 <kinematicForward+0x258>)
 8003330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003334:	f7fd f970 	bl	8000618 <__aeabi_dmul>
 8003338:	4603      	mov	r3, r0
 800333a:	460c      	mov	r4, r1
 800333c:	461d      	mov	r5, r3
 800333e:	4626      	mov	r6, r4
		+ a2*cos(pnt->Theta1 + pnt->Theta2)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 800334c:	461a      	mov	r2, r3
 800334e:	4623      	mov	r3, r4
 8003350:	f7fc ffac 	bl	80002ac <__adddf3>
 8003354:	4603      	mov	r3, r0
 8003356:	460c      	mov	r4, r1
 8003358:	ec44 3b17 	vmov	d7, r3, r4
 800335c:	eeb0 0a47 	vmov.f32	s0, s14
 8003360:	eef0 0a67 	vmov.f32	s1, s15
 8003364:	f016 f874 	bl	8019450 <cos>
 8003368:	ec51 0b10 	vmov	r0, r1, d0
 800336c:	f04f 0200 	mov.w	r2, #0
 8003370:	4b83      	ldr	r3, [pc, #524]	; (8003580 <kinematicForward+0x270>)
 8003372:	f7fd f951 	bl	8000618 <__aeabi_dmul>
 8003376:	4603      	mov	r3, r0
 8003378:	460c      	mov	r4, r1
 800337a:	461a      	mov	r2, r3
 800337c:	4623      	mov	r3, r4
 800337e:	4628      	mov	r0, r5
 8003380:	4631      	mov	r1, r6
 8003382:	f7fc ff93 	bl	80002ac <__adddf3>
 8003386:	4603      	mov	r3, r0
 8003388:	460c      	mov	r4, r1
 800338a:	461d      	mov	r5, r3
 800338c:	4626      	mov	r6, r4
		+ a4*cos(pnt->Theta1 + pnt->Theta2 - pnt->Theta4);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 800339a:	461a      	mov	r2, r3
 800339c:	4623      	mov	r3, r4
 800339e:	f7fc ff85 	bl	80002ac <__adddf3>
 80033a2:	4603      	mov	r3, r0
 80033a4:	460c      	mov	r4, r1
 80033a6:	4618      	mov	r0, r3
 80033a8:	4621      	mov	r1, r4
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 80033b0:	461a      	mov	r2, r3
 80033b2:	4623      	mov	r3, r4
 80033b4:	f7fc ff78 	bl	80002a8 <__aeabi_dsub>
 80033b8:	4603      	mov	r3, r0
 80033ba:	460c      	mov	r4, r1
 80033bc:	ec44 3b17 	vmov	d7, r3, r4
 80033c0:	eeb0 0a47 	vmov.f32	s0, s14
 80033c4:	eef0 0a67 	vmov.f32	s1, s15
 80033c8:	f016 f842 	bl	8019450 <cos>
 80033cc:	ec51 0b10 	vmov	r0, r1, d0
 80033d0:	a363      	add	r3, pc, #396	; (adr r3, 8003560 <kinematicForward+0x250>)
 80033d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d6:	f7fd f91f 	bl	8000618 <__aeabi_dmul>
 80033da:	4603      	mov	r3, r0
 80033dc:	460c      	mov	r4, r1
	x =   a1*cos(pnt->Theta1)
 80033de:	461a      	mov	r2, r3
 80033e0:	4623      	mov	r3, r4
 80033e2:	4628      	mov	r0, r5
 80033e4:	4631      	mov	r1, r6
 80033e6:	f7fc ff61 	bl	80002ac <__adddf3>
 80033ea:	4603      	mov	r3, r0
 80033ec:	460c      	mov	r4, r1
 80033ee:	e9c7 3408 	strd	r3, r4, [r7, #32]
	y =   a1*sin(pnt->Theta1)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 80033f8:	eeb0 0a47 	vmov.f32	s0, s14
 80033fc:	eef0 0a67 	vmov.f32	s1, s15
 8003400:	f016 f8b6 	bl	8019570 <sin>
 8003404:	ec51 0b10 	vmov	r0, r1, d0
 8003408:	a357      	add	r3, pc, #348	; (adr r3, 8003568 <kinematicForward+0x258>)
 800340a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800340e:	f7fd f903 	bl	8000618 <__aeabi_dmul>
 8003412:	4603      	mov	r3, r0
 8003414:	460c      	mov	r4, r1
 8003416:	461d      	mov	r5, r3
 8003418:	4626      	mov	r6, r4
		+ a2*sin(pnt->Theta1 + pnt->Theta2)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8003426:	461a      	mov	r2, r3
 8003428:	4623      	mov	r3, r4
 800342a:	f7fc ff3f 	bl	80002ac <__adddf3>
 800342e:	4603      	mov	r3, r0
 8003430:	460c      	mov	r4, r1
 8003432:	ec44 3b17 	vmov	d7, r3, r4
 8003436:	eeb0 0a47 	vmov.f32	s0, s14
 800343a:	eef0 0a67 	vmov.f32	s1, s15
 800343e:	f016 f897 	bl	8019570 <sin>
 8003442:	ec51 0b10 	vmov	r0, r1, d0
 8003446:	f04f 0200 	mov.w	r2, #0
 800344a:	4b4d      	ldr	r3, [pc, #308]	; (8003580 <kinematicForward+0x270>)
 800344c:	f7fd f8e4 	bl	8000618 <__aeabi_dmul>
 8003450:	4603      	mov	r3, r0
 8003452:	460c      	mov	r4, r1
 8003454:	461a      	mov	r2, r3
 8003456:	4623      	mov	r3, r4
 8003458:	4628      	mov	r0, r5
 800345a:	4631      	mov	r1, r6
 800345c:	f7fc ff26 	bl	80002ac <__adddf3>
 8003460:	4603      	mov	r3, r0
 8003462:	460c      	mov	r4, r1
 8003464:	461d      	mov	r5, r3
 8003466:	4626      	mov	r6, r4
		+ a4*sin(pnt->Theta1 + pnt->Theta2 - pnt->Theta4);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8003474:	461a      	mov	r2, r3
 8003476:	4623      	mov	r3, r4
 8003478:	f7fc ff18 	bl	80002ac <__adddf3>
 800347c:	4603      	mov	r3, r0
 800347e:	460c      	mov	r4, r1
 8003480:	4618      	mov	r0, r3
 8003482:	4621      	mov	r1, r4
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 800348a:	461a      	mov	r2, r3
 800348c:	4623      	mov	r3, r4
 800348e:	f7fc ff0b 	bl	80002a8 <__aeabi_dsub>
 8003492:	4603      	mov	r3, r0
 8003494:	460c      	mov	r4, r1
 8003496:	ec44 3b17 	vmov	d7, r3, r4
 800349a:	eeb0 0a47 	vmov.f32	s0, s14
 800349e:	eef0 0a67 	vmov.f32	s1, s15
 80034a2:	f016 f865 	bl	8019570 <sin>
 80034a6:	ec51 0b10 	vmov	r0, r1, d0
 80034aa:	a32d      	add	r3, pc, #180	; (adr r3, 8003560 <kinematicForward+0x250>)
 80034ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b0:	f7fd f8b2 	bl	8000618 <__aeabi_dmul>
 80034b4:	4603      	mov	r3, r0
 80034b6:	460c      	mov	r4, r1
	y =   a1*sin(pnt->Theta1)
 80034b8:	461a      	mov	r2, r3
 80034ba:	4623      	mov	r3, r4
 80034bc:	4628      	mov	r0, r5
 80034be:	4631      	mov	r1, r6
 80034c0:	f7fc fef4 	bl	80002ac <__adddf3>
 80034c4:	4603      	mov	r3, r0
 80034c6:	460c      	mov	r4, r1
 80034c8:	e9c7 3406 	strd	r3, r4, [r7, #24]
	z =   d1 - pnt->D3 - d4;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 80034d2:	461a      	mov	r2, r3
 80034d4:	4623      	mov	r3, r4
 80034d6:	a126      	add	r1, pc, #152	; (adr r1, 8003570 <kinematicForward+0x260>)
 80034d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80034dc:	f7fc fee4 	bl	80002a8 <__aeabi_dsub>
 80034e0:	4603      	mov	r3, r0
 80034e2:	460c      	mov	r4, r1
 80034e4:	4618      	mov	r0, r3
 80034e6:	4621      	mov	r1, r4
 80034e8:	a323      	add	r3, pc, #140	; (adr r3, 8003578 <kinematicForward+0x268>)
 80034ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ee:	f7fc fedb 	bl	80002a8 <__aeabi_dsub>
 80034f2:	4603      	mov	r3, r0
 80034f4:	460c      	mov	r4, r1
 80034f6:	e9c7 3404 	strd	r3, r4, [r7, #16]
	roll = pnt->Theta1 + pnt->Theta2 - pnt->Theta4;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8003506:	461a      	mov	r2, r3
 8003508:	4623      	mov	r3, r4
 800350a:	f7fc fecf 	bl	80002ac <__adddf3>
 800350e:	4603      	mov	r3, r0
 8003510:	460c      	mov	r4, r1
 8003512:	4618      	mov	r0, r3
 8003514:	4621      	mov	r1, r4
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 800351c:	461a      	mov	r2, r3
 800351e:	4623      	mov	r3, r4
 8003520:	f7fc fec2 	bl	80002a8 <__aeabi_dsub>
 8003524:	4603      	mov	r3, r0
 8003526:	460c      	mov	r4, r1
 8003528:	e9c7 3402 	strd	r3, r4, [r7, #8]

	pnt->x = x;
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003532:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	pnt->y = y;
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800353c:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	pnt->z = z;
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003546:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	pnt->roll = roll;
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003550:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

	return TRUE;
 8003554:	2301      	movs	r3, #1
}
 8003556:	4618      	mov	r0, r3
 8003558:	372c      	adds	r7, #44	; 0x2c
 800355a:	46bd      	mov	sp, r7
 800355c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800355e:	bf00      	nop
 8003560:	80000000 	.word	0x80000000
 8003564:	40402e14 	.word	0x40402e14
 8003568:	00000000 	.word	0x00000000
 800356c:	4068a000 	.word	0x4068a000
 8003570:	00000000 	.word	0x00000000
 8003574:	406a6000 	.word	0x406a6000
 8003578:	e0000000 	.word	0xe0000000
 800357c:	40536b22 	.word	0x40536b22
 8003580:	40640000 	.word	0x40640000
 8003584:	00000000 	.word	0x00000000

08003588 <kinematicInverse>:

uint8_t		kinematicInverse(SCARA_PositionTypeDef *pnt, SCARA_PositionTypeDef current) {
 8003588:	b082      	sub	sp, #8
 800358a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800358e:	b0a0      	sub	sp, #128	; 0x80
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8003598:	e881 000c 	stmia.w	r1, {r2, r3}
	double theta1, theta2, theta2_positive, theta2_negative, d3, theta4 , pWx, pWy;
	double s1, c1, s2, s2_positive, s2_negative, c2 , temp;

	d3  = d1 - d4 - pnt->z;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80035a2:	a1f2      	add	r1, pc, #968	; (adr r1, 800396c <kinematicInverse+0x3e4>)
 80035a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80035a8:	f7fc fe7e 	bl	80002a8 <__aeabi_dsub>
 80035ac:	4602      	mov	r2, r0
 80035ae:	460b      	mov	r3, r1
 80035b0:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	pWx = pnt->x - a4*cos(pnt->roll);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	e9d3 ab12 	ldrd	sl, fp, [r3, #72]	; 0x48
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 80035c0:	eeb0 0a47 	vmov.f32	s0, s14
 80035c4:	eef0 0a67 	vmov.f32	s1, s15
 80035c8:	f015 ff42 	bl	8019450 <cos>
 80035cc:	ec51 0b10 	vmov	r0, r1, d0
 80035d0:	a3e8      	add	r3, pc, #928	; (adr r3, 8003974 <kinematicInverse+0x3ec>)
 80035d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d6:	f7fd f81f 	bl	8000618 <__aeabi_dmul>
 80035da:	4602      	mov	r2, r0
 80035dc:	460b      	mov	r3, r1
 80035de:	4650      	mov	r0, sl
 80035e0:	4659      	mov	r1, fp
 80035e2:	f7fc fe61 	bl	80002a8 <__aeabi_dsub>
 80035e6:	4602      	mov	r2, r0
 80035e8:	460b      	mov	r3, r1
 80035ea:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	pWy = pnt->y - a4*sin(pnt->roll);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	e9d3 ab14 	ldrd	sl, fp, [r3, #80]	; 0x50
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 80035fa:	eeb0 0a47 	vmov.f32	s0, s14
 80035fe:	eef0 0a67 	vmov.f32	s1, s15
 8003602:	f015 ffb5 	bl	8019570 <sin>
 8003606:	ec51 0b10 	vmov	r0, r1, d0
 800360a:	a3da      	add	r3, pc, #872	; (adr r3, 8003974 <kinematicInverse+0x3ec>)
 800360c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003610:	f7fd f802 	bl	8000618 <__aeabi_dmul>
 8003614:	4602      	mov	r2, r0
 8003616:	460b      	mov	r3, r1
 8003618:	4650      	mov	r0, sl
 800361a:	4659      	mov	r1, fp
 800361c:	f7fc fe44 	bl	80002a8 <__aeabi_dsub>
 8003620:	4602      	mov	r2, r0
 8003622:	460b      	mov	r3, r1
 8003624:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	c2  = (pWx*pWx + pWy*pWy - a1*a1 - a2*a2) / (2*a1*a2);
 8003628:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800362c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003630:	f7fc fff2 	bl	8000618 <__aeabi_dmul>
 8003634:	4602      	mov	r2, r0
 8003636:	460b      	mov	r3, r1
 8003638:	4692      	mov	sl, r2
 800363a:	469b      	mov	fp, r3
 800363c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003640:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003644:	f7fc ffe8 	bl	8000618 <__aeabi_dmul>
 8003648:	4602      	mov	r2, r0
 800364a:	460b      	mov	r3, r1
 800364c:	4650      	mov	r0, sl
 800364e:	4659      	mov	r1, fp
 8003650:	f7fc fe2c 	bl	80002ac <__adddf3>
 8003654:	4602      	mov	r2, r0
 8003656:	460b      	mov	r3, r1
 8003658:	4610      	mov	r0, r2
 800365a:	4619      	mov	r1, r3
 800365c:	a3c7      	add	r3, pc, #796	; (adr r3, 800397c <kinematicInverse+0x3f4>)
 800365e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003662:	f7fc fe21 	bl	80002a8 <__aeabi_dsub>
 8003666:	4602      	mov	r2, r0
 8003668:	460b      	mov	r3, r1
 800366a:	4610      	mov	r0, r2
 800366c:	4619      	mov	r1, r3
 800366e:	f04f 0200 	mov.w	r2, #0
 8003672:	4bbb      	ldr	r3, [pc, #748]	; (8003960 <kinematicInverse+0x3d8>)
 8003674:	f7fc fe18 	bl	80002a8 <__aeabi_dsub>
 8003678:	4602      	mov	r2, r0
 800367a:	460b      	mov	r3, r1
 800367c:	4610      	mov	r0, r2
 800367e:	4619      	mov	r1, r3
 8003680:	a3b3      	add	r3, pc, #716	; (adr r3, 8003950 <kinematicInverse+0x3c8>)
 8003682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003686:	f7fd f8f1 	bl	800086c <__aeabi_ddiv>
 800368a:	4602      	mov	r2, r0
 800368c:	460b      	mov	r3, r1
 800368e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	temp = 1 - c2*c2;
 8003692:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003696:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800369a:	f7fc ffbd 	bl	8000618 <__aeabi_dmul>
 800369e:	4602      	mov	r2, r0
 80036a0:	460b      	mov	r3, r1
 80036a2:	f04f 0000 	mov.w	r0, #0
 80036a6:	49af      	ldr	r1, [pc, #700]	; (8003964 <kinematicInverse+0x3dc>)
 80036a8:	f7fc fdfe 	bl	80002a8 <__aeabi_dsub>
 80036ac:	4602      	mov	r2, r0
 80036ae:	460b      	mov	r3, r1
 80036b0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	if ( temp < 0 ) {
 80036b4:	f04f 0200 	mov.w	r2, #0
 80036b8:	f04f 0300 	mov.w	r3, #0
 80036bc:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80036c0:	f7fd fa1c 	bl	8000afc <__aeabi_dcmplt>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <kinematicInverse+0x146>
		return FALSE;
 80036ca:	2300      	movs	r3, #0
 80036cc:	e136      	b.n	800393c <kinematicInverse+0x3b4>
	}
	s2_positive  = sqrt(temp); // Note that there are 2 solution: elbow up & elbow down
 80036ce:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 80036d2:	f015 ffd7 	bl	8019684 <sqrt>
 80036d6:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
	s2_negative	 = -s2_positive;
 80036da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036dc:	63bb      	str	r3, [r7, #56]	; 0x38
 80036de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80036e4:	63fb      	str	r3, [r7, #60]	; 0x3c

	theta2_positive = atan2(s2_positive,c2);
 80036e6:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 80036ea:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 80036ee:	f015 ffc7 	bl	8019680 <atan2>
 80036f2:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
	theta2_negative = atan2(s2_negative,c2);
 80036f6:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 80036fa:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 80036fe:	f015 ffbf 	bl	8019680 <atan2>
 8003702:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	// Choose relevant situation : nearest
	if ( fabs( theta2_positive - current.Theta2) <= fabs( theta2_negative - current.Theta2)) {
 8003706:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800370a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800370e:	f7fc fdcb 	bl	80002a8 <__aeabi_dsub>
 8003712:	4602      	mov	r2, r0
 8003714:	460b      	mov	r3, r1
 8003716:	4614      	mov	r4, r2
 8003718:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800371c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8003720:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003724:	f7fc fdc0 	bl	80002a8 <__aeabi_dsub>
 8003728:	4602      	mov	r2, r0
 800372a:	460b      	mov	r3, r1
 800372c:	4690      	mov	r8, r2
 800372e:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8003732:	4642      	mov	r2, r8
 8003734:	464b      	mov	r3, r9
 8003736:	4620      	mov	r0, r4
 8003738:	4629      	mov	r1, r5
 800373a:	f7fd f9e9 	bl	8000b10 <__aeabi_dcmple>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d008      	beq.n	8003756 <kinematicInverse+0x1ce>
		s2 		= s2_positive;
 8003744:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003748:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
		theta2 	= theta2_positive;
 800374c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8003750:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
 8003754:	e007      	b.n	8003766 <kinematicInverse+0x1de>
	} else {
		s2 		= s2_negative;
 8003756:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800375a:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
		theta2 	= theta2_negative;
 800375e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8003762:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	}

	s1 = ((a1 + a2*c2)*pWy - a2*s2*pWx) / (pWx*pWx + pWy*pWy);
 8003766:	f04f 0200 	mov.w	r2, #0
 800376a:	4b7f      	ldr	r3, [pc, #508]	; (8003968 <kinematicInverse+0x3e0>)
 800376c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003770:	f7fc ff52 	bl	8000618 <__aeabi_dmul>
 8003774:	4603      	mov	r3, r0
 8003776:	460c      	mov	r4, r1
 8003778:	4618      	mov	r0, r3
 800377a:	4621      	mov	r1, r4
 800377c:	a376      	add	r3, pc, #472	; (adr r3, 8003958 <kinematicInverse+0x3d0>)
 800377e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003782:	f7fc fd93 	bl	80002ac <__adddf3>
 8003786:	4603      	mov	r3, r0
 8003788:	460c      	mov	r4, r1
 800378a:	4618      	mov	r0, r3
 800378c:	4621      	mov	r1, r4
 800378e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003792:	f7fc ff41 	bl	8000618 <__aeabi_dmul>
 8003796:	4603      	mov	r3, r0
 8003798:	460c      	mov	r4, r1
 800379a:	4625      	mov	r5, r4
 800379c:	461c      	mov	r4, r3
 800379e:	f04f 0200 	mov.w	r2, #0
 80037a2:	4b71      	ldr	r3, [pc, #452]	; (8003968 <kinematicInverse+0x3e0>)
 80037a4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80037a8:	f7fc ff36 	bl	8000618 <__aeabi_dmul>
 80037ac:	4602      	mov	r2, r0
 80037ae:	460b      	mov	r3, r1
 80037b0:	4610      	mov	r0, r2
 80037b2:	4619      	mov	r1, r3
 80037b4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80037b8:	f7fc ff2e 	bl	8000618 <__aeabi_dmul>
 80037bc:	4602      	mov	r2, r0
 80037be:	460b      	mov	r3, r1
 80037c0:	4620      	mov	r0, r4
 80037c2:	4629      	mov	r1, r5
 80037c4:	f7fc fd70 	bl	80002a8 <__aeabi_dsub>
 80037c8:	4603      	mov	r3, r0
 80037ca:	460c      	mov	r4, r1
 80037cc:	4625      	mov	r5, r4
 80037ce:	461c      	mov	r4, r3
 80037d0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80037d4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80037d8:	f7fc ff1e 	bl	8000618 <__aeabi_dmul>
 80037dc:	4602      	mov	r2, r0
 80037de:	460b      	mov	r3, r1
 80037e0:	4690      	mov	r8, r2
 80037e2:	4699      	mov	r9, r3
 80037e4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80037e8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80037ec:	f7fc ff14 	bl	8000618 <__aeabi_dmul>
 80037f0:	4602      	mov	r2, r0
 80037f2:	460b      	mov	r3, r1
 80037f4:	4640      	mov	r0, r8
 80037f6:	4649      	mov	r1, r9
 80037f8:	f7fc fd58 	bl	80002ac <__adddf3>
 80037fc:	4602      	mov	r2, r0
 80037fe:	460b      	mov	r3, r1
 8003800:	4620      	mov	r0, r4
 8003802:	4629      	mov	r1, r5
 8003804:	f7fd f832 	bl	800086c <__aeabi_ddiv>
 8003808:	4603      	mov	r3, r0
 800380a:	460c      	mov	r4, r1
 800380c:	e9c7 3408 	strd	r3, r4, [r7, #32]
	c1 = ((a1 + a2*c2)*pWx + a2*s2*pWy) / (pWx*pWx + pWy*pWy);
 8003810:	f04f 0200 	mov.w	r2, #0
 8003814:	4b54      	ldr	r3, [pc, #336]	; (8003968 <kinematicInverse+0x3e0>)
 8003816:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800381a:	f7fc fefd 	bl	8000618 <__aeabi_dmul>
 800381e:	4603      	mov	r3, r0
 8003820:	460c      	mov	r4, r1
 8003822:	4618      	mov	r0, r3
 8003824:	4621      	mov	r1, r4
 8003826:	a34c      	add	r3, pc, #304	; (adr r3, 8003958 <kinematicInverse+0x3d0>)
 8003828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800382c:	f7fc fd3e 	bl	80002ac <__adddf3>
 8003830:	4603      	mov	r3, r0
 8003832:	460c      	mov	r4, r1
 8003834:	4618      	mov	r0, r3
 8003836:	4621      	mov	r1, r4
 8003838:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800383c:	f7fc feec 	bl	8000618 <__aeabi_dmul>
 8003840:	4603      	mov	r3, r0
 8003842:	460c      	mov	r4, r1
 8003844:	4625      	mov	r5, r4
 8003846:	461c      	mov	r4, r3
 8003848:	f04f 0200 	mov.w	r2, #0
 800384c:	4b46      	ldr	r3, [pc, #280]	; (8003968 <kinematicInverse+0x3e0>)
 800384e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003852:	f7fc fee1 	bl	8000618 <__aeabi_dmul>
 8003856:	4602      	mov	r2, r0
 8003858:	460b      	mov	r3, r1
 800385a:	4610      	mov	r0, r2
 800385c:	4619      	mov	r1, r3
 800385e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003862:	f7fc fed9 	bl	8000618 <__aeabi_dmul>
 8003866:	4602      	mov	r2, r0
 8003868:	460b      	mov	r3, r1
 800386a:	4620      	mov	r0, r4
 800386c:	4629      	mov	r1, r5
 800386e:	f7fc fd1d 	bl	80002ac <__adddf3>
 8003872:	4603      	mov	r3, r0
 8003874:	460c      	mov	r4, r1
 8003876:	4625      	mov	r5, r4
 8003878:	461c      	mov	r4, r3
 800387a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800387e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003882:	f7fc fec9 	bl	8000618 <__aeabi_dmul>
 8003886:	4602      	mov	r2, r0
 8003888:	460b      	mov	r3, r1
 800388a:	4690      	mov	r8, r2
 800388c:	4699      	mov	r9, r3
 800388e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003892:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003896:	f7fc febf 	bl	8000618 <__aeabi_dmul>
 800389a:	4602      	mov	r2, r0
 800389c:	460b      	mov	r3, r1
 800389e:	4640      	mov	r0, r8
 80038a0:	4649      	mov	r1, r9
 80038a2:	f7fc fd03 	bl	80002ac <__adddf3>
 80038a6:	4602      	mov	r2, r0
 80038a8:	460b      	mov	r3, r1
 80038aa:	4620      	mov	r0, r4
 80038ac:	4629      	mov	r1, r5
 80038ae:	f7fc ffdd 	bl	800086c <__aeabi_ddiv>
 80038b2:	4603      	mov	r3, r0
 80038b4:	460c      	mov	r4, r1
 80038b6:	e9c7 3406 	strd	r3, r4, [r7, #24]
	theta1 = atan2(s1,c1);
 80038ba:	ed97 1b06 	vldr	d1, [r7, #24]
 80038be:	ed97 0b08 	vldr	d0, [r7, #32]
 80038c2:	f015 fedd 	bl	8019680 <atan2>
 80038c6:	ed87 0b04 	vstr	d0, [r7, #16]
 	theta4 = theta1 + theta2 - pnt->roll;
 80038ca:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80038ce:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80038d2:	f7fc fceb 	bl	80002ac <__adddf3>
 80038d6:	4603      	mov	r3, r0
 80038d8:	460c      	mov	r4, r1
 80038da:	4618      	mov	r0, r3
 80038dc:	4621      	mov	r1, r4
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 80038e4:	461a      	mov	r2, r3
 80038e6:	4623      	mov	r3, r4
 80038e8:	f7fc fcde 	bl	80002a8 <__aeabi_dsub>
 80038ec:	4603      	mov	r3, r0
 80038ee:	460c      	mov	r4, r1
 80038f0:	e9c7 3402 	strd	r3, r4, [r7, #8]

	if ( SCARA_STATUS_OK != scaraCheckWorkSpace4(theta1, theta2, d3, theta4)) {
 80038f4:	ed97 3b02 	vldr	d3, [r7, #8]
 80038f8:	ed97 2b1a 	vldr	d2, [r7, #104]	; 0x68
 80038fc:	ed97 1b1e 	vldr	d1, [r7, #120]	; 0x78
 8003900:	ed97 0b04 	vldr	d0, [r7, #16]
 8003904:	f005 fad8 	bl	8008eb8 <scaraCheckWorkSpace4>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d001      	beq.n	8003912 <kinematicInverse+0x38a>
		return FALSE; // Over workspace !!!
 800390e:	2300      	movs	r3, #0
 8003910:	e014      	b.n	800393c <kinematicInverse+0x3b4>
	}
	pnt->Theta1 = theta1;
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003918:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	pnt->Theta2 = theta2;
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8003922:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	pnt->D3		= d3;
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 800392c:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	pnt->Theta4 = theta4;
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003936:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80

	return TRUE; // All is well
 800393a:	2301      	movs	r3, #1
}
 800393c:	4618      	mov	r0, r3
 800393e:	3780      	adds	r7, #128	; 0x80
 8003940:	46bd      	mov	sp, r7
 8003942:	e8bd 4fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003946:	b002      	add	sp, #8
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	f3af 8000 	nop.w
 8003950:	00000000 	.word	0x00000000
 8003954:	40eec800 	.word	0x40eec800
 8003958:	00000000 	.word	0x00000000
 800395c:	4068a000 	.word	0x4068a000
 8003960:	40d90000 	.word	0x40d90000
 8003964:	3ff00000 	.word	0x3ff00000
 8003968:	40640000 	.word	0x40640000
 800396c:	80000000 	.word	0x80000000
 8003970:	4060aa6e 	.word	0x4060aa6e
 8003974:	80000000 	.word	0x80000000
 8003978:	40402e14 	.word	0x40402e14
 800397c:	00000000 	.word	0x00000000
 8003980:	40e2f320 	.word	0x40e2f320

08003984 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003988:	f006 fe7e 	bl	800a688 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800398c:	f000 f810 	bl	80039b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003990:	f7ff fc04 	bl	800319c <MX_GPIO_Init>
  MX_DMA_Init();
 8003994:	f7fe fc34 	bl	8002200 <MX_DMA_Init>
  MX_UART4_Init();
 8003998:	f006 fd78 	bl	800a48c <MX_UART4_Init>
  MX_FSMC_Init();
 800399c:	f7ff fb36 	bl	800300c <MX_FSMC_Init>
  MX_TIM7_Init();
 80039a0:	f006 fd16 	bl	800a3d0 <MX_TIM7_Init>
  //lowlayer_writePulse(0, 0, 0, 0);
  //HAL_Delay(10);
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80039a4:	f7fe fc66 	bl	8002274 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80039a8:	f00d fc3c 	bl	8011224 <osKernelStart>
//  		  HAL_Delay(10);
//  	  }
//  lowlayer_writePulse(0, 0, 0, 0);
//  __NOP();

  while (1)
 80039ac:	e7fe      	b.n	80039ac <main+0x28>
	...

080039b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b094      	sub	sp, #80	; 0x50
 80039b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80039b6:	f107 0320 	add.w	r3, r7, #32
 80039ba:	2230      	movs	r2, #48	; 0x30
 80039bc:	2100      	movs	r1, #0
 80039be:	4618      	mov	r0, r3
 80039c0:	f011 fb3a 	bl	8015038 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80039c4:	f107 030c 	add.w	r3, r7, #12
 80039c8:	2200      	movs	r2, #0
 80039ca:	601a      	str	r2, [r3, #0]
 80039cc:	605a      	str	r2, [r3, #4]
 80039ce:	609a      	str	r2, [r3, #8]
 80039d0:	60da      	str	r2, [r3, #12]
 80039d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80039d4:	2300      	movs	r3, #0
 80039d6:	60bb      	str	r3, [r7, #8]
 80039d8:	4b28      	ldr	r3, [pc, #160]	; (8003a7c <SystemClock_Config+0xcc>)
 80039da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039dc:	4a27      	ldr	r2, [pc, #156]	; (8003a7c <SystemClock_Config+0xcc>)
 80039de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039e2:	6413      	str	r3, [r2, #64]	; 0x40
 80039e4:	4b25      	ldr	r3, [pc, #148]	; (8003a7c <SystemClock_Config+0xcc>)
 80039e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ec:	60bb      	str	r3, [r7, #8]
 80039ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80039f0:	2300      	movs	r3, #0
 80039f2:	607b      	str	r3, [r7, #4]
 80039f4:	4b22      	ldr	r3, [pc, #136]	; (8003a80 <SystemClock_Config+0xd0>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a21      	ldr	r2, [pc, #132]	; (8003a80 <SystemClock_Config+0xd0>)
 80039fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039fe:	6013      	str	r3, [r2, #0]
 8003a00:	4b1f      	ldr	r3, [pc, #124]	; (8003a80 <SystemClock_Config+0xd0>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a08:	607b      	str	r3, [r7, #4]
 8003a0a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003a10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a14:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003a16:	2302      	movs	r3, #2
 8003a18:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003a1a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003a20:	2308      	movs	r3, #8
 8003a22:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003a24:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8003a28:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003a2a:	2302      	movs	r3, #2
 8003a2c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003a2e:	2307      	movs	r3, #7
 8003a30:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a32:	f107 0320 	add.w	r3, r7, #32
 8003a36:	4618      	mov	r0, r3
 8003a38:	f008 fe9e 	bl	800c778 <HAL_RCC_OscConfig>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d001      	beq.n	8003a46 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8003a42:	f000 f831 	bl	8003aa8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a46:	230f      	movs	r3, #15
 8003a48:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a4a:	2302      	movs	r3, #2
 8003a4c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003a52:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003a56:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003a58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a5c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003a5e:	f107 030c 	add.w	r3, r7, #12
 8003a62:	2105      	movs	r1, #5
 8003a64:	4618      	mov	r0, r3
 8003a66:	f009 f8f7 	bl	800cc58 <HAL_RCC_ClockConfig>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d001      	beq.n	8003a74 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003a70:	f000 f81a 	bl	8003aa8 <Error_Handler>
  }
}
 8003a74:	bf00      	nop
 8003a76:	3750      	adds	r7, #80	; 0x50
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	40023800 	.word	0x40023800
 8003a80:	40007000 	.word	0x40007000

08003a84 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a04      	ldr	r2, [pc, #16]	; (8003aa4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d101      	bne.n	8003a9a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003a96:	f006 fe19 	bl	800a6cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003a9a:	bf00      	nop
 8003a9c:	3708      	adds	r7, #8
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	40001000 	.word	0x40001000

08003aa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003aac:	bf00      	nop
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr

08003ab6 <ringBuff_PushChar>:
 *  data		: data to write
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t	ringBuff_PushChar(RINGBUFFER_TypeDef *ringbuff, uint8_t data) {
 8003ab6:	b480      	push	{r7}
 8003ab8:	b083      	sub	sp, #12
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
 8003abe:	460b      	mov	r3, r1
 8003ac0:	70fb      	strb	r3, [r7, #3]
	if (ringbuff->isFull_Flag) {
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d001      	beq.n	8003ad0 <ringBuff_PushChar+0x1a>
		return FALSE;
 8003acc:	2300      	movs	r3, #0
 8003ace:	e024      	b.n	8003b1a <ringBuff_PushChar+0x64>
	} else {
			ringbuff->Array[ringbuff->head]	= data;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	78f9      	ldrb	r1, [r7, #3]
 8003ada:	54d1      	strb	r1, [r2, r3]
			ringbuff->head					= (ringbuff->head + 1) % RINGBUFFER_SIZE;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	425a      	negs	r2, r3
 8003ae6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003aea:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003aee:	bf58      	it	pl
 8003af0:	4253      	negpl	r3, r2
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
			if (ringbuff->head == ringbuff->tail) {
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d103      	bne.n	8003b10 <ringBuff_PushChar+0x5a>
				ringbuff->isFull_Flag = TRUE;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
			}
			ringbuff->isEmpty_Flag = FALSE;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 2409 	strb.w	r2, [r3, #1033]	; 0x409
			return TRUE;
 8003b18:	2301      	movs	r3, #1
	}
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	370c      	adds	r7, #12
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr

08003b26 <ringBuff_PopChar>:
 *  *ptr_data	: pointer of destination
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t	ringBuff_PopChar(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data) {
 8003b26:	b480      	push	{r7}
 8003b28:	b083      	sub	sp, #12
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]
 8003b2e:	6039      	str	r1, [r7, #0]
	if (ringbuff->isEmpty_Flag) {
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f893 3409 	ldrb.w	r3, [r3, #1033]	; 0x409
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d001      	beq.n	8003b3e <ringBuff_PopChar+0x18>
		return FALSE;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	e025      	b.n	8003b8a <ringBuff_PopChar+0x64>
	} else {
			*ptr_data		= ringbuff->Array[ringbuff->tail];
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	5cd2      	ldrb	r2, [r2, r3]
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	701a      	strb	r2, [r3, #0]
			ringbuff->tail	= (ringbuff->tail +1) % RINGBUFFER_SIZE;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003b52:	3301      	adds	r3, #1
 8003b54:	425a      	negs	r2, r3
 8003b56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b5a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003b5e:	bf58      	it	pl
 8003b60:	4253      	negpl	r3, r2
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
			if (ringbuff->head == ringbuff->tail) {
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d103      	bne.n	8003b80 <ringBuff_PopChar+0x5a>
				ringbuff->isEmpty_Flag = TRUE;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 2409 	strb.w	r2, [r3, #1033]	; 0x409
			}
			ringbuff->isFull_Flag = FALSE;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
			return TRUE;
 8003b88:	2301      	movs	r3, #1
	}
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr

08003b96 <ringBuff_PushArray>:
 *  *ptr_data	: pointer of source
 *  len			: maximum number of bytes that want to copy
 *
 *  returns:	: number of bytes copied
 */
int32_t ringBuff_PushArray(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data, int32_t len) {
 8003b96:	b580      	push	{r7, lr}
 8003b98:	b086      	sub	sp, #24
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	60f8      	str	r0, [r7, #12]
 8003b9e:	60b9      	str	r1, [r7, #8]
 8003ba0:	607a      	str	r2, [r7, #4]
	int16_t success_number;

	for (success_number = 0; success_number < len; success_number++) {
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	82fb      	strh	r3, [r7, #22]
 8003ba6:	e011      	b.n	8003bcc <ringBuff_PushArray+0x36>
		if ( !ringBuff_PushChar(ringbuff, *(ptr_data + success_number))) {
 8003ba8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003bac:	68ba      	ldr	r2, [r7, #8]
 8003bae:	4413      	add	r3, r2
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	68f8      	ldr	r0, [r7, #12]
 8003bb6:	f7ff ff7e 	bl	8003ab6 <ringBuff_PushChar>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d00b      	beq.n	8003bd8 <ringBuff_PushArray+0x42>
	for (success_number = 0; success_number < len; success_number++) {
 8003bc0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	82fb      	strh	r3, [r7, #22]
 8003bcc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	dce8      	bgt.n	8003ba8 <ringBuff_PushArray+0x12>
 8003bd6:	e000      	b.n	8003bda <ringBuff_PushArray+0x44>
			break;
 8003bd8:	bf00      	nop
		}// stop when ring buffer FULL
	}
	return success_number;
 8003bda:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3718      	adds	r7, #24
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}

08003be6 <ringBuff_PopArray>:
 *  *ptr_data	: pointer of destination
 *  len			: maximum number of bytes that want to copy
 *
 *  returns:	: number of bytes copied
 */
int32_t ringBuff_PopArray(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data, int32_t len) {
 8003be6:	b580      	push	{r7, lr}
 8003be8:	b086      	sub	sp, #24
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	60f8      	str	r0, [r7, #12]
 8003bee:	60b9      	str	r1, [r7, #8]
 8003bf0:	607a      	str	r2, [r7, #4]
	int32_t success_number;

	for (success_number = 0; success_number < len; success_number++) {
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	617b      	str	r3, [r7, #20]
 8003bf6:	e00c      	b.n	8003c12 <ringBuff_PopArray+0x2c>
		if ( !ringBuff_PopChar(ringbuff, (ptr_data + success_number))) {
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	68ba      	ldr	r2, [r7, #8]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	4619      	mov	r1, r3
 8003c00:	68f8      	ldr	r0, [r7, #12]
 8003c02:	f7ff ff90 	bl	8003b26 <ringBuff_PopChar>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d007      	beq.n	8003c1c <ringBuff_PopArray+0x36>
	for (success_number = 0; success_number < len; success_number++) {
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	3301      	adds	r3, #1
 8003c10:	617b      	str	r3, [r7, #20]
 8003c12:	697a      	ldr	r2, [r7, #20]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	dbee      	blt.n	8003bf8 <ringBuff_PopArray+0x12>
 8003c1a:	e000      	b.n	8003c1e <ringBuff_PopArray+0x38>
			break;
 8003c1c:	bf00      	nop
		}// stop when ring buffer EMPTY
	}
	return success_number;
 8003c1e:	697b      	ldr	r3, [r7, #20]
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3718      	adds	r7, #24
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <ringBuff_DistanceOf>:
 *  cmp_char	: compare character
 *
 *  returns:	: distance from 'tail' to 'cmp_char'
 *  			  -1 'cmp_char' could not be found.
 */
int32_t	ringBuff_DistanceOf	(RINGBUFFER_TypeDef *ringbuff, uint8_t cmp_char) {
 8003c28:	b480      	push	{r7}
 8003c2a:	b087      	sub	sp, #28
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	460b      	mov	r3, r1
 8003c32:	70fb      	strb	r3, [r7, #3]
	int32_t index;
	int32_t distance = 0;
 8003c34:	2300      	movs	r3, #0
 8003c36:	613b      	str	r3, [r7, #16]

	index = ringbuff->tail;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003c3e:	617b      	str	r3, [r7, #20]
	if (ringbuff->isFull_Flag) {
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d036      	beq.n	8003cb8 <ringBuff_DistanceOf+0x90>
		for ( int32_t i = 0; i < RINGBUFFER_SIZE; i++, index = (index + 1) % RINGBUFFER_SIZE) {
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	60fb      	str	r3, [r7, #12]
 8003c4e:	e018      	b.n	8003c82 <ringBuff_DistanceOf+0x5a>
				if ( cmp_char == ringbuff->Array[index]) {
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	4413      	add	r3, r2
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	78fa      	ldrb	r2, [r7, #3]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d101      	bne.n	8003c62 <ringBuff_DistanceOf+0x3a>
					return distance;
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	e037      	b.n	8003cd2 <ringBuff_DistanceOf+0xaa>
				}
				distance++;
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	3301      	adds	r3, #1
 8003c66:	613b      	str	r3, [r7, #16]
		for ( int32_t i = 0; i < RINGBUFFER_SIZE; i++, index = (index + 1) % RINGBUFFER_SIZE) {
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	60fb      	str	r3, [r7, #12]
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	3301      	adds	r3, #1
 8003c72:	425a      	negs	r2, r3
 8003c74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c78:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003c7c:	bf58      	it	pl
 8003c7e:	4253      	negpl	r3, r2
 8003c80:	617b      	str	r3, [r7, #20]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c88:	dbe2      	blt.n	8003c50 <ringBuff_DistanceOf+0x28>
 8003c8a:	e020      	b.n	8003cce <ringBuff_DistanceOf+0xa6>
			}

	} else {
		for ( ; (index != ringbuff->head) || !ringbuff->isEmpty_Flag; index = (index + 1) % RINGBUFFER_SIZE) {
				if ( cmp_char == ringbuff->Array[index]) {
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	4413      	add	r3, r2
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	78fa      	ldrb	r2, [r7, #3]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d101      	bne.n	8003c9e <ringBuff_DistanceOf+0x76>
					return distance;
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	e019      	b.n	8003cd2 <ringBuff_DistanceOf+0xaa>
				}
				distance++;
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	613b      	str	r3, [r7, #16]
		for ( ; (index != ringbuff->head) || !ringbuff->isEmpty_Flag; index = (index + 1) % RINGBUFFER_SIZE) {
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	425a      	negs	r2, r3
 8003caa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cae:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003cb2:	bf58      	it	pl
 8003cb4:	4253      	negpl	r3, r2
 8003cb6:	617b      	str	r3, [r7, #20]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003cbe:	697a      	ldr	r2, [r7, #20]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d1e3      	bne.n	8003c8c <ringBuff_DistanceOf+0x64>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f893 3409 	ldrb.w	r3, [r3, #1033]	; 0x409
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d0de      	beq.n	8003c8c <ringBuff_DistanceOf+0x64>
			}
	}
	return -1;
 8003cce:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	371c      	adds	r7, #28
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
	...

08003ce0 <lowlayer_scanReset>:
uint8_t state_scan;
uint8_t scan_flag;

const int8_t	pulse_scan[4] = {3, 5, 5, 10};

void	lowlayer_scanReset(void) {
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	af00      	add	r7, sp, #0
	pulse_accumulate[0] = 0;
 8003ce4:	4b10      	ldr	r3, [pc, #64]	; (8003d28 <lowlayer_scanReset+0x48>)
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	601a      	str	r2, [r3, #0]
	pulse_accumulate[1] = 0;
 8003cea:	4b0f      	ldr	r3, [pc, #60]	; (8003d28 <lowlayer_scanReset+0x48>)
 8003cec:	2200      	movs	r2, #0
 8003cee:	605a      	str	r2, [r3, #4]
	pulse_accumulate[2] = 0;
 8003cf0:	4b0d      	ldr	r3, [pc, #52]	; (8003d28 <lowlayer_scanReset+0x48>)
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	609a      	str	r2, [r3, #8]
	pulse_accumulate[3] = 0;
 8003cf6:	4b0c      	ldr	r3, [pc, #48]	; (8003d28 <lowlayer_scanReset+0x48>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	60da      	str	r2, [r3, #12]

	position_encoder[0] = 0;
 8003cfc:	4b0b      	ldr	r3, [pc, #44]	; (8003d2c <lowlayer_scanReset+0x4c>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	601a      	str	r2, [r3, #0]
	position_encoder[1] = 0;
 8003d02:	4b0a      	ldr	r3, [pc, #40]	; (8003d2c <lowlayer_scanReset+0x4c>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	605a      	str	r2, [r3, #4]
	position_encoder[2] = 0;
 8003d08:	4b08      	ldr	r3, [pc, #32]	; (8003d2c <lowlayer_scanReset+0x4c>)
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	609a      	str	r2, [r3, #8]

	scan_flag = 0;
 8003d0e:	4b08      	ldr	r3, [pc, #32]	; (8003d30 <lowlayer_scanReset+0x50>)
 8003d10:	2200      	movs	r2, #0
 8003d12:	701a      	strb	r2, [r3, #0]
	state_scan = 0;
 8003d14:	4b07      	ldr	r3, [pc, #28]	; (8003d34 <lowlayer_scanReset+0x54>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CAPTURE_ENABLE_GPIO_Port, CAPTURE_ENABLE_Pin, GPIO_PIN_RESET);
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	2108      	movs	r1, #8
 8003d1e:	4806      	ldr	r0, [pc, #24]	; (8003d38 <lowlayer_scanReset+0x58>)
 8003d20:	f007 fb30 	bl	800b384 <HAL_GPIO_WritePin>
}
 8003d24:	bf00      	nop
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	20005360 	.word	0x20005360
 8003d2c:	20005374 	.word	0x20005374
 8003d30:	20005370 	.word	0x20005370
 8003d34:	20005390 	.word	0x20005390
 8003d38:	40020c00 	.word	0x40020c00
 8003d3c:	00000000 	.word	0x00000000

08003d40 <lowlayer_scanFlow>:

uint8_t	lowlayer_scanFlow(void) {
 8003d40:	b590      	push	{r4, r7, lr}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
	// Scan limit switch from 3 to 0
	int8_t pulse[4] = {0, 0, 0 ,0};
 8003d46:	2300      	movs	r3, #0
 8003d48:	607b      	str	r3, [r7, #4]
	lowlayer_updateLimit();
 8003d4a:	f000 fe87 	bl	8004a5c <lowlayer_updateLimit>
	if (state_scan < 4) {
 8003d4e:	4b98      	ldr	r3, [pc, #608]	; (8003fb0 <lowlayer_scanFlow+0x270>)
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	2b03      	cmp	r3, #3
 8003d54:	d837      	bhi.n	8003dc6 <lowlayer_scanFlow+0x86>
		if (limit_switch[3 - state_scan] == 0) {
 8003d56:	4b96      	ldr	r3, [pc, #600]	; (8003fb0 <lowlayer_scanFlow+0x270>)
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	f1c3 0303 	rsb	r3, r3, #3
 8003d5e:	4a95      	ldr	r2, [pc, #596]	; (8003fb4 <lowlayer_scanFlow+0x274>)
 8003d60:	5cd3      	ldrb	r3, [r2, r3]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d121      	bne.n	8003daa <lowlayer_scanFlow+0x6a>
			pulse[3 - state_scan] = pulse_scan[3 - state_scan];
 8003d66:	4b92      	ldr	r3, [pc, #584]	; (8003fb0 <lowlayer_scanFlow+0x270>)
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	f1c3 0203 	rsb	r2, r3, #3
 8003d6e:	4b90      	ldr	r3, [pc, #576]	; (8003fb0 <lowlayer_scanFlow+0x270>)
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	f1c3 0303 	rsb	r3, r3, #3
 8003d76:	4990      	ldr	r1, [pc, #576]	; (8003fb8 <lowlayer_scanFlow+0x278>)
 8003d78:	568a      	ldrsb	r2, [r1, r2]
 8003d7a:	f107 0108 	add.w	r1, r7, #8
 8003d7e:	440b      	add	r3, r1
 8003d80:	f803 2c04 	strb.w	r2, [r3, #-4]
			lowlayer_writePulse(-pulse[0], pulse[1], -pulse[2], pulse[3]);
 8003d84:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	425b      	negs	r3, r3
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	b258      	sxtb	r0, r3
 8003d90:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8003d94:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	425b      	negs	r3, r3
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	b25a      	sxtb	r2, r3
 8003da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003da4:	f000 fcd8 	bl	8004758 <lowlayer_writePulse>
 8003da8:	e00b      	b.n	8003dc2 <lowlayer_scanFlow+0x82>
		} else {
			state_scan++;
 8003daa:	4b81      	ldr	r3, [pc, #516]	; (8003fb0 <lowlayer_scanFlow+0x270>)
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	3301      	adds	r3, #1
 8003db0:	b2da      	uxtb	r2, r3
 8003db2:	4b7f      	ldr	r3, [pc, #508]	; (8003fb0 <lowlayer_scanFlow+0x270>)
 8003db4:	701a      	strb	r2, [r3, #0]
			lowlayer_writePulse(0, 0, 0, 0);
 8003db6:	2300      	movs	r3, #0
 8003db8:	2200      	movs	r2, #0
 8003dba:	2100      	movs	r1, #0
 8003dbc:	2000      	movs	r0, #0
 8003dbe:	f000 fccb 	bl	8004758 <lowlayer_writePulse>
		}

		return FALSE;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	e0d8      	b.n	8003f78 <lowlayer_scanFlow+0x238>
	} else {
		HAL_GPIO_WritePin(CAPTURE_ENABLE_GPIO_Port, CAPTURE_ENABLE_Pin, GPIO_PIN_SET);
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	2108      	movs	r1, #8
 8003dca:	487c      	ldr	r0, [pc, #496]	; (8003fbc <lowlayer_scanFlow+0x27c>)
 8003dcc:	f007 fada 	bl	800b384 <HAL_GPIO_WritePin>
		lowlayer_updateCapture();
 8003dd0:	f000 fe28 	bl	8004a24 <lowlayer_updateCapture>
		lowlayer_writePulse(0, 0, 0, 0);
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	2100      	movs	r1, #0
 8003dda:	2000      	movs	r0, #0
 8003ddc:	f000 fcbc 	bl	8004758 <lowlayer_writePulse>
		scan_flag = 1;
 8003de0:	4b77      	ldr	r3, [pc, #476]	; (8003fc0 <lowlayer_scanFlow+0x280>)
 8003de2:	2201      	movs	r2, #1
 8003de4:	701a      	strb	r2, [r3, #0]
		// Update offset
		offset_encoder[0] 	= position_capture[0];
 8003de6:	4b77      	ldr	r3, [pc, #476]	; (8003fc4 <lowlayer_scanFlow+0x284>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a77      	ldr	r2, [pc, #476]	; (8003fc8 <lowlayer_scanFlow+0x288>)
 8003dec:	6013      	str	r3, [r2, #0]
		offset_encoder[1] 	= position_capture[1];
 8003dee:	4b75      	ldr	r3, [pc, #468]	; (8003fc4 <lowlayer_scanFlow+0x284>)
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	4a75      	ldr	r2, [pc, #468]	; (8003fc8 <lowlayer_scanFlow+0x288>)
 8003df4:	6053      	str	r3, [r2, #4]
		offset_encoder[2] 	= position_capture[2];
 8003df6:	4b73      	ldr	r3, [pc, #460]	; (8003fc4 <lowlayer_scanFlow+0x284>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	4a73      	ldr	r2, [pc, #460]	; (8003fc8 <lowlayer_scanFlow+0x288>)
 8003dfc:	6093      	str	r3, [r2, #8]
		offset_stepper		= pulse_accumulate[3];
 8003dfe:	4b73      	ldr	r3, [pc, #460]	; (8003fcc <lowlayer_scanFlow+0x28c>)
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	4a73      	ldr	r2, [pc, #460]	; (8003fd0 <lowlayer_scanFlow+0x290>)
 8003e04:	6013      	str	r3, [r2, #0]
		// LOG offset
		LOG_REPORT("offset encoder 0", offset_encoder[0]);
 8003e06:	4b70      	ldr	r3, [pc, #448]	; (8003fc8 <lowlayer_scanFlow+0x288>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	4871      	ldr	r0, [pc, #452]	; (8003fd4 <lowlayer_scanFlow+0x294>)
 8003e10:	f7fd fe24 	bl	8001a5c <LOG_REPORT>
		LOG_REPORT("offset encoder 1", offset_encoder[1]);
 8003e14:	4b6c      	ldr	r3, [pc, #432]	; (8003fc8 <lowlayer_scanFlow+0x288>)
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	486e      	ldr	r0, [pc, #440]	; (8003fd8 <lowlayer_scanFlow+0x298>)
 8003e1e:	f7fd fe1d 	bl	8001a5c <LOG_REPORT>
		LOG_REPORT("offset encoder 2", offset_encoder[2]);
 8003e22:	4b69      	ldr	r3, [pc, #420]	; (8003fc8 <lowlayer_scanFlow+0x288>)
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	4619      	mov	r1, r3
 8003e2a:	486c      	ldr	r0, [pc, #432]	; (8003fdc <lowlayer_scanFlow+0x29c>)
 8003e2c:	f7fd fe16 	bl	8001a5c <LOG_REPORT>
		LOG_REPORT("offset stepper", offset_stepper);
 8003e30:	4b67      	ldr	r3, [pc, #412]	; (8003fd0 <lowlayer_scanFlow+0x290>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	4619      	mov	r1, r3
 8003e38:	4869      	ldr	r0, [pc, #420]	; (8003fe0 <lowlayer_scanFlow+0x2a0>)
 8003e3a:	f7fd fe0f 	bl	8001a5c <LOG_REPORT>

		offset_setpoint[0]	= HARD_LIM0_NEG
				- DIR_ENCODER_0*offset_encoder[0]*2.0*PI/ENCODER_J0;
 8003e3e:	4b62      	ldr	r3, [pc, #392]	; (8003fc8 <lowlayer_scanFlow+0x288>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	ee07 3a90 	vmov	s15, r3
 8003e46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e4a:	ee17 0a90 	vmov	r0, s15
 8003e4e:	f7fc fb8b 	bl	8000568 <__aeabi_f2d>
 8003e52:	4602      	mov	r2, r0
 8003e54:	460b      	mov	r3, r1
 8003e56:	f7fc fa29 	bl	80002ac <__adddf3>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	460c      	mov	r4, r1
 8003e5e:	4618      	mov	r0, r3
 8003e60:	4621      	mov	r1, r4
 8003e62:	a347      	add	r3, pc, #284	; (adr r3, 8003f80 <lowlayer_scanFlow+0x240>)
 8003e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e68:	f7fc fbd6 	bl	8000618 <__aeabi_dmul>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	460c      	mov	r4, r1
 8003e70:	4618      	mov	r0, r3
 8003e72:	4621      	mov	r1, r4
 8003e74:	a344      	add	r3, pc, #272	; (adr r3, 8003f88 <lowlayer_scanFlow+0x248>)
 8003e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e7a:	f7fc fcf7 	bl	800086c <__aeabi_ddiv>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	460c      	mov	r4, r1
 8003e82:	461a      	mov	r2, r3
 8003e84:	4623      	mov	r3, r4
 8003e86:	a142      	add	r1, pc, #264	; (adr r1, 8003f90 <lowlayer_scanFlow+0x250>)
 8003e88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003e8c:	f7fc fa0c 	bl	80002a8 <__aeabi_dsub>
 8003e90:	4603      	mov	r3, r0
 8003e92:	460c      	mov	r4, r1
		offset_setpoint[0]	= HARD_LIM0_NEG
 8003e94:	4a53      	ldr	r2, [pc, #332]	; (8003fe4 <lowlayer_scanFlow+0x2a4>)
 8003e96:	e9c2 3400 	strd	r3, r4, [r2]
		offset_setpoint[1]	= HARD_LIM1_POS
				- DIR_ENCODER_1*offset_encoder[1]*2.0*PI/ENCODER_J1;
 8003e9a:	4b4b      	ldr	r3, [pc, #300]	; (8003fc8 <lowlayer_scanFlow+0x288>)
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	ee07 3a90 	vmov	s15, r3
 8003ea2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ea6:	ee17 0a90 	vmov	r0, s15
 8003eaa:	f7fc fb5d 	bl	8000568 <__aeabi_f2d>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	f7fc f9fb 	bl	80002ac <__adddf3>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	460c      	mov	r4, r1
 8003eba:	4618      	mov	r0, r3
 8003ebc:	4621      	mov	r1, r4
 8003ebe:	a330      	add	r3, pc, #192	; (adr r3, 8003f80 <lowlayer_scanFlow+0x240>)
 8003ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec4:	f7fc fba8 	bl	8000618 <__aeabi_dmul>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	460c      	mov	r4, r1
 8003ecc:	4618      	mov	r0, r3
 8003ece:	4621      	mov	r1, r4
 8003ed0:	f04f 0200 	mov.w	r2, #0
 8003ed4:	4b44      	ldr	r3, [pc, #272]	; (8003fe8 <lowlayer_scanFlow+0x2a8>)
 8003ed6:	f7fc fcc9 	bl	800086c <__aeabi_ddiv>
 8003eda:	4603      	mov	r3, r0
 8003edc:	460c      	mov	r4, r1
 8003ede:	461a      	mov	r2, r3
 8003ee0:	4623      	mov	r3, r4
 8003ee2:	a12d      	add	r1, pc, #180	; (adr r1, 8003f98 <lowlayer_scanFlow+0x258>)
 8003ee4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003ee8:	f7fc f9de 	bl	80002a8 <__aeabi_dsub>
 8003eec:	4603      	mov	r3, r0
 8003eee:	460c      	mov	r4, r1
		offset_setpoint[1]	= HARD_LIM1_POS
 8003ef0:	4a3c      	ldr	r2, [pc, #240]	; (8003fe4 <lowlayer_scanFlow+0x2a4>)
 8003ef2:	e9c2 3402 	strd	r3, r4, [r2, #8]
		offset_setpoint[2]	= HARD_LIM2_NEG
				- DIR_ENCODER_2*offset_encoder[2]/ENCODER_J2;
 8003ef6:	4b34      	ldr	r3, [pc, #208]	; (8003fc8 <lowlayer_scanFlow+0x288>)
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	ee07 3a90 	vmov	s15, r3
 8003efe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f02:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8003fec <lowlayer_scanFlow+0x2ac>
 8003f06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f0a:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8003ff0 <lowlayer_scanFlow+0x2b0>
 8003f0e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003f12:	ee17 0a90 	vmov	r0, s15
 8003f16:	f7fc fb27 	bl	8000568 <__aeabi_f2d>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	460c      	mov	r4, r1
		offset_setpoint[2]	= HARD_LIM2_NEG
 8003f1e:	4a31      	ldr	r2, [pc, #196]	; (8003fe4 <lowlayer_scanFlow+0x2a4>)
 8003f20:	e9c2 3404 	strd	r3, r4, [r2, #16]
		offset_setpoint[3]  = HARD_LIM3_POS
				- offset_stepper*2.0*PI/GEAR_J3;
 8003f24:	4b2a      	ldr	r3, [pc, #168]	; (8003fd0 <lowlayer_scanFlow+0x290>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f7fc fb0b 	bl	8000544 <__aeabi_i2d>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	460b      	mov	r3, r1
 8003f32:	f7fc f9bb 	bl	80002ac <__adddf3>
 8003f36:	4603      	mov	r3, r0
 8003f38:	460c      	mov	r4, r1
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	4621      	mov	r1, r4
 8003f3e:	a310      	add	r3, pc, #64	; (adr r3, 8003f80 <lowlayer_scanFlow+0x240>)
 8003f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f44:	f7fc fb68 	bl	8000618 <__aeabi_dmul>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	460c      	mov	r4, r1
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	4621      	mov	r1, r4
 8003f50:	a313      	add	r3, pc, #76	; (adr r3, 8003fa0 <lowlayer_scanFlow+0x260>)
 8003f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f56:	f7fc fc89 	bl	800086c <__aeabi_ddiv>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	460c      	mov	r4, r1
 8003f5e:	461a      	mov	r2, r3
 8003f60:	4623      	mov	r3, r4
 8003f62:	a111      	add	r1, pc, #68	; (adr r1, 8003fa8 <lowlayer_scanFlow+0x268>)
 8003f64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003f68:	f7fc f99e 	bl	80002a8 <__aeabi_dsub>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	460c      	mov	r4, r1
		offset_setpoint[3]  = HARD_LIM3_POS
 8003f70:	4a1c      	ldr	r2, [pc, #112]	; (8003fe4 <lowlayer_scanFlow+0x2a4>)
 8003f72:	e9c2 3406 	strd	r3, r4, [r2, #24]

		return TRUE;
 8003f76:	2301      	movs	r3, #1
	}
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd90      	pop	{r4, r7, pc}
 8003f80:	60000000 	.word	0x60000000
 8003f84:	400921fb 	.word	0x400921fb
 8003f88:	00000000 	.word	0x00000000
 8003f8c:	40f38800 	.word	0x40f38800
 8003f90:	40000000 	.word	0x40000000
 8003f94:	bff9f17a 	.word	0xbff9f17a
 8003f98:	80000000 	.word	0x80000000
 8003f9c:	40039716 	.word	0x40039716
 8003fa0:	a0000000 	.word	0xa0000000
 8003fa4:	40d3bca1 	.word	0x40d3bca1
 8003fa8:	60000000 	.word	0x60000000
 8003fac:	400852e3 	.word	0x400852e3
 8003fb0:	20005390 	.word	0x20005390
 8003fb4:	20005380 	.word	0x20005380
 8003fb8:	0801b30c 	.word	0x0801b30c
 8003fbc:	40020c00 	.word	0x40020c00
 8003fc0:	20005370 	.word	0x20005370
 8003fc4:	20005384 	.word	0x20005384
 8003fc8:	200053b8 	.word	0x200053b8
 8003fcc:	20005360 	.word	0x20005360
 8003fd0:	20005394 	.word	0x20005394
 8003fd4:	0801b120 	.word	0x0801b120
 8003fd8:	0801b134 	.word	0x0801b134
 8003fdc:	0801b148 	.word	0x0801b148
 8003fe0:	0801b15c 	.word	0x0801b15c
 8003fe4:	20005398 	.word	0x20005398
 8003fe8:	40ff4000 	.word	0x40ff4000
 8003fec:	4426aaab 	.word	0x4426aaab
 8003ff0:	400f1aa0 	.word	0x400f1aa0
 8003ff4:	00000000 	.word	0x00000000

08003ff8 <lowlayer_goToSoftLimit>:

uint8_t	lowlayer_goToSoftLimit(SCARA_PositionTypeDef *setpoint) {
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
	int8_t pulse[4] = {0, 0, 0 ,0};
 8004000:	2300      	movs	r3, #0
 8004002:	60bb      	str	r3, [r7, #8]
	uint8_t check = 0;
 8004004:	2300      	movs	r3, #0
 8004006:	73fb      	strb	r3, [r7, #15]
	lowlayer_readSetPosition(setpoint);
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f000 f94d 	bl	80042a8 <lowlayer_readSetPosition>
	if (setpoint->Theta1 < LIM_MIN_J0) {
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8004014:	a330      	add	r3, pc, #192	; (adr r3, 80040d8 <lowlayer_goToSoftLimit+0xe0>)
 8004016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800401a:	f7fc fd6f 	bl	8000afc <__aeabi_dcmplt>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d004      	beq.n	800402e <lowlayer_goToSoftLimit+0x36>
		pulse[0] = pulse_scan[0];
 8004024:	2303      	movs	r3, #3
 8004026:	723b      	strb	r3, [r7, #8]
		check++;
 8004028:	7bfb      	ldrb	r3, [r7, #15]
 800402a:	3301      	adds	r3, #1
 800402c:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->Theta2 > LIM_MAX_J1) {
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 8004034:	a32a      	add	r3, pc, #168	; (adr r3, 80040e0 <lowlayer_goToSoftLimit+0xe8>)
 8004036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800403a:	f7fc fd7d 	bl	8000b38 <__aeabi_dcmpgt>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d004      	beq.n	800404e <lowlayer_goToSoftLimit+0x56>
		pulse[1] = pulse_scan[1];
 8004044:	2305      	movs	r3, #5
 8004046:	727b      	strb	r3, [r7, #9]
		check++;
 8004048:	7bfb      	ldrb	r3, [r7, #15]
 800404a:	3301      	adds	r3, #1
 800404c:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->D3 < LIM_MIN_J2) {
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8004054:	f04f 0200 	mov.w	r2, #0
 8004058:	f04f 0300 	mov.w	r3, #0
 800405c:	f7fc fd4e 	bl	8000afc <__aeabi_dcmplt>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d004      	beq.n	8004070 <lowlayer_goToSoftLimit+0x78>
		pulse[2] = pulse_scan[2];
 8004066:	2305      	movs	r3, #5
 8004068:	72bb      	strb	r3, [r7, #10]
		check++;
 800406a:	7bfb      	ldrb	r3, [r7, #15]
 800406c:	3301      	adds	r3, #1
 800406e:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->Theta4 > LIM_MAX_J3) {
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 8004076:	a31c      	add	r3, pc, #112	; (adr r3, 80040e8 <lowlayer_goToSoftLimit+0xf0>)
 8004078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800407c:	f7fc fd5c 	bl	8000b38 <__aeabi_dcmpgt>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d004      	beq.n	8004090 <lowlayer_goToSoftLimit+0x98>
		pulse[3] = pulse_scan[3];
 8004086:	230a      	movs	r3, #10
 8004088:	72fb      	strb	r3, [r7, #11]
		check++;
 800408a:	7bfb      	ldrb	r3, [r7, #15]
 800408c:	3301      	adds	r3, #1
 800408e:	73fb      	strb	r3, [r7, #15]
	}

	if (check > 0) {
 8004090:	7bfb      	ldrb	r3, [r7, #15]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d013      	beq.n	80040be <lowlayer_goToSoftLimit+0xc6>
		lowlayer_writePulse(pulse[0], -pulse[1], pulse[2], -pulse[3]);
 8004096:	f997 0008 	ldrsb.w	r0, [r7, #8]
 800409a:	f997 3009 	ldrsb.w	r3, [r7, #9]
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	425b      	negs	r3, r3
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	b259      	sxtb	r1, r3
 80040a6:	f997 200a 	ldrsb.w	r2, [r7, #10]
 80040aa:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	425b      	negs	r3, r3
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	b25b      	sxtb	r3, r3
 80040b6:	f000 fb4f 	bl	8004758 <lowlayer_writePulse>
		return FALSE;
 80040ba:	2300      	movs	r3, #0
 80040bc:	e006      	b.n	80040cc <lowlayer_goToSoftLimit+0xd4>
	} else {
		lowlayer_writePulse(0, 0, 0, 0);
 80040be:	2300      	movs	r3, #0
 80040c0:	2200      	movs	r2, #0
 80040c2:	2100      	movs	r1, #0
 80040c4:	2000      	movs	r0, #0
 80040c6:	f000 fb47 	bl	8004758 <lowlayer_writePulse>
		return TRUE;
 80040ca:	2301      	movs	r3, #1
	}
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3710      	adds	r7, #16
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	f3af 8000 	nop.w
 80040d8:	daaaaaab 	.word	0xdaaaaaab
 80040dc:	bff7bc89 	.word	0xbff7bc89
 80040e0:	88000000 	.word	0x88000000
 80040e4:	4002d97c 	.word	0x4002d97c
 80040e8:	daaaaaab 	.word	0xdaaaaaab
 80040ec:	4007bc89 	.word	0x4007bc89

080040f0 <lowlayer_readTruePosition>:

void	lowlayer_readTruePosition(SCARA_PositionTypeDef *true) {
 80040f0:	b590      	push	{r4, r7, lr}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
	lowlayer_updateEncoder();
 80040f8:	f000 fc78 	bl	80049ec <lowlayer_updateEncoder>
	true->Theta1 = HARD_LIM0_NEG
			+ DIR_ENCODER_0*(position_encoder[0] - offset_encoder[0])*2.0*PI/ENCODER_J0; // Servo Motor
 80040fc:	4b62      	ldr	r3, [pc, #392]	; (8004288 <lowlayer_readTruePosition+0x198>)
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	4b62      	ldr	r3, [pc, #392]	; (800428c <lowlayer_readTruePosition+0x19c>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	ee07 3a90 	vmov	s15, r3
 800410a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800410e:	ee17 0a90 	vmov	r0, s15
 8004112:	f7fc fa29 	bl	8000568 <__aeabi_f2d>
 8004116:	4602      	mov	r2, r0
 8004118:	460b      	mov	r3, r1
 800411a:	f7fc f8c7 	bl	80002ac <__adddf3>
 800411e:	4603      	mov	r3, r0
 8004120:	460c      	mov	r4, r1
 8004122:	4618      	mov	r0, r3
 8004124:	4621      	mov	r1, r4
 8004126:	a34c      	add	r3, pc, #304	; (adr r3, 8004258 <lowlayer_readTruePosition+0x168>)
 8004128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800412c:	f7fc fa74 	bl	8000618 <__aeabi_dmul>
 8004130:	4603      	mov	r3, r0
 8004132:	460c      	mov	r4, r1
 8004134:	4618      	mov	r0, r3
 8004136:	4621      	mov	r1, r4
 8004138:	a349      	add	r3, pc, #292	; (adr r3, 8004260 <lowlayer_readTruePosition+0x170>)
 800413a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800413e:	f7fc fb95 	bl	800086c <__aeabi_ddiv>
 8004142:	4603      	mov	r3, r0
 8004144:	460c      	mov	r4, r1
 8004146:	4618      	mov	r0, r3
 8004148:	4621      	mov	r1, r4
 800414a:	a347      	add	r3, pc, #284	; (adr r3, 8004268 <lowlayer_readTruePosition+0x178>)
 800414c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004150:	f7fc f8aa 	bl	80002a8 <__aeabi_dsub>
 8004154:	4603      	mov	r3, r0
 8004156:	460c      	mov	r4, r1
	true->Theta1 = HARD_LIM0_NEG
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68

	true->Theta2 = HARD_LIM1_POS
			+ DIR_ENCODER_1*(position_encoder[1] - offset_encoder[1])*2.0*PI/ENCODER_J1; // Servo Motor
 800415e:	4b4a      	ldr	r3, [pc, #296]	; (8004288 <lowlayer_readTruePosition+0x198>)
 8004160:	685a      	ldr	r2, [r3, #4]
 8004162:	4b4a      	ldr	r3, [pc, #296]	; (800428c <lowlayer_readTruePosition+0x19c>)
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	ee07 3a90 	vmov	s15, r3
 800416c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004170:	ee17 0a90 	vmov	r0, s15
 8004174:	f7fc f9f8 	bl	8000568 <__aeabi_f2d>
 8004178:	4602      	mov	r2, r0
 800417a:	460b      	mov	r3, r1
 800417c:	f7fc f896 	bl	80002ac <__adddf3>
 8004180:	4603      	mov	r3, r0
 8004182:	460c      	mov	r4, r1
 8004184:	4618      	mov	r0, r3
 8004186:	4621      	mov	r1, r4
 8004188:	a333      	add	r3, pc, #204	; (adr r3, 8004258 <lowlayer_readTruePosition+0x168>)
 800418a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800418e:	f7fc fa43 	bl	8000618 <__aeabi_dmul>
 8004192:	4603      	mov	r3, r0
 8004194:	460c      	mov	r4, r1
 8004196:	4618      	mov	r0, r3
 8004198:	4621      	mov	r1, r4
 800419a:	f04f 0200 	mov.w	r2, #0
 800419e:	4b3c      	ldr	r3, [pc, #240]	; (8004290 <lowlayer_readTruePosition+0x1a0>)
 80041a0:	f7fc fb64 	bl	800086c <__aeabi_ddiv>
 80041a4:	4603      	mov	r3, r0
 80041a6:	460c      	mov	r4, r1
 80041a8:	4618      	mov	r0, r3
 80041aa:	4621      	mov	r1, r4
 80041ac:	a330      	add	r3, pc, #192	; (adr r3, 8004270 <lowlayer_readTruePosition+0x180>)
 80041ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b2:	f7fc f87b 	bl	80002ac <__adddf3>
 80041b6:	4603      	mov	r3, r0
 80041b8:	460c      	mov	r4, r1
	true->Theta2 = HARD_LIM1_POS
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70

	true->D3	 = HARD_LIM2_NEG
			+ DIR_ENCODER_2*(position_encoder[2] - offset_encoder[2])/ENCODER_J2; // Servo Motor
 80041c0:	4b31      	ldr	r3, [pc, #196]	; (8004288 <lowlayer_readTruePosition+0x198>)
 80041c2:	689a      	ldr	r2, [r3, #8]
 80041c4:	4b31      	ldr	r3, [pc, #196]	; (800428c <lowlayer_readTruePosition+0x19c>)
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	ee07 3a90 	vmov	s15, r3
 80041ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041d2:	eeb1 7a67 	vneg.f32	s14, s15
 80041d6:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8004294 <lowlayer_readTruePosition+0x1a4>
 80041da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80041de:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8004298 <lowlayer_readTruePosition+0x1a8>
 80041e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80041e6:	ee17 0a90 	vmov	r0, s15
 80041ea:	f7fc f9bd 	bl	8000568 <__aeabi_f2d>
 80041ee:	4603      	mov	r3, r0
 80041f0:	460c      	mov	r4, r1
	true->D3	 = HARD_LIM2_NEG
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78

	true->Theta4 = HARD_LIM3_POS
			+ (pulse_accumulate[3] - offset_stepper)*2.0*PI/GEAR_J3; // Stepper Motor
 80041f8:	4b28      	ldr	r3, [pc, #160]	; (800429c <lowlayer_readTruePosition+0x1ac>)
 80041fa:	68da      	ldr	r2, [r3, #12]
 80041fc:	4b28      	ldr	r3, [pc, #160]	; (80042a0 <lowlayer_readTruePosition+0x1b0>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	4618      	mov	r0, r3
 8004204:	f7fc f99e 	bl	8000544 <__aeabi_i2d>
 8004208:	4602      	mov	r2, r0
 800420a:	460b      	mov	r3, r1
 800420c:	f7fc f84e 	bl	80002ac <__adddf3>
 8004210:	4603      	mov	r3, r0
 8004212:	460c      	mov	r4, r1
 8004214:	4618      	mov	r0, r3
 8004216:	4621      	mov	r1, r4
 8004218:	a30f      	add	r3, pc, #60	; (adr r3, 8004258 <lowlayer_readTruePosition+0x168>)
 800421a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800421e:	f7fc f9fb 	bl	8000618 <__aeabi_dmul>
 8004222:	4603      	mov	r3, r0
 8004224:	460c      	mov	r4, r1
 8004226:	4618      	mov	r0, r3
 8004228:	4621      	mov	r1, r4
 800422a:	a313      	add	r3, pc, #76	; (adr r3, 8004278 <lowlayer_readTruePosition+0x188>)
 800422c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004230:	f7fc fb1c 	bl	800086c <__aeabi_ddiv>
 8004234:	4603      	mov	r3, r0
 8004236:	460c      	mov	r4, r1
 8004238:	4618      	mov	r0, r3
 800423a:	4621      	mov	r1, r4
 800423c:	a310      	add	r3, pc, #64	; (adr r3, 8004280 <lowlayer_readTruePosition+0x190>)
 800423e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004242:	f7fc f833 	bl	80002ac <__adddf3>
 8004246:	4603      	mov	r3, r0
 8004248:	460c      	mov	r4, r1
	true->Theta4 = HARD_LIM3_POS
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
}
 8004250:	bf00      	nop
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	bd90      	pop	{r4, r7, pc}
 8004258:	60000000 	.word	0x60000000
 800425c:	400921fb 	.word	0x400921fb
 8004260:	00000000 	.word	0x00000000
 8004264:	40f38800 	.word	0x40f38800
 8004268:	40000000 	.word	0x40000000
 800426c:	3ff9f17a 	.word	0x3ff9f17a
 8004270:	80000000 	.word	0x80000000
 8004274:	40039716 	.word	0x40039716
 8004278:	a0000000 	.word	0xa0000000
 800427c:	40d3bca1 	.word	0x40d3bca1
 8004280:	60000000 	.word	0x60000000
 8004284:	400852e3 	.word	0x400852e3
 8004288:	20005374 	.word	0x20005374
 800428c:	200053b8 	.word	0x200053b8
 8004290:	40ff4000 	.word	0x40ff4000
 8004294:	4426aaab 	.word	0x4426aaab
 8004298:	400f1aa0 	.word	0x400f1aa0
 800429c:	20005360 	.word	0x20005360
 80042a0:	20005394 	.word	0x20005394
 80042a4:	00000000 	.word	0x00000000

080042a8 <lowlayer_readSetPosition>:

void	lowlayer_readSetPosition(SCARA_PositionTypeDef *setpoint) {
 80042a8:	b5b0      	push	{r4, r5, r7, lr}
 80042aa:	b082      	sub	sp, #8
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
	setpoint->Theta1 = offset_setpoint[0] + pulse_accumulate[0]*2.0*PI/GEAR_J0;
 80042b0:	4b53      	ldr	r3, [pc, #332]	; (8004400 <lowlayer_readSetPosition+0x158>)
 80042b2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80042b6:	4b53      	ldr	r3, [pc, #332]	; (8004404 <lowlayer_readSetPosition+0x15c>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4618      	mov	r0, r3
 80042bc:	f7fc f942 	bl	8000544 <__aeabi_i2d>
 80042c0:	4602      	mov	r2, r0
 80042c2:	460b      	mov	r3, r1
 80042c4:	f7fb fff2 	bl	80002ac <__adddf3>
 80042c8:	4602      	mov	r2, r0
 80042ca:	460b      	mov	r3, r1
 80042cc:	4610      	mov	r0, r2
 80042ce:	4619      	mov	r1, r3
 80042d0:	a345      	add	r3, pc, #276	; (adr r3, 80043e8 <lowlayer_readSetPosition+0x140>)
 80042d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d6:	f7fc f99f 	bl	8000618 <__aeabi_dmul>
 80042da:	4602      	mov	r2, r0
 80042dc:	460b      	mov	r3, r1
 80042de:	4610      	mov	r0, r2
 80042e0:	4619      	mov	r1, r3
 80042e2:	a343      	add	r3, pc, #268	; (adr r3, 80043f0 <lowlayer_readSetPosition+0x148>)
 80042e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e8:	f7fc fac0 	bl	800086c <__aeabi_ddiv>
 80042ec:	4602      	mov	r2, r0
 80042ee:	460b      	mov	r3, r1
 80042f0:	4620      	mov	r0, r4
 80042f2:	4629      	mov	r1, r5
 80042f4:	f7fb ffda 	bl	80002ac <__adddf3>
 80042f8:	4603      	mov	r3, r0
 80042fa:	460c      	mov	r4, r1
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68

	setpoint->Theta2 = offset_setpoint[1] + pulse_accumulate[1]*2.0*PI/GEAR_J1;
 8004302:	4b3f      	ldr	r3, [pc, #252]	; (8004400 <lowlayer_readSetPosition+0x158>)
 8004304:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8004308:	4b3e      	ldr	r3, [pc, #248]	; (8004404 <lowlayer_readSetPosition+0x15c>)
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	4618      	mov	r0, r3
 800430e:	f7fc f919 	bl	8000544 <__aeabi_i2d>
 8004312:	4602      	mov	r2, r0
 8004314:	460b      	mov	r3, r1
 8004316:	f7fb ffc9 	bl	80002ac <__adddf3>
 800431a:	4602      	mov	r2, r0
 800431c:	460b      	mov	r3, r1
 800431e:	4610      	mov	r0, r2
 8004320:	4619      	mov	r1, r3
 8004322:	a331      	add	r3, pc, #196	; (adr r3, 80043e8 <lowlayer_readSetPosition+0x140>)
 8004324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004328:	f7fc f976 	bl	8000618 <__aeabi_dmul>
 800432c:	4602      	mov	r2, r0
 800432e:	460b      	mov	r3, r1
 8004330:	4610      	mov	r0, r2
 8004332:	4619      	mov	r1, r3
 8004334:	f04f 0200 	mov.w	r2, #0
 8004338:	4b33      	ldr	r3, [pc, #204]	; (8004408 <lowlayer_readSetPosition+0x160>)
 800433a:	f7fc fa97 	bl	800086c <__aeabi_ddiv>
 800433e:	4602      	mov	r2, r0
 8004340:	460b      	mov	r3, r1
 8004342:	4620      	mov	r0, r4
 8004344:	4629      	mov	r1, r5
 8004346:	f7fb ffb1 	bl	80002ac <__adddf3>
 800434a:	4603      	mov	r3, r0
 800434c:	460c      	mov	r4, r1
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70

	setpoint->D3	 = offset_setpoint[2] + pulse_accumulate[2]/GEAR_J2;
 8004354:	4b2a      	ldr	r3, [pc, #168]	; (8004400 <lowlayer_readSetPosition+0x158>)
 8004356:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800435a:	4b2a      	ldr	r3, [pc, #168]	; (8004404 <lowlayer_readSetPosition+0x15c>)
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	ee07 3a90 	vmov	s15, r3
 8004362:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004366:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800440c <lowlayer_readSetPosition+0x164>
 800436a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800436e:	ee16 0a90 	vmov	r0, s13
 8004372:	f7fc f8f9 	bl	8000568 <__aeabi_f2d>
 8004376:	4602      	mov	r2, r0
 8004378:	460b      	mov	r3, r1
 800437a:	4620      	mov	r0, r4
 800437c:	4629      	mov	r1, r5
 800437e:	f7fb ff95 	bl	80002ac <__adddf3>
 8004382:	4603      	mov	r3, r0
 8004384:	460c      	mov	r4, r1
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78

	setpoint->Theta4 = offset_setpoint[3] + pulse_accumulate[3]*2.0*PI/GEAR_J3;
 800438c:	4b1c      	ldr	r3, [pc, #112]	; (8004400 <lowlayer_readSetPosition+0x158>)
 800438e:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8004392:	4b1c      	ldr	r3, [pc, #112]	; (8004404 <lowlayer_readSetPosition+0x15c>)
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	4618      	mov	r0, r3
 8004398:	f7fc f8d4 	bl	8000544 <__aeabi_i2d>
 800439c:	4602      	mov	r2, r0
 800439e:	460b      	mov	r3, r1
 80043a0:	f7fb ff84 	bl	80002ac <__adddf3>
 80043a4:	4602      	mov	r2, r0
 80043a6:	460b      	mov	r3, r1
 80043a8:	4610      	mov	r0, r2
 80043aa:	4619      	mov	r1, r3
 80043ac:	a30e      	add	r3, pc, #56	; (adr r3, 80043e8 <lowlayer_readSetPosition+0x140>)
 80043ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b2:	f7fc f931 	bl	8000618 <__aeabi_dmul>
 80043b6:	4602      	mov	r2, r0
 80043b8:	460b      	mov	r3, r1
 80043ba:	4610      	mov	r0, r2
 80043bc:	4619      	mov	r1, r3
 80043be:	a30e      	add	r3, pc, #56	; (adr r3, 80043f8 <lowlayer_readSetPosition+0x150>)
 80043c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c4:	f7fc fa52 	bl	800086c <__aeabi_ddiv>
 80043c8:	4602      	mov	r2, r0
 80043ca:	460b      	mov	r3, r1
 80043cc:	4620      	mov	r0, r4
 80043ce:	4629      	mov	r1, r5
 80043d0:	f7fb ff6c 	bl	80002ac <__adddf3>
 80043d4:	4603      	mov	r3, r0
 80043d6:	460c      	mov	r4, r1
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
}
 80043de:	bf00      	nop
 80043e0:	3708      	adds	r7, #8
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bdb0      	pop	{r4, r5, r7, pc}
 80043e6:	bf00      	nop
 80043e8:	60000000 	.word	0x60000000
 80043ec:	400921fb 	.word	0x400921fb
 80043f0:	00000000 	.word	0x00000000
 80043f4:	40d38800 	.word	0x40d38800
 80043f8:	a0000000 	.word	0xa0000000
 80043fc:	40d3bca1 	.word	0x40d3bca1
 8004400:	20005398 	.word	0x20005398
 8004404:	20005360 	.word	0x20005360
 8004408:	40df4000 	.word	0x40df4000
 800440c:	42c80000 	.word	0x42c80000

08004410 <lowlayer_computeAndWritePulse>:

uint8_t	lowlayer_computeAndWritePulse(SCARA_PositionTypeDef current, SCARA_PositionTypeDef next) {
 8004410:	b084      	sub	sp, #16
 8004412:	b590      	push	{r4, r7, lr}
 8004414:	b093      	sub	sp, #76	; 0x4c
 8004416:	af00      	add	r7, sp, #0
 8004418:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800441c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint32_t	current_var0, current_var1, current_var2, current_var3;
	uint32_t	next_var0, next_var1, next_var2, next_var3;
	int64_t		delta_var0, delta_var1, delta_var2, delta_var3;
	uint8_t 	result;

	current_var0	= round((current.Theta1 - LIM_MIN_J0) * GEAR_J0/(2*PI));
 8004420:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8004424:	a3c4      	add	r3, pc, #784	; (adr r3, 8004738 <lowlayer_computeAndWritePulse+0x328>)
 8004426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800442a:	f7fb ff3f 	bl	80002ac <__adddf3>
 800442e:	4603      	mov	r3, r0
 8004430:	460c      	mov	r4, r1
 8004432:	4618      	mov	r0, r3
 8004434:	4621      	mov	r1, r4
 8004436:	a3c2      	add	r3, pc, #776	; (adr r3, 8004740 <lowlayer_computeAndWritePulse+0x330>)
 8004438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800443c:	f7fc f8ec 	bl	8000618 <__aeabi_dmul>
 8004440:	4603      	mov	r3, r0
 8004442:	460c      	mov	r4, r1
 8004444:	4618      	mov	r0, r3
 8004446:	4621      	mov	r1, r4
 8004448:	a3b5      	add	r3, pc, #724	; (adr r3, 8004720 <lowlayer_computeAndWritePulse+0x310>)
 800444a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800444e:	f7fc fa0d 	bl	800086c <__aeabi_ddiv>
 8004452:	4603      	mov	r3, r0
 8004454:	460c      	mov	r4, r1
 8004456:	ec44 3b17 	vmov	d7, r3, r4
 800445a:	eeb0 0a47 	vmov.f32	s0, s14
 800445e:	eef0 0a67 	vmov.f32	s1, s15
 8004462:	f015 f839 	bl	80194d8 <round>
 8004466:	ec54 3b10 	vmov	r3, r4, d0
 800446a:	4618      	mov	r0, r3
 800446c:	4621      	mov	r1, r4
 800446e:	f7fc fbab 	bl	8000bc8 <__aeabi_d2uiz>
 8004472:	4603      	mov	r3, r0
 8004474:	647b      	str	r3, [r7, #68]	; 0x44
	current_var1 	= round((current.Theta2 - LIM_MIN_J1) * GEAR_J1/(2*PI));
 8004476:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800447a:	a3b3      	add	r3, pc, #716	; (adr r3, 8004748 <lowlayer_computeAndWritePulse+0x338>)
 800447c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004480:	f7fb ff14 	bl	80002ac <__adddf3>
 8004484:	4603      	mov	r3, r0
 8004486:	460c      	mov	r4, r1
 8004488:	4618      	mov	r0, r3
 800448a:	4621      	mov	r1, r4
 800448c:	f04f 0200 	mov.w	r2, #0
 8004490:	4baf      	ldr	r3, [pc, #700]	; (8004750 <lowlayer_computeAndWritePulse+0x340>)
 8004492:	f7fc f8c1 	bl	8000618 <__aeabi_dmul>
 8004496:	4603      	mov	r3, r0
 8004498:	460c      	mov	r4, r1
 800449a:	4618      	mov	r0, r3
 800449c:	4621      	mov	r1, r4
 800449e:	a3a0      	add	r3, pc, #640	; (adr r3, 8004720 <lowlayer_computeAndWritePulse+0x310>)
 80044a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a4:	f7fc f9e2 	bl	800086c <__aeabi_ddiv>
 80044a8:	4603      	mov	r3, r0
 80044aa:	460c      	mov	r4, r1
 80044ac:	ec44 3b17 	vmov	d7, r3, r4
 80044b0:	eeb0 0a47 	vmov.f32	s0, s14
 80044b4:	eef0 0a67 	vmov.f32	s1, s15
 80044b8:	f015 f80e 	bl	80194d8 <round>
 80044bc:	ec54 3b10 	vmov	r3, r4, d0
 80044c0:	4618      	mov	r0, r3
 80044c2:	4621      	mov	r1, r4
 80044c4:	f7fc fb80 	bl	8000bc8 <__aeabi_d2uiz>
 80044c8:	4603      	mov	r3, r0
 80044ca:	643b      	str	r3, [r7, #64]	; 0x40
	current_var2 	= round((current.D3 - LIM_MIN_J2) * GEAR_J2);
 80044cc:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80044d0:	f04f 0200 	mov.w	r2, #0
 80044d4:	4b9f      	ldr	r3, [pc, #636]	; (8004754 <lowlayer_computeAndWritePulse+0x344>)
 80044d6:	f7fc f89f 	bl	8000618 <__aeabi_dmul>
 80044da:	4603      	mov	r3, r0
 80044dc:	460c      	mov	r4, r1
 80044de:	ec44 3b17 	vmov	d7, r3, r4
 80044e2:	eeb0 0a47 	vmov.f32	s0, s14
 80044e6:	eef0 0a67 	vmov.f32	s1, s15
 80044ea:	f014 fff5 	bl	80194d8 <round>
 80044ee:	ec54 3b10 	vmov	r3, r4, d0
 80044f2:	4618      	mov	r0, r3
 80044f4:	4621      	mov	r1, r4
 80044f6:	f7fc fb67 	bl	8000bc8 <__aeabi_d2uiz>
 80044fa:	4603      	mov	r3, r0
 80044fc:	63fb      	str	r3, [r7, #60]	; 0x3c
	current_var3 	= round((current.Theta4 - LIM_MIN_J3) * GEAR_J3/(2*PI));
 80044fe:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8004502:	a389      	add	r3, pc, #548	; (adr r3, 8004728 <lowlayer_computeAndWritePulse+0x318>)
 8004504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004508:	f7fb fed0 	bl	80002ac <__adddf3>
 800450c:	4603      	mov	r3, r0
 800450e:	460c      	mov	r4, r1
 8004510:	4618      	mov	r0, r3
 8004512:	4621      	mov	r1, r4
 8004514:	a386      	add	r3, pc, #536	; (adr r3, 8004730 <lowlayer_computeAndWritePulse+0x320>)
 8004516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800451a:	f7fc f87d 	bl	8000618 <__aeabi_dmul>
 800451e:	4603      	mov	r3, r0
 8004520:	460c      	mov	r4, r1
 8004522:	4618      	mov	r0, r3
 8004524:	4621      	mov	r1, r4
 8004526:	a37e      	add	r3, pc, #504	; (adr r3, 8004720 <lowlayer_computeAndWritePulse+0x310>)
 8004528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800452c:	f7fc f99e 	bl	800086c <__aeabi_ddiv>
 8004530:	4603      	mov	r3, r0
 8004532:	460c      	mov	r4, r1
 8004534:	ec44 3b17 	vmov	d7, r3, r4
 8004538:	eeb0 0a47 	vmov.f32	s0, s14
 800453c:	eef0 0a67 	vmov.f32	s1, s15
 8004540:	f014 ffca 	bl	80194d8 <round>
 8004544:	ec54 3b10 	vmov	r3, r4, d0
 8004548:	4618      	mov	r0, r3
 800454a:	4621      	mov	r1, r4
 800454c:	f7fc fb3c 	bl	8000bc8 <__aeabi_d2uiz>
 8004550:	4603      	mov	r3, r0
 8004552:	63bb      	str	r3, [r7, #56]	; 0x38
	next_var0 		= round((next.Theta1 - LIM_MIN_J0) * GEAR_J0/(2*PI));
 8004554:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8004558:	a377      	add	r3, pc, #476	; (adr r3, 8004738 <lowlayer_computeAndWritePulse+0x328>)
 800455a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800455e:	f7fb fea5 	bl	80002ac <__adddf3>
 8004562:	4603      	mov	r3, r0
 8004564:	460c      	mov	r4, r1
 8004566:	4618      	mov	r0, r3
 8004568:	4621      	mov	r1, r4
 800456a:	a375      	add	r3, pc, #468	; (adr r3, 8004740 <lowlayer_computeAndWritePulse+0x330>)
 800456c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004570:	f7fc f852 	bl	8000618 <__aeabi_dmul>
 8004574:	4603      	mov	r3, r0
 8004576:	460c      	mov	r4, r1
 8004578:	4618      	mov	r0, r3
 800457a:	4621      	mov	r1, r4
 800457c:	a368      	add	r3, pc, #416	; (adr r3, 8004720 <lowlayer_computeAndWritePulse+0x310>)
 800457e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004582:	f7fc f973 	bl	800086c <__aeabi_ddiv>
 8004586:	4603      	mov	r3, r0
 8004588:	460c      	mov	r4, r1
 800458a:	ec44 3b17 	vmov	d7, r3, r4
 800458e:	eeb0 0a47 	vmov.f32	s0, s14
 8004592:	eef0 0a67 	vmov.f32	s1, s15
 8004596:	f014 ff9f 	bl	80194d8 <round>
 800459a:	ec54 3b10 	vmov	r3, r4, d0
 800459e:	4618      	mov	r0, r3
 80045a0:	4621      	mov	r1, r4
 80045a2:	f7fc fb11 	bl	8000bc8 <__aeabi_d2uiz>
 80045a6:	4603      	mov	r3, r0
 80045a8:	637b      	str	r3, [r7, #52]	; 0x34
	next_var1 		= round((next.Theta2 - LIM_MIN_J1) * GEAR_J1/(2*PI));
 80045aa:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 80045ae:	a366      	add	r3, pc, #408	; (adr r3, 8004748 <lowlayer_computeAndWritePulse+0x338>)
 80045b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b4:	f7fb fe7a 	bl	80002ac <__adddf3>
 80045b8:	4603      	mov	r3, r0
 80045ba:	460c      	mov	r4, r1
 80045bc:	4618      	mov	r0, r3
 80045be:	4621      	mov	r1, r4
 80045c0:	f04f 0200 	mov.w	r2, #0
 80045c4:	4b62      	ldr	r3, [pc, #392]	; (8004750 <lowlayer_computeAndWritePulse+0x340>)
 80045c6:	f7fc f827 	bl	8000618 <__aeabi_dmul>
 80045ca:	4603      	mov	r3, r0
 80045cc:	460c      	mov	r4, r1
 80045ce:	4618      	mov	r0, r3
 80045d0:	4621      	mov	r1, r4
 80045d2:	a353      	add	r3, pc, #332	; (adr r3, 8004720 <lowlayer_computeAndWritePulse+0x310>)
 80045d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d8:	f7fc f948 	bl	800086c <__aeabi_ddiv>
 80045dc:	4603      	mov	r3, r0
 80045de:	460c      	mov	r4, r1
 80045e0:	ec44 3b17 	vmov	d7, r3, r4
 80045e4:	eeb0 0a47 	vmov.f32	s0, s14
 80045e8:	eef0 0a67 	vmov.f32	s1, s15
 80045ec:	f014 ff74 	bl	80194d8 <round>
 80045f0:	ec54 3b10 	vmov	r3, r4, d0
 80045f4:	4618      	mov	r0, r3
 80045f6:	4621      	mov	r1, r4
 80045f8:	f7fc fae6 	bl	8000bc8 <__aeabi_d2uiz>
 80045fc:	4603      	mov	r3, r0
 80045fe:	633b      	str	r3, [r7, #48]	; 0x30
	next_var2 		= round((next.D3 - LIM_MIN_J2) * GEAR_J2);
 8004600:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8004604:	f04f 0200 	mov.w	r2, #0
 8004608:	4b52      	ldr	r3, [pc, #328]	; (8004754 <lowlayer_computeAndWritePulse+0x344>)
 800460a:	f7fc f805 	bl	8000618 <__aeabi_dmul>
 800460e:	4603      	mov	r3, r0
 8004610:	460c      	mov	r4, r1
 8004612:	ec44 3b17 	vmov	d7, r3, r4
 8004616:	eeb0 0a47 	vmov.f32	s0, s14
 800461a:	eef0 0a67 	vmov.f32	s1, s15
 800461e:	f014 ff5b 	bl	80194d8 <round>
 8004622:	ec54 3b10 	vmov	r3, r4, d0
 8004626:	4618      	mov	r0, r3
 8004628:	4621      	mov	r1, r4
 800462a:	f7fc facd 	bl	8000bc8 <__aeabi_d2uiz>
 800462e:	4603      	mov	r3, r0
 8004630:	62fb      	str	r3, [r7, #44]	; 0x2c
	next_var3 		= round((next.Theta4 - LIM_MIN_J3) * GEAR_J3/(2*PI));
 8004632:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8004636:	a33c      	add	r3, pc, #240	; (adr r3, 8004728 <lowlayer_computeAndWritePulse+0x318>)
 8004638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800463c:	f7fb fe36 	bl	80002ac <__adddf3>
 8004640:	4603      	mov	r3, r0
 8004642:	460c      	mov	r4, r1
 8004644:	4618      	mov	r0, r3
 8004646:	4621      	mov	r1, r4
 8004648:	a339      	add	r3, pc, #228	; (adr r3, 8004730 <lowlayer_computeAndWritePulse+0x320>)
 800464a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800464e:	f7fb ffe3 	bl	8000618 <__aeabi_dmul>
 8004652:	4603      	mov	r3, r0
 8004654:	460c      	mov	r4, r1
 8004656:	4618      	mov	r0, r3
 8004658:	4621      	mov	r1, r4
 800465a:	a331      	add	r3, pc, #196	; (adr r3, 8004720 <lowlayer_computeAndWritePulse+0x310>)
 800465c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004660:	f7fc f904 	bl	800086c <__aeabi_ddiv>
 8004664:	4603      	mov	r3, r0
 8004666:	460c      	mov	r4, r1
 8004668:	ec44 3b17 	vmov	d7, r3, r4
 800466c:	eeb0 0a47 	vmov.f32	s0, s14
 8004670:	eef0 0a67 	vmov.f32	s1, s15
 8004674:	f014 ff30 	bl	80194d8 <round>
 8004678:	ec54 3b10 	vmov	r3, r4, d0
 800467c:	4618      	mov	r0, r3
 800467e:	4621      	mov	r1, r4
 8004680:	f7fc faa2 	bl	8000bc8 <__aeabi_d2uiz>
 8004684:	4603      	mov	r3, r0
 8004686:	62bb      	str	r3, [r7, #40]	; 0x28

	delta_var0 = next_var0 - current_var0;
 8004688:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800468a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	f04f 0400 	mov.w	r4, #0
 8004692:	e9c7 3408 	strd	r3, r4, [r7, #32]
	delta_var1 = next_var1 - current_var1;
 8004696:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004698:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	f04f 0400 	mov.w	r4, #0
 80046a0:	e9c7 3406 	strd	r3, r4, [r7, #24]
	delta_var2 = next_var2 - current_var2;
 80046a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	f04f 0400 	mov.w	r4, #0
 80046ae:	e9c7 3404 	strd	r3, r4, [r7, #16]
	delta_var3 = next_var3 - current_var3;
 80046b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	f04f 0400 	mov.w	r4, #0
 80046bc:	e9c7 3402 	strd	r3, r4, [r7, #8]

	if (abs(delta_var0) > 127
 80046c0:	6a3b      	ldr	r3, [r7, #32]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	bfb8      	it	lt
 80046c6:	425b      	neglt	r3, r3
 80046c8:	2b7f      	cmp	r3, #127	; 0x7f
 80046ca:	dc11      	bgt.n	80046f0 <lowlayer_computeAndWritePulse+0x2e0>
		|| abs(delta_var1) > 127
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	bfb8      	it	lt
 80046d2:	425b      	neglt	r3, r3
 80046d4:	2b7f      	cmp	r3, #127	; 0x7f
 80046d6:	dc0b      	bgt.n	80046f0 <lowlayer_computeAndWritePulse+0x2e0>
		|| abs(delta_var2) > 127
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	bfb8      	it	lt
 80046de:	425b      	neglt	r3, r3
 80046e0:	2b7f      	cmp	r3, #127	; 0x7f
 80046e2:	dc05      	bgt.n	80046f0 <lowlayer_computeAndWritePulse+0x2e0>
		|| abs(delta_var3) > 127) {
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	bfb8      	it	lt
 80046ea:	425b      	neglt	r3, r3
 80046ec:	2b7f      	cmp	r3, #127	; 0x7f
 80046ee:	dd01      	ble.n	80046f4 <lowlayer_computeAndWritePulse+0x2e4>
		return FALSE;
 80046f0:	2300      	movs	r3, #0
 80046f2:	e00c      	b.n	800470e <lowlayer_computeAndWritePulse+0x2fe>
	} // Can't convert to int8_t , over range

	result = lowlayer_writePulse((int8_t)delta_var0,
 80046f4:	f997 0020 	ldrsb.w	r0, [r7, #32]
 80046f8:	f997 1018 	ldrsb.w	r1, [r7, #24]
 80046fc:	f997 2010 	ldrsb.w	r2, [r7, #16]
 8004700:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8004704:	f000 f828 	bl	8004758 <lowlayer_writePulse>
 8004708:	4603      	mov	r3, r0
 800470a:	71fb      	strb	r3, [r7, #7]
								 (int8_t)delta_var1,
								 (int8_t)delta_var2,
								 (int8_t)delta_var3);

	return result;
 800470c:	79fb      	ldrb	r3, [r7, #7]
}
 800470e:	4618      	mov	r0, r3
 8004710:	374c      	adds	r7, #76	; 0x4c
 8004712:	46bd      	mov	sp, r7
 8004714:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004718:	b004      	add	sp, #16
 800471a:	4770      	bx	lr
 800471c:	f3af 8000 	nop.w
 8004720:	60000000 	.word	0x60000000
 8004724:	401921fb 	.word	0x401921fb
 8004728:	daaaaaab 	.word	0xdaaaaaab
 800472c:	4007bc89 	.word	0x4007bc89
 8004730:	a0000000 	.word	0xa0000000
 8004734:	40d3bca1 	.word	0x40d3bca1
 8004738:	daaaaaab 	.word	0xdaaaaaab
 800473c:	3ff7bc89 	.word	0x3ff7bc89
 8004740:	00000000 	.word	0x00000000
 8004744:	40d38800 	.word	0x40d38800
 8004748:	88000000 	.word	0x88000000
 800474c:	4002d97c 	.word	0x4002d97c
 8004750:	40df4000 	.word	0x40df4000
 8004754:	40590000 	.word	0x40590000

08004758 <lowlayer_writePulse>:


uint8_t	lowlayer_writePulse(int8_t pulse0, int8_t pulse1, int8_t pulse2, int8_t pulse3) {
 8004758:	b590      	push	{r4, r7, lr}
 800475a:	b087      	sub	sp, #28
 800475c:	af00      	add	r7, sp, #0
 800475e:	4604      	mov	r4, r0
 8004760:	4608      	mov	r0, r1
 8004762:	4611      	mov	r1, r2
 8004764:	461a      	mov	r2, r3
 8004766:	4623      	mov	r3, r4
 8004768:	71fb      	strb	r3, [r7, #7]
 800476a:	4603      	mov	r3, r0
 800476c:	71bb      	strb	r3, [r7, #6]
 800476e:	460b      	mov	r3, r1
 8004770:	717b      	strb	r3, [r7, #5]
 8004772:	4613      	mov	r3, r2
 8004774:	713b      	strb	r3, [r7, #4]
	uint8_t pulse0_combine, pulse1_combine, pulse2_combine, pulse3_combine;
	uint8_t pulse0_abs, pulse1_abs, pulse2_abs, pulse3_abs;

	// Var 0
	if (pulse0 < 0) {
 8004776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800477a:	2b00      	cmp	r3, #0
 800477c:	da06      	bge.n	800478c <lowlayer_writePulse+0x34>
		pulse0_abs = -pulse0;
 800477e:	79fb      	ldrb	r3, [r7, #7]
 8004780:	425b      	negs	r3, r3
 8004782:	74fb      	strb	r3, [r7, #19]
		pulse0_combine = -pulse0 | ((!DIR_J0) << 7); // Negative : Clockwise
 8004784:	79fb      	ldrb	r3, [r7, #7]
 8004786:	425b      	negs	r3, r3
 8004788:	75fb      	strb	r3, [r7, #23]
 800478a:	e006      	b.n	800479a <lowlayer_writePulse+0x42>
	} else {
		pulse0_abs = pulse0;
 800478c:	79fb      	ldrb	r3, [r7, #7]
 800478e:	74fb      	strb	r3, [r7, #19]
		pulse0_combine = pulse0 | (DIR_J0 << 7); // Positive : Anti-Clockwise
 8004790:	79fb      	ldrb	r3, [r7, #7]
 8004792:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004796:	b25b      	sxtb	r3, r3
 8004798:	75fb      	strb	r3, [r7, #23]
	}
	// Var 1
	if (pulse1 < 0) {
 800479a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	da06      	bge.n	80047b0 <lowlayer_writePulse+0x58>
		pulse1_abs = -pulse1;
 80047a2:	79bb      	ldrb	r3, [r7, #6]
 80047a4:	425b      	negs	r3, r3
 80047a6:	74bb      	strb	r3, [r7, #18]
		pulse1_combine = -pulse1 | ((!DIR_J1) << 7);
 80047a8:	79bb      	ldrb	r3, [r7, #6]
 80047aa:	425b      	negs	r3, r3
 80047ac:	75bb      	strb	r3, [r7, #22]
 80047ae:	e006      	b.n	80047be <lowlayer_writePulse+0x66>
	} else {
		pulse1_abs = pulse1;
 80047b0:	79bb      	ldrb	r3, [r7, #6]
 80047b2:	74bb      	strb	r3, [r7, #18]
		pulse1_combine = pulse1 | (DIR_J1 << 7);
 80047b4:	79bb      	ldrb	r3, [r7, #6]
 80047b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80047ba:	b25b      	sxtb	r3, r3
 80047bc:	75bb      	strb	r3, [r7, #22]
	}
	// Var 2
	if (pulse2 < 0) {
 80047be:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	da0b      	bge.n	80047de <lowlayer_writePulse+0x86>
		pulse2_abs = -pulse2;
 80047c6:	797b      	ldrb	r3, [r7, #5]
 80047c8:	425b      	negs	r3, r3
 80047ca:	747b      	strb	r3, [r7, #17]
		pulse2_combine = -pulse2 | ((!DIR_J2) << 7);
 80047cc:	797b      	ldrb	r3, [r7, #5]
 80047ce:	425b      	negs	r3, r3
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	b25b      	sxtb	r3, r3
 80047d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80047d8:	b25b      	sxtb	r3, r3
 80047da:	757b      	strb	r3, [r7, #21]
 80047dc:	e003      	b.n	80047e6 <lowlayer_writePulse+0x8e>
	} else {
		pulse2_abs = pulse2;
 80047de:	797b      	ldrb	r3, [r7, #5]
 80047e0:	747b      	strb	r3, [r7, #17]
		pulse2_combine = pulse2 | (DIR_J2 << 7);
 80047e2:	797b      	ldrb	r3, [r7, #5]
 80047e4:	757b      	strb	r3, [r7, #21]
	}
	// Var 3
	if (pulse3 < 0) {
 80047e6:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	da06      	bge.n	80047fc <lowlayer_writePulse+0xa4>
		pulse3_abs = -pulse3;
 80047ee:	793b      	ldrb	r3, [r7, #4]
 80047f0:	425b      	negs	r3, r3
 80047f2:	743b      	strb	r3, [r7, #16]
		pulse3_combine = -pulse3 | ((!DIR_J3) << 7);
 80047f4:	793b      	ldrb	r3, [r7, #4]
 80047f6:	425b      	negs	r3, r3
 80047f8:	753b      	strb	r3, [r7, #20]
 80047fa:	e006      	b.n	800480a <lowlayer_writePulse+0xb2>
	} else {
		pulse3_abs = pulse3;
 80047fc:	793b      	ldrb	r3, [r7, #4]
 80047fe:	743b      	strb	r3, [r7, #16]
		pulse3_combine = pulse3 | (DIR_J3 << 7);
 8004800:	793b      	ldrb	r3, [r7, #4]
 8004802:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004806:	b25b      	sxtb	r3, r3
 8004808:	753b      	strb	r3, [r7, #20]
	}

	// Check limit
	if (pulse0_abs > LIM_PULSE_J0
 800480a:	7cfb      	ldrb	r3, [r7, #19]
 800480c:	2b4b      	cmp	r3, #75	; 0x4b
 800480e:	d808      	bhi.n	8004822 <lowlayer_writePulse+0xca>
		|| pulse1_abs > LIM_PULSE_J1
 8004810:	7cbb      	ldrb	r3, [r7, #18]
 8004812:	2b78      	cmp	r3, #120	; 0x78
 8004814:	d805      	bhi.n	8004822 <lowlayer_writePulse+0xca>
		|| pulse2_abs > LIM_PULSE_J2
 8004816:	7c7b      	ldrb	r3, [r7, #17]
 8004818:	2b7d      	cmp	r3, #125	; 0x7d
 800481a:	d802      	bhi.n	8004822 <lowlayer_writePulse+0xca>
		|| pulse3_abs > LIM_PULSE_J3) {
 800481c:	7c3b      	ldrb	r3, [r7, #16]
 800481e:	2b65      	cmp	r3, #101	; 0x65
 8004820:	d901      	bls.n	8004826 <lowlayer_writePulse+0xce>
		return FALSE;
 8004822:	2300      	movs	r3, #0
 8004824:	e04b      	b.n	80048be <lowlayer_writePulse+0x166>
//	if (pulse3_abs == 0) {
//		HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_SET); // Disable
//	} else {
//		HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_RESET);
//	}
	HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_RESET);
 8004826:	2200      	movs	r2, #0
 8004828:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800482c:	4826      	ldr	r0, [pc, #152]	; (80048c8 <lowlayer_writePulse+0x170>)
 800482e:	f006 fda9 	bl	800b384 <HAL_GPIO_WritePin>

	// Write to Module DDA
	FSMC_Write(ADDRESS_DDA_0, (uint32_t)pulse0_combine);
 8004832:	7dfb      	ldrb	r3, [r7, #23]
 8004834:	4619      	mov	r1, r3
 8004836:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
 800483a:	f7fe fbcb 	bl	8002fd4 <FSMC_Write>
	FSMC_Write(ADDRESS_DDA_1, (uint32_t)pulse1_combine);
 800483e:	7dbb      	ldrb	r3, [r7, #22]
 8004840:	4619      	mov	r1, r3
 8004842:	4822      	ldr	r0, [pc, #136]	; (80048cc <lowlayer_writePulse+0x174>)
 8004844:	f7fe fbc6 	bl	8002fd4 <FSMC_Write>
	FSMC_Write(ADDRESS_DDA_2, (uint32_t)pulse2_combine);
 8004848:	7d7b      	ldrb	r3, [r7, #21]
 800484a:	4619      	mov	r1, r3
 800484c:	4820      	ldr	r0, [pc, #128]	; (80048d0 <lowlayer_writePulse+0x178>)
 800484e:	f7fe fbc1 	bl	8002fd4 <FSMC_Write>
	FSMC_Write(ADDRESS_DDA_3, (uint32_t)pulse3_combine);
 8004852:	7d3b      	ldrb	r3, [r7, #20]
 8004854:	4619      	mov	r1, r3
 8004856:	481f      	ldr	r0, [pc, #124]	; (80048d4 <lowlayer_writePulse+0x17c>)
 8004858:	f7fe fbbc 	bl	8002fd4 <FSMC_Write>

	// Trigger
	uint8_t delay = 100;
 800485c:	2364      	movs	r3, #100	; 0x64
 800485e:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(PULSE_WRITE_GPIO_Port, PULSE_WRITE_Pin, GPIO_PIN_RESET);
 8004860:	2200      	movs	r2, #0
 8004862:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004866:	481c      	ldr	r0, [pc, #112]	; (80048d8 <lowlayer_writePulse+0x180>)
 8004868:	f006 fd8c 	bl	800b384 <HAL_GPIO_WritePin>
	while (delay--);
 800486c:	bf00      	nop
 800486e:	7bfb      	ldrb	r3, [r7, #15]
 8004870:	1e5a      	subs	r2, r3, #1
 8004872:	73fa      	strb	r2, [r7, #15]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d1fa      	bne.n	800486e <lowlayer_writePulse+0x116>
	HAL_GPIO_WritePin(PULSE_WRITE_GPIO_Port, PULSE_WRITE_Pin, GPIO_PIN_SET);
 8004878:	2201      	movs	r2, #1
 800487a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800487e:	4816      	ldr	r0, [pc, #88]	; (80048d8 <lowlayer_writePulse+0x180>)
 8004880:	f006 fd80 	bl	800b384 <HAL_GPIO_WritePin>

	// Accumulate
	pulse_accumulate[0] += pulse0;
 8004884:	4b15      	ldr	r3, [pc, #84]	; (80048dc <lowlayer_writePulse+0x184>)
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800488c:	4413      	add	r3, r2
 800488e:	4a13      	ldr	r2, [pc, #76]	; (80048dc <lowlayer_writePulse+0x184>)
 8004890:	6013      	str	r3, [r2, #0]
	pulse_accumulate[1] += pulse1;
 8004892:	4b12      	ldr	r3, [pc, #72]	; (80048dc <lowlayer_writePulse+0x184>)
 8004894:	685a      	ldr	r2, [r3, #4]
 8004896:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800489a:	4413      	add	r3, r2
 800489c:	4a0f      	ldr	r2, [pc, #60]	; (80048dc <lowlayer_writePulse+0x184>)
 800489e:	6053      	str	r3, [r2, #4]
	pulse_accumulate[2] += pulse2;
 80048a0:	4b0e      	ldr	r3, [pc, #56]	; (80048dc <lowlayer_writePulse+0x184>)
 80048a2:	689a      	ldr	r2, [r3, #8]
 80048a4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80048a8:	4413      	add	r3, r2
 80048aa:	4a0c      	ldr	r2, [pc, #48]	; (80048dc <lowlayer_writePulse+0x184>)
 80048ac:	6093      	str	r3, [r2, #8]
	pulse_accumulate[3] += pulse3;
 80048ae:	4b0b      	ldr	r3, [pc, #44]	; (80048dc <lowlayer_writePulse+0x184>)
 80048b0:	68da      	ldr	r2, [r3, #12]
 80048b2:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80048b6:	4413      	add	r3, r2
 80048b8:	4a08      	ldr	r2, [pc, #32]	; (80048dc <lowlayer_writePulse+0x184>)
 80048ba:	60d3      	str	r3, [r2, #12]

	return TRUE;
 80048bc:	2301      	movs	r3, #1
}
 80048be:	4618      	mov	r0, r3
 80048c0:	371c      	adds	r7, #28
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd90      	pop	{r4, r7, pc}
 80048c6:	bf00      	nop
 80048c8:	40020000 	.word	0x40020000
 80048cc:	60000002 	.word	0x60000002
 80048d0:	60000004 	.word	0x60000004
 80048d4:	60000006 	.word	0x60000006
 80048d8:	40020c00 	.word	0x40020c00
 80048dc:	20005360 	.word	0x20005360

080048e0 <lowlayer_resetEncoder>:

void	lowlayer_resetEncoder(void) {
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af00      	add	r7, sp, #0
	// Trigger
	uint8_t delay = 100;
 80048e6:	2364      	movs	r3, #100	; 0x64
 80048e8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ENCODER_RESET_GPIO_Port, ENCODER_RESET_Pin, GPIO_PIN_SET);
 80048ea:	2201      	movs	r2, #1
 80048ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80048f0:	4809      	ldr	r0, [pc, #36]	; (8004918 <lowlayer_resetEncoder+0x38>)
 80048f2:	f006 fd47 	bl	800b384 <HAL_GPIO_WritePin>
	while (delay--);
 80048f6:	bf00      	nop
 80048f8:	79fb      	ldrb	r3, [r7, #7]
 80048fa:	1e5a      	subs	r2, r3, #1
 80048fc:	71fa      	strb	r2, [r7, #7]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1fa      	bne.n	80048f8 <lowlayer_resetEncoder+0x18>
	HAL_GPIO_WritePin(ENCODER_RESET_GPIO_Port, ENCODER_RESET_Pin, GPIO_PIN_RESET);
 8004902:	2200      	movs	r2, #0
 8004904:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004908:	4803      	ldr	r0, [pc, #12]	; (8004918 <lowlayer_resetEncoder+0x38>)
 800490a:	f006 fd3b 	bl	800b384 <HAL_GPIO_WritePin>
}
 800490e:	bf00      	nop
 8004910:	3708      	adds	r7, #8
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	40020c00 	.word	0x40020c00

0800491c <lowlayer_readLimitSwitch>:

uint8_t lowlayer_readLimitSwitch(void) {
 800491c:	b580      	push	{r7, lr}
 800491e:	b082      	sub	sp, #8
 8004920:	af00      	add	r7, sp, #0
	uint16_t read_data = FSMC_Read(ADDRESS_LIMIT);
 8004922:	4805      	ldr	r0, [pc, #20]	; (8004938 <lowlayer_readLimitSwitch+0x1c>)
 8004924:	f7fe fb65 	bl	8002ff2 <FSMC_Read>
 8004928:	4603      	mov	r3, r0
 800492a:	80fb      	strh	r3, [r7, #6]

	return (uint8_t)read_data;
 800492c:	88fb      	ldrh	r3, [r7, #6]
 800492e:	b2db      	uxtb	r3, r3
}
 8004930:	4618      	mov	r0, r3
 8004932:	3708      	adds	r7, #8
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}
 8004938:	60000020 	.word	0x60000020

0800493c <lowlayer_readEncoder>:

int32_t lowlayer_readEncoder(uint8_t encoder_num) {
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
 8004942:	4603      	mov	r3, r0
 8004944:	71fb      	strb	r3, [r7, #7]
	int32_t data;
	if (encoder_num <= 2) {
 8004946:	79fb      	ldrb	r3, [r7, #7]
 8004948:	2b02      	cmp	r3, #2
 800494a:	d81c      	bhi.n	8004986 <lowlayer_readEncoder+0x4a>
		uint16_t low_word = FSMC_Read(ADDRESS_ENC0_LOW + encoder_num*4);
 800494c:	79fb      	ldrb	r3, [r7, #7]
 800494e:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 8004952:	3310      	adds	r3, #16
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	4618      	mov	r0, r3
 8004958:	f7fe fb4b 	bl	8002ff2 <FSMC_Read>
 800495c:	4603      	mov	r3, r0
 800495e:	817b      	strh	r3, [r7, #10]
		uint16_t high_word = FSMC_Read(ADDRESS_ENC0_LOW + encoder_num*4 + 2);
 8004960:	79fb      	ldrb	r3, [r7, #7]
 8004962:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 8004966:	3310      	adds	r3, #16
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	3302      	adds	r3, #2
 800496c:	4618      	mov	r0, r3
 800496e:	f7fe fb40 	bl	8002ff2 <FSMC_Read>
 8004972:	4603      	mov	r3, r0
 8004974:	813b      	strh	r3, [r7, #8]
		data = high_word;
 8004976:	893b      	ldrh	r3, [r7, #8]
 8004978:	60fb      	str	r3, [r7, #12]
		data = (data << 16) | low_word;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	041a      	lsls	r2, r3, #16
 800497e:	897b      	ldrh	r3, [r7, #10]
 8004980:	4313      	orrs	r3, r2
 8004982:	60fb      	str	r3, [r7, #12]
 8004984:	e001      	b.n	800498a <lowlayer_readEncoder+0x4e>
	} else {
		data = 0;
 8004986:	2300      	movs	r3, #0
 8004988:	60fb      	str	r3, [r7, #12]
	}
	return data;
 800498a:	68fb      	ldr	r3, [r7, #12]
}
 800498c:	4618      	mov	r0, r3
 800498e:	3710      	adds	r7, #16
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <lowlayer_readCapture>:

int32_t lowlayer_readCapture(uint8_t capture_num) {
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	4603      	mov	r3, r0
 800499c:	71fb      	strb	r3, [r7, #7]
	int32_t data;
	if (capture_num <= 2) {
 800499e:	79fb      	ldrb	r3, [r7, #7]
 80049a0:	2b02      	cmp	r3, #2
 80049a2:	d81c      	bhi.n	80049de <lowlayer_readCapture+0x4a>
		uint16_t low_word = FSMC_Read(ADDRESS_CAP0_LOW + capture_num*4);
 80049a4:	79fb      	ldrb	r3, [r7, #7]
 80049a6:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 80049aa:	3318      	adds	r3, #24
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	4618      	mov	r0, r3
 80049b0:	f7fe fb1f 	bl	8002ff2 <FSMC_Read>
 80049b4:	4603      	mov	r3, r0
 80049b6:	817b      	strh	r3, [r7, #10]
		uint16_t high_word = FSMC_Read(ADDRESS_CAP0_LOW + capture_num*4 + 2);
 80049b8:	79fb      	ldrb	r3, [r7, #7]
 80049ba:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 80049be:	3318      	adds	r3, #24
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	3302      	adds	r3, #2
 80049c4:	4618      	mov	r0, r3
 80049c6:	f7fe fb14 	bl	8002ff2 <FSMC_Read>
 80049ca:	4603      	mov	r3, r0
 80049cc:	813b      	strh	r3, [r7, #8]
		data = high_word;
 80049ce:	893b      	ldrh	r3, [r7, #8]
 80049d0:	60fb      	str	r3, [r7, #12]
		data = (data << 16) | low_word;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	041a      	lsls	r2, r3, #16
 80049d6:	897b      	ldrh	r3, [r7, #10]
 80049d8:	4313      	orrs	r3, r2
 80049da:	60fb      	str	r3, [r7, #12]
 80049dc:	e001      	b.n	80049e2 <lowlayer_readCapture+0x4e>
	} else {
		data = 0;
 80049de:	2300      	movs	r3, #0
 80049e0:	60fb      	str	r3, [r7, #12]
	}
	return data;
 80049e2:	68fb      	ldr	r3, [r7, #12]
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3710      	adds	r7, #16
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <lowlayer_updateEncoder>:

void	lowlayer_updateEncoder(void) {
 80049ec:	b590      	push	{r4, r7, lr}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++) {
 80049f2:	2300      	movs	r3, #0
 80049f4:	71fb      	strb	r3, [r7, #7]
 80049f6:	e00b      	b.n	8004a10 <lowlayer_updateEncoder+0x24>
		position_encoder[i] = lowlayer_readEncoder(i);
 80049f8:	79fc      	ldrb	r4, [r7, #7]
 80049fa:	79fb      	ldrb	r3, [r7, #7]
 80049fc:	4618      	mov	r0, r3
 80049fe:	f7ff ff9d 	bl	800493c <lowlayer_readEncoder>
 8004a02:	4602      	mov	r2, r0
 8004a04:	4b06      	ldr	r3, [pc, #24]	; (8004a20 <lowlayer_updateEncoder+0x34>)
 8004a06:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	for (uint8_t i = 0; i < 3; i++) {
 8004a0a:	79fb      	ldrb	r3, [r7, #7]
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	71fb      	strb	r3, [r7, #7]
 8004a10:	79fb      	ldrb	r3, [r7, #7]
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d9f0      	bls.n	80049f8 <lowlayer_updateEncoder+0xc>
	}
}
 8004a16:	bf00      	nop
 8004a18:	370c      	adds	r7, #12
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd90      	pop	{r4, r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	20005374 	.word	0x20005374

08004a24 <lowlayer_updateCapture>:

void	lowlayer_updateCapture(void) {
 8004a24:	b590      	push	{r4, r7, lr}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++) {
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	71fb      	strb	r3, [r7, #7]
 8004a2e:	e00b      	b.n	8004a48 <lowlayer_updateCapture+0x24>
			position_capture[i] = lowlayer_readCapture(i);
 8004a30:	79fc      	ldrb	r4, [r7, #7]
 8004a32:	79fb      	ldrb	r3, [r7, #7]
 8004a34:	4618      	mov	r0, r3
 8004a36:	f7ff ffad 	bl	8004994 <lowlayer_readCapture>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	4b06      	ldr	r3, [pc, #24]	; (8004a58 <lowlayer_updateCapture+0x34>)
 8004a3e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	for (uint8_t i = 0; i < 3; i++) {
 8004a42:	79fb      	ldrb	r3, [r7, #7]
 8004a44:	3301      	adds	r3, #1
 8004a46:	71fb      	strb	r3, [r7, #7]
 8004a48:	79fb      	ldrb	r3, [r7, #7]
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d9f0      	bls.n	8004a30 <lowlayer_updateCapture+0xc>
	}
}
 8004a4e:	bf00      	nop
 8004a50:	370c      	adds	r7, #12
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd90      	pop	{r4, r7, pc}
 8004a56:	bf00      	nop
 8004a58:	20005384 	.word	0x20005384

08004a5c <lowlayer_updateLimit>:

void	lowlayer_updateLimit(void) {
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
	uint8_t limit_data = lowlayer_readLimitSwitch();
 8004a62:	f7ff ff5b 	bl	800491c <lowlayer_readLimitSwitch>
 8004a66:	4603      	mov	r3, r0
 8004a68:	71bb      	strb	r3, [r7, #6]
	for (uint8_t i = 0; i < 4; i++) {
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	71fb      	strb	r3, [r7, #7]
 8004a6e:	e00d      	b.n	8004a8c <lowlayer_updateLimit+0x30>
			limit_switch[i] = (limit_data & (0x01 << i)) ? 1 : 0;
 8004a70:	79ba      	ldrb	r2, [r7, #6]
 8004a72:	79fb      	ldrb	r3, [r7, #7]
 8004a74:	fa42 f303 	asr.w	r3, r2, r3
 8004a78:	b2da      	uxtb	r2, r3
 8004a7a:	79fb      	ldrb	r3, [r7, #7]
 8004a7c:	f002 0201 	and.w	r2, r2, #1
 8004a80:	b2d1      	uxtb	r1, r2
 8004a82:	4a06      	ldr	r2, [pc, #24]	; (8004a9c <lowlayer_updateLimit+0x40>)
 8004a84:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 4; i++) {
 8004a86:	79fb      	ldrb	r3, [r7, #7]
 8004a88:	3301      	adds	r3, #1
 8004a8a:	71fb      	strb	r3, [r7, #7]
 8004a8c:	79fb      	ldrb	r3, [r7, #7]
 8004a8e:	2b03      	cmp	r3, #3
 8004a90:	d9ee      	bls.n	8004a70 <lowlayer_updateLimit+0x14>
	}
}
 8004a92:	bf00      	nop
 8004a94:	3708      	adds	r7, #8
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	20005380 	.word	0x20005380

08004aa0 <lowlayer_setOutput>:

void	lowlayer_setOutput(uint8_t value) {
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	71fb      	strb	r3, [r7, #7]
	if (value > 0) {
 8004aaa:	79fb      	ldrb	r3, [r7, #7]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d006      	beq.n	8004abe <lowlayer_setOutput+0x1e>
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_SET);
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004ab6:	4807      	ldr	r0, [pc, #28]	; (8004ad4 <lowlayer_setOutput+0x34>)
 8004ab8:	f006 fc64 	bl	800b384 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_RESET);
	}
}
 8004abc:	e005      	b.n	8004aca <lowlayer_setOutput+0x2a>
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_RESET);
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004ac4:	4803      	ldr	r0, [pc, #12]	; (8004ad4 <lowlayer_setOutput+0x34>)
 8004ac6:	f006 fc5d 	bl	800b384 <HAL_GPIO_WritePin>
}
 8004aca:	bf00      	nop
 8004acc:	3708      	adds	r7, #8
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	40020400 	.word	0x40020400

08004ad8 <lowlayer_CPLD_Init>:

void	lowlayer_CPLD_Init(void) {
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(STOP_GPIO_Port, STOP_Pin, GPIO_PIN_SET); // STOP low active
 8004adc:	2201      	movs	r2, #1
 8004ade:	2140      	movs	r1, #64	; 0x40
 8004ae0:	4802      	ldr	r0, [pc, #8]	; (8004aec <lowlayer_CPLD_Init+0x14>)
 8004ae2:	f006 fc4f 	bl	800b384 <HAL_GPIO_WritePin>
}
 8004ae6:	bf00      	nop
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	40020c00 	.word	0x40020c00

08004af0 <lowlayer_stepMotorInit>:

void	lowlayer_stepMotorInit(void) {
 8004af0:	b580      	push	{r7, lr}
 8004af2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_SET); // ENABLE low active
 8004af4:	2201      	movs	r2, #1
 8004af6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004afa:	4808      	ldr	r0, [pc, #32]	; (8004b1c <lowlayer_stepMotorInit+0x2c>)
 8004afc:	f006 fc42 	bl	800b384 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEP_RESET_GPIO_Port, STEP_RESET_Pin, GPIO_PIN_SET); // RESET low active
 8004b00:	2201      	movs	r2, #1
 8004b02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004b06:	4805      	ldr	r0, [pc, #20]	; (8004b1c <lowlayer_stepMotorInit+0x2c>)
 8004b08:	f006 fc3c 	bl	800b384 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEP_SLEEP_GPIO_Port, STEP_SLEEP_Pin, GPIO_PIN_SET); // SLEEP low active
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b12:	4802      	ldr	r0, [pc, #8]	; (8004b1c <lowlayer_stepMotorInit+0x2c>)
 8004b14:	f006 fc36 	bl	800b384 <HAL_GPIO_WritePin>
}
 8004b18:	bf00      	nop
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	40020000 	.word	0x40020000

08004b20 <scaraStartup>:
											 "Over Accelerate",
											 "Wrong Joint Num",
											 "Wrong Coordinate"
											};

void				scaraStartup(void) {
 8004b20:	b580      	push	{r7, lr}
 8004b22:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	scaraSetScanFlag();
#endif
	lowlayer_CPLD_Init();
 8004b24:	f7ff ffd8 	bl	8004ad8 <lowlayer_CPLD_Init>
	lowlayer_stepMotorInit();
 8004b28:	f7ff ffe2 	bl	8004af0 <lowlayer_stepMotorInit>
	lowlayer_resetEncoder();
 8004b2c:	f7ff fed8 	bl	80048e0 <lowlayer_resetEncoder>
	lowlayer_writePulse(0, 0, 0, 0);
 8004b30:	2300      	movs	r3, #0
 8004b32:	2200      	movs	r2, #0
 8004b34:	2100      	movs	r1, #0
 8004b36:	2000      	movs	r0, #0
 8004b38:	f7ff fe0e 	bl	8004758 <lowlayer_writePulse>
}
 8004b3c:	bf00      	nop
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <scaraInitDuty>:

/* Compute duty corresponding to new command */
SCARA_StatusTypeDef	scaraInitDuty		(DUTY_Command_TypeDef command) {
 8004b40:	b084      	sub	sp, #16
 8004b42:	b5b0      	push	{r4, r5, r7, lr}
 8004b44:	f5ad 7d76 	sub.w	sp, sp, #984	; 0x3d8
 8004b48:	af8a      	add	r7, sp, #552	; 0x228
 8004b4a:	f507 7ce0 	add.w	ip, r7, #448	; 0x1c0
 8004b4e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	SCARA_StatusTypeDef status, status1, status2;

	/*----------- Space Task ------------*/
	if 			(DUTY_SPACE_TASK == command.space_type) {
 8004b52:	f897 31c9 	ldrb.w	r3, [r7, #457]	; 0x1c9
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	f040 834c 	bne.w	80051f4 <scaraInitDuty+0x6b4>
		double total_s, angle_s;
		int8_t dir_angle;
		SCARA_PositionTypeDef	target_point;
		// Change Degree --> Radian
		command.target_point.roll = command.target_point.roll*PI/180.0;
 8004b5c:	e9d7 0192 	ldrd	r0, r1, [r7, #584]	; 0x248
 8004b60:	a3ab      	add	r3, pc, #684	; (adr r3, 8004e10 <scaraInitDuty+0x2d0>)
 8004b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b66:	f7fb fd57 	bl	8000618 <__aeabi_dmul>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	4610      	mov	r0, r2
 8004b70:	4619      	mov	r1, r3
 8004b72:	f04f 0200 	mov.w	r2, #0
 8004b76:	4ba8      	ldr	r3, [pc, #672]	; (8004e18 <scaraInitDuty+0x2d8>)
 8004b78:	f7fb fe78 	bl	800086c <__aeabi_ddiv>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	460b      	mov	r3, r1
 8004b80:	e9c7 2392 	strd	r2, r3, [r7, #584]	; 0x248
		// Coordinate
		if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8004b84:	f897 31c8 	ldrb.w	r3, [r7, #456]	; 0x1c8
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d130      	bne.n	8004bee <scaraInitDuty+0xae>
			target_point.x 		= positionCurrent.x + command.target_point.x;
 8004b8c:	4ba3      	ldr	r3, [pc, #652]	; (8004e1c <scaraInitDuty+0x2dc>)
 8004b8e:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8004b92:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 8004b96:	f7fb fb89 	bl	80002ac <__adddf3>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	4639      	mov	r1, r7
 8004ba0:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
			target_point.y 		= positionCurrent.y + command.target_point.y;
 8004ba4:	4b9d      	ldr	r3, [pc, #628]	; (8004e1c <scaraInitDuty+0x2dc>)
 8004ba6:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8004baa:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	; 0x238
 8004bae:	f7fb fb7d 	bl	80002ac <__adddf3>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	4639      	mov	r1, r7
 8004bb8:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
			target_point.z 		= positionCurrent.z + command.target_point.z;
 8004bbc:	4b97      	ldr	r3, [pc, #604]	; (8004e1c <scaraInitDuty+0x2dc>)
 8004bbe:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8004bc2:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 8004bc6:	f7fb fb71 	bl	80002ac <__adddf3>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	460b      	mov	r3, r1
 8004bce:	4639      	mov	r1, r7
 8004bd0:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
			target_point.roll	= positionCurrent.roll + command.target_point.roll;
 8004bd4:	4b91      	ldr	r3, [pc, #580]	; (8004e1c <scaraInitDuty+0x2dc>)
 8004bd6:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8004bda:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 8004bde:	f7fb fb65 	bl	80002ac <__adddf3>
 8004be2:	4602      	mov	r2, r0
 8004be4:	460b      	mov	r3, r1
 8004be6:	4639      	mov	r1, r7
 8004be8:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 8004bec:	e01b      	b.n	8004c26 <scaraInitDuty+0xe6>
		} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8004bee:	f897 31c8 	ldrb.w	r3, [r7, #456]	; 0x1c8
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d114      	bne.n	8004c20 <scaraInitDuty+0xe0>
			target_point.x 		= command.target_point.x;
 8004bf6:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 8004bfa:	4639      	mov	r1, r7
 8004bfc:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
			target_point.y 		= command.target_point.y;
 8004c00:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	; 0x238
 8004c04:	4639      	mov	r1, r7
 8004c06:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
			target_point.z 		= command.target_point.z;
 8004c0a:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 8004c0e:	4639      	mov	r1, r7
 8004c10:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
			target_point.roll	= command.target_point.roll;
 8004c14:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 8004c18:	4639      	mov	r1, r7
 8004c1a:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 8004c1e:	e002      	b.n	8004c26 <scaraInitDuty+0xe6>
		} else {
			return SCARA_STATUS_ERROR_COORDINATE;
 8004c20:	230c      	movs	r3, #12
 8004c22:	f001 ba71 	b.w	8006108 <scaraInitDuty+0x15c8>
		}

		angle_s = target_point.roll - positionCurrent.roll;
 8004c26:	463b      	mov	r3, r7
 8004c28:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8004c2c:	4b7b      	ldr	r3, [pc, #492]	; (8004e1c <scaraInitDuty+0x2dc>)
 8004c2e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8004c32:	f7fb fb39 	bl	80002a8 <__aeabi_dsub>
 8004c36:	4602      	mov	r2, r0
 8004c38:	460b      	mov	r3, r1
 8004c3a:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
		dir_angle = 1;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
		if ( angle_s < 0) {
 8004c44:	f04f 0200 	mov.w	r2, #0
 8004c48:	f04f 0300 	mov.w	r3, #0
 8004c4c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8004c50:	f7fb ff54 	bl	8000afc <__aeabi_dcmplt>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d002      	beq.n	8004c60 <scaraInitDuty+0x120>
			dir_angle = -1;
 8004c5a:	23ff      	movs	r3, #255	; 0xff
 8004c5c:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
		}
		if ( fabs(angle_s) > PI) {
 8004c60:	f8d7 4198 	ldr.w	r4, [r7, #408]	; 0x198
 8004c64:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8004c68:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8004c6c:	a368      	add	r3, pc, #416	; (adr r3, 8004e10 <scaraInitDuty+0x2d0>)
 8004c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c72:	4620      	mov	r0, r4
 8004c74:	4629      	mov	r1, r5
 8004c76:	f7fb ff5f 	bl	8000b38 <__aeabi_dcmpgt>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d021      	beq.n	8004cc4 <scaraInitDuty+0x184>
			dir_angle = -dir_angle;
 8004c80:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8004c84:	425b      	negs	r3, r3
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
			angle_s = (2*PI - fabsf(angle_s))*dir_angle;
 8004c8c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8004c90:	f7fb ffba 	bl	8000c08 <__aeabi_d2f>
 8004c94:	ee07 0a90 	vmov	s15, r0
 8004c98:	eef0 7ae7 	vabs.f32	s15, s15
 8004c9c:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8004e20 <scaraInitDuty+0x2e0>
 8004ca0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004ca4:	f997 3197 	ldrsb.w	r3, [r7, #407]	; 0x197
 8004ca8:	ee07 3a90 	vmov	s15, r3
 8004cac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004cb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cb4:	ee17 0a90 	vmov	r0, s15
 8004cb8:	f7fb fc56 	bl	8000568 <__aeabi_f2d>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	460c      	mov	r4, r1
 8004cc0:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
		}


		myDUTY.space_type = DUTY_SPACE_TASK;// Change type
 8004cc4:	4b57      	ldr	r3, [pc, #348]	; (8004e24 <scaraInitDuty+0x2e4>)
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	701a      	strb	r2, [r3, #0]
		myDUTY.task.roll_start = positionCurrent.roll;
 8004cca:	4b54      	ldr	r3, [pc, #336]	; (8004e1c <scaraInitDuty+0x2dc>)
 8004ccc:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8004cd0:	4a54      	ldr	r2, [pc, #336]	; (8004e24 <scaraInitDuty+0x2e4>)
 8004cd2:	e9c2 34f0 	strd	r3, r4, [r2, #960]	; 0x3c0
		// 1-Path Planning
			// Straight Line
		if ( DUTY_PATH_LINE == command.path_type ) {
 8004cd6:	f897 31ca 	ldrb.w	r3, [r7, #458]	; 0x1ca
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d11f      	bne.n	8004d1e <scaraInitDuty+0x1de>
			myDUTY.task.path.path_type = DUTY_PATH_LINE;
 8004cde:	4b51      	ldr	r3, [pc, #324]	; (8004e24 <scaraInitDuty+0x2e4>)
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	721a      	strb	r2, [r3, #8]
			status = scaraInitLine(&(myDUTY.task.path.line), positionCurrent, target_point);
 8004ce4:	4c4d      	ldr	r4, [pc, #308]	; (8004e1c <scaraInitDuty+0x2dc>)
 8004ce6:	463b      	mov	r3, r7
 8004ce8:	a82c      	add	r0, sp, #176	; 0xb0
 8004cea:	4619      	mov	r1, r3
 8004cec:	23b8      	movs	r3, #184	; 0xb8
 8004cee:	461a      	mov	r2, r3
 8004cf0:	f010 f97e 	bl	8014ff0 <memcpy>
 8004cf4:	4668      	mov	r0, sp
 8004cf6:	f104 0308 	add.w	r3, r4, #8
 8004cfa:	22b0      	movs	r2, #176	; 0xb0
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	f010 f977 	bl	8014ff0 <memcpy>
 8004d02:	e894 000c 	ldmia.w	r4, {r2, r3}
 8004d06:	4848      	ldr	r0, [pc, #288]	; (8004e28 <scaraInitDuty+0x2e8>)
 8004d08:	f001 fa10 	bl	800612c <scaraInitLine>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
			total_s = myDUTY.task.path.line.total_s;
 8004d12:	4b44      	ldr	r3, [pc, #272]	; (8004e24 <scaraInitDuty+0x2e4>)
 8004d14:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 8004d18:	e9c7 3468 	strd	r3, r4, [r7, #416]	; 0x1a0
 8004d1c:	e070      	b.n	8004e00 <scaraInitDuty+0x2c0>
			// Circular
		} else if ( DUTY_PATH_CIRCLE == command.path_type ) {
 8004d1e:	f897 31ca 	ldrb.w	r3, [r7, #458]	; 0x1ca
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d169      	bne.n	8004dfa <scaraInitDuty+0x2ba>
			SCARA_PositionTypeDef	center_point;
			if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8004d26:	f897 31c8 	ldrb.w	r3, [r7, #456]	; 0x1c8
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d127      	bne.n	8004d7e <scaraInitDuty+0x23e>
				center_point.x 		= positionCurrent.x + command.sub_point.x;
 8004d2e:	4b3b      	ldr	r3, [pc, #236]	; (8004e1c <scaraInitDuty+0x2dc>)
 8004d30:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8004d34:	e9d7 34ba 	ldrd	r3, r4, [r7, #744]	; 0x2e8
 8004d38:	461a      	mov	r2, r3
 8004d3a:	4623      	mov	r3, r4
 8004d3c:	f7fb fab6 	bl	80002ac <__adddf3>
 8004d40:	4603      	mov	r3, r0
 8004d42:	460c      	mov	r4, r1
 8004d44:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
				center_point.y 		= positionCurrent.y + command.sub_point.y;
 8004d48:	4b34      	ldr	r3, [pc, #208]	; (8004e1c <scaraInitDuty+0x2dc>)
 8004d4a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8004d4e:	e9d7 34bc 	ldrd	r3, r4, [r7, #752]	; 0x2f0
 8004d52:	461a      	mov	r2, r3
 8004d54:	4623      	mov	r3, r4
 8004d56:	f7fb faa9 	bl	80002ac <__adddf3>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	460c      	mov	r4, r1
 8004d5e:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
				center_point.z 		= positionCurrent.z + command.sub_point.z;
 8004d62:	4b2e      	ldr	r3, [pc, #184]	; (8004e1c <scaraInitDuty+0x2dc>)
 8004d64:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8004d68:	e9d7 34be 	ldrd	r3, r4, [r7, #760]	; 0x2f8
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	4623      	mov	r3, r4
 8004d70:	f7fb fa9c 	bl	80002ac <__adddf3>
 8004d74:	4603      	mov	r3, r0
 8004d76:	460c      	mov	r4, r1
 8004d78:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
 8004d7c:	e013      	b.n	8004da6 <scaraInitDuty+0x266>
			} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8004d7e:	f897 31c8 	ldrb.w	r3, [r7, #456]	; 0x1c8
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d10c      	bne.n	8004da0 <scaraInitDuty+0x260>
				center_point.x 		= command.target_point.x;
 8004d86:	e9d7 348c 	ldrd	r3, r4, [r7, #560]	; 0x230
 8004d8a:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
				center_point.y 		= command.target_point.y;
 8004d8e:	e9d7 348e 	ldrd	r3, r4, [r7, #568]	; 0x238
 8004d92:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
				center_point.z 		= command.target_point.z;
 8004d96:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 8004d9a:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
 8004d9e:	e002      	b.n	8004da6 <scaraInitDuty+0x266>
			} else {
				return SCARA_STATUS_ERROR_COORDINATE;
 8004da0:	230c      	movs	r3, #12
			return SCARA_STATUS_ERROR_COORDINATE;
 8004da2:	f001 b9b1 	b.w	8006108 <scaraInitDuty+0x15c8>
			}

			myDUTY.task.path.path_type = DUTY_PATH_CIRCLE;
 8004da6:	4b1f      	ldr	r3, [pc, #124]	; (8004e24 <scaraInitDuty+0x2e4>)
 8004da8:	2201      	movs	r2, #1
 8004daa:	721a      	strb	r2, [r3, #8]
			status = scaraInitCircle(&(myDUTY.task.path.circle),
 8004dac:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004db0:	4c1a      	ldr	r4, [pc, #104]	; (8004e1c <scaraInitDuty+0x2dc>)
 8004db2:	9388      	str	r3, [sp, #544]	; 0x220
 8004db4:	a85a      	add	r0, sp, #360	; 0x168
 8004db6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004dba:	22b8      	movs	r2, #184	; 0xb8
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	f010 f917 	bl	8014ff0 <memcpy>
 8004dc2:	463b      	mov	r3, r7
 8004dc4:	a82c      	add	r0, sp, #176	; 0xb0
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	23b8      	movs	r3, #184	; 0xb8
 8004dca:	461a      	mov	r2, r3
 8004dcc:	f010 f910 	bl	8014ff0 <memcpy>
 8004dd0:	4668      	mov	r0, sp
 8004dd2:	f104 0308 	add.w	r3, r4, #8
 8004dd6:	22b0      	movs	r2, #176	; 0xb0
 8004dd8:	4619      	mov	r1, r3
 8004dda:	f010 f909 	bl	8014ff0 <memcpy>
 8004dde:	e894 000c 	ldmia.w	r4, {r2, r3}
 8004de2:	4812      	ldr	r0, [pc, #72]	; (8004e2c <scaraInitDuty+0x2ec>)
 8004de4:	f001 fa68 	bl	80062b8 <scaraInitCircle>
 8004de8:	4603      	mov	r3, r0
 8004dea:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
										positionCurrent,
										target_point,
										center_point,
										command.sub_para_int );
			total_s = myDUTY.task.path.circle.total_s;
 8004dee:	4b0d      	ldr	r3, [pc, #52]	; (8004e24 <scaraInitDuty+0x2e4>)
 8004df0:	e9d3 343a 	ldrd	r3, r4, [r3, #232]	; 0xe8
 8004df4:	e9c7 3468 	strd	r3, r4, [r7, #416]	; 0x1a0
 8004df8:	e002      	b.n	8004e00 <scaraInitDuty+0x2c0>

		} else {
			return SCARA_STATUS_ERROR_TASK;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	f001 b984 	b.w	8006108 <scaraInitDuty+0x15c8>
		}

		if ( SCARA_STATUS_OK != status) {
 8004e00:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d013      	beq.n	8004e30 <scaraInitDuty+0x2f0>
			return status;
 8004e08:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 8004e0c:	f001 b97c 	b.w	8006108 <scaraInitDuty+0x15c8>
 8004e10:	60000000 	.word	0x60000000
 8004e14:	400921fb 	.word	0x400921fb
 8004e18:	40668000 	.word	0x40668000
 8004e1c:	20005e88 	.word	0x20005e88
 8004e20:	40c90fdb 	.word	0x40c90fdb
 8004e24:	200053c8 	.word	0x200053c8
 8004e28:	200053d8 	.word	0x200053d8
 8004e2c:	20005448 	.word	0x20005448
		}

		// 2-Trajectory Planning
			// LSPB
		if ( DUTY_TRAJECTORY_LSPB == command.trajec_type ) {
 8004e30:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	f040 80dd 	bne.w	8004ff4 <scaraInitDuty+0x4b4>

			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8004e3a:	f897 31cd 	ldrb.w	r3, [r7, #461]	; 0x1cd
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d145      	bne.n	8004ece <scaraInitDuty+0x38e>
				myDUTY.task.trajectory_3d.lspb.Tf = command.time_total;
 8004e42:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 8004e46:	4ac8      	ldr	r2, [pc, #800]	; (8005168 <scaraInitDuty+0x628>)
 8004e48:	e9c2 345a 	strd	r3, r4, [r2, #360]	; 0x168
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8004e4c:	4bc6      	ldr	r3, [pc, #792]	; (8005168 <scaraInitDuty+0x628>)
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitLSPB(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 8004e54:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8004e58:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8004e5c:	eeb0 2a46 	vmov.f32	s4, s12
 8004e60:	eef0 2a66 	vmov.f32	s5, s13
 8004e64:	eeb0 1a47 	vmov.f32	s2, s14
 8004e68:	eef0 1a67 	vmov.f32	s3, s15
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 8004e72:	2104      	movs	r1, #4
 8004e74:	48bd      	ldr	r0, [pc, #756]	; (800516c <scaraInitDuty+0x62c>)
 8004e76:	f001 fb97 	bl	80065a8 <scaraInitLSPB>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
						 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);

				myDUTY.task.trajectory_roll.lspb.Tf = command.time_total;
 8004e80:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 8004e84:	4ab8      	ldr	r2, [pc, #736]	; (8005168 <scaraInitDuty+0x628>)
 8004e86:	e9c2 34b0 	strd	r3, r4, [r2, #704]	; 0x2c0
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8004e8a:	4bb7      	ldr	r3, [pc, #732]	; (8005168 <scaraInitDuty+0x628>)
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 2268 	strb.w	r2, [r3, #616]	; 0x268
				status2 = scaraInitLSPB(&(myDUTY.task.trajectory_roll.lspb), TRAJECTORY_ROLL,
 8004e92:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8004e96:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8004e9a:	eeb0 2a46 	vmov.f32	s4, s12
 8004e9e:	eef0 2a66 	vmov.f32	s5, s13
 8004ea2:	eeb0 1a47 	vmov.f32	s2, s14
 8004ea6:	eef0 1a67 	vmov.f32	s3, s15
 8004eaa:	2201      	movs	r2, #1
 8004eac:	ed97 0b66 	vldr	d0, [r7, #408]	; 0x198
 8004eb0:	2105      	movs	r1, #5
 8004eb2:	48af      	ldr	r0, [pc, #700]	; (8005170 <scaraInitDuty+0x630>)
 8004eb4:	f001 fb78 	bl	80065a8 <scaraInitLSPB>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
						 angle_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
				myDUTY.time_total = command.time_total;
 8004ebe:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 8004ec2:	4aa9      	ldr	r2, [pc, #676]	; (8005168 <scaraInitDuty+0x628>)
 8004ec4:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8004ec8:	e9c2 3400 	strd	r3, r4, [r2]
 8004ecc:	e181      	b.n	80051d2 <scaraInitDuty+0x692>

			} else if (DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8004ece:	f897 31cd 	ldrb.w	r3, [r7, #461]	; 0x1cd
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	f040 808b 	bne.w	8004fee <scaraInitDuty+0x4ae>
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8004ed8:	4ba3      	ldr	r3, [pc, #652]	; (8005168 <scaraInitDuty+0x628>)
 8004eda:	2200      	movs	r2, #0
 8004edc:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitLSPB(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 8004ee0:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8004ee4:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8004ee8:	eeb0 2a46 	vmov.f32	s4, s12
 8004eec:	eef0 2a66 	vmov.f32	s5, s13
 8004ef0:	eeb0 1a47 	vmov.f32	s2, s14
 8004ef4:	eef0 1a67 	vmov.f32	s3, s15
 8004ef8:	2200      	movs	r2, #0
 8004efa:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 8004efe:	2104      	movs	r1, #4
 8004f00:	489a      	ldr	r0, [pc, #616]	; (800516c <scaraInitDuty+0x62c>)
 8004f02:	f001 fb51 	bl	80065a8 <scaraInitLSPB>
 8004f06:	4603      	mov	r3, r0
 8004f08:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
						 total_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8004f0c:	4b96      	ldr	r3, [pc, #600]	; (8005168 <scaraInitDuty+0x628>)
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f883 2268 	strb.w	r2, [r3, #616]	; 0x268
				status2 = scaraInitLSPB(&(myDUTY.task.trajectory_roll.lspb), TRAJECTORY_ROLL,
 8004f14:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8004f18:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8004f1c:	eeb0 2a46 	vmov.f32	s4, s12
 8004f20:	eef0 2a66 	vmov.f32	s5, s13
 8004f24:	eeb0 1a47 	vmov.f32	s2, s14
 8004f28:	eef0 1a67 	vmov.f32	s3, s15
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	ed97 0b66 	vldr	d0, [r7, #408]	; 0x198
 8004f32:	2105      	movs	r1, #5
 8004f34:	488e      	ldr	r0, [pc, #568]	; (8005170 <scaraInitDuty+0x630>)
 8004f36:	f001 fb37 	bl	80065a8 <scaraInitLSPB>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
						 angle_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				// Synchronous time end
				if(myDUTY.task.trajectory_3d.lspb.Tf > myDUTY.task.trajectory_roll.lspb.Tf) {
 8004f40:	4b89      	ldr	r3, [pc, #548]	; (8005168 <scaraInitDuty+0x628>)
 8004f42:	e9d3 015a 	ldrd	r0, r1, [r3, #360]	; 0x168
 8004f46:	4b88      	ldr	r3, [pc, #544]	; (8005168 <scaraInitDuty+0x628>)
 8004f48:	e9d3 34b0 	ldrd	r3, r4, [r3, #704]	; 0x2c0
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	4623      	mov	r3, r4
 8004f50:	f7fb fdf2 	bl	8000b38 <__aeabi_dcmpgt>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d024      	beq.n	8004fa4 <scaraInitDuty+0x464>
					myDUTY.task.trajectory_roll.lspb.Tf = myDUTY.task.trajectory_3d.lspb.Tf;
 8004f5a:	4b83      	ldr	r3, [pc, #524]	; (8005168 <scaraInitDuty+0x628>)
 8004f5c:	e9d3 345a 	ldrd	r3, r4, [r3, #360]	; 0x168
 8004f60:	4a81      	ldr	r2, [pc, #516]	; (8005168 <scaraInitDuty+0x628>)
 8004f62:	e9c2 34b0 	strd	r3, r4, [r2, #704]	; 0x2c0
					status2 = scaraInitLSPB(&(myDUTY.task.trajectory_roll.lspb), TRAJECTORY_ROLL,
 8004f66:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8004f6a:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8004f6e:	eeb0 2a46 	vmov.f32	s4, s12
 8004f72:	eef0 2a66 	vmov.f32	s5, s13
 8004f76:	eeb0 1a47 	vmov.f32	s2, s14
 8004f7a:	eef0 1a67 	vmov.f32	s3, s15
 8004f7e:	2201      	movs	r2, #1
 8004f80:	ed97 0b66 	vldr	d0, [r7, #408]	; 0x198
 8004f84:	2105      	movs	r1, #5
 8004f86:	487a      	ldr	r0, [pc, #488]	; (8005170 <scaraInitDuty+0x630>)
 8004f88:	f001 fb0e 	bl	80065a8 <scaraInitLSPB>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
							 angle_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_3d.lspb.Tf;
 8004f92:	4b75      	ldr	r3, [pc, #468]	; (8005168 <scaraInitDuty+0x628>)
 8004f94:	e9d3 345a 	ldrd	r3, r4, [r3, #360]	; 0x168
 8004f98:	4a73      	ldr	r2, [pc, #460]	; (8005168 <scaraInitDuty+0x628>)
 8004f9a:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8004f9e:	e9c2 3400 	strd	r3, r4, [r2]
 8004fa2:	e116      	b.n	80051d2 <scaraInitDuty+0x692>
				} else {
					myDUTY.task.trajectory_3d.lspb.Tf = myDUTY.task.trajectory_roll.lspb.Tf;
 8004fa4:	4b70      	ldr	r3, [pc, #448]	; (8005168 <scaraInitDuty+0x628>)
 8004fa6:	e9d3 34b0 	ldrd	r3, r4, [r3, #704]	; 0x2c0
 8004faa:	4a6f      	ldr	r2, [pc, #444]	; (8005168 <scaraInitDuty+0x628>)
 8004fac:	e9c2 345a 	strd	r3, r4, [r2, #360]	; 0x168
					status1 = scaraInitLSPB(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 8004fb0:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8004fb4:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8004fb8:	eeb0 2a46 	vmov.f32	s4, s12
 8004fbc:	eef0 2a66 	vmov.f32	s5, s13
 8004fc0:	eeb0 1a47 	vmov.f32	s2, s14
 8004fc4:	eef0 1a67 	vmov.f32	s3, s15
 8004fc8:	2201      	movs	r2, #1
 8004fca:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 8004fce:	2104      	movs	r1, #4
 8004fd0:	4866      	ldr	r0, [pc, #408]	; (800516c <scaraInitDuty+0x62c>)
 8004fd2:	f001 fae9 	bl	80065a8 <scaraInitLSPB>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
							 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_roll.lspb.Tf;
 8004fdc:	4b62      	ldr	r3, [pc, #392]	; (8005168 <scaraInitDuty+0x628>)
 8004fde:	e9d3 34b0 	ldrd	r3, r4, [r3, #704]	; 0x2c0
 8004fe2:	4a61      	ldr	r2, [pc, #388]	; (8005168 <scaraInitDuty+0x628>)
 8004fe4:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8004fe8:	e9c2 3400 	strd	r3, r4, [r2]
 8004fec:	e0f1      	b.n	80051d2 <scaraInitDuty+0x692>
				}
			} else {
				return SCARA_STATUS_ERROR_MODE_INIT ;
 8004fee:	2308      	movs	r3, #8
 8004ff0:	f001 b88a 	b.w	8006108 <scaraInitDuty+0x15c8>
			}
			// SCURVE
		} else if 	( DUTY_TRAJECTORY_SCURVE == command.trajec_type ){
 8004ff4:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	f040 80e7 	bne.w	80051cc <scaraInitDuty+0x68c>

			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8004ffe:	f897 31cd 	ldrb.w	r3, [r7, #461]	; 0x1cd
 8005002:	2b01      	cmp	r3, #1
 8005004:	d145      	bne.n	8005092 <scaraInitDuty+0x552>
				myDUTY.task.trajectory_3d.scurve.Tf = command.time_total;
 8005006:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 800500a:	4a57      	ldr	r2, [pc, #348]	; (8005168 <scaraInitDuty+0x628>)
 800500c:	e9c2 347e 	strd	r3, r4, [r2, #504]	; 0x1f8
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8005010:	4b55      	ldr	r3, [pc, #340]	; (8005168 <scaraInitDuty+0x628>)
 8005012:	2201      	movs	r2, #1
 8005014:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitScurve(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 8005018:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 800501c:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8005020:	eeb0 2a46 	vmov.f32	s4, s12
 8005024:	eef0 2a66 	vmov.f32	s5, s13
 8005028:	eeb0 1a47 	vmov.f32	s2, s14
 800502c:	eef0 1a67 	vmov.f32	s3, s15
 8005030:	2201      	movs	r2, #1
 8005032:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 8005036:	2104      	movs	r1, #4
 8005038:	484e      	ldr	r0, [pc, #312]	; (8005174 <scaraInitDuty+0x634>)
 800503a:	f001 fead 	bl	8006d98 <scaraInitScurve>
 800503e:	4603      	mov	r3, r0
 8005040:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
						 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);

				myDUTY.task.trajectory_roll.scurve.Tf = command.time_total;
 8005044:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 8005048:	4a47      	ldr	r2, [pc, #284]	; (8005168 <scaraInitDuty+0x628>)
 800504a:	e9c2 34d4 	strd	r3, r4, [r2, #848]	; 0x350
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 800504e:	4b46      	ldr	r3, [pc, #280]	; (8005168 <scaraInitDuty+0x628>)
 8005050:	2201      	movs	r2, #1
 8005052:	f883 2268 	strb.w	r2, [r3, #616]	; 0x268
				status2 = scaraInitScurve(&(myDUTY.task.trajectory_roll.scurve), TRAJECTORY_ROLL,
 8005056:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 800505a:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 800505e:	eeb0 2a46 	vmov.f32	s4, s12
 8005062:	eef0 2a66 	vmov.f32	s5, s13
 8005066:	eeb0 1a47 	vmov.f32	s2, s14
 800506a:	eef0 1a67 	vmov.f32	s3, s15
 800506e:	2201      	movs	r2, #1
 8005070:	ed97 0b66 	vldr	d0, [r7, #408]	; 0x198
 8005074:	2105      	movs	r1, #5
 8005076:	4840      	ldr	r0, [pc, #256]	; (8005178 <scaraInitDuty+0x638>)
 8005078:	f001 fe8e 	bl	8006d98 <scaraInitScurve>
 800507c:	4603      	mov	r3, r0
 800507e:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
						 angle_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
				myDUTY.time_total = command.time_total;
 8005082:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 8005086:	4a38      	ldr	r2, [pc, #224]	; (8005168 <scaraInitDuty+0x628>)
 8005088:	f602 1248 	addw	r2, r2, #2376	; 0x948
 800508c:	e9c2 3400 	strd	r3, r4, [r2]
 8005090:	e09f      	b.n	80051d2 <scaraInitDuty+0x692>

			} else if (DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8005092:	f897 31cd 	ldrb.w	r3, [r7, #461]	; 0x1cd
 8005096:	2b00      	cmp	r3, #0
 8005098:	f040 8095 	bne.w	80051c6 <scaraInitDuty+0x686>
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 800509c:	4b32      	ldr	r3, [pc, #200]	; (8005168 <scaraInitDuty+0x628>)
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitScurve(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 80050a4:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 80050a8:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 80050ac:	eeb0 2a46 	vmov.f32	s4, s12
 80050b0:	eef0 2a66 	vmov.f32	s5, s13
 80050b4:	eeb0 1a47 	vmov.f32	s2, s14
 80050b8:	eef0 1a67 	vmov.f32	s3, s15
 80050bc:	2200      	movs	r2, #0
 80050be:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 80050c2:	2104      	movs	r1, #4
 80050c4:	482b      	ldr	r0, [pc, #172]	; (8005174 <scaraInitDuty+0x634>)
 80050c6:	f001 fe67 	bl	8006d98 <scaraInitScurve>
 80050ca:	4603      	mov	r3, r0
 80050cc:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
						 total_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 80050d0:	4b25      	ldr	r3, [pc, #148]	; (8005168 <scaraInitDuty+0x628>)
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 2268 	strb.w	r2, [r3, #616]	; 0x268
				status2 = scaraInitScurve(&(myDUTY.task.trajectory_roll.scurve), TRAJECTORY_ROLL,
 80050d8:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 80050dc:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 80050e0:	eeb0 2a46 	vmov.f32	s4, s12
 80050e4:	eef0 2a66 	vmov.f32	s5, s13
 80050e8:	eeb0 1a47 	vmov.f32	s2, s14
 80050ec:	eef0 1a67 	vmov.f32	s3, s15
 80050f0:	2200      	movs	r2, #0
 80050f2:	ed97 0b66 	vldr	d0, [r7, #408]	; 0x198
 80050f6:	2105      	movs	r1, #5
 80050f8:	481f      	ldr	r0, [pc, #124]	; (8005178 <scaraInitDuty+0x638>)
 80050fa:	f001 fe4d 	bl	8006d98 <scaraInitScurve>
 80050fe:	4603      	mov	r3, r0
 8005100:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
						 angle_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				// synchronous time end
				if(myDUTY.task.trajectory_3d.scurve.Tf > myDUTY.task.trajectory_roll.scurve.Tf) {
 8005104:	4b18      	ldr	r3, [pc, #96]	; (8005168 <scaraInitDuty+0x628>)
 8005106:	e9d3 017e 	ldrd	r0, r1, [r3, #504]	; 0x1f8
 800510a:	4b17      	ldr	r3, [pc, #92]	; (8005168 <scaraInitDuty+0x628>)
 800510c:	e9d3 34d4 	ldrd	r3, r4, [r3, #848]	; 0x350
 8005110:	461a      	mov	r2, r3
 8005112:	4623      	mov	r3, r4
 8005114:	f7fb fd10 	bl	8000b38 <__aeabi_dcmpgt>
 8005118:	4603      	mov	r3, r0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d02e      	beq.n	800517c <scaraInitDuty+0x63c>
					myDUTY.task.trajectory_roll.scurve.Tf = myDUTY.task.trajectory_3d.scurve.Tf;
 800511e:	4b12      	ldr	r3, [pc, #72]	; (8005168 <scaraInitDuty+0x628>)
 8005120:	e9d3 347e 	ldrd	r3, r4, [r3, #504]	; 0x1f8
 8005124:	4a10      	ldr	r2, [pc, #64]	; (8005168 <scaraInitDuty+0x628>)
 8005126:	e9c2 34d4 	strd	r3, r4, [r2, #848]	; 0x350
					status2 = scaraInitScurve(&(myDUTY.task.trajectory_roll.scurve), TRAJECTORY_ROLL,
 800512a:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 800512e:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8005132:	eeb0 2a46 	vmov.f32	s4, s12
 8005136:	eef0 2a66 	vmov.f32	s5, s13
 800513a:	eeb0 1a47 	vmov.f32	s2, s14
 800513e:	eef0 1a67 	vmov.f32	s3, s15
 8005142:	2201      	movs	r2, #1
 8005144:	ed97 0b66 	vldr	d0, [r7, #408]	; 0x198
 8005148:	2105      	movs	r1, #5
 800514a:	480b      	ldr	r0, [pc, #44]	; (8005178 <scaraInitDuty+0x638>)
 800514c:	f001 fe24 	bl	8006d98 <scaraInitScurve>
 8005150:	4603      	mov	r3, r0
 8005152:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
							 angle_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_3d.scurve.Tf;
 8005156:	4b04      	ldr	r3, [pc, #16]	; (8005168 <scaraInitDuty+0x628>)
 8005158:	e9d3 347e 	ldrd	r3, r4, [r3, #504]	; 0x1f8
 800515c:	4a02      	ldr	r2, [pc, #8]	; (8005168 <scaraInitDuty+0x628>)
 800515e:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8005162:	e9c2 3400 	strd	r3, r4, [r2]
 8005166:	e034      	b.n	80051d2 <scaraInitDuty+0x692>
 8005168:	200053c8 	.word	0x200053c8
 800516c:	200054e0 	.word	0x200054e0
 8005170:	20005638 	.word	0x20005638
 8005174:	20005560 	.word	0x20005560
 8005178:	200056b8 	.word	0x200056b8
				} else {
					myDUTY.task.trajectory_3d.scurve.Tf = myDUTY.task.trajectory_roll.scurve.Tf;
 800517c:	4bb0      	ldr	r3, [pc, #704]	; (8005440 <scaraInitDuty+0x900>)
 800517e:	e9d3 34d4 	ldrd	r3, r4, [r3, #848]	; 0x350
 8005182:	4aaf      	ldr	r2, [pc, #700]	; (8005440 <scaraInitDuty+0x900>)
 8005184:	e9c2 347e 	strd	r3, r4, [r2, #504]	; 0x1f8
					status1 = scaraInitScurve(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 8005188:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 800518c:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8005190:	eeb0 2a46 	vmov.f32	s4, s12
 8005194:	eef0 2a66 	vmov.f32	s5, s13
 8005198:	eeb0 1a47 	vmov.f32	s2, s14
 800519c:	eef0 1a67 	vmov.f32	s3, s15
 80051a0:	2201      	movs	r2, #1
 80051a2:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 80051a6:	2104      	movs	r1, #4
 80051a8:	48a6      	ldr	r0, [pc, #664]	; (8005444 <scaraInitDuty+0x904>)
 80051aa:	f001 fdf5 	bl	8006d98 <scaraInitScurve>
 80051ae:	4603      	mov	r3, r0
 80051b0:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
							 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_roll.scurve.Tf;
 80051b4:	4ba2      	ldr	r3, [pc, #648]	; (8005440 <scaraInitDuty+0x900>)
 80051b6:	e9d3 34d4 	ldrd	r3, r4, [r3, #848]	; 0x350
 80051ba:	4aa1      	ldr	r2, [pc, #644]	; (8005440 <scaraInitDuty+0x900>)
 80051bc:	f602 1248 	addw	r2, r2, #2376	; 0x948
 80051c0:	e9c2 3400 	strd	r3, r4, [r2]
 80051c4:	e005      	b.n	80051d2 <scaraInitDuty+0x692>
				}
			} else {
				return SCARA_STATUS_ERROR_MODE_INIT;
 80051c6:	2308      	movs	r3, #8
 80051c8:	f000 bf9e 	b.w	8006108 <scaraInitDuty+0x15c8>
			}
		} else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 80051cc:	2305      	movs	r3, #5
 80051ce:	f000 bf9b 	b.w	8006108 <scaraInitDuty+0x15c8>
		}
		// Check Init Status
		if ( SCARA_STATUS_OK != status1) {
 80051d2:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d003      	beq.n	80051e2 <scaraInitDuty+0x6a2>
			return status1;
 80051da:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 80051de:	f000 bf93 	b.w	8006108 <scaraInitDuty+0x15c8>
		}
		if ( SCARA_STATUS_OK != status2) {
 80051e2:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	f000 8760 	beq.w	80060ac <scaraInitDuty+0x156c>
			return status2;
 80051ec:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 80051f0:	f000 bf8a 	b.w	8006108 <scaraInitDuty+0x15c8>
		}


	/*----------- Space Joint ------------*/
	} else if (DUTY_SPACE_JOINT == command.space_type) {
 80051f4:	f897 31c9 	ldrb.w	r3, [r7, #457]	; 0x1c9
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	f040 8755 	bne.w	80060a8 <scaraInitDuty+0x1568>

		myDUTY.space_type = DUTY_SPACE_JOINT;// Change type
 80051fe:	4b90      	ldr	r3, [pc, #576]	; (8005440 <scaraInitDuty+0x900>)
 8005200:	2201      	movs	r2, #1
 8005202:	701a      	strb	r2, [r3, #0]
		myDUTY.joint.theta1_start	 = positionCurrent.Theta1;
 8005204:	4b90      	ldr	r3, [pc, #576]	; (8005448 <scaraInitDuty+0x908>)
 8005206:	e9d3 341a 	ldrd	r3, r4, [r3, #104]	; 0x68
 800520a:	4a8d      	ldr	r2, [pc, #564]	; (8005440 <scaraInitDuty+0x900>)
 800520c:	f602 1228 	addw	r2, r2, #2344	; 0x928
 8005210:	e9c2 3400 	strd	r3, r4, [r2]
		myDUTY.joint.theta2_start	 = positionCurrent.Theta2;
 8005214:	4b8c      	ldr	r3, [pc, #560]	; (8005448 <scaraInitDuty+0x908>)
 8005216:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 800521a:	4a89      	ldr	r2, [pc, #548]	; (8005440 <scaraInitDuty+0x900>)
 800521c:	f502 6213 	add.w	r2, r2, #2352	; 0x930
 8005220:	e9c2 3400 	strd	r3, r4, [r2]
		myDUTY.joint.d3_start		 = positionCurrent.D3;
 8005224:	4b88      	ldr	r3, [pc, #544]	; (8005448 <scaraInitDuty+0x908>)
 8005226:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 800522a:	4a85      	ldr	r2, [pc, #532]	; (8005440 <scaraInitDuty+0x900>)
 800522c:	f602 1238 	addw	r2, r2, #2360	; 0x938
 8005230:	e9c2 3400 	strd	r3, r4, [r2]
		myDUTY.joint.theta4_start 	 = positionCurrent.Theta4;
 8005234:	4b84      	ldr	r3, [pc, #528]	; (8005448 <scaraInitDuty+0x908>)
 8005236:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 800523a:	4a81      	ldr	r2, [pc, #516]	; (8005440 <scaraInitDuty+0x900>)
 800523c:	f502 6214 	add.w	r2, r2, #2368	; 0x940
 8005240:	e9c2 3400 	strd	r3, r4, [r2]

		//-----Joint Single
		if ( DUTY_JOINT_SINGLE == command.joint_type) {
 8005244:	f897 31cb 	ldrb.w	r3, [r7, #459]	; 0x1cb
 8005248:	2b00      	cmp	r3, #0
 800524a:	f040 83d6 	bne.w	80059fa <scaraInitDuty+0xeba>
			// Trajectory 1 profile
			double s, abs_position;
			switch(command.sub_para_int) {
 800524e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8005252:	2b03      	cmp	r3, #3
 8005254:	f200 814e 	bhi.w	80054f4 <scaraInitDuty+0x9b4>
 8005258:	a201      	add	r2, pc, #4	; (adr r2, 8005260 <scaraInitDuty+0x720>)
 800525a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800525e:	bf00      	nop
 8005260:	08005271 	.word	0x08005271
 8005264:	08005317 	.word	0x08005317
 8005268:	080053bd 	.word	0x080053bd
 800526c:	08005451 	.word	0x08005451
			case 0:
				// Change Degree --> Radian
				command.sub_para_double = command.sub_para_double*PI/180.0;
 8005270:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	; 0x1d8
 8005274:	a370      	add	r3, pc, #448	; (adr r3, 8005438 <scaraInitDuty+0x8f8>)
 8005276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800527a:	f7fb f9cd 	bl	8000618 <__aeabi_dmul>
 800527e:	4603      	mov	r3, r0
 8005280:	460c      	mov	r4, r1
 8005282:	4618      	mov	r0, r3
 8005284:	4621      	mov	r1, r4
 8005286:	f04f 0200 	mov.w	r2, #0
 800528a:	4b70      	ldr	r3, [pc, #448]	; (800544c <scaraInitDuty+0x90c>)
 800528c:	f7fb faee 	bl	800086c <__aeabi_ddiv>
 8005290:	4603      	mov	r3, r0
 8005292:	460c      	mov	r4, r1
 8005294:	e9c7 3476 	strd	r3, r4, [r7, #472]	; 0x1d8
				// Coordinate
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8005298:	f897 31c8 	ldrb.w	r3, [r7, #456]	; 0x1c8
 800529c:	2b01      	cmp	r3, #1
 800529e:	d113      	bne.n	80052c8 <scaraInitDuty+0x788>
					abs_position = myDUTY.joint.theta1_start + command.sub_para_double;
 80052a0:	4b67      	ldr	r3, [pc, #412]	; (8005440 <scaraInitDuty+0x900>)
 80052a2:	f603 1328 	addw	r3, r3, #2344	; 0x928
 80052a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80052aa:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 80052ae:	461a      	mov	r2, r3
 80052b0:	4623      	mov	r3, r4
 80052b2:	f7fa fffb 	bl	80002ac <__adddf3>
 80052b6:	4603      	mov	r3, r0
 80052b8:	460c      	mov	r4, r1
 80052ba:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
					s			 = command.sub_para_double;
 80052be:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 80052c2:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
 80052c6:	e01a      	b.n	80052fe <scaraInitDuty+0x7be>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 80052c8:	f897 31c8 	ldrb.w	r3, [r7, #456]	; 0x1c8
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d113      	bne.n	80052f8 <scaraInitDuty+0x7b8>
					abs_position = command.sub_para_double;
 80052d0:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 80052d4:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
					s			 = command.sub_para_double - myDUTY.joint.theta1_start;
 80052d8:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	; 0x1d8
 80052dc:	4b58      	ldr	r3, [pc, #352]	; (8005440 <scaraInitDuty+0x900>)
 80052de:	f603 1328 	addw	r3, r3, #2344	; 0x928
 80052e2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80052e6:	461a      	mov	r2, r3
 80052e8:	4623      	mov	r3, r4
 80052ea:	f7fa ffdd 	bl	80002a8 <__aeabi_dsub>
 80052ee:	4603      	mov	r3, r0
 80052f0:	460c      	mov	r4, r1
 80052f2:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
 80052f6:	e002      	b.n	80052fe <scaraInitDuty+0x7be>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 80052f8:	230c      	movs	r3, #12
 80052fa:	f000 bf05 	b.w	8006108 <scaraInitDuty+0x15c8>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J0, abs_position)) {
 80052fe:	ed97 0b60 	vldr	d0, [r7, #384]	; 0x180
 8005302:	2000      	movs	r0, #0
 8005304:	f003 fe60 	bl	8008fc8 <scaraCheckWorkSpace1>
 8005308:	4603      	mov	r3, r0
 800530a:	2b00      	cmp	r3, #0
 800530c:	f000 80f5 	beq.w	80054fa <scaraInitDuty+0x9ba>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8005310:	2307      	movs	r3, #7
 8005312:	f000 bef9 	b.w	8006108 <scaraInitDuty+0x15c8>
				}
				break;
			case 1:
				// Change Degree --> Radian
				command.sub_para_double = command.sub_para_double*PI/180.0;
 8005316:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	; 0x1d8
 800531a:	a347      	add	r3, pc, #284	; (adr r3, 8005438 <scaraInitDuty+0x8f8>)
 800531c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005320:	f7fb f97a 	bl	8000618 <__aeabi_dmul>
 8005324:	4603      	mov	r3, r0
 8005326:	460c      	mov	r4, r1
 8005328:	4618      	mov	r0, r3
 800532a:	4621      	mov	r1, r4
 800532c:	f04f 0200 	mov.w	r2, #0
 8005330:	4b46      	ldr	r3, [pc, #280]	; (800544c <scaraInitDuty+0x90c>)
 8005332:	f7fb fa9b 	bl	800086c <__aeabi_ddiv>
 8005336:	4603      	mov	r3, r0
 8005338:	460c      	mov	r4, r1
 800533a:	e9c7 3476 	strd	r3, r4, [r7, #472]	; 0x1d8
				// Coordinate
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 800533e:	f897 31c8 	ldrb.w	r3, [r7, #456]	; 0x1c8
 8005342:	2b01      	cmp	r3, #1
 8005344:	d113      	bne.n	800536e <scaraInitDuty+0x82e>
					abs_position = myDUTY.joint.theta2_start + command.sub_para_double;
 8005346:	4b3e      	ldr	r3, [pc, #248]	; (8005440 <scaraInitDuty+0x900>)
 8005348:	f503 6313 	add.w	r3, r3, #2352	; 0x930
 800534c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005350:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 8005354:	461a      	mov	r2, r3
 8005356:	4623      	mov	r3, r4
 8005358:	f7fa ffa8 	bl	80002ac <__adddf3>
 800535c:	4603      	mov	r3, r0
 800535e:	460c      	mov	r4, r1
 8005360:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
					s			 = command.sub_para_double;
 8005364:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 8005368:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
 800536c:	e01a      	b.n	80053a4 <scaraInitDuty+0x864>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 800536e:	f897 31c8 	ldrb.w	r3, [r7, #456]	; 0x1c8
 8005372:	2b00      	cmp	r3, #0
 8005374:	d113      	bne.n	800539e <scaraInitDuty+0x85e>
					abs_position = command.sub_para_double;
 8005376:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 800537a:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
					s			 = command.sub_para_double - myDUTY.joint.theta2_start;
 800537e:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	; 0x1d8
 8005382:	4b2f      	ldr	r3, [pc, #188]	; (8005440 <scaraInitDuty+0x900>)
 8005384:	f503 6313 	add.w	r3, r3, #2352	; 0x930
 8005388:	e9d3 3400 	ldrd	r3, r4, [r3]
 800538c:	461a      	mov	r2, r3
 800538e:	4623      	mov	r3, r4
 8005390:	f7fa ff8a 	bl	80002a8 <__aeabi_dsub>
 8005394:	4603      	mov	r3, r0
 8005396:	460c      	mov	r4, r1
 8005398:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
 800539c:	e002      	b.n	80053a4 <scaraInitDuty+0x864>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 800539e:	230c      	movs	r3, #12
 80053a0:	f000 beb2 	b.w	8006108 <scaraInitDuty+0x15c8>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J1, abs_position)) {
 80053a4:	ed97 0b60 	vldr	d0, [r7, #384]	; 0x180
 80053a8:	2001      	movs	r0, #1
 80053aa:	f003 fe0d 	bl	8008fc8 <scaraCheckWorkSpace1>
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	f000 80a4 	beq.w	80054fe <scaraInitDuty+0x9be>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 80053b6:	2307      	movs	r3, #7
 80053b8:	f000 bea6 	b.w	8006108 <scaraInitDuty+0x15c8>
				}
				break;
			case 2:
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 80053bc:	f897 31c8 	ldrb.w	r3, [r7, #456]	; 0x1c8
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d113      	bne.n	80053ec <scaraInitDuty+0x8ac>
					abs_position = myDUTY.joint.d3_start + command.sub_para_double;
 80053c4:	4b1e      	ldr	r3, [pc, #120]	; (8005440 <scaraInitDuty+0x900>)
 80053c6:	f603 1338 	addw	r3, r3, #2360	; 0x938
 80053ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80053ce:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 80053d2:	461a      	mov	r2, r3
 80053d4:	4623      	mov	r3, r4
 80053d6:	f7fa ff69 	bl	80002ac <__adddf3>
 80053da:	4603      	mov	r3, r0
 80053dc:	460c      	mov	r4, r1
 80053de:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
					s			 = command.sub_para_double;
 80053e2:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 80053e6:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
 80053ea:	e01a      	b.n	8005422 <scaraInitDuty+0x8e2>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 80053ec:	f897 31c8 	ldrb.w	r3, [r7, #456]	; 0x1c8
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d113      	bne.n	800541c <scaraInitDuty+0x8dc>
					abs_position = command.sub_para_double;
 80053f4:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 80053f8:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
					s			 = command.sub_para_double - myDUTY.joint.d3_start;
 80053fc:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	; 0x1d8
 8005400:	4b0f      	ldr	r3, [pc, #60]	; (8005440 <scaraInitDuty+0x900>)
 8005402:	f603 1338 	addw	r3, r3, #2360	; 0x938
 8005406:	e9d3 3400 	ldrd	r3, r4, [r3]
 800540a:	461a      	mov	r2, r3
 800540c:	4623      	mov	r3, r4
 800540e:	f7fa ff4b 	bl	80002a8 <__aeabi_dsub>
 8005412:	4603      	mov	r3, r0
 8005414:	460c      	mov	r4, r1
 8005416:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
 800541a:	e002      	b.n	8005422 <scaraInitDuty+0x8e2>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 800541c:	230c      	movs	r3, #12
 800541e:	f000 be73 	b.w	8006108 <scaraInitDuty+0x15c8>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J2, abs_position)) {
 8005422:	ed97 0b60 	vldr	d0, [r7, #384]	; 0x180
 8005426:	2002      	movs	r0, #2
 8005428:	f003 fdce 	bl	8008fc8 <scaraCheckWorkSpace1>
 800542c:	4603      	mov	r3, r0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d067      	beq.n	8005502 <scaraInitDuty+0x9c2>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8005432:	2307      	movs	r3, #7
 8005434:	f000 be68 	b.w	8006108 <scaraInitDuty+0x15c8>
 8005438:	60000000 	.word	0x60000000
 800543c:	400921fb 	.word	0x400921fb
 8005440:	200053c8 	.word	0x200053c8
 8005444:	20005560 	.word	0x20005560
 8005448:	20005e88 	.word	0x20005e88
 800544c:	40668000 	.word	0x40668000
				}
				break;
			case 3:
				// Change Degree --> Radian
				command.sub_para_double = command.sub_para_double*PI/180.0;
 8005450:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	; 0x1d8
 8005454:	a3cf      	add	r3, pc, #828	; (adr r3, 8005794 <scaraInitDuty+0xc54>)
 8005456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800545a:	f7fb f8dd 	bl	8000618 <__aeabi_dmul>
 800545e:	4603      	mov	r3, r0
 8005460:	460c      	mov	r4, r1
 8005462:	4618      	mov	r0, r3
 8005464:	4621      	mov	r1, r4
 8005466:	f04f 0200 	mov.w	r2, #0
 800546a:	4bc7      	ldr	r3, [pc, #796]	; (8005788 <scaraInitDuty+0xc48>)
 800546c:	f7fb f9fe 	bl	800086c <__aeabi_ddiv>
 8005470:	4603      	mov	r3, r0
 8005472:	460c      	mov	r4, r1
 8005474:	e9c7 3476 	strd	r3, r4, [r7, #472]	; 0x1d8
				// Coordinate
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8005478:	f897 31c8 	ldrb.w	r3, [r7, #456]	; 0x1c8
 800547c:	2b01      	cmp	r3, #1
 800547e:	d113      	bne.n	80054a8 <scaraInitDuty+0x968>
					abs_position = myDUTY.joint.theta4_start + command.sub_para_double;
 8005480:	4bc2      	ldr	r3, [pc, #776]	; (800578c <scaraInitDuty+0xc4c>)
 8005482:	f503 6314 	add.w	r3, r3, #2368	; 0x940
 8005486:	e9d3 0100 	ldrd	r0, r1, [r3]
 800548a:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 800548e:	461a      	mov	r2, r3
 8005490:	4623      	mov	r3, r4
 8005492:	f7fa ff0b 	bl	80002ac <__adddf3>
 8005496:	4603      	mov	r3, r0
 8005498:	460c      	mov	r4, r1
 800549a:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
					s			 = command.sub_para_double;
 800549e:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 80054a2:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
 80054a6:	e01a      	b.n	80054de <scaraInitDuty+0x99e>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 80054a8:	f897 31c8 	ldrb.w	r3, [r7, #456]	; 0x1c8
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d113      	bne.n	80054d8 <scaraInitDuty+0x998>
					abs_position = command.sub_para_double;
 80054b0:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 80054b4:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
					s			 = command.sub_para_double - myDUTY.joint.theta4_start;
 80054b8:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	; 0x1d8
 80054bc:	4bb3      	ldr	r3, [pc, #716]	; (800578c <scaraInitDuty+0xc4c>)
 80054be:	f503 6314 	add.w	r3, r3, #2368	; 0x940
 80054c2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80054c6:	461a      	mov	r2, r3
 80054c8:	4623      	mov	r3, r4
 80054ca:	f7fa feed 	bl	80002a8 <__aeabi_dsub>
 80054ce:	4603      	mov	r3, r0
 80054d0:	460c      	mov	r4, r1
 80054d2:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
 80054d6:	e002      	b.n	80054de <scaraInitDuty+0x99e>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 80054d8:	230c      	movs	r3, #12
 80054da:	f000 be15 	b.w	8006108 <scaraInitDuty+0x15c8>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J3, abs_position)) {
 80054de:	ed97 0b60 	vldr	d0, [r7, #384]	; 0x180
 80054e2:	2003      	movs	r0, #3
 80054e4:	f003 fd70 	bl	8008fc8 <scaraCheckWorkSpace1>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00b      	beq.n	8005506 <scaraInitDuty+0x9c6>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 80054ee:	2307      	movs	r3, #7
 80054f0:	f000 be0a 	b.w	8006108 <scaraInitDuty+0x15c8>
				}
				break;
			default:
				return SCARA_STATUS_ERROR_JOINT_NUM;
 80054f4:	230b      	movs	r3, #11
 80054f6:	f000 be07 	b.w	8006108 <scaraInitDuty+0x15c8>
				break;
 80054fa:	bf00      	nop
 80054fc:	e004      	b.n	8005508 <scaraInitDuty+0x9c8>
				break;
 80054fe:	bf00      	nop
 8005500:	e002      	b.n	8005508 <scaraInitDuty+0x9c8>
				break;
 8005502:	bf00      	nop
 8005504:	e000      	b.n	8005508 <scaraInitDuty+0x9c8>
				break;
 8005506:	bf00      	nop
			}

			// LSPB
			if ( DUTY_TRAJECTORY_LSPB == command.trajec_type) {
 8005508:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 800550c:	2b00      	cmp	r3, #0
 800550e:	f040 8128 	bne.w	8005762 <scaraInitDuty+0xc22>
				// Mode Init Time
				if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8005512:	f897 31cd 	ldrb.w	r3, [r7, #461]	; 0x1cd
 8005516:	2b01      	cmp	r3, #1
 8005518:	f040 8097 	bne.w	800564a <scaraInitDuty+0xb0a>
					for ( uint8_t i = 0; i < 4; i++) {
 800551c:	2300      	movs	r3, #0
 800551e:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 8005522:	e08c      	b.n	800563e <scaraInitDuty+0xafe>
						if ( i == command.sub_para_int) {
 8005524:	f897 217f 	ldrb.w	r2, [r7, #383]	; 0x17f
 8005528:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800552c:	429a      	cmp	r2, r3
 800552e:	d13d      	bne.n	80055ac <scaraInitDuty+0xa6c>
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8005530:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 8005534:	4a95      	ldr	r2, [pc, #596]	; (800578c <scaraInitDuty+0xc4c>)
 8005536:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800553a:	fb01 f303 	mul.w	r3, r1, r3
 800553e:	4413      	add	r3, r2
 8005540:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8005544:	2200      	movs	r2, #0
 8005546:	701a      	strb	r2, [r3, #0]
							myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 8005548:	f897 217f 	ldrb.w	r2, [r7, #383]	; 0x17f
 800554c:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 8005550:	498e      	ldr	r1, [pc, #568]	; (800578c <scaraInitDuty+0xc4c>)
 8005552:	f44f 70ac 	mov.w	r0, #344	; 0x158
 8005556:	fb00 f202 	mul.w	r2, r0, r2
 800555a:	440a      	add	r2, r1
 800555c:	f502 6284 	add.w	r2, r2, #1056	; 0x420
 8005560:	e9c2 3400 	strd	r3, r4, [r2]
							status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8005564:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 8005568:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800556c:	fb02 f303 	mul.w	r3, r2, r3
 8005570:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8005574:	4a85      	ldr	r2, [pc, #532]	; (800578c <scaraInitDuty+0xc4c>)
 8005576:	1898      	adds	r0, r3, r2
 8005578:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 800557c:	4a84      	ldr	r2, [pc, #528]	; (8005790 <scaraInitDuty+0xc50>)
 800557e:	5cd3      	ldrb	r3, [r2, r3]
 8005580:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8005584:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8005588:	eeb0 2a46 	vmov.f32	s4, s12
 800558c:	eef0 2a66 	vmov.f32	s5, s13
 8005590:	eeb0 1a47 	vmov.f32	s2, s14
 8005594:	eef0 1a67 	vmov.f32	s3, s15
 8005598:	2201      	movs	r2, #1
 800559a:	ed97 0b62 	vldr	d0, [r7, #392]	; 0x188
 800559e:	4619      	mov	r1, r3
 80055a0:	f001 f802 	bl	80065a8 <scaraInitLSPB>
 80055a4:	4603      	mov	r3, r0
 80055a6:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
 80055aa:	e03c      	b.n	8005626 <scaraInitDuty+0xae6>
											s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
						} else {
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 80055ac:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 80055b0:	4a76      	ldr	r2, [pc, #472]	; (800578c <scaraInitDuty+0xc4c>)
 80055b2:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80055b6:	fb01 f303 	mul.w	r3, r1, r3
 80055ba:	4413      	add	r3, r2
 80055bc:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 80055c0:	2200      	movs	r2, #0
 80055c2:	701a      	strb	r2, [r3, #0]
							myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 80055c4:	f897 217f 	ldrb.w	r2, [r7, #383]	; 0x17f
 80055c8:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 80055cc:	496f      	ldr	r1, [pc, #444]	; (800578c <scaraInitDuty+0xc4c>)
 80055ce:	f44f 70ac 	mov.w	r0, #344	; 0x158
 80055d2:	fb00 f202 	mul.w	r2, r0, r2
 80055d6:	440a      	add	r2, r1
 80055d8:	f502 6284 	add.w	r2, r2, #1056	; 0x420
 80055dc:	e9c2 3400 	strd	r3, r4, [r2]
							status2 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 80055e0:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 80055e4:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80055e8:	fb02 f303 	mul.w	r3, r2, r3
 80055ec:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 80055f0:	4a66      	ldr	r2, [pc, #408]	; (800578c <scaraInitDuty+0xc4c>)
 80055f2:	1898      	adds	r0, r3, r2
 80055f4:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 80055f8:	4a65      	ldr	r2, [pc, #404]	; (8005790 <scaraInitDuty+0xc50>)
 80055fa:	5cd3      	ldrb	r3, [r2, r3]
 80055fc:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8005600:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8005604:	eeb0 2a46 	vmov.f32	s4, s12
 8005608:	eef0 2a66 	vmov.f32	s5, s13
 800560c:	eeb0 1a47 	vmov.f32	s2, s14
 8005610:	eef0 1a67 	vmov.f32	s3, s15
 8005614:	2201      	movs	r2, #1
 8005616:	ed9f 0b5a 	vldr	d0, [pc, #360]	; 8005780 <scaraInitDuty+0xc40>
 800561a:	4619      	mov	r1, r3
 800561c:	f000 ffc4 	bl	80065a8 <scaraInitLSPB>
 8005620:	4603      	mov	r3, r0
 8005622:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
											0, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
						}
						myDUTY.time_total = command.time_total;
 8005626:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 800562a:	4a58      	ldr	r2, [pc, #352]	; (800578c <scaraInitDuty+0xc4c>)
 800562c:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8005630:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 8005634:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 8005638:	3301      	adds	r3, #1
 800563a:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 800563e:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 8005642:	2b03      	cmp	r3, #3
 8005644:	f67f af6e 	bls.w	8005524 <scaraInitDuty+0x9e4>
 8005648:	e1c8      	b.n	80059dc <scaraInitDuty+0xe9c>
					}
				// Mode Init Acc
				} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 800564a:	f897 31cd 	ldrb.w	r3, [r7, #461]	; 0x1cd
 800564e:	2b00      	cmp	r3, #0
 8005650:	f040 8084 	bne.w	800575c <scaraInitDuty+0xc1c>
					for ( uint8_t i = 0; i < 4; i++) {
 8005654:	2300      	movs	r3, #0
 8005656:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e
 800565a:	e07a      	b.n	8005752 <scaraInitDuty+0xc12>
						if ( i == command.sub_para_int) {
 800565c:	f897 217e 	ldrb.w	r2, [r7, #382]	; 0x17e
 8005660:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8005664:	429a      	cmp	r2, r3
 8005666:	d140      	bne.n	80056ea <scaraInitDuty+0xbaa>
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8005668:	f897 317e 	ldrb.w	r3, [r7, #382]	; 0x17e
 800566c:	4a47      	ldr	r2, [pc, #284]	; (800578c <scaraInitDuty+0xc4c>)
 800566e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005672:	fb01 f303 	mul.w	r3, r1, r3
 8005676:	4413      	add	r3, r2
 8005678:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 800567c:	2200      	movs	r2, #0
 800567e:	701a      	strb	r2, [r3, #0]
							status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8005680:	f897 317e 	ldrb.w	r3, [r7, #382]	; 0x17e
 8005684:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8005688:	fb02 f303 	mul.w	r3, r2, r3
 800568c:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8005690:	4a3e      	ldr	r2, [pc, #248]	; (800578c <scaraInitDuty+0xc4c>)
 8005692:	1898      	adds	r0, r3, r2
 8005694:	f897 317e 	ldrb.w	r3, [r7, #382]	; 0x17e
 8005698:	4a3d      	ldr	r2, [pc, #244]	; (8005790 <scaraInitDuty+0xc50>)
 800569a:	5cd3      	ldrb	r3, [r2, r3]
 800569c:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 80056a0:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 80056a4:	eeb0 2a46 	vmov.f32	s4, s12
 80056a8:	eef0 2a66 	vmov.f32	s5, s13
 80056ac:	eeb0 1a47 	vmov.f32	s2, s14
 80056b0:	eef0 1a67 	vmov.f32	s3, s15
 80056b4:	2200      	movs	r2, #0
 80056b6:	ed97 0b62 	vldr	d0, [r7, #392]	; 0x188
 80056ba:	4619      	mov	r1, r3
 80056bc:	f000 ff74 	bl	80065a8 <scaraInitLSPB>
 80056c0:	4603      	mov	r3, r0
 80056c2:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
											s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
							myDUTY.time_total = myDUTY.joint.trajectory[i].lspb.Tf;
 80056c6:	f897 317e 	ldrb.w	r3, [r7, #382]	; 0x17e
 80056ca:	4a30      	ldr	r2, [pc, #192]	; (800578c <scaraInitDuty+0xc4c>)
 80056cc:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80056d0:	fb01 f303 	mul.w	r3, r1, r3
 80056d4:	4413      	add	r3, r2
 80056d6:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 80056da:	e9d3 3400 	ldrd	r3, r4, [r3]
 80056de:	4a2b      	ldr	r2, [pc, #172]	; (800578c <scaraInitDuty+0xc4c>)
 80056e0:	f602 1248 	addw	r2, r2, #2376	; 0x948
 80056e4:	e9c2 3400 	strd	r3, r4, [r2]
 80056e8:	e02e      	b.n	8005748 <scaraInitDuty+0xc08>
						} else {
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 80056ea:	f897 317e 	ldrb.w	r3, [r7, #382]	; 0x17e
 80056ee:	4a27      	ldr	r2, [pc, #156]	; (800578c <scaraInitDuty+0xc4c>)
 80056f0:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80056f4:	fb01 f303 	mul.w	r3, r1, r3
 80056f8:	4413      	add	r3, r2
 80056fa:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 80056fe:	2200      	movs	r2, #0
 8005700:	701a      	strb	r2, [r3, #0]
							status2 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8005702:	f897 317e 	ldrb.w	r3, [r7, #382]	; 0x17e
 8005706:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800570a:	fb02 f303 	mul.w	r3, r2, r3
 800570e:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8005712:	4a1e      	ldr	r2, [pc, #120]	; (800578c <scaraInitDuty+0xc4c>)
 8005714:	1898      	adds	r0, r3, r2
 8005716:	f897 317e 	ldrb.w	r3, [r7, #382]	; 0x17e
 800571a:	4a1d      	ldr	r2, [pc, #116]	; (8005790 <scaraInitDuty+0xc50>)
 800571c:	5cd3      	ldrb	r3, [r2, r3]
 800571e:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8005722:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8005726:	eeb0 2a46 	vmov.f32	s4, s12
 800572a:	eef0 2a66 	vmov.f32	s5, s13
 800572e:	eeb0 1a47 	vmov.f32	s2, s14
 8005732:	eef0 1a67 	vmov.f32	s3, s15
 8005736:	2200      	movs	r2, #0
 8005738:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8005780 <scaraInitDuty+0xc40>
 800573c:	4619      	mov	r1, r3
 800573e:	f000 ff33 	bl	80065a8 <scaraInitLSPB>
 8005742:	4603      	mov	r3, r0
 8005744:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
					for ( uint8_t i = 0; i < 4; i++) {
 8005748:	f897 317e 	ldrb.w	r3, [r7, #382]	; 0x17e
 800574c:	3301      	adds	r3, #1
 800574e:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e
 8005752:	f897 317e 	ldrb.w	r3, [r7, #382]	; 0x17e
 8005756:	2b03      	cmp	r3, #3
 8005758:	d980      	bls.n	800565c <scaraInitDuty+0xb1c>
 800575a:	e13f      	b.n	80059dc <scaraInitDuty+0xe9c>
											0, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
						}
					}
				} else {
					return SCARA_STATUS_ERROR_MODE_INIT;
 800575c:	2308      	movs	r3, #8
 800575e:	f000 bcd3 	b.w	8006108 <scaraInitDuty+0x15c8>
				}
			// SCURVE
			} else if ( DUTY_TRAJECTORY_SCURVE == command.trajec_type) {
 8005762:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 8005766:	2b01      	cmp	r3, #1
 8005768:	f040 8136 	bne.w	80059d8 <scaraInitDuty+0xe98>
					// Mode Init Time
					if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 800576c:	f897 31cd 	ldrb.w	r3, [r7, #461]	; 0x1cd
 8005770:	2b01      	cmp	r3, #1
 8005772:	f040 80a6 	bne.w	80058c2 <scaraInitDuty+0xd82>
						for ( uint8_t i = 0; i < 4; i++) {
 8005776:	2300      	movs	r3, #0
 8005778:	f887 317d 	strb.w	r3, [r7, #381]	; 0x17d
 800577c:	e09b      	b.n	80058b6 <scaraInitDuty+0xd76>
 800577e:	bf00      	nop
	...
 8005788:	40668000 	.word	0x40668000
 800578c:	200053c8 	.word	0x200053c8
 8005790:	20000ca4 	.word	0x20000ca4
 8005794:	60000000 	.word	0x60000000
 8005798:	400921fb 	.word	0x400921fb
							if ( i == command.sub_para_int) {
 800579c:	f897 217d 	ldrb.w	r2, [r7, #381]	; 0x17d
 80057a0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d13d      	bne.n	8005824 <scaraInitDuty+0xce4>
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 80057a8:	f897 317d 	ldrb.w	r3, [r7, #381]	; 0x17d
 80057ac:	4ac0      	ldr	r2, [pc, #768]	; (8005ab0 <scaraInitDuty+0xf70>)
 80057ae:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80057b2:	fb01 f303 	mul.w	r3, r1, r3
 80057b6:	4413      	add	r3, r2
 80057b8:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 80057bc:	2201      	movs	r2, #1
 80057be:	701a      	strb	r2, [r3, #0]
								myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 80057c0:	f897 217d 	ldrb.w	r2, [r7, #381]	; 0x17d
 80057c4:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 80057c8:	49b9      	ldr	r1, [pc, #740]	; (8005ab0 <scaraInitDuty+0xf70>)
 80057ca:	f44f 70ac 	mov.w	r0, #344	; 0x158
 80057ce:	fb00 f202 	mul.w	r2, r0, r2
 80057d2:	440a      	add	r2, r1
 80057d4:	f502 6296 	add.w	r2, r2, #1200	; 0x4b0
 80057d8:	e9c2 3400 	strd	r3, r4, [r2]
								status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 80057dc:	f897 317d 	ldrb.w	r3, [r7, #381]	; 0x17d
 80057e0:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80057e4:	fb02 f303 	mul.w	r3, r2, r3
 80057e8:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 80057ec:	4ab0      	ldr	r2, [pc, #704]	; (8005ab0 <scaraInitDuty+0xf70>)
 80057ee:	1898      	adds	r0, r3, r2
 80057f0:	f897 317d 	ldrb.w	r3, [r7, #381]	; 0x17d
 80057f4:	4aaf      	ldr	r2, [pc, #700]	; (8005ab4 <scaraInitDuty+0xf74>)
 80057f6:	5cd3      	ldrb	r3, [r2, r3]
 80057f8:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 80057fc:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8005800:	eeb0 2a46 	vmov.f32	s4, s12
 8005804:	eef0 2a66 	vmov.f32	s5, s13
 8005808:	eeb0 1a47 	vmov.f32	s2, s14
 800580c:	eef0 1a67 	vmov.f32	s3, s15
 8005810:	2201      	movs	r2, #1
 8005812:	ed97 0b62 	vldr	d0, [r7, #392]	; 0x188
 8005816:	4619      	mov	r1, r3
 8005818:	f001 fabe 	bl	8006d98 <scaraInitScurve>
 800581c:	4603      	mov	r3, r0
 800581e:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
 8005822:	e03c      	b.n	800589e <scaraInitDuty+0xd5e>
											joint_taget[i],
											s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
							} else {
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8005824:	f897 317d 	ldrb.w	r3, [r7, #381]	; 0x17d
 8005828:	4aa1      	ldr	r2, [pc, #644]	; (8005ab0 <scaraInitDuty+0xf70>)
 800582a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800582e:	fb01 f303 	mul.w	r3, r1, r3
 8005832:	4413      	add	r3, r2
 8005834:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8005838:	2201      	movs	r2, #1
 800583a:	701a      	strb	r2, [r3, #0]
								myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 800583c:	f897 217d 	ldrb.w	r2, [r7, #381]	; 0x17d
 8005840:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 8005844:	499a      	ldr	r1, [pc, #616]	; (8005ab0 <scaraInitDuty+0xf70>)
 8005846:	f44f 70ac 	mov.w	r0, #344	; 0x158
 800584a:	fb00 f202 	mul.w	r2, r0, r2
 800584e:	440a      	add	r2, r1
 8005850:	f502 6296 	add.w	r2, r2, #1200	; 0x4b0
 8005854:	e9c2 3400 	strd	r3, r4, [r2]
								status2 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 8005858:	f897 317d 	ldrb.w	r3, [r7, #381]	; 0x17d
 800585c:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8005860:	fb02 f303 	mul.w	r3, r2, r3
 8005864:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8005868:	4a91      	ldr	r2, [pc, #580]	; (8005ab0 <scaraInitDuty+0xf70>)
 800586a:	1898      	adds	r0, r3, r2
 800586c:	f897 317d 	ldrb.w	r3, [r7, #381]	; 0x17d
 8005870:	4a90      	ldr	r2, [pc, #576]	; (8005ab4 <scaraInitDuty+0xf74>)
 8005872:	5cd3      	ldrb	r3, [r2, r3]
 8005874:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8005878:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 800587c:	eeb0 2a46 	vmov.f32	s4, s12
 8005880:	eef0 2a66 	vmov.f32	s5, s13
 8005884:	eeb0 1a47 	vmov.f32	s2, s14
 8005888:	eef0 1a67 	vmov.f32	s3, s15
 800588c:	2201      	movs	r2, #1
 800588e:	ed9f 0b84 	vldr	d0, [pc, #528]	; 8005aa0 <scaraInitDuty+0xf60>
 8005892:	4619      	mov	r1, r3
 8005894:	f001 fa80 	bl	8006d98 <scaraInitScurve>
 8005898:	4603      	mov	r3, r0
 800589a:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
											joint_taget[i],
											0, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
							}
							myDUTY.time_total = command.time_total;
 800589e:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 80058a2:	4a83      	ldr	r2, [pc, #524]	; (8005ab0 <scaraInitDuty+0xf70>)
 80058a4:	f602 1248 	addw	r2, r2, #2376	; 0x948
 80058a8:	e9c2 3400 	strd	r3, r4, [r2]
						for ( uint8_t i = 0; i < 4; i++) {
 80058ac:	f897 317d 	ldrb.w	r3, [r7, #381]	; 0x17d
 80058b0:	3301      	adds	r3, #1
 80058b2:	f887 317d 	strb.w	r3, [r7, #381]	; 0x17d
 80058b6:	f897 317d 	ldrb.w	r3, [r7, #381]	; 0x17d
 80058ba:	2b03      	cmp	r3, #3
 80058bc:	f67f af6e 	bls.w	800579c <scaraInitDuty+0xc5c>
 80058c0:	e08c      	b.n	80059dc <scaraInitDuty+0xe9c>
						}
					// Mode Init Acc
					} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 80058c2:	f897 31cd 	ldrb.w	r3, [r7, #461]	; 0x1cd
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	f040 8084 	bne.w	80059d4 <scaraInitDuty+0xe94>
						for ( uint8_t i = 0; i < 4; i++) {
 80058cc:	2300      	movs	r3, #0
 80058ce:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
 80058d2:	e07a      	b.n	80059ca <scaraInitDuty+0xe8a>
							if ( i == command.sub_para_int) {
 80058d4:	f897 217c 	ldrb.w	r2, [r7, #380]	; 0x17c
 80058d8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80058dc:	429a      	cmp	r2, r3
 80058de:	d140      	bne.n	8005962 <scaraInitDuty+0xe22>
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 80058e0:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 80058e4:	4a72      	ldr	r2, [pc, #456]	; (8005ab0 <scaraInitDuty+0xf70>)
 80058e6:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80058ea:	fb01 f303 	mul.w	r3, r1, r3
 80058ee:	4413      	add	r3, r2
 80058f0:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 80058f4:	2201      	movs	r2, #1
 80058f6:	701a      	strb	r2, [r3, #0]
								status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 80058f8:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 80058fc:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8005900:	fb02 f303 	mul.w	r3, r2, r3
 8005904:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8005908:	4a69      	ldr	r2, [pc, #420]	; (8005ab0 <scaraInitDuty+0xf70>)
 800590a:	1898      	adds	r0, r3, r2
 800590c:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 8005910:	4a68      	ldr	r2, [pc, #416]	; (8005ab4 <scaraInitDuty+0xf74>)
 8005912:	5cd3      	ldrb	r3, [r2, r3]
 8005914:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8005918:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 800591c:	eeb0 2a46 	vmov.f32	s4, s12
 8005920:	eef0 2a66 	vmov.f32	s5, s13
 8005924:	eeb0 1a47 	vmov.f32	s2, s14
 8005928:	eef0 1a67 	vmov.f32	s3, s15
 800592c:	2200      	movs	r2, #0
 800592e:	ed97 0b62 	vldr	d0, [r7, #392]	; 0x188
 8005932:	4619      	mov	r1, r3
 8005934:	f001 fa30 	bl	8006d98 <scaraInitScurve>
 8005938:	4603      	mov	r3, r0
 800593a:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
											joint_taget[i],
											s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
								myDUTY.time_total = myDUTY.joint.trajectory[i].scurve.Tf;
 800593e:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 8005942:	4a5b      	ldr	r2, [pc, #364]	; (8005ab0 <scaraInitDuty+0xf70>)
 8005944:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005948:	fb01 f303 	mul.w	r3, r1, r3
 800594c:	4413      	add	r3, r2
 800594e:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8005952:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005956:	4a56      	ldr	r2, [pc, #344]	; (8005ab0 <scaraInitDuty+0xf70>)
 8005958:	f602 1248 	addw	r2, r2, #2376	; 0x948
 800595c:	e9c2 3400 	strd	r3, r4, [r2]
 8005960:	e02e      	b.n	80059c0 <scaraInitDuty+0xe80>
							} else {
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8005962:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 8005966:	4a52      	ldr	r2, [pc, #328]	; (8005ab0 <scaraInitDuty+0xf70>)
 8005968:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800596c:	fb01 f303 	mul.w	r3, r1, r3
 8005970:	4413      	add	r3, r2
 8005972:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8005976:	2201      	movs	r2, #1
 8005978:	701a      	strb	r2, [r3, #0]
								status2 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 800597a:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 800597e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8005982:	fb02 f303 	mul.w	r3, r2, r3
 8005986:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 800598a:	4a49      	ldr	r2, [pc, #292]	; (8005ab0 <scaraInitDuty+0xf70>)
 800598c:	1898      	adds	r0, r3, r2
 800598e:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 8005992:	4a48      	ldr	r2, [pc, #288]	; (8005ab4 <scaraInitDuty+0xf74>)
 8005994:	5cd3      	ldrb	r3, [r2, r3]
 8005996:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 800599a:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 800599e:	eeb0 2a46 	vmov.f32	s4, s12
 80059a2:	eef0 2a66 	vmov.f32	s5, s13
 80059a6:	eeb0 1a47 	vmov.f32	s2, s14
 80059aa:	eef0 1a67 	vmov.f32	s3, s15
 80059ae:	2200      	movs	r2, #0
 80059b0:	ed9f 0b3b 	vldr	d0, [pc, #236]	; 8005aa0 <scaraInitDuty+0xf60>
 80059b4:	4619      	mov	r1, r3
 80059b6:	f001 f9ef 	bl	8006d98 <scaraInitScurve>
 80059ba:	4603      	mov	r3, r0
 80059bc:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
						for ( uint8_t i = 0; i < 4; i++) {
 80059c0:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 80059c4:	3301      	adds	r3, #1
 80059c6:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
 80059ca:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 80059ce:	2b03      	cmp	r3, #3
 80059d0:	d980      	bls.n	80058d4 <scaraInitDuty+0xd94>
 80059d2:	e003      	b.n	80059dc <scaraInitDuty+0xe9c>
											0, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
							}
						}

					} else {
						return SCARA_STATUS_ERROR_MODE_INIT;
 80059d4:	2308      	movs	r3, #8
 80059d6:	e397      	b.n	8006108 <scaraInitDuty+0x15c8>
					}

			} else {
				return SCARA_STATUS_ERROR_TRAJECTORY;
 80059d8:	2305      	movs	r3, #5
 80059da:	e395      	b.n	8006108 <scaraInitDuty+0x15c8>
			}
		// Check Init Status
			if ( SCARA_STATUS_OK != status1) {
 80059dc:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d002      	beq.n	80059ea <scaraInitDuty+0xeaa>
				return status1;
 80059e4:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 80059e8:	e38e      	b.n	8006108 <scaraInitDuty+0x15c8>
			}
			if ( SCARA_STATUS_OK != status2) {
 80059ea:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	f000 835c 	beq.w	80060ac <scaraInitDuty+0x156c>
				return status2;
 80059f4:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 80059f8:	e386      	b.n	8006108 <scaraInitDuty+0x15c8>
			}

		//----Joint Quadra
		} else if 	( DUTY_JOINT_4DOF == command.joint_type) {
 80059fa:	f897 31cb 	ldrb.w	r3, [r7, #459]	; 0x1cb
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	f040 8350 	bne.w	80060a4 <scaraInitDuty+0x1564>
			SCARA_PositionTypeDef	target_point;
			// Change Degree --> Radian
			command.target_point.roll = command.target_point.roll*PI/180.0;
 8005a04:	e9d7 0192 	ldrd	r0, r1, [r7, #584]	; 0x248
 8005a08:	a327      	add	r3, pc, #156	; (adr r3, 8005aa8 <scaraInitDuty+0xf68>)
 8005a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a0e:	f7fa fe03 	bl	8000618 <__aeabi_dmul>
 8005a12:	4603      	mov	r3, r0
 8005a14:	460c      	mov	r4, r1
 8005a16:	4618      	mov	r0, r3
 8005a18:	4621      	mov	r1, r4
 8005a1a:	f04f 0200 	mov.w	r2, #0
 8005a1e:	4b26      	ldr	r3, [pc, #152]	; (8005ab8 <scaraInitDuty+0xf78>)
 8005a20:	f7fa ff24 	bl	800086c <__aeabi_ddiv>
 8005a24:	4603      	mov	r3, r0
 8005a26:	460c      	mov	r4, r1
 8005a28:	e9c7 3492 	strd	r3, r4, [r7, #584]	; 0x248
			// Coordinate
			if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8005a2c:	f897 31c8 	ldrb.w	r3, [r7, #456]	; 0x1c8
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d145      	bne.n	8005ac0 <scaraInitDuty+0xf80>
				target_point.x 		= positionCurrent.x + command.target_point.x;
 8005a34:	4b21      	ldr	r3, [pc, #132]	; (8005abc <scaraInitDuty+0xf7c>)
 8005a36:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8005a3a:	e9d7 348c 	ldrd	r3, r4, [r7, #560]	; 0x230
 8005a3e:	461a      	mov	r2, r3
 8005a40:	4623      	mov	r3, r4
 8005a42:	f7fa fc33 	bl	80002ac <__adddf3>
 8005a46:	4603      	mov	r3, r0
 8005a48:	460c      	mov	r4, r1
 8005a4a:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
				target_point.y 		= positionCurrent.y + command.target_point.y;
 8005a4e:	4b1b      	ldr	r3, [pc, #108]	; (8005abc <scaraInitDuty+0xf7c>)
 8005a50:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8005a54:	e9d7 348e 	ldrd	r3, r4, [r7, #568]	; 0x238
 8005a58:	461a      	mov	r2, r3
 8005a5a:	4623      	mov	r3, r4
 8005a5c:	f7fa fc26 	bl	80002ac <__adddf3>
 8005a60:	4603      	mov	r3, r0
 8005a62:	460c      	mov	r4, r1
 8005a64:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
				target_point.z 		= positionCurrent.z + command.target_point.z;
 8005a68:	4b14      	ldr	r3, [pc, #80]	; (8005abc <scaraInitDuty+0xf7c>)
 8005a6a:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8005a6e:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 8005a72:	461a      	mov	r2, r3
 8005a74:	4623      	mov	r3, r4
 8005a76:	f7fa fc19 	bl	80002ac <__adddf3>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	460c      	mov	r4, r1
 8005a7e:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
				target_point.roll	= positionCurrent.roll + command.target_point.roll;
 8005a82:	4b0e      	ldr	r3, [pc, #56]	; (8005abc <scaraInitDuty+0xf7c>)
 8005a84:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8005a88:	e9d7 3492 	ldrd	r3, r4, [r7, #584]	; 0x248
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	4623      	mov	r3, r4
 8005a90:	f7fa fc0c 	bl	80002ac <__adddf3>
 8005a94:	4603      	mov	r3, r0
 8005a96:	460c      	mov	r4, r1
 8005a98:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 8005a9c:	e027      	b.n	8005aee <scaraInitDuty+0xfae>
 8005a9e:	bf00      	nop
	...
 8005aa8:	60000000 	.word	0x60000000
 8005aac:	400921fb 	.word	0x400921fb
 8005ab0:	200053c8 	.word	0x200053c8
 8005ab4:	20000ca4 	.word	0x20000ca4
 8005ab8:	40668000 	.word	0x40668000
 8005abc:	20005e88 	.word	0x20005e88
			} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8005ac0:	f897 31c8 	ldrb.w	r3, [r7, #456]	; 0x1c8
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d110      	bne.n	8005aea <scaraInitDuty+0xfaa>
				target_point.x 		= command.target_point.x;
 8005ac8:	e9d7 348c 	ldrd	r3, r4, [r7, #560]	; 0x230
 8005acc:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
				target_point.y 		= command.target_point.y;
 8005ad0:	e9d7 348e 	ldrd	r3, r4, [r7, #568]	; 0x238
 8005ad4:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
				target_point.z 		= command.target_point.z;
 8005ad8:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 8005adc:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
				target_point.roll	= command.target_point.roll;
 8005ae0:	e9d7 3492 	ldrd	r3, r4, [r7, #584]	; 0x248
 8005ae4:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 8005ae8:	e001      	b.n	8005aee <scaraInitDuty+0xfae>
			} else {
				return SCARA_STATUS_ERROR_COORDINATE;
 8005aea:	230c      	movs	r3, #12
 8005aec:	e30c      	b.n	8006108 <scaraInitDuty+0x15c8>
			}

			if( FALSE == kinematicInverse(&target_point, positionCurrent)) {
 8005aee:	4cce      	ldr	r4, [pc, #824]	; (8005e28 <scaraInitDuty+0x12e8>)
 8005af0:	f107 05b8 	add.w	r5, r7, #184	; 0xb8
 8005af4:	4668      	mov	r0, sp
 8005af6:	f104 0308 	add.w	r3, r4, #8
 8005afa:	22b0      	movs	r2, #176	; 0xb0
 8005afc:	4619      	mov	r1, r3
 8005afe:	f00f fa77 	bl	8014ff0 <memcpy>
 8005b02:	e894 000c 	ldmia.w	r4, {r2, r3}
 8005b06:	4628      	mov	r0, r5
 8005b08:	f7fd fd3e 	bl	8003588 <kinematicInverse>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d101      	bne.n	8005b16 <scaraInitDuty+0xfd6>
				return SCARA_STATUS_ERROR_OVER_WORKSPACE;// Exit with error
 8005b12:	2307      	movs	r3, #7
 8005b14:	e2f8      	b.n	8006108 <scaraInitDuty+0x15c8>
			}
			// Trajectory 4 profile
			double q[4];
			q[0] = target_point.Theta1 - positionCurrent.Theta1;
 8005b16:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8005b1a:	4bc3      	ldr	r3, [pc, #780]	; (8005e28 <scaraInitDuty+0x12e8>)
 8005b1c:	e9d3 341a 	ldrd	r3, r4, [r3, #104]	; 0x68
 8005b20:	461a      	mov	r2, r3
 8005b22:	4623      	mov	r3, r4
 8005b24:	f7fa fbc0 	bl	80002a8 <__aeabi_dsub>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	460c      	mov	r4, r1
 8005b2c:	463a      	mov	r2, r7
 8005b2e:	e9c2 3400 	strd	r3, r4, [r2]
			q[1] = target_point.Theta2 - positionCurrent.Theta2;
 8005b32:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8005b36:	4bbc      	ldr	r3, [pc, #752]	; (8005e28 <scaraInitDuty+0x12e8>)
 8005b38:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	4623      	mov	r3, r4
 8005b40:	f7fa fbb2 	bl	80002a8 <__aeabi_dsub>
 8005b44:	4603      	mov	r3, r0
 8005b46:	460c      	mov	r4, r1
 8005b48:	463a      	mov	r2, r7
 8005b4a:	e9c2 3402 	strd	r3, r4, [r2, #8]
			q[2] = target_point.D3 	   - positionCurrent.D3;
 8005b4e:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 8005b52:	4bb5      	ldr	r3, [pc, #724]	; (8005e28 <scaraInitDuty+0x12e8>)
 8005b54:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 8005b58:	461a      	mov	r2, r3
 8005b5a:	4623      	mov	r3, r4
 8005b5c:	f7fa fba4 	bl	80002a8 <__aeabi_dsub>
 8005b60:	4603      	mov	r3, r0
 8005b62:	460c      	mov	r4, r1
 8005b64:	463a      	mov	r2, r7
 8005b66:	e9c2 3404 	strd	r3, r4, [r2, #16]
			q[3] = target_point.Theta4 - positionCurrent.Theta4;
 8005b6a:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8005b6e:	4bae      	ldr	r3, [pc, #696]	; (8005e28 <scaraInitDuty+0x12e8>)
 8005b70:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 8005b74:	461a      	mov	r2, r3
 8005b76:	4623      	mov	r3, r4
 8005b78:	f7fa fb96 	bl	80002a8 <__aeabi_dsub>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	460c      	mov	r4, r1
 8005b80:	463a      	mov	r2, r7
 8005b82:	e9c2 3406 	strd	r3, r4, [r2, #24]

			// LSPB
			if ( DUTY_TRAJECTORY_LSPB == command.trajec_type) {
 8005b86:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	f040 813e 	bne.w	8005e0c <scaraInitDuty+0x12cc>
				// Mode Init Time
				if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8005b90:	f897 31cd 	ldrb.w	r3, [r7, #461]	; 0x1cd
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d159      	bne.n	8005c4c <scaraInitDuty+0x110c>
					for ( uint8_t i = 0; i < 4; i++) {
 8005b98:	2300      	movs	r3, #0
 8005b9a:	f887 317b 	strb.w	r3, [r7, #379]	; 0x17b
 8005b9e:	e049      	b.n	8005c34 <scaraInitDuty+0x10f4>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8005ba0:	f897 317b 	ldrb.w	r3, [r7, #379]	; 0x17b
 8005ba4:	4aa1      	ldr	r2, [pc, #644]	; (8005e2c <scaraInitDuty+0x12ec>)
 8005ba6:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005baa:	fb01 f303 	mul.w	r3, r1, r3
 8005bae:	4413      	add	r3, r2
 8005bb0:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 8005bb8:	f897 217b 	ldrb.w	r2, [r7, #379]	; 0x17b
 8005bbc:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 8005bc0:	499a      	ldr	r1, [pc, #616]	; (8005e2c <scaraInitDuty+0x12ec>)
 8005bc2:	f44f 70ac 	mov.w	r0, #344	; 0x158
 8005bc6:	fb00 f202 	mul.w	r2, r0, r2
 8005bca:	440a      	add	r2, r1
 8005bcc:	f502 6284 	add.w	r2, r2, #1056	; 0x420
 8005bd0:	e9c2 3400 	strd	r3, r4, [r2]
						status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8005bd4:	f897 317b 	ldrb.w	r3, [r7, #379]	; 0x17b
 8005bd8:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8005bdc:	fb02 f303 	mul.w	r3, r2, r3
 8005be0:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8005be4:	4a91      	ldr	r2, [pc, #580]	; (8005e2c <scaraInitDuty+0x12ec>)
 8005be6:	1898      	adds	r0, r3, r2
 8005be8:	f897 317b 	ldrb.w	r3, [r7, #379]	; 0x17b
 8005bec:	4a90      	ldr	r2, [pc, #576]	; (8005e30 <scaraInitDuty+0x12f0>)
 8005bee:	5cd1      	ldrb	r1, [r2, r3]
 8005bf0:	f897 317b 	ldrb.w	r3, [r7, #379]	; 0x17b
 8005bf4:	463a      	mov	r2, r7
 8005bf6:	00db      	lsls	r3, r3, #3
 8005bf8:	4413      	add	r3, r2
 8005bfa:	ed93 7b00 	vldr	d7, [r3]
 8005bfe:	ed97 6bd6 	vldr	d6, [r7, #856]	; 0x358
 8005c02:	ed97 5bd8 	vldr	d5, [r7, #864]	; 0x360
 8005c06:	eeb0 2a45 	vmov.f32	s4, s10
 8005c0a:	eef0 2a65 	vmov.f32	s5, s11
 8005c0e:	eeb0 1a46 	vmov.f32	s2, s12
 8005c12:	eef0 1a66 	vmov.f32	s3, s13
 8005c16:	2201      	movs	r2, #1
 8005c18:	eeb0 0a47 	vmov.f32	s0, s14
 8005c1c:	eef0 0a67 	vmov.f32	s1, s15
 8005c20:	f000 fcc2 	bl	80065a8 <scaraInitLSPB>
 8005c24:	4603      	mov	r3, r0
 8005c26:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
					for ( uint8_t i = 0; i < 4; i++) {
 8005c2a:	f897 317b 	ldrb.w	r3, [r7, #379]	; 0x17b
 8005c2e:	3301      	adds	r3, #1
 8005c30:	f887 317b 	strb.w	r3, [r7, #379]	; 0x17b
 8005c34:	f897 317b 	ldrb.w	r3, [r7, #379]	; 0x17b
 8005c38:	2b03      	cmp	r3, #3
 8005c3a:	d9b1      	bls.n	8005ba0 <scaraInitDuty+0x1060>
											q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);

					}
					myDUTY.time_total = command.time_total;
 8005c3c:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 8005c40:	4a7a      	ldr	r2, [pc, #488]	; (8005e2c <scaraInitDuty+0x12ec>)
 8005c42:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8005c46:	e9c2 3400 	strd	r3, r4, [r2]
 8005c4a:	e22f      	b.n	80060ac <scaraInitDuty+0x156c>
				// Mode Init Acc
				} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8005c4c:	f897 31cd 	ldrb.w	r3, [r7, #461]	; 0x1cd
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	f040 80d9 	bne.w	8005e08 <scaraInitDuty+0x12c8>
					for ( uint8_t i = 0; i < 4; i++) {
 8005c56:	2300      	movs	r3, #0
 8005c58:	f887 317a 	strb.w	r3, [r7, #378]	; 0x17a
 8005c5c:	e03b      	b.n	8005cd6 <scaraInitDuty+0x1196>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8005c5e:	f897 317a 	ldrb.w	r3, [r7, #378]	; 0x17a
 8005c62:	4a72      	ldr	r2, [pc, #456]	; (8005e2c <scaraInitDuty+0x12ec>)
 8005c64:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005c68:	fb01 f303 	mul.w	r3, r1, r3
 8005c6c:	4413      	add	r3, r2
 8005c6e:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8005c72:	2200      	movs	r2, #0
 8005c74:	701a      	strb	r2, [r3, #0]
						status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8005c76:	f897 317a 	ldrb.w	r3, [r7, #378]	; 0x17a
 8005c7a:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8005c7e:	fb02 f303 	mul.w	r3, r2, r3
 8005c82:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8005c86:	4a69      	ldr	r2, [pc, #420]	; (8005e2c <scaraInitDuty+0x12ec>)
 8005c88:	1898      	adds	r0, r3, r2
 8005c8a:	f897 317a 	ldrb.w	r3, [r7, #378]	; 0x17a
 8005c8e:	4a68      	ldr	r2, [pc, #416]	; (8005e30 <scaraInitDuty+0x12f0>)
 8005c90:	5cd1      	ldrb	r1, [r2, r3]
 8005c92:	f897 317a 	ldrb.w	r3, [r7, #378]	; 0x17a
 8005c96:	463a      	mov	r2, r7
 8005c98:	00db      	lsls	r3, r3, #3
 8005c9a:	4413      	add	r3, r2
 8005c9c:	ed93 7b00 	vldr	d7, [r3]
 8005ca0:	ed97 6bd6 	vldr	d6, [r7, #856]	; 0x358
 8005ca4:	ed97 5bd8 	vldr	d5, [r7, #864]	; 0x360
 8005ca8:	eeb0 2a45 	vmov.f32	s4, s10
 8005cac:	eef0 2a65 	vmov.f32	s5, s11
 8005cb0:	eeb0 1a46 	vmov.f32	s2, s12
 8005cb4:	eef0 1a66 	vmov.f32	s3, s13
 8005cb8:	2200      	movs	r2, #0
 8005cba:	eeb0 0a47 	vmov.f32	s0, s14
 8005cbe:	eef0 0a67 	vmov.f32	s1, s15
 8005cc2:	f000 fc71 	bl	80065a8 <scaraInitLSPB>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
					for ( uint8_t i = 0; i < 4; i++) {
 8005ccc:	f897 317a 	ldrb.w	r3, [r7, #378]	; 0x17a
 8005cd0:	3301      	adds	r3, #1
 8005cd2:	f887 317a 	strb.w	r3, [r7, #378]	; 0x17a
 8005cd6:	f897 317a 	ldrb.w	r3, [r7, #378]	; 0x17a
 8005cda:	2b03      	cmp	r3, #3
 8005cdc:	d9bf      	bls.n	8005c5e <scaraInitDuty+0x111e>
											q[i], DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
					}
					myDUTY.time_total = 0;
 8005cde:	4b53      	ldr	r3, [pc, #332]	; (8005e2c <scaraInitDuty+0x12ec>)
 8005ce0:	f603 1248 	addw	r2, r3, #2376	; 0x948
 8005ce4:	f04f 0300 	mov.w	r3, #0
 8005ce8:	f04f 0400 	mov.w	r4, #0
 8005cec:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	f887 3179 	strb.w	r3, [r7, #377]	; 0x179
 8005cf6:	e02d      	b.n	8005d54 <scaraInitDuty+0x1214>
						if ( myDUTY.joint.trajectory[i].lspb.Tf > myDUTY.time_total) {
 8005cf8:	f897 3179 	ldrb.w	r3, [r7, #377]	; 0x179
 8005cfc:	4a4b      	ldr	r2, [pc, #300]	; (8005e2c <scaraInitDuty+0x12ec>)
 8005cfe:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005d02:	fb01 f303 	mul.w	r3, r1, r3
 8005d06:	4413      	add	r3, r2
 8005d08:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8005d0c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005d10:	4b46      	ldr	r3, [pc, #280]	; (8005e2c <scaraInitDuty+0x12ec>)
 8005d12:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8005d16:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	4623      	mov	r3, r4
 8005d1e:	f7fa ff0b 	bl	8000b38 <__aeabi_dcmpgt>
 8005d22:	4603      	mov	r3, r0
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d010      	beq.n	8005d4a <scaraInitDuty+0x120a>
							myDUTY.time_total = myDUTY.joint.trajectory[i].lspb.Tf;
 8005d28:	f897 3179 	ldrb.w	r3, [r7, #377]	; 0x179
 8005d2c:	4a3f      	ldr	r2, [pc, #252]	; (8005e2c <scaraInitDuty+0x12ec>)
 8005d2e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005d32:	fb01 f303 	mul.w	r3, r1, r3
 8005d36:	4413      	add	r3, r2
 8005d38:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8005d3c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005d40:	4a3a      	ldr	r2, [pc, #232]	; (8005e2c <scaraInitDuty+0x12ec>)
 8005d42:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8005d46:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 8005d4a:	f897 3179 	ldrb.w	r3, [r7, #377]	; 0x179
 8005d4e:	3301      	adds	r3, #1
 8005d50:	f887 3179 	strb.w	r3, [r7, #377]	; 0x179
 8005d54:	f897 3179 	ldrb.w	r3, [r7, #377]	; 0x179
 8005d58:	2b03      	cmp	r3, #3
 8005d5a:	d9cd      	bls.n	8005cf8 <scaraInitDuty+0x11b8>
						}
					}
					for ( uint8_t i = 0; i < 4; i++) {
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	f887 3178 	strb.w	r3, [r7, #376]	; 0x178
 8005d62:	e04c      	b.n	8005dfe <scaraInitDuty+0x12be>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8005d64:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 8005d68:	4a30      	ldr	r2, [pc, #192]	; (8005e2c <scaraInitDuty+0x12ec>)
 8005d6a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005d6e:	fb01 f303 	mul.w	r3, r1, r3
 8005d72:	4413      	add	r3, r2
 8005d74:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8005d78:	2200      	movs	r2, #0
 8005d7a:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].lspb.Tf = myDUTY.time_total;
 8005d7c:	f897 2178 	ldrb.w	r2, [r7, #376]	; 0x178
 8005d80:	4b2a      	ldr	r3, [pc, #168]	; (8005e2c <scaraInitDuty+0x12ec>)
 8005d82:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8005d86:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005d8a:	4928      	ldr	r1, [pc, #160]	; (8005e2c <scaraInitDuty+0x12ec>)
 8005d8c:	f44f 70ac 	mov.w	r0, #344	; 0x158
 8005d90:	fb00 f202 	mul.w	r2, r0, r2
 8005d94:	440a      	add	r2, r1
 8005d96:	f502 6284 	add.w	r2, r2, #1056	; 0x420
 8005d9a:	e9c2 3400 	strd	r3, r4, [r2]
						status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8005d9e:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 8005da2:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8005da6:	fb02 f303 	mul.w	r3, r2, r3
 8005daa:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8005dae:	4a1f      	ldr	r2, [pc, #124]	; (8005e2c <scaraInitDuty+0x12ec>)
 8005db0:	1898      	adds	r0, r3, r2
 8005db2:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 8005db6:	4a1e      	ldr	r2, [pc, #120]	; (8005e30 <scaraInitDuty+0x12f0>)
 8005db8:	5cd1      	ldrb	r1, [r2, r3]
 8005dba:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 8005dbe:	463a      	mov	r2, r7
 8005dc0:	00db      	lsls	r3, r3, #3
 8005dc2:	4413      	add	r3, r2
 8005dc4:	ed93 7b00 	vldr	d7, [r3]
 8005dc8:	ed97 6bd6 	vldr	d6, [r7, #856]	; 0x358
 8005dcc:	ed97 5bd8 	vldr	d5, [r7, #864]	; 0x360
 8005dd0:	eeb0 2a45 	vmov.f32	s4, s10
 8005dd4:	eef0 2a65 	vmov.f32	s5, s11
 8005dd8:	eeb0 1a46 	vmov.f32	s2, s12
 8005ddc:	eef0 1a66 	vmov.f32	s3, s13
 8005de0:	2201      	movs	r2, #1
 8005de2:	eeb0 0a47 	vmov.f32	s0, s14
 8005de6:	eef0 0a67 	vmov.f32	s1, s15
 8005dea:	f000 fbdd 	bl	80065a8 <scaraInitLSPB>
 8005dee:	4603      	mov	r3, r0
 8005df0:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
					for ( uint8_t i = 0; i < 4; i++) {
 8005df4:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 8005df8:	3301      	adds	r3, #1
 8005dfa:	f887 3178 	strb.w	r3, [r7, #376]	; 0x178
 8005dfe:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 8005e02:	2b03      	cmp	r3, #3
 8005e04:	d9ae      	bls.n	8005d64 <scaraInitDuty+0x1224>
 8005e06:	e151      	b.n	80060ac <scaraInitDuty+0x156c>
											q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					}

				} else {
					return SCARA_STATUS_ERROR_MODE_INIT;
 8005e08:	2308      	movs	r3, #8
 8005e0a:	e17d      	b.n	8006108 <scaraInitDuty+0x15c8>
				}
				// SCURVE
			} else if ( DUTY_TRAJECTORY_SCURVE == command.trajec_type) {
 8005e0c:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	f040 8145 	bne.w	80060a0 <scaraInitDuty+0x1560>
				// Mode Init Time
				if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8005e16:	f897 31cd 	ldrb.w	r3, [r7, #461]	; 0x1cd
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d160      	bne.n	8005ee0 <scaraInitDuty+0x13a0>
					for ( uint8_t i = 0; i < 4; i++) {
 8005e1e:	2300      	movs	r3, #0
 8005e20:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
 8005e24:	e050      	b.n	8005ec8 <scaraInitDuty+0x1388>
 8005e26:	bf00      	nop
 8005e28:	20005e88 	.word	0x20005e88
 8005e2c:	200053c8 	.word	0x200053c8
 8005e30:	20000ca4 	.word	0x20000ca4
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8005e34:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8005e38:	4ab7      	ldr	r2, [pc, #732]	; (8006118 <scaraInitDuty+0x15d8>)
 8005e3a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005e3e:	fb01 f303 	mul.w	r3, r1, r3
 8005e42:	4413      	add	r3, r2
 8005e44:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8005e48:	2201      	movs	r2, #1
 8005e4a:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 8005e4c:	f897 2177 	ldrb.w	r2, [r7, #375]	; 0x177
 8005e50:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 8005e54:	49b0      	ldr	r1, [pc, #704]	; (8006118 <scaraInitDuty+0x15d8>)
 8005e56:	f44f 70ac 	mov.w	r0, #344	; 0x158
 8005e5a:	fb00 f202 	mul.w	r2, r0, r2
 8005e5e:	440a      	add	r2, r1
 8005e60:	f502 6296 	add.w	r2, r2, #1200	; 0x4b0
 8005e64:	e9c2 3400 	strd	r3, r4, [r2]
						status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 8005e68:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8005e6c:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8005e70:	fb02 f303 	mul.w	r3, r2, r3
 8005e74:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8005e78:	4aa7      	ldr	r2, [pc, #668]	; (8006118 <scaraInitDuty+0x15d8>)
 8005e7a:	1898      	adds	r0, r3, r2
 8005e7c:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8005e80:	4aa6      	ldr	r2, [pc, #664]	; (800611c <scaraInitDuty+0x15dc>)
 8005e82:	5cd1      	ldrb	r1, [r2, r3]
 8005e84:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8005e88:	463a      	mov	r2, r7
 8005e8a:	00db      	lsls	r3, r3, #3
 8005e8c:	4413      	add	r3, r2
 8005e8e:	ed93 7b00 	vldr	d7, [r3]
 8005e92:	ed97 6bd6 	vldr	d6, [r7, #856]	; 0x358
 8005e96:	ed97 5bd8 	vldr	d5, [r7, #864]	; 0x360
 8005e9a:	eeb0 2a45 	vmov.f32	s4, s10
 8005e9e:	eef0 2a65 	vmov.f32	s5, s11
 8005ea2:	eeb0 1a46 	vmov.f32	s2, s12
 8005ea6:	eef0 1a66 	vmov.f32	s3, s13
 8005eaa:	2201      	movs	r2, #1
 8005eac:	eeb0 0a47 	vmov.f32	s0, s14
 8005eb0:	eef0 0a67 	vmov.f32	s1, s15
 8005eb4:	f000 ff70 	bl	8006d98 <scaraInitScurve>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
					for ( uint8_t i = 0; i < 4; i++) {
 8005ebe:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
 8005ec8:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8005ecc:	2b03      	cmp	r3, #3
 8005ece:	d9b1      	bls.n	8005e34 <scaraInitDuty+0x12f4>
											q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);

					}
					myDUTY.time_total = command.time_total;
 8005ed0:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 8005ed4:	4a90      	ldr	r2, [pc, #576]	; (8006118 <scaraInitDuty+0x15d8>)
 8005ed6:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8005eda:	e9c2 3400 	strd	r3, r4, [r2]
 8005ede:	e0e5      	b.n	80060ac <scaraInitDuty+0x156c>
				// Mode Init Acc
				} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8005ee0:	f897 31cd 	ldrb.w	r3, [r7, #461]	; 0x1cd
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	f040 80d9 	bne.w	800609c <scaraInitDuty+0x155c>
					for ( uint8_t i = 0; i < 4; i++) {
 8005eea:	2300      	movs	r3, #0
 8005eec:	f887 3176 	strb.w	r3, [r7, #374]	; 0x176
 8005ef0:	e03b      	b.n	8005f6a <scaraInitDuty+0x142a>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8005ef2:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 8005ef6:	4a88      	ldr	r2, [pc, #544]	; (8006118 <scaraInitDuty+0x15d8>)
 8005ef8:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005efc:	fb01 f303 	mul.w	r3, r1, r3
 8005f00:	4413      	add	r3, r2
 8005f02:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8005f06:	2201      	movs	r2, #1
 8005f08:	701a      	strb	r2, [r3, #0]
						status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 8005f0a:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 8005f0e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8005f12:	fb02 f303 	mul.w	r3, r2, r3
 8005f16:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8005f1a:	4a7f      	ldr	r2, [pc, #508]	; (8006118 <scaraInitDuty+0x15d8>)
 8005f1c:	1898      	adds	r0, r3, r2
 8005f1e:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 8005f22:	4a7e      	ldr	r2, [pc, #504]	; (800611c <scaraInitDuty+0x15dc>)
 8005f24:	5cd1      	ldrb	r1, [r2, r3]
 8005f26:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 8005f2a:	463a      	mov	r2, r7
 8005f2c:	00db      	lsls	r3, r3, #3
 8005f2e:	4413      	add	r3, r2
 8005f30:	ed93 7b00 	vldr	d7, [r3]
 8005f34:	ed97 6bd6 	vldr	d6, [r7, #856]	; 0x358
 8005f38:	ed97 5bd8 	vldr	d5, [r7, #864]	; 0x360
 8005f3c:	eeb0 2a45 	vmov.f32	s4, s10
 8005f40:	eef0 2a65 	vmov.f32	s5, s11
 8005f44:	eeb0 1a46 	vmov.f32	s2, s12
 8005f48:	eef0 1a66 	vmov.f32	s3, s13
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	eeb0 0a47 	vmov.f32	s0, s14
 8005f52:	eef0 0a67 	vmov.f32	s1, s15
 8005f56:	f000 ff1f 	bl	8006d98 <scaraInitScurve>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
					for ( uint8_t i = 0; i < 4; i++) {
 8005f60:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 8005f64:	3301      	adds	r3, #1
 8005f66:	f887 3176 	strb.w	r3, [r7, #374]	; 0x176
 8005f6a:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 8005f6e:	2b03      	cmp	r3, #3
 8005f70:	d9bf      	bls.n	8005ef2 <scaraInitDuty+0x13b2>
											q[i], DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
					}
					myDUTY.time_total = 0;
 8005f72:	4b69      	ldr	r3, [pc, #420]	; (8006118 <scaraInitDuty+0x15d8>)
 8005f74:	f603 1248 	addw	r2, r3, #2376	; 0x948
 8005f78:	f04f 0300 	mov.w	r3, #0
 8005f7c:	f04f 0400 	mov.w	r4, #0
 8005f80:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 8005f84:	2300      	movs	r3, #0
 8005f86:	f887 3175 	strb.w	r3, [r7, #373]	; 0x175
 8005f8a:	e02d      	b.n	8005fe8 <scaraInitDuty+0x14a8>
						if ( myDUTY.joint.trajectory[i].scurve.Tf > myDUTY.time_total) {
 8005f8c:	f897 3175 	ldrb.w	r3, [r7, #373]	; 0x175
 8005f90:	4a61      	ldr	r2, [pc, #388]	; (8006118 <scaraInitDuty+0x15d8>)
 8005f92:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005f96:	fb01 f303 	mul.w	r3, r1, r3
 8005f9a:	4413      	add	r3, r2
 8005f9c:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8005fa0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005fa4:	4b5c      	ldr	r3, [pc, #368]	; (8006118 <scaraInitDuty+0x15d8>)
 8005fa6:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8005faa:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005fae:	461a      	mov	r2, r3
 8005fb0:	4623      	mov	r3, r4
 8005fb2:	f7fa fdc1 	bl	8000b38 <__aeabi_dcmpgt>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d010      	beq.n	8005fde <scaraInitDuty+0x149e>
							myDUTY.time_total = myDUTY.joint.trajectory[i].scurve.Tf;
 8005fbc:	f897 3175 	ldrb.w	r3, [r7, #373]	; 0x175
 8005fc0:	4a55      	ldr	r2, [pc, #340]	; (8006118 <scaraInitDuty+0x15d8>)
 8005fc2:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005fc6:	fb01 f303 	mul.w	r3, r1, r3
 8005fca:	4413      	add	r3, r2
 8005fcc:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8005fd0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005fd4:	4a50      	ldr	r2, [pc, #320]	; (8006118 <scaraInitDuty+0x15d8>)
 8005fd6:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8005fda:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 8005fde:	f897 3175 	ldrb.w	r3, [r7, #373]	; 0x175
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	f887 3175 	strb.w	r3, [r7, #373]	; 0x175
 8005fe8:	f897 3175 	ldrb.w	r3, [r7, #373]	; 0x175
 8005fec:	2b03      	cmp	r3, #3
 8005fee:	d9cd      	bls.n	8005f8c <scaraInitDuty+0x144c>
						}
					}
					for ( uint8_t i = 0; i < 4; i++) {
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	f887 3174 	strb.w	r3, [r7, #372]	; 0x174
 8005ff6:	e04c      	b.n	8006092 <scaraInitDuty+0x1552>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8005ff8:	f897 3174 	ldrb.w	r3, [r7, #372]	; 0x174
 8005ffc:	4a46      	ldr	r2, [pc, #280]	; (8006118 <scaraInitDuty+0x15d8>)
 8005ffe:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8006002:	fb01 f303 	mul.w	r3, r1, r3
 8006006:	4413      	add	r3, r2
 8006008:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 800600c:	2201      	movs	r2, #1
 800600e:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].scurve.Tf = myDUTY.time_total;
 8006010:	f897 2174 	ldrb.w	r2, [r7, #372]	; 0x174
 8006014:	4b40      	ldr	r3, [pc, #256]	; (8006118 <scaraInitDuty+0x15d8>)
 8006016:	f603 1348 	addw	r3, r3, #2376	; 0x948
 800601a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800601e:	493e      	ldr	r1, [pc, #248]	; (8006118 <scaraInitDuty+0x15d8>)
 8006020:	f44f 70ac 	mov.w	r0, #344	; 0x158
 8006024:	fb00 f202 	mul.w	r2, r0, r2
 8006028:	440a      	add	r2, r1
 800602a:	f502 6296 	add.w	r2, r2, #1200	; 0x4b0
 800602e:	e9c2 3400 	strd	r3, r4, [r2]
						status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 8006032:	f897 3174 	ldrb.w	r3, [r7, #372]	; 0x174
 8006036:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800603a:	fb02 f303 	mul.w	r3, r2, r3
 800603e:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8006042:	4a35      	ldr	r2, [pc, #212]	; (8006118 <scaraInitDuty+0x15d8>)
 8006044:	1898      	adds	r0, r3, r2
 8006046:	f897 3174 	ldrb.w	r3, [r7, #372]	; 0x174
 800604a:	4a34      	ldr	r2, [pc, #208]	; (800611c <scaraInitDuty+0x15dc>)
 800604c:	5cd1      	ldrb	r1, [r2, r3]
 800604e:	f897 3174 	ldrb.w	r3, [r7, #372]	; 0x174
 8006052:	463a      	mov	r2, r7
 8006054:	00db      	lsls	r3, r3, #3
 8006056:	4413      	add	r3, r2
 8006058:	ed93 7b00 	vldr	d7, [r3]
 800605c:	ed97 6bd6 	vldr	d6, [r7, #856]	; 0x358
 8006060:	ed97 5bd8 	vldr	d5, [r7, #864]	; 0x360
 8006064:	eeb0 2a45 	vmov.f32	s4, s10
 8006068:	eef0 2a65 	vmov.f32	s5, s11
 800606c:	eeb0 1a46 	vmov.f32	s2, s12
 8006070:	eef0 1a66 	vmov.f32	s3, s13
 8006074:	2201      	movs	r2, #1
 8006076:	eeb0 0a47 	vmov.f32	s0, s14
 800607a:	eef0 0a67 	vmov.f32	s1, s15
 800607e:	f000 fe8b 	bl	8006d98 <scaraInitScurve>
 8006082:	4603      	mov	r3, r0
 8006084:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
					for ( uint8_t i = 0; i < 4; i++) {
 8006088:	f897 3174 	ldrb.w	r3, [r7, #372]	; 0x174
 800608c:	3301      	adds	r3, #1
 800608e:	f887 3174 	strb.w	r3, [r7, #372]	; 0x174
 8006092:	f897 3174 	ldrb.w	r3, [r7, #372]	; 0x174
 8006096:	2b03      	cmp	r3, #3
 8006098:	d9ae      	bls.n	8005ff8 <scaraInitDuty+0x14b8>
 800609a:	e007      	b.n	80060ac <scaraInitDuty+0x156c>
											q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					}

				} else {
					return SCARA_STATUS_ERROR_MODE_INIT;
 800609c:	2308      	movs	r3, #8
 800609e:	e033      	b.n	8006108 <scaraInitDuty+0x15c8>
				}

			} else {
				return SCARA_STATUS_ERROR_TRAJECTORY;
 80060a0:	2305      	movs	r3, #5
 80060a2:	e031      	b.n	8006108 <scaraInitDuty+0x15c8>
			}

		} else {
			return SCARA_STATUS_ERROR_JOINT;
 80060a4:	2304      	movs	r3, #4
 80060a6:	e02f      	b.n	8006108 <scaraInitDuty+0x15c8>
		}

	} else {
		return SCARA_STATUS_ERROR_SPACE;
 80060a8:	2302      	movs	r3, #2
 80060aa:	e02d      	b.n	8006108 <scaraInitDuty+0x15c8>
	}

	// Reset time and distance
	positionCurrent.t = 0;
 80060ac:	4a1c      	ldr	r2, [pc, #112]	; (8006120 <scaraInitDuty+0x15e0>)
 80060ae:	f04f 0300 	mov.w	r3, #0
 80060b2:	f04f 0400 	mov.w	r4, #0
 80060b6:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	positionCurrent.total_time = myDUTY.time_total;
 80060ba:	4b17      	ldr	r3, [pc, #92]	; (8006118 <scaraInitDuty+0x15d8>)
 80060bc:	f603 1348 	addw	r3, r3, #2376	; 0x948
 80060c0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80060c4:	4a16      	ldr	r2, [pc, #88]	; (8006120 <scaraInitDuty+0x15e0>)
 80060c6:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	positionNext.t = 0;
 80060ca:	4a16      	ldr	r2, [pc, #88]	; (8006124 <scaraInitDuty+0x15e4>)
 80060cc:	f04f 0300 	mov.w	r3, #0
 80060d0:	f04f 0400 	mov.w	r4, #0
 80060d4:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	positionNext.total_time = myDUTY.time_total;
 80060d8:	4b0f      	ldr	r3, [pc, #60]	; (8006118 <scaraInitDuty+0x15d8>)
 80060da:	f603 1348 	addw	r3, r3, #2376	; 0x948
 80060de:	e9d3 3400 	ldrd	r3, r4, [r3]
 80060e2:	4a10      	ldr	r2, [pc, #64]	; (8006124 <scaraInitDuty+0x15e4>)
 80060e4:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	positionTrue.t = 0;
 80060e8:	4a0f      	ldr	r2, [pc, #60]	; (8006128 <scaraInitDuty+0x15e8>)
 80060ea:	f04f 0300 	mov.w	r3, #0
 80060ee:	f04f 0400 	mov.w	r4, #0
 80060f2:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	positionTrue.total_time = myDUTY.time_total;
 80060f6:	4b08      	ldr	r3, [pc, #32]	; (8006118 <scaraInitDuty+0x15d8>)
 80060f8:	f603 1348 	addw	r3, r3, #2376	; 0x948
 80060fc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006100:	4a09      	ldr	r2, [pc, #36]	; (8006128 <scaraInitDuty+0x15e8>)
 8006102:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

	return SCARA_STATUS_OK;
 8006106:	2300      	movs	r3, #0
}
 8006108:	4618      	mov	r0, r3
 800610a:	f507 77d8 	add.w	r7, r7, #432	; 0x1b0
 800610e:	46bd      	mov	sp, r7
 8006110:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8006114:	b004      	add	sp, #16
 8006116:	4770      	bx	lr
 8006118:	200053c8 	.word	0x200053c8
 800611c:	20000ca4 	.word	0x20000ca4
 8006120:	20005e88 	.word	0x20005e88
 8006124:	20005ff8 	.word	0x20005ff8
 8006128:	20005f40 	.word	0x20005f40

0800612c <scaraInitLine>:

/* Compute straight line path parameters */
SCARA_StatusTypeDef	scaraInitLine		(Path_Line_TypeDef *line,
										SCARA_PositionTypeDef start,
										SCARA_PositionTypeDef end) {
 800612c:	b082      	sub	sp, #8
 800612e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006130:	b0af      	sub	sp, #188	; 0xbc
 8006132:	af2c      	add	r7, sp, #176	; 0xb0
 8006134:	6078      	str	r0, [r7, #4]
 8006136:	f107 0120 	add.w	r1, r7, #32
 800613a:	e881 000c 	stmia.w	r1, {r2, r3}
	// Check limit workspace
	if ( FALSE ==  kinematicInverse(&end, start)) {
 800613e:	f107 04d8 	add.w	r4, r7, #216	; 0xd8
 8006142:	4668      	mov	r0, sp
 8006144:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006148:	22b0      	movs	r2, #176	; 0xb0
 800614a:	4619      	mov	r1, r3
 800614c:	f00e ff50 	bl	8014ff0 <memcpy>
 8006150:	f107 0320 	add.w	r3, r7, #32
 8006154:	cb0c      	ldmia	r3, {r2, r3}
 8006156:	4620      	mov	r0, r4
 8006158:	f7fd fa16 	bl	8003588 <kinematicInverse>
 800615c:	4603      	mov	r3, r0
 800615e:	2b00      	cmp	r3, #0
 8006160:	d101      	bne.n	8006166 <scaraInitLine+0x3a>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8006162:	2307      	movs	r3, #7
 8006164:	e09e      	b.n	80062a4 <scaraInitLine+0x178>
	}
	// Init line params
	line->x1 = end.x;
 8006166:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	e9c2 3402 	strd	r3, r4, [r2, #8]
	line->y1 = end.y;
 8006170:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	e9c2 3406 	strd	r3, r4, [r2, #24]
	line->z1 = end.z;
 800617a:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	line->x0 = start.x;
 8006184:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	e9c2 3400 	strd	r3, r4, [r2]
	line->y0 = start.y;
 800618e:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	e9c2 3404 	strd	r3, r4, [r2, #16]
	line->z0 = start.z;
 8006198:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800619c:	687a      	ldr	r2, [r7, #4]
 800619e:	e9c2 3408 	strd	r3, r4, [r2, #32]
	line->denta_x = end.x  -  start.x;
 80061a2:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 80061a6:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80061aa:	461a      	mov	r2, r3
 80061ac:	4623      	mov	r3, r4
 80061ae:	f7fa f87b 	bl	80002a8 <__aeabi_dsub>
 80061b2:	4603      	mov	r3, r0
 80061b4:	460c      	mov	r4, r1
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	line->denta_y = end.y  -  start.y;
 80061bc:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 80061c0:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 80061c4:	461a      	mov	r2, r3
 80061c6:	4623      	mov	r3, r4
 80061c8:	f7fa f86e 	bl	80002a8 <__aeabi_dsub>
 80061cc:	4603      	mov	r3, r0
 80061ce:	460c      	mov	r4, r1
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	line->denta_z = end.z  -  start.z;
 80061d6:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 80061da:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80061de:	461a      	mov	r2, r3
 80061e0:	4623      	mov	r3, r4
 80061e2:	f7fa f861 	bl	80002a8 <__aeabi_dsub>
 80061e6:	4603      	mov	r3, r0
 80061e8:	460c      	mov	r4, r1
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	line->total_s = sqrt((line->denta_x)*(line->denta_x)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 80061fc:	461a      	mov	r2, r3
 80061fe:	4623      	mov	r3, r4
 8006200:	f7fa fa0a 	bl	8000618 <__aeabi_dmul>
 8006204:	4603      	mov	r3, r0
 8006206:	460c      	mov	r4, r1
 8006208:	461d      	mov	r5, r3
 800620a:	4626      	mov	r6, r4
			       +(line->denta_y)*(line->denta_y)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8006218:	461a      	mov	r2, r3
 800621a:	4623      	mov	r3, r4
 800621c:	f7fa f9fc 	bl	8000618 <__aeabi_dmul>
 8006220:	4603      	mov	r3, r0
 8006222:	460c      	mov	r4, r1
 8006224:	461a      	mov	r2, r3
 8006226:	4623      	mov	r3, r4
 8006228:	4628      	mov	r0, r5
 800622a:	4631      	mov	r1, r6
 800622c:	f7fa f83e 	bl	80002ac <__adddf3>
 8006230:	4603      	mov	r3, r0
 8006232:	460c      	mov	r4, r1
 8006234:	461d      	mov	r5, r3
 8006236:	4626      	mov	r6, r4
				   +(line->denta_z)*(line->denta_z));
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	e9d3 3410 	ldrd	r3, r4, [r3, #64]	; 0x40
 8006244:	461a      	mov	r2, r3
 8006246:	4623      	mov	r3, r4
 8006248:	f7fa f9e6 	bl	8000618 <__aeabi_dmul>
 800624c:	4603      	mov	r3, r0
 800624e:	460c      	mov	r4, r1
	line->total_s = sqrt((line->denta_x)*(line->denta_x)
 8006250:	461a      	mov	r2, r3
 8006252:	4623      	mov	r3, r4
 8006254:	4628      	mov	r0, r5
 8006256:	4631      	mov	r1, r6
 8006258:	f7fa f828 	bl	80002ac <__adddf3>
 800625c:	4603      	mov	r3, r0
 800625e:	460c      	mov	r4, r1
 8006260:	ec44 3b17 	vmov	d7, r3, r4
 8006264:	eeb0 0a47 	vmov.f32	s0, s14
 8006268:	eef0 0a67 	vmov.f32	s1, s15
 800626c:	f013 fa0a 	bl	8019684 <sqrt>
 8006270:	eeb0 7a40 	vmov.f32	s14, s0
 8006274:	eef0 7a60 	vmov.f32	s15, s1
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
	line->x_current = line->x0;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	line->y_current = line->y0;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	line->z_current = line->z0;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68

	return SCARA_STATUS_OK;
 80062a2:	2300      	movs	r3, #0
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	370c      	adds	r7, #12
 80062a8:	46bd      	mov	sp, r7
 80062aa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80062ae:	b002      	add	sp, #8
 80062b0:	4770      	bx	lr
 80062b2:	0000      	movs	r0, r0
 80062b4:	0000      	movs	r0, r0
	...

080062b8 <scaraInitCircle>:
/* Compute circular path parameters */
SCARA_StatusTypeDef	scaraInitCircle		(Path_Circle_TypeDef *circle,
										SCARA_PositionTypeDef start,
										SCARA_PositionTypeDef end,
										SCARA_PositionTypeDef center,
										int32_t dir){
 80062b8:	b082      	sub	sp, #8
 80062ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80062be:	b0c1      	sub	sp, #260	; 0x104
 80062c0:	af2c      	add	r7, sp, #176	; 0xb0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80062c8:	e881 000c 	stmia.w	r1, {r2, r3}
	// Check limit workspace
	if ( FALSE == kinematicInverse(&end, start) ) {
 80062cc:	f507 7694 	add.w	r6, r7, #296	; 0x128
 80062d0:	4668      	mov	r0, sp
 80062d2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80062d6:	22b0      	movs	r2, #176	; 0xb0
 80062d8:	4619      	mov	r1, r3
 80062da:	f00e fe89 	bl	8014ff0 <memcpy>
 80062de:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80062e2:	cb0c      	ldmia	r3, {r2, r3}
 80062e4:	4630      	mov	r0, r6
 80062e6:	f7fd f94f 	bl	8003588 <kinematicInverse>
 80062ea:	4603      	mov	r3, r0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d101      	bne.n	80062f4 <scaraInitCircle+0x3c>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 80062f0:	2307      	movs	r3, #7
 80062f2:	e146      	b.n	8006582 <scaraInitCircle+0x2ca>
	}

	if( 1 != dir && -1 != dir) {
 80062f4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d006      	beq.n	800630a <scaraInitCircle+0x52>
 80062fc:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006304:	d001      	beq.n	800630a <scaraInitCircle+0x52>
		return SCARA_STATUS_ERROR_PARA;// error direction param !!!
 8006306:	2306      	movs	r3, #6
 8006308:	e13b      	b.n	8006582 <scaraInitCircle+0x2ca>
	}

	double v_x_start, v_y_start, v_x_stop, v_y_stop;
	double r1, r2, angle_start, angle_stop, delta_angle;
	v_x_start = start.x - center.x;
 800630a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800630e:	e9d7 238a 	ldrd	r2, r3, [r7, #552]	; 0x228
 8006312:	f7f9 ffc9 	bl	80002a8 <__aeabi_dsub>
 8006316:	4602      	mov	r2, r0
 8006318:	460b      	mov	r3, r1
 800631a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	v_y_start = start.y - center.y;
 800631e:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8006322:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 8006326:	f7f9 ffbf 	bl	80002a8 <__aeabi_dsub>
 800632a:	4602      	mov	r2, r0
 800632c:	460b      	mov	r3, r1
 800632e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	v_x_stop  = end.x  - center.x;
 8006332:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8006336:	e9d7 238a 	ldrd	r2, r3, [r7, #552]	; 0x228
 800633a:	f7f9 ffb5 	bl	80002a8 <__aeabi_dsub>
 800633e:	4602      	mov	r2, r0
 8006340:	460b      	mov	r3, r1
 8006342:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	v_y_stop  = end.y  - center.y;
 8006346:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 800634a:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 800634e:	f7f9 ffab 	bl	80002a8 <__aeabi_dsub>
 8006352:	4602      	mov	r2, r0
 8006354:	460b      	mov	r3, r1
 8006356:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	r1 = sqrt(v_x_start*v_x_start + v_y_start*v_y_start);
 800635a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800635e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006362:	f7fa f959 	bl	8000618 <__aeabi_dmul>
 8006366:	4602      	mov	r2, r0
 8006368:	460b      	mov	r3, r1
 800636a:	4690      	mov	r8, r2
 800636c:	4699      	mov	r9, r3
 800636e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006372:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006376:	f7fa f94f 	bl	8000618 <__aeabi_dmul>
 800637a:	4602      	mov	r2, r0
 800637c:	460b      	mov	r3, r1
 800637e:	4640      	mov	r0, r8
 8006380:	4649      	mov	r1, r9
 8006382:	f7f9 ff93 	bl	80002ac <__adddf3>
 8006386:	4602      	mov	r2, r0
 8006388:	460b      	mov	r3, r1
 800638a:	ec43 2b17 	vmov	d7, r2, r3
 800638e:	eeb0 0a47 	vmov.f32	s0, s14
 8006392:	eef0 0a67 	vmov.f32	s1, s15
 8006396:	f013 f975 	bl	8019684 <sqrt>
 800639a:	ed87 0b08 	vstr	d0, [r7, #32]
	r2 = sqrt(v_x_stop*v_x_stop + v_y_stop*v_y_stop);
 800639e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80063a2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80063a6:	f7fa f937 	bl	8000618 <__aeabi_dmul>
 80063aa:	4602      	mov	r2, r0
 80063ac:	460b      	mov	r3, r1
 80063ae:	4690      	mov	r8, r2
 80063b0:	4699      	mov	r9, r3
 80063b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80063b6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80063ba:	f7fa f92d 	bl	8000618 <__aeabi_dmul>
 80063be:	4602      	mov	r2, r0
 80063c0:	460b      	mov	r3, r1
 80063c2:	4640      	mov	r0, r8
 80063c4:	4649      	mov	r1, r9
 80063c6:	f7f9 ff71 	bl	80002ac <__adddf3>
 80063ca:	4602      	mov	r2, r0
 80063cc:	460b      	mov	r3, r1
 80063ce:	ec43 2b17 	vmov	d7, r2, r3
 80063d2:	eeb0 0a47 	vmov.f32	s0, s14
 80063d6:	eef0 0a67 	vmov.f32	s1, s15
 80063da:	f013 f953 	bl	8019684 <sqrt>
 80063de:	ed87 0b06 	vstr	d0, [r7, #24]

	if( 1.0 < fabs(r1 - r2)) {
 80063e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063e6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80063ea:	f7f9 ff5d 	bl	80002a8 <__aeabi_dsub>
 80063ee:	4602      	mov	r2, r0
 80063f0:	460b      	mov	r3, r1
 80063f2:	4614      	mov	r4, r2
 80063f4:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80063f8:	f04f 0200 	mov.w	r2, #0
 80063fc:	4b68      	ldr	r3, [pc, #416]	; (80065a0 <scaraInitCircle+0x2e8>)
 80063fe:	4620      	mov	r0, r4
 8006400:	4629      	mov	r1, r5
 8006402:	f7fa fb99 	bl	8000b38 <__aeabi_dcmpgt>
 8006406:	4603      	mov	r3, r0
 8006408:	2b00      	cmp	r3, #0
 800640a:	d001      	beq.n	8006410 <scaraInitCircle+0x158>
		return SCARA_STATUS_ERROR_PARA; //start & stop are not in a circle together !!
 800640c:	2306      	movs	r3, #6
 800640e:	e0b8      	b.n	8006582 <scaraInitCircle+0x2ca>
	}

	if (r1 < 0.1 || r2 < 0.1) {
 8006410:	a35f      	add	r3, pc, #380	; (adr r3, 8006590 <scaraInitCircle+0x2d8>)
 8006412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006416:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800641a:	f7fa fb6f 	bl	8000afc <__aeabi_dcmplt>
 800641e:	4603      	mov	r3, r0
 8006420:	2b00      	cmp	r3, #0
 8006422:	d109      	bne.n	8006438 <scaraInitCircle+0x180>
 8006424:	a35a      	add	r3, pc, #360	; (adr r3, 8006590 <scaraInitCircle+0x2d8>)
 8006426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800642a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800642e:	f7fa fb65 	bl	8000afc <__aeabi_dcmplt>
 8006432:	4603      	mov	r3, r0
 8006434:	2b00      	cmp	r3, #0
 8006436:	d001      	beq.n	800643c <scaraInitCircle+0x184>
		return SCARA_STATUS_ERROR_PARA; //start and center almost in the same phace, radius = 0 !!
 8006438:	2306      	movs	r3, #6
 800643a:	e0a2      	b.n	8006582 <scaraInitCircle+0x2ca>
	}

	angle_start = atan2(v_y_start, v_x_start);
 800643c:	ed97 1b10 	vldr	d1, [r7, #64]	; 0x40
 8006440:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8006444:	f013 f91c 	bl	8019680 <atan2>
 8006448:	ed87 0b04 	vstr	d0, [r7, #16]
	angle_stop  = atan2(v_y_stop, v_x_stop);
 800644c:	ed97 1b0c 	vldr	d1, [r7, #48]	; 0x30
 8006450:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8006454:	f013 f914 	bl	8019680 <atan2>
 8006458:	ed87 0b02 	vstr	d0, [r7, #8]
	delta_angle = angle_stop - angle_start;
 800645c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006460:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006464:	f7f9 ff20 	bl	80002a8 <__aeabi_dsub>
 8006468:	4603      	mov	r3, r0
 800646a:	460c      	mov	r4, r1
 800646c:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48

	if ( 0 > delta_angle) {
 8006470:	f04f 0200 	mov.w	r2, #0
 8006474:	f04f 0300 	mov.w	r3, #0
 8006478:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800647c:	f7fa fb3e 	bl	8000afc <__aeabi_dcmplt>
 8006480:	4603      	mov	r3, r0
 8006482:	2b00      	cmp	r3, #0
 8006484:	d00a      	beq.n	800649c <scaraInitCircle+0x1e4>
		delta_angle += 2*PI;
 8006486:	a344      	add	r3, pc, #272	; (adr r3, 8006598 <scaraInitCircle+0x2e0>)
 8006488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800648c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006490:	f7f9 ff0c 	bl	80002ac <__adddf3>
 8006494:	4603      	mov	r3, r0
 8006496:	460c      	mov	r4, r1
 8006498:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
	} // atan2 range : -PI --> PI

	if ( 0 > dir) {
 800649c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	da0a      	bge.n	80064ba <scaraInitCircle+0x202>
		delta_angle = 2*PI - delta_angle;
 80064a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80064a8:	a13b      	add	r1, pc, #236	; (adr r1, 8006598 <scaraInitCircle+0x2e0>)
 80064aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80064ae:	f7f9 fefb 	bl	80002a8 <__aeabi_dsub>
 80064b2:	4603      	mov	r3, r0
 80064b4:	460c      	mov	r4, r1
 80064b6:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
	}
	// Init circle params
	circle->dir = dir;
 80064ba:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80064be:	b25a      	sxtb	r2, r3
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	701a      	strb	r2, [r3, #0]
	circle->radius = r1;
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80064ca:	e9c2 3402 	strd	r3, r4, [r2, #8]
	circle->angle_start = angle_start;
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80064d4:	e9c2 3404 	strd	r3, r4, [r2, #16]
	circle->angle_stop  = angle_stop;
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80064de:	e9c2 3406 	strd	r3, r4, [r2, #24]
	circle->total_angle = delta_angle;
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80064e8:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	circle->total_s = delta_angle*r1;
 80064ec:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80064f0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80064f4:	f7fa f890 	bl	8000618 <__aeabi_dmul>
 80064f8:	4603      	mov	r3, r0
 80064fa:	460c      	mov	r4, r1
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	circle->x0 = start.x;
 8006502:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	e9c2 3408 	strd	r3, r4, [r2, #32]
	circle->y0 = start.y;
 800650c:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	circle->x1 = end.x;
 8006516:	e9d7 345c 	ldrd	r3, r4, [r7, #368]	; 0x170
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	circle->y1 = end.y;
 8006520:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8006524:	687a      	ldr	r2, [r7, #4]
 8006526:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	circle->xi = center.x;
 800652a:	e9d7 348a 	ldrd	r3, r4, [r7, #552]	; 0x228
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	circle->yi = center.y;
 8006534:	e9d7 348c 	ldrd	r3, r4, [r7, #560]	; 0x230
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	circle->z0 = start.z;
 800653e:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	circle->z1 = start.z;
 8006548:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 800654c:	687a      	ldr	r2, [r7, #4]
 800654e:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	circle->zi = start.z;
 8006552:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8006556:	687a      	ldr	r2, [r7, #4]
 8006558:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	circle->x_current = circle->x0;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	circle->y_current = circle->y0;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 800656e:	687a      	ldr	r2, [r7, #4]
 8006570:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
	circle->z_current = circle->z0;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88

	return SCARA_STATUS_OK;
 8006580:	2300      	movs	r3, #0
}
 8006582:	4618      	mov	r0, r3
 8006584:	3754      	adds	r7, #84	; 0x54
 8006586:	46bd      	mov	sp, r7
 8006588:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800658c:	b002      	add	sp, #8
 800658e:	4770      	bx	lr
 8006590:	9999999a 	.word	0x9999999a
 8006594:	3fb99999 	.word	0x3fb99999
 8006598:	60000000 	.word	0x60000000
 800659c:	401921fb 	.word	0x401921fb
 80065a0:	3ff00000 	.word	0x3ff00000
 80065a4:	00000000 	.word	0x00000000

080065a8 <scaraInitLSPB>:
SCARA_StatusTypeDef	scaraInitLSPB		(Trajectory_LSPB_TypeDef *lspb,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit,
										double v_factor,
										double a_factor) {
 80065a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065ac:	b0ad      	sub	sp, #180	; 0xb4
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	62f8      	str	r0, [r7, #44]	; 0x2c
 80065b2:	460b      	mov	r3, r1
 80065b4:	ed87 0b08 	vstr	d0, [r7, #32]
 80065b8:	ed87 1b06 	vstr	d1, [r7, #24]
 80065bc:	ed87 2b04 	vstr	d2, [r7, #16]
 80065c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065c4:	4613      	mov	r3, r2
 80065c6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	 double v_design, a_design, v_lim, q0, q1, v0, v1, ta, td, tf;
	 uint32_t	no_sample;
	 int8_t	dir;

	 if ( TRAJECTORY_3D == target) {
 80065ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80065ce:	2b04      	cmp	r3, #4
 80065d0:	d118      	bne.n	8006604 <scaraInitLSPB+0x5c>
		 v_design = V_DESIGN_3D*v_factor;
 80065d2:	f20f 7380 	addw	r3, pc, #1920	; 0x780
 80065d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065da:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80065de:	f7fa f81b 	bl	8000618 <__aeabi_dmul>
 80065e2:	4603      	mov	r3, r0
 80065e4:	460c      	mov	r4, r1
 80065e6:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_3D*a_factor;
 80065ea:	f20f 7370 	addw	r3, pc, #1904	; 0x770
 80065ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80065f6:	f7fa f80f 	bl	8000618 <__aeabi_dmul>
 80065fa:	4603      	mov	r3, r0
 80065fc:	460c      	mov	r4, r1
 80065fe:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 8006602:	e092      	b.n	800672a <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_ROLL == target) {
 8006604:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006608:	2b05      	cmp	r3, #5
 800660a:	d118      	bne.n	800663e <scaraInitLSPB+0x96>
		 v_design = V_DESIGN_ROLL*v_factor;
 800660c:	f20f 7354 	addw	r3, pc, #1876	; 0x754
 8006610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006614:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006618:	f7f9 fffe 	bl	8000618 <__aeabi_dmul>
 800661c:	4603      	mov	r3, r0
 800661e:	460c      	mov	r4, r1
 8006620:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_ROLL*a_factor;
 8006624:	f20f 7344 	addw	r3, pc, #1860	; 0x744
 8006628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800662c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006630:	f7f9 fff2 	bl	8000618 <__aeabi_dmul>
 8006634:	4603      	mov	r3, r0
 8006636:	460c      	mov	r4, r1
 8006638:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 800663c:	e075      	b.n	800672a <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J0 == target) {
 800663e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006642:	2b00      	cmp	r3, #0
 8006644:	d118      	bne.n	8006678 <scaraInitLSPB+0xd0>
		 v_design = V_DESIGN_J0*v_factor;
 8006646:	f20f 731c 	addw	r3, pc, #1820	; 0x71c
 800664a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800664e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006652:	f7f9 ffe1 	bl	8000618 <__aeabi_dmul>
 8006656:	4603      	mov	r3, r0
 8006658:	460c      	mov	r4, r1
 800665a:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J0*a_factor;
 800665e:	f20f 730c 	addw	r3, pc, #1804	; 0x70c
 8006662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006666:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800666a:	f7f9 ffd5 	bl	8000618 <__aeabi_dmul>
 800666e:	4603      	mov	r3, r0
 8006670:	460c      	mov	r4, r1
 8006672:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 8006676:	e058      	b.n	800672a <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J1 == target) {
 8006678:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800667c:	2b01      	cmp	r3, #1
 800667e:	d118      	bne.n	80066b2 <scaraInitLSPB+0x10a>
		 v_design = V_DESIGN_J1*v_factor;
 8006680:	f20f 63e0 	addw	r3, pc, #1760	; 0x6e0
 8006684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006688:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800668c:	f7f9 ffc4 	bl	8000618 <__aeabi_dmul>
 8006690:	4603      	mov	r3, r0
 8006692:	460c      	mov	r4, r1
 8006694:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J1*a_factor;
 8006698:	f20f 63d0 	addw	r3, pc, #1744	; 0x6d0
 800669c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80066a4:	f7f9 ffb8 	bl	8000618 <__aeabi_dmul>
 80066a8:	4603      	mov	r3, r0
 80066aa:	460c      	mov	r4, r1
 80066ac:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 80066b0:	e03b      	b.n	800672a <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J2 == target) {
 80066b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80066b6:	2b02      	cmp	r3, #2
 80066b8:	d118      	bne.n	80066ec <scaraInitLSPB+0x144>
		 v_design = V_DESIGN_J2*v_factor;
 80066ba:	f20f 6398 	addw	r3, pc, #1688	; 0x698
 80066be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80066c6:	f7f9 ffa7 	bl	8000618 <__aeabi_dmul>
 80066ca:	4603      	mov	r3, r0
 80066cc:	460c      	mov	r4, r1
 80066ce:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J2*a_factor;
 80066d2:	f20f 6388 	addw	r3, pc, #1672	; 0x688
 80066d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066da:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80066de:	f7f9 ff9b 	bl	8000618 <__aeabi_dmul>
 80066e2:	4603      	mov	r3, r0
 80066e4:	460c      	mov	r4, r1
 80066e6:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 80066ea:	e01e      	b.n	800672a <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J3 == target) {
 80066ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80066f0:	2b03      	cmp	r3, #3
 80066f2:	d118      	bne.n	8006726 <scaraInitLSPB+0x17e>
		 v_design = V_DESIGN_J3*v_factor;
 80066f4:	f20f 637c 	addw	r3, pc, #1660	; 0x67c
 80066f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066fc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006700:	f7f9 ff8a 	bl	8000618 <__aeabi_dmul>
 8006704:	4603      	mov	r3, r0
 8006706:	460c      	mov	r4, r1
 8006708:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J3*a_factor;
 800670c:	f20f 636c 	addw	r3, pc, #1644	; 0x66c
 8006710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006714:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006718:	f7f9 ff7e 	bl	8000618 <__aeabi_dmul>
 800671c:	4603      	mov	r3, r0
 800671e:	460c      	mov	r4, r1
 8006720:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 8006724:	e001      	b.n	800672a <scaraInitLSPB+0x182>
	 } else {
		 return SCARA_STATUS_ERROR_PARA;
 8006726:	2306      	movs	r3, #6
 8006728:	e309      	b.n	8006d3e <scaraInitLSPB+0x796>
	 }

	 q0 = 0;
 800672a:	f04f 0300 	mov.w	r3, #0
 800672e:	f04f 0400 	mov.w	r4, #0
 8006732:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	 q1 = total_s;
 8006736:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800673a:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
	 v0 = 0;
 800673e:	f04f 0300 	mov.w	r3, #0
 8006742:	f04f 0400 	mov.w	r4, #0
 8006746:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	 v1 = 0;
 800674a:	f04f 0300 	mov.w	r3, #0
 800674e:	f04f 0400 	mov.w	r4, #0
 8006752:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50

	 if ( q0 <= q1) {
 8006756:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800675a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800675e:	f7fa f9d7 	bl	8000b10 <__aeabi_dcmple>
 8006762:	4603      	mov	r3, r0
 8006764:	2b00      	cmp	r3, #0
 8006766:	d003      	beq.n	8006770 <scaraInitLSPB+0x1c8>
		 dir = 1;
 8006768:	2301      	movs	r3, #1
 800676a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800676e:	e00c      	b.n	800678a <scaraInitLSPB+0x1e2>
	 } else {
		 dir = -1;
 8006770:	23ff      	movs	r3, #255	; 0xff
 8006772:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		 q1 = -q1;
 8006776:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800677a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800677e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006782:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006786:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	 }

	 if (DUTY_MODE_INIT_QVT == modeinit) {
 800678a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800678e:	2b01      	cmp	r3, #1
 8006790:	f040 80ad 	bne.w	80068ee <scaraInitLSPB+0x346>
		 double v_lower, v_upper, tc_upper, a_upper;
		 tf = lspb->Tf;
 8006794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006796:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 800679a:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
		 // Avoid division by 0
		 if (tf > 0.001) {
 800679e:	f20f 53e4 	addw	r3, pc, #1508	; 0x5e4
 80067a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a6:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80067aa:	f7fa f9c5 	bl	8000b38 <__aeabi_dcmpgt>
 80067ae:	4603      	mov	r3, r0
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	f000 8090 	beq.w	80068d6 <scaraInitLSPB+0x32e>
			 v_lower 	= (q1 - q0) / tf;
 80067b6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80067ba:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80067be:	f7f9 fd73 	bl	80002a8 <__aeabi_dsub>
 80067c2:	4603      	mov	r3, r0
 80067c4:	460c      	mov	r4, r1
 80067c6:	4618      	mov	r0, r3
 80067c8:	4621      	mov	r1, r4
 80067ca:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80067ce:	f7fa f84d 	bl	800086c <__aeabi_ddiv>
 80067d2:	4603      	mov	r3, r0
 80067d4:	460c      	mov	r4, r1
 80067d6:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
			 v_upper 	= 2*(q1 - q0) / tf;
 80067da:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80067de:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80067e2:	f7f9 fd61 	bl	80002a8 <__aeabi_dsub>
 80067e6:	4603      	mov	r3, r0
 80067e8:	460c      	mov	r4, r1
 80067ea:	4618      	mov	r0, r3
 80067ec:	4621      	mov	r1, r4
 80067ee:	4602      	mov	r2, r0
 80067f0:	460b      	mov	r3, r1
 80067f2:	f7f9 fd5b 	bl	80002ac <__adddf3>
 80067f6:	4603      	mov	r3, r0
 80067f8:	460c      	mov	r4, r1
 80067fa:	4618      	mov	r0, r3
 80067fc:	4621      	mov	r1, r4
 80067fe:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8006802:	f7fa f833 	bl	800086c <__aeabi_ddiv>
 8006806:	4603      	mov	r3, r0
 8006808:	460c      	mov	r4, r1
 800680a:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

			 if ( v_design < v_lower) {
 800680e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006812:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8006816:	f7fa f971 	bl	8000afc <__aeabi_dcmplt>
 800681a:	4603      	mov	r3, r0
 800681c:	2b00      	cmp	r3, #0
 800681e:	d001      	beq.n	8006824 <scaraInitLSPB+0x27c>
				 return SCARA_STATUS_ERROR_OVER_VELOC;
 8006820:	2309      	movs	r3, #9
 8006822:	e28c      	b.n	8006d3e <scaraInitLSPB+0x796>
			 } else {
				 if ( v_upper <= v_design) {
 8006824:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8006828:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800682c:	f7fa f970 	bl	8000b10 <__aeabi_dcmple>
 8006830:	4603      	mov	r3, r0
 8006832:	2b00      	cmp	r3, #0
 8006834:	d003      	beq.n	800683e <scaraInitLSPB+0x296>
					 v_design = v_upper;
 8006836:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800683a:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
				 }
				 // Avoid division by 0
				 if (v_design > 0.0000001) {
 800683e:	f20f 534c 	addw	r3, pc, #1356	; 0x54c
 8006842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006846:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800684a:	f7fa f975 	bl	8000b38 <__aeabi_dcmpgt>
 800684e:	4603      	mov	r3, r0
 8006850:	2b00      	cmp	r3, #0
 8006852:	d01a      	beq.n	800688a <scaraInitLSPB+0x2e2>
					 tc_upper	= tf - (q1 - q0)/v_design;
 8006854:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8006858:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800685c:	f7f9 fd24 	bl	80002a8 <__aeabi_dsub>
 8006860:	4603      	mov	r3, r0
 8006862:	460c      	mov	r4, r1
 8006864:	4618      	mov	r0, r3
 8006866:	4621      	mov	r1, r4
 8006868:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800686c:	f7f9 fffe 	bl	800086c <__aeabi_ddiv>
 8006870:	4603      	mov	r3, r0
 8006872:	460c      	mov	r4, r1
 8006874:	461a      	mov	r2, r3
 8006876:	4623      	mov	r3, r4
 8006878:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800687c:	f7f9 fd14 	bl	80002a8 <__aeabi_dsub>
 8006880:	4603      	mov	r3, r0
 8006882:	460c      	mov	r4, r1
 8006884:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
 8006888:	e00b      	b.n	80068a2 <scaraInitLSPB+0x2fa>
				 } else {
					 tc_upper = tf / 2;
 800688a:	f04f 0200 	mov.w	r2, #0
 800688e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006892:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8006896:	f7f9 ffe9 	bl	800086c <__aeabi_ddiv>
 800689a:	4603      	mov	r3, r0
 800689c:	460c      	mov	r4, r1
 800689e:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
				 }
				 a_upper	= v_design/tc_upper;
 80068a2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80068a6:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80068aa:	f7f9 ffdf 	bl	800086c <__aeabi_ddiv>
 80068ae:	4603      	mov	r3, r0
 80068b0:	460c      	mov	r4, r1
 80068b2:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
				 if ( a_upper > a_design) {
 80068b6:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80068ba:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80068be:	f7fa f93b 	bl	8000b38 <__aeabi_dcmpgt>
 80068c2:	4603      	mov	r3, r0
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d001      	beq.n	80068cc <scaraInitLSPB+0x324>
					 return SCARA_STATUS_ERROR_OVER_ACCEL;
 80068c8:	230a      	movs	r3, #10
 80068ca:	e238      	b.n	8006d3e <scaraInitLSPB+0x796>
				 } else {
					 a_design = a_upper;
 80068cc:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80068d0:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 80068d4:	e00b      	b.n	80068ee <scaraInitLSPB+0x346>
				 }
			 }
		 } else {
			 v_design = 0;
 80068d6:	f04f 0300 	mov.w	r3, #0
 80068da:	f04f 0400 	mov.w	r4, #0
 80068de:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
			 a_design = 0;
 80068e2:	f04f 0300 	mov.w	r3, #0
 80068e6:	f04f 0400 	mov.w	r4, #0
 80068ea:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
		 }
	}

	 // Check condition trapezoidal ---> triangle
	 // Avoid division by 0
	 if (a_design > 0.0000001 && v_design > 0.0000001) {
 80068ee:	f20f 439c 	addw	r3, pc, #1180	; 0x49c
 80068f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f6:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80068fa:	f7fa f91d 	bl	8000b38 <__aeabi_dcmpgt>
 80068fe:	4603      	mov	r3, r0
 8006900:	2b00      	cmp	r3, #0
 8006902:	f000 819c 	beq.w	8006c3e <scaraInitLSPB+0x696>
 8006906:	f20f 4384 	addw	r3, pc, #1156	; 0x484
 800690a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800690e:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8006912:	f7fa f911 	bl	8000b38 <__aeabi_dcmpgt>
 8006916:	4603      	mov	r3, r0
 8006918:	2b00      	cmp	r3, #0
 800691a:	f000 8190 	beq.w	8006c3e <scaraInitLSPB+0x696>
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 800691e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8006922:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8006926:	f7f9 fcbf 	bl	80002a8 <__aeabi_dsub>
 800692a:	4603      	mov	r3, r0
 800692c:	460c      	mov	r4, r1
 800692e:	461d      	mov	r5, r3
 8006930:	f024 4600 	bic.w	r6, r4, #2147483648	; 0x80000000
 8006934:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8006938:	4628      	mov	r0, r5
 800693a:	4631      	mov	r1, r6
 800693c:	f7f9 fe6c 	bl	8000618 <__aeabi_dmul>
 8006940:	4603      	mov	r3, r0
 8006942:	460c      	mov	r4, r1
 8006944:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8006948:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800694c:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8006950:	f7f9 fe62 	bl	8000618 <__aeabi_dmul>
 8006954:	4603      	mov	r3, r0
 8006956:	460c      	mov	r4, r1
 8006958:	e9c7 3400 	strd	r3, r4, [r7]
 800695c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006960:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006964:	f7f9 fe58 	bl	8000618 <__aeabi_dmul>
 8006968:	4603      	mov	r3, r0
 800696a:	460c      	mov	r4, r1
 800696c:	461d      	mov	r5, r3
 800696e:	4626      	mov	r6, r4
 8006970:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006974:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006978:	f7f9 fe4e 	bl	8000618 <__aeabi_dmul>
 800697c:	4603      	mov	r3, r0
 800697e:	460c      	mov	r4, r1
 8006980:	461a      	mov	r2, r3
 8006982:	4623      	mov	r3, r4
 8006984:	4628      	mov	r0, r5
 8006986:	4631      	mov	r1, r6
 8006988:	f7f9 fc90 	bl	80002ac <__adddf3>
 800698c:	4603      	mov	r3, r0
 800698e:	460c      	mov	r4, r1
 8006990:	4618      	mov	r0, r3
 8006992:	4621      	mov	r1, r4
 8006994:	f04f 0200 	mov.w	r2, #0
 8006998:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800699c:	f7f9 ff66 	bl	800086c <__aeabi_ddiv>
 80069a0:	4603      	mov	r3, r0
 80069a2:	460c      	mov	r4, r1
 80069a4:	461a      	mov	r2, r3
 80069a6:	4623      	mov	r3, r4
 80069a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80069ac:	f7f9 fc7c 	bl	80002a8 <__aeabi_dsub>
 80069b0:	4603      	mov	r3, r0
 80069b2:	460c      	mov	r4, r1
 80069b4:	461a      	mov	r2, r3
 80069b6:	4623      	mov	r3, r4
 80069b8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80069bc:	f7fa f8a8 	bl	8000b10 <__aeabi_dcmple>
 80069c0:	4603      	mov	r3, r0
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d075      	beq.n	8006ab2 <scaraInitLSPB+0x50a>
			 v_lim 	= sqrt(fabs(q1 - q0)*a_design + (v0*v0 + v1*v1)/2);
 80069c6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80069ca:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80069ce:	f7f9 fc6b 	bl	80002a8 <__aeabi_dsub>
 80069d2:	4603      	mov	r3, r0
 80069d4:	460c      	mov	r4, r1
 80069d6:	469a      	mov	sl, r3
 80069d8:	f024 4b00 	bic.w	fp, r4, #2147483648	; 0x80000000
 80069dc:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80069e0:	4650      	mov	r0, sl
 80069e2:	4659      	mov	r1, fp
 80069e4:	f7f9 fe18 	bl	8000618 <__aeabi_dmul>
 80069e8:	4603      	mov	r3, r0
 80069ea:	460c      	mov	r4, r1
 80069ec:	4625      	mov	r5, r4
 80069ee:	461c      	mov	r4, r3
 80069f0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80069f4:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80069f8:	f7f9 fe0e 	bl	8000618 <__aeabi_dmul>
 80069fc:	4602      	mov	r2, r0
 80069fe:	460b      	mov	r3, r1
 8006a00:	4690      	mov	r8, r2
 8006a02:	4699      	mov	r9, r3
 8006a04:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006a08:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006a0c:	f7f9 fe04 	bl	8000618 <__aeabi_dmul>
 8006a10:	4602      	mov	r2, r0
 8006a12:	460b      	mov	r3, r1
 8006a14:	4640      	mov	r0, r8
 8006a16:	4649      	mov	r1, r9
 8006a18:	f7f9 fc48 	bl	80002ac <__adddf3>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	460b      	mov	r3, r1
 8006a20:	4610      	mov	r0, r2
 8006a22:	4619      	mov	r1, r3
 8006a24:	f04f 0200 	mov.w	r2, #0
 8006a28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006a2c:	f7f9 ff1e 	bl	800086c <__aeabi_ddiv>
 8006a30:	4602      	mov	r2, r0
 8006a32:	460b      	mov	r3, r1
 8006a34:	4620      	mov	r0, r4
 8006a36:	4629      	mov	r1, r5
 8006a38:	f7f9 fc38 	bl	80002ac <__adddf3>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	460c      	mov	r4, r1
 8006a40:	ec44 3b17 	vmov	d7, r3, r4
 8006a44:	eeb0 0a47 	vmov.f32	s0, s14
 8006a48:	eef0 0a67 	vmov.f32	s1, s15
 8006a4c:	f012 fe1a 	bl	8019684 <sqrt>
 8006a50:	ed87 0b26 	vstr	d0, [r7, #152]	; 0x98
			 ta		= (v_lim - v0)/a_design;
 8006a54:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006a58:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006a5c:	f7f9 fc24 	bl	80002a8 <__aeabi_dsub>
 8006a60:	4603      	mov	r3, r0
 8006a62:	460c      	mov	r4, r1
 8006a64:	4618      	mov	r0, r3
 8006a66:	4621      	mov	r1, r4
 8006a68:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8006a6c:	f7f9 fefe 	bl	800086c <__aeabi_ddiv>
 8006a70:	4603      	mov	r3, r0
 8006a72:	460c      	mov	r4, r1
 8006a74:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
			 td		= (v_lim - v1)/a_design;
 8006a78:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006a7c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006a80:	f7f9 fc12 	bl	80002a8 <__aeabi_dsub>
 8006a84:	4603      	mov	r3, r0
 8006a86:	460c      	mov	r4, r1
 8006a88:	4618      	mov	r0, r3
 8006a8a:	4621      	mov	r1, r4
 8006a8c:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8006a90:	f7f9 feec 	bl	800086c <__aeabi_ddiv>
 8006a94:	4603      	mov	r3, r0
 8006a96:	460c      	mov	r4, r1
 8006a98:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
			 tf		= ta + td;
 8006a9c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8006aa0:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8006aa4:	f7f9 fc02 	bl	80002ac <__adddf3>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	460c      	mov	r4, r1
 8006aac:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 8006ab0:	e0e3      	b.n	8006c7a <scaraInitLSPB+0x6d2>
		 } else {
			 v_lim	= v_design;
 8006ab2:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8006ab6:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
			 ta		= (v_lim - v0)/a_design;
 8006aba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006abe:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006ac2:	f7f9 fbf1 	bl	80002a8 <__aeabi_dsub>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	460c      	mov	r4, r1
 8006aca:	4618      	mov	r0, r3
 8006acc:	4621      	mov	r1, r4
 8006ace:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8006ad2:	f7f9 fecb 	bl	800086c <__aeabi_ddiv>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	460c      	mov	r4, r1
 8006ada:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
			 td		= (v_lim - v1)/a_design;
 8006ade:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006ae2:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006ae6:	f7f9 fbdf 	bl	80002a8 <__aeabi_dsub>
 8006aea:	4603      	mov	r3, r0
 8006aec:	460c      	mov	r4, r1
 8006aee:	4618      	mov	r0, r3
 8006af0:	4621      	mov	r1, r4
 8006af2:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8006af6:	f7f9 feb9 	bl	800086c <__aeabi_ddiv>
 8006afa:	4603      	mov	r3, r0
 8006afc:	460c      	mov	r4, r1
 8006afe:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
			 tf		= fabs(q0 - q1)/v_lim + v_lim/(2*a_design)*(1 - v0/v_lim)*(1 - v0/v_lim)
 8006b02:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8006b06:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006b0a:	f7f9 fbcd 	bl	80002a8 <__aeabi_dsub>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	460c      	mov	r4, r1
 8006b12:	4698      	mov	r8, r3
 8006b14:	f024 4900 	bic.w	r9, r4, #2147483648	; 0x80000000
 8006b18:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8006b1c:	4640      	mov	r0, r8
 8006b1e:	4649      	mov	r1, r9
 8006b20:	f7f9 fea4 	bl	800086c <__aeabi_ddiv>
 8006b24:	4603      	mov	r3, r0
 8006b26:	460c      	mov	r4, r1
 8006b28:	4625      	mov	r5, r4
 8006b2a:	461c      	mov	r4, r3
 8006b2c:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8006b30:	4602      	mov	r2, r0
 8006b32:	460b      	mov	r3, r1
 8006b34:	f7f9 fbba 	bl	80002ac <__adddf3>
 8006b38:	4602      	mov	r2, r0
 8006b3a:	460b      	mov	r3, r1
 8006b3c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006b40:	f7f9 fe94 	bl	800086c <__aeabi_ddiv>
 8006b44:	4602      	mov	r2, r0
 8006b46:	460b      	mov	r3, r1
 8006b48:	4690      	mov	r8, r2
 8006b4a:	4699      	mov	r9, r3
 8006b4c:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8006b50:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006b54:	f7f9 fe8a 	bl	800086c <__aeabi_ddiv>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	460b      	mov	r3, r1
 8006b5c:	f04f 0000 	mov.w	r0, #0
 8006b60:	497b      	ldr	r1, [pc, #492]	; (8006d50 <scaraInitLSPB+0x7a8>)
 8006b62:	f7f9 fba1 	bl	80002a8 <__aeabi_dsub>
 8006b66:	4602      	mov	r2, r0
 8006b68:	460b      	mov	r3, r1
 8006b6a:	4640      	mov	r0, r8
 8006b6c:	4649      	mov	r1, r9
 8006b6e:	f7f9 fd53 	bl	8000618 <__aeabi_dmul>
 8006b72:	4602      	mov	r2, r0
 8006b74:	460b      	mov	r3, r1
 8006b76:	4690      	mov	r8, r2
 8006b78:	4699      	mov	r9, r3
 8006b7a:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8006b7e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006b82:	f7f9 fe73 	bl	800086c <__aeabi_ddiv>
 8006b86:	4602      	mov	r2, r0
 8006b88:	460b      	mov	r3, r1
 8006b8a:	f04f 0000 	mov.w	r0, #0
 8006b8e:	4970      	ldr	r1, [pc, #448]	; (8006d50 <scaraInitLSPB+0x7a8>)
 8006b90:	f7f9 fb8a 	bl	80002a8 <__aeabi_dsub>
 8006b94:	4602      	mov	r2, r0
 8006b96:	460b      	mov	r3, r1
 8006b98:	4640      	mov	r0, r8
 8006b9a:	4649      	mov	r1, r9
 8006b9c:	f7f9 fd3c 	bl	8000618 <__aeabi_dmul>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	460b      	mov	r3, r1
 8006ba4:	4620      	mov	r0, r4
 8006ba6:	4629      	mov	r1, r5
 8006ba8:	f7f9 fb80 	bl	80002ac <__adddf3>
 8006bac:	4603      	mov	r3, r0
 8006bae:	460c      	mov	r4, r1
 8006bb0:	4625      	mov	r5, r4
 8006bb2:	461c      	mov	r4, r3
							+ v_lim/(2*a_design)*(1 - v1/v_lim)*(1 - v1/v_lim);
 8006bb4:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8006bb8:	4602      	mov	r2, r0
 8006bba:	460b      	mov	r3, r1
 8006bbc:	f7f9 fb76 	bl	80002ac <__adddf3>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	460b      	mov	r3, r1
 8006bc4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006bc8:	f7f9 fe50 	bl	800086c <__aeabi_ddiv>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	460b      	mov	r3, r1
 8006bd0:	4690      	mov	r8, r2
 8006bd2:	4699      	mov	r9, r3
 8006bd4:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8006bd8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006bdc:	f7f9 fe46 	bl	800086c <__aeabi_ddiv>
 8006be0:	4602      	mov	r2, r0
 8006be2:	460b      	mov	r3, r1
 8006be4:	f04f 0000 	mov.w	r0, #0
 8006be8:	4959      	ldr	r1, [pc, #356]	; (8006d50 <scaraInitLSPB+0x7a8>)
 8006bea:	f7f9 fb5d 	bl	80002a8 <__aeabi_dsub>
 8006bee:	4602      	mov	r2, r0
 8006bf0:	460b      	mov	r3, r1
 8006bf2:	4640      	mov	r0, r8
 8006bf4:	4649      	mov	r1, r9
 8006bf6:	f7f9 fd0f 	bl	8000618 <__aeabi_dmul>
 8006bfa:	4602      	mov	r2, r0
 8006bfc:	460b      	mov	r3, r1
 8006bfe:	4690      	mov	r8, r2
 8006c00:	4699      	mov	r9, r3
 8006c02:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8006c06:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006c0a:	f7f9 fe2f 	bl	800086c <__aeabi_ddiv>
 8006c0e:	4602      	mov	r2, r0
 8006c10:	460b      	mov	r3, r1
 8006c12:	f04f 0000 	mov.w	r0, #0
 8006c16:	494e      	ldr	r1, [pc, #312]	; (8006d50 <scaraInitLSPB+0x7a8>)
 8006c18:	f7f9 fb46 	bl	80002a8 <__aeabi_dsub>
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	460b      	mov	r3, r1
 8006c20:	4640      	mov	r0, r8
 8006c22:	4649      	mov	r1, r9
 8006c24:	f7f9 fcf8 	bl	8000618 <__aeabi_dmul>
 8006c28:	4602      	mov	r2, r0
 8006c2a:	460b      	mov	r3, r1
			 tf		= fabs(q0 - q1)/v_lim + v_lim/(2*a_design)*(1 - v0/v_lim)*(1 - v0/v_lim)
 8006c2c:	4620      	mov	r0, r4
 8006c2e:	4629      	mov	r1, r5
 8006c30:	f7f9 fb3c 	bl	80002ac <__adddf3>
 8006c34:	4603      	mov	r3, r0
 8006c36:	460c      	mov	r4, r1
 8006c38:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 8006c3c:	e01d      	b.n	8006c7a <scaraInitLSPB+0x6d2>
		 }
	 } else {
		 v_lim	= 0;
 8006c3e:	f04f 0300 	mov.w	r3, #0
 8006c42:	f04f 0400 	mov.w	r4, #0
 8006c46:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
		 ta = tf/2;
 8006c4a:	f04f 0200 	mov.w	r2, #0
 8006c4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006c52:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8006c56:	f7f9 fe09 	bl	800086c <__aeabi_ddiv>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	460c      	mov	r4, r1
 8006c5e:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
		 td = tf/2;
 8006c62:	f04f 0200 	mov.w	r2, #0
 8006c66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006c6a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8006c6e:	f7f9 fdfd 	bl	800086c <__aeabi_ddiv>
 8006c72:	4603      	mov	r3, r0
 8006c74:	460c      	mov	r4, r1
 8006c76:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
	 }

	 no_sample = ceilf(tf / T_SAMPLING); // ceiling
 8006c7a:	a333      	add	r3, pc, #204	; (adr r3, 8006d48 <scaraInitLSPB+0x7a0>)
 8006c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c80:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8006c84:	f7f9 fdf2 	bl	800086c <__aeabi_ddiv>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	460c      	mov	r4, r1
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	4621      	mov	r1, r4
 8006c90:	f7f9 ffba 	bl	8000c08 <__aeabi_d2f>
 8006c94:	4603      	mov	r3, r0
 8006c96:	ee00 3a10 	vmov	s0, r3
 8006c9a:	f012 fcb1 	bl	8019600 <ceilf>
 8006c9e:	eef0 7a40 	vmov.f32	s15, s0
 8006ca2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ca6:	ee17 3a90 	vmov	r3, s15
 8006caa:	637b      	str	r3, [r7, #52]	; 0x34
	 // Init lspb params
	 lspb->dir= dir;
 8006cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cae:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8006cb2:	701a      	strb	r2, [r3, #0]
	 lspb->s0 = q0;
 8006cb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cb6:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8006cba:	e9c2 3402 	strd	r3, r4, [r2, #8]
	 lspb->s1 = q1;
 8006cbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cc0:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8006cc4:	e9c2 3404 	strd	r3, r4, [r2, #16]
	 lspb->Ta = ta;
 8006cc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cca:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8006cce:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	 lspb->Td = td;
 8006cd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cd4:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8006cd8:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	 lspb->Tf = tf;
 8006cdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cde:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8006ce2:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	 lspb->a_design = a_design;
 8006ce6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ce8:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8006cec:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	 lspb->v_design = v_design;
 8006cf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cf2:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8006cf6:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	 lspb->v_lim = v_lim;
 8006cfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cfc:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8006d00:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	 lspb->v0 = v0;
 8006d04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d06:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8006d0a:	e9c2 3406 	strd	r3, r4, [r2, #24]
	 lspb->v1 = v1;
 8006d0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d10:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8006d14:	e9c2 3408 	strd	r3, r4, [r2, #32]
	 lspb->num_of_sampling = no_sample;
 8006d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d1c:	659a      	str	r2, [r3, #88]	; 0x58
	 lspb->total_s = lspb->s1 - lspb->s0;
 8006d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d20:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8006d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d26:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	4623      	mov	r3, r4
 8006d2e:	f7f9 fabb 	bl	80002a8 <__aeabi_dsub>
 8006d32:	4603      	mov	r3, r0
 8006d34:	460c      	mov	r4, r1
 8006d36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d38:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

	 return SCARA_STATUS_OK;
 8006d3c:	2300      	movs	r3, #0
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	37b4      	adds	r7, #180	; 0xb4
 8006d42:	46bd      	mov	sp, r7
 8006d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d48:	40000000 	.word	0x40000000
 8006d4c:	3f847ae1 	.word	0x3f847ae1
 8006d50:	3ff00000 	.word	0x3ff00000
 8006d54:	00000000 	.word	0x00000000
 8006d58:	405c2000 	.word	0x405c2000
 8006d5c:	00000000 	.word	0x00000000
 8006d60:	4052c000 	.word	0x4052c000
 8006d64:	14000000 	.word	0x14000000
 8006d68:	4000f6f0 	.word	0x4000f6f0
 8006d6c:	70000000 	.word	0x70000000
 8006d70:	3ff69e95 	.word	0x3ff69e95
 8006d74:	6b259425 	.word	0x6b259425
 8006d78:	40069b91 	.word	0x40069b91
 8006d7c:	e4321adc 	.word	0xe4321adc
 8006d80:	3ffe24c1 	.word	0x3ffe24c1
 8006d84:	d2f1a9fc 	.word	0xd2f1a9fc
 8006d88:	3f50624d 	.word	0x3f50624d
 8006d8c:	9abcaf48 	.word	0x9abcaf48
 8006d90:	3e7ad7f2 	.word	0x3e7ad7f2
 8006d94:	00000000 	.word	0x00000000

08006d98 <scaraInitScurve>:
SCARA_StatusTypeDef	scaraInitScurve		(Trajectory_Scurve_TypeDef *scurve,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit,
										double v_factor,
										double a_factor) {
 8006d98:	b5b0      	push	{r4, r5, r7, lr}
 8006d9a:	b0ba      	sub	sp, #232	; 0xe8
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	61f8      	str	r0, [r7, #28]
 8006da0:	460b      	mov	r3, r1
 8006da2:	ed87 0b04 	vstr	d0, [r7, #16]
 8006da6:	ed87 1b02 	vstr	d1, [r7, #8]
 8006daa:	ed87 2b00 	vstr	d2, [r7]
 8006dae:	76fb      	strb	r3, [r7, #27]
 8006db0:	4613      	mov	r3, r2
 8006db2:	76bb      	strb	r3, [r7, #26]
	 double v_design, a_design, q0, q1, v0, v1, v_lim, j_max, tm, tc, tf, dir;
	 double v_1, s_1, v_2, s_2, v_3, s_3, v_4, s_4;
	 uint32_t	 no_sample;
	 uint8_t	 no_phases;

	 if ( TRAJECTORY_3D == target) {
 8006db4:	7efb      	ldrb	r3, [r7, #27]
 8006db6:	2b04      	cmp	r3, #4
 8006db8:	d118      	bne.n	8006dec <scaraInitScurve+0x54>
		 v_design = V_DESIGN_3D*v_factor;
 8006dba:	f20f 4320 	addw	r3, pc, #1056	; 0x420
 8006dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006dc6:	f7f9 fc27 	bl	8000618 <__aeabi_dmul>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	460c      	mov	r4, r1
 8006dce:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_3D*a_factor;
 8006dd2:	f20f 4310 	addw	r3, pc, #1040	; 0x410
 8006dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dda:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006dde:	f7f9 fc1b 	bl	8000618 <__aeabi_dmul>
 8006de2:	4603      	mov	r3, r0
 8006de4:	460c      	mov	r4, r1
 8006de6:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8006dea:	e083      	b.n	8006ef4 <scaraInitScurve+0x15c>
	 } else if (TRAJECTORY_ROLL == target) {
 8006dec:	7efb      	ldrb	r3, [r7, #27]
 8006dee:	2b05      	cmp	r3, #5
 8006df0:	d116      	bne.n	8006e20 <scaraInitScurve+0x88>
		 v_design = V_DESIGN_ROLL*v_factor;
 8006df2:	a3fe      	add	r3, pc, #1016	; (adr r3, 80071ec <scaraInitScurve+0x454>)
 8006df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006dfc:	f7f9 fc0c 	bl	8000618 <__aeabi_dmul>
 8006e00:	4603      	mov	r3, r0
 8006e02:	460c      	mov	r4, r1
 8006e04:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_ROLL*a_factor;
 8006e08:	a3fa      	add	r3, pc, #1000	; (adr r3, 80071f4 <scaraInitScurve+0x45c>)
 8006e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e12:	f7f9 fc01 	bl	8000618 <__aeabi_dmul>
 8006e16:	4603      	mov	r3, r0
 8006e18:	460c      	mov	r4, r1
 8006e1a:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8006e1e:	e069      	b.n	8006ef4 <scaraInitScurve+0x15c>
	 } else if (TRAJECTORY_J0 == target) {
 8006e20:	7efb      	ldrb	r3, [r7, #27]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d116      	bne.n	8006e54 <scaraInitScurve+0xbc>
		 v_design = V_DESIGN_J0*v_factor;
 8006e26:	a3f1      	add	r3, pc, #964	; (adr r3, 80071ec <scaraInitScurve+0x454>)
 8006e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e2c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006e30:	f7f9 fbf2 	bl	8000618 <__aeabi_dmul>
 8006e34:	4603      	mov	r3, r0
 8006e36:	460c      	mov	r4, r1
 8006e38:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_J0*a_factor;
 8006e3c:	a3ed      	add	r3, pc, #948	; (adr r3, 80071f4 <scaraInitScurve+0x45c>)
 8006e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e42:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e46:	f7f9 fbe7 	bl	8000618 <__aeabi_dmul>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	460c      	mov	r4, r1
 8006e4e:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8006e52:	e04f      	b.n	8006ef4 <scaraInitScurve+0x15c>
	 } else if (TRAJECTORY_J1 == target) {
 8006e54:	7efb      	ldrb	r3, [r7, #27]
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	d116      	bne.n	8006e88 <scaraInitScurve+0xf0>
		 v_design = V_DESIGN_J1*v_factor;
 8006e5a:	a3e4      	add	r3, pc, #912	; (adr r3, 80071ec <scaraInitScurve+0x454>)
 8006e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e60:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006e64:	f7f9 fbd8 	bl	8000618 <__aeabi_dmul>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	460c      	mov	r4, r1
 8006e6c:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_J1*a_factor;
 8006e70:	a3e0      	add	r3, pc, #896	; (adr r3, 80071f4 <scaraInitScurve+0x45c>)
 8006e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e76:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e7a:	f7f9 fbcd 	bl	8000618 <__aeabi_dmul>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	460c      	mov	r4, r1
 8006e82:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8006e86:	e035      	b.n	8006ef4 <scaraInitScurve+0x15c>
	 } else if (TRAJECTORY_J2 == target) {
 8006e88:	7efb      	ldrb	r3, [r7, #27]
 8006e8a:	2b02      	cmp	r3, #2
 8006e8c:	d116      	bne.n	8006ebc <scaraInitScurve+0x124>
		 v_design = V_DESIGN_J2*v_factor;
 8006e8e:	a3d3      	add	r3, pc, #844	; (adr r3, 80071dc <scaraInitScurve+0x444>)
 8006e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e94:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006e98:	f7f9 fbbe 	bl	8000618 <__aeabi_dmul>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	460c      	mov	r4, r1
 8006ea0:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_J2*a_factor;
 8006ea4:	a3cf      	add	r3, pc, #828	; (adr r3, 80071e4 <scaraInitScurve+0x44c>)
 8006ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eaa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006eae:	f7f9 fbb3 	bl	8000618 <__aeabi_dmul>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	460c      	mov	r4, r1
 8006eb6:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8006eba:	e01b      	b.n	8006ef4 <scaraInitScurve+0x15c>
	 } else if (TRAJECTORY_J3 == target) {
 8006ebc:	7efb      	ldrb	r3, [r7, #27]
 8006ebe:	2b03      	cmp	r3, #3
 8006ec0:	d116      	bne.n	8006ef0 <scaraInitScurve+0x158>
		 v_design = V_DESIGN_J3*v_factor;
 8006ec2:	a3ce      	add	r3, pc, #824	; (adr r3, 80071fc <scaraInitScurve+0x464>)
 8006ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006ecc:	f7f9 fba4 	bl	8000618 <__aeabi_dmul>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	460c      	mov	r4, r1
 8006ed4:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_J3*a_factor;
 8006ed8:	a3ca      	add	r3, pc, #808	; (adr r3, 8007204 <scaraInitScurve+0x46c>)
 8006eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ede:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ee2:	f7f9 fb99 	bl	8000618 <__aeabi_dmul>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	460c      	mov	r4, r1
 8006eea:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8006eee:	e001      	b.n	8006ef4 <scaraInitScurve+0x15c>
	 } else {
		 return SCARA_STATUS_ERROR_PARA;
 8006ef0:	2306      	movs	r3, #6
 8006ef2:	e2d4      	b.n	800749e <scaraInitScurve+0x706>
	 }

	 v0 = 0;
 8006ef4:	f04f 0300 	mov.w	r3, #0
 8006ef8:	f04f 0400 	mov.w	r4, #0
 8006efc:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
	 v1 = 0;
 8006f00:	f04f 0300 	mov.w	r3, #0
 8006f04:	f04f 0400 	mov.w	r4, #0
 8006f08:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
	 q0 = 0;
 8006f0c:	f04f 0300 	mov.w	r3, #0
 8006f10:	f04f 0400 	mov.w	r4, #0
 8006f14:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	 q1 = total_s;
 8006f18:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8006f1c:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0

	 if ( total_s < 0) {
 8006f20:	f04f 0200 	mov.w	r2, #0
 8006f24:	f04f 0300 	mov.w	r3, #0
 8006f28:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006f2c:	f7f9 fde6 	bl	8000afc <__aeabi_dcmplt>
 8006f30:	4603      	mov	r3, r0
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d015      	beq.n	8006f62 <scaraInitScurve+0x1ca>
		 dir = -1;
 8006f36:	f04f 0300 	mov.w	r3, #0
 8006f3a:	4ca5      	ldr	r4, [pc, #660]	; (80071d0 <scaraInitScurve+0x438>)
 8006f3c:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
		 q1 = -q1;
 8006f40:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006f44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006f48:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f4c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006f50:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		 total_s = -total_s;
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	613b      	str	r3, [r7, #16]
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006f5e:	617b      	str	r3, [r7, #20]
 8006f60:	e004      	b.n	8006f6c <scaraInitScurve+0x1d4>
	 } else {
		 dir = 1;
 8006f62:	f04f 0300 	mov.w	r3, #0
 8006f66:	4c9b      	ldr	r4, [pc, #620]	; (80071d4 <scaraInitScurve+0x43c>)
 8006f68:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
	 }


	 if (DUTY_MODE_INIT_QVT == modeinit) {
 8006f6c:	7ebb      	ldrb	r3, [r7, #26]
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	f040 8082 	bne.w	8007078 <scaraInitScurve+0x2e0>
		 double t_upper, v_upper, a_upper;
		 tf = scurve->Tf;
 8006f74:	69fb      	ldr	r3, [r7, #28]
 8006f76:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8006f7a:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 // Avoid division by 0
		 if (tf > 0.001) {
 8006f7e:	a390      	add	r3, pc, #576	; (adr r3, 80071c0 <scaraInitScurve+0x428>)
 8006f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f84:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8006f88:	f7f9 fdd6 	bl	8000b38 <__aeabi_dcmpgt>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d066      	beq.n	8007060 <scaraInitScurve+0x2c8>
			 // Assume 4 phase
			 t_upper = tf / 4;
 8006f92:	f04f 0200 	mov.w	r2, #0
 8006f96:	4b90      	ldr	r3, [pc, #576]	; (80071d8 <scaraInitScurve+0x440>)
 8006f98:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8006f9c:	f7f9 fc66 	bl	800086c <__aeabi_ddiv>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	460c      	mov	r4, r1
 8006fa4:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
			 v_upper = total_s / (2*t_upper);
 8006fa8:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8006fac:	4602      	mov	r2, r0
 8006fae:	460b      	mov	r3, r1
 8006fb0:	f7f9 f97c 	bl	80002ac <__adddf3>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	460c      	mov	r4, r1
 8006fb8:	461a      	mov	r2, r3
 8006fba:	4623      	mov	r3, r4
 8006fbc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006fc0:	f7f9 fc54 	bl	800086c <__aeabi_ddiv>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	460c      	mov	r4, r1
 8006fc8:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
			 // Check 4 phase --> 5 phase
			 if ( v_upper > v_design) {
 8006fcc:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8006fd0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8006fd4:	f7f9 fdb0 	bl	8000b38 <__aeabi_dcmpgt>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d022      	beq.n	8007024 <scaraInitScurve+0x28c>
				 t_upper = tf/2 - total_s/(2*v_design);
 8006fde:	f04f 0200 	mov.w	r2, #0
 8006fe2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006fe6:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8006fea:	f7f9 fc3f 	bl	800086c <__aeabi_ddiv>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	460c      	mov	r4, r1
 8006ff2:	4625      	mov	r5, r4
 8006ff4:	461c      	mov	r4, r3
 8006ff6:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	460b      	mov	r3, r1
 8006ffe:	f7f9 f955 	bl	80002ac <__adddf3>
 8007002:	4602      	mov	r2, r0
 8007004:	460b      	mov	r3, r1
 8007006:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800700a:	f7f9 fc2f 	bl	800086c <__aeabi_ddiv>
 800700e:	4602      	mov	r2, r0
 8007010:	460b      	mov	r3, r1
 8007012:	4620      	mov	r0, r4
 8007014:	4629      	mov	r1, r5
 8007016:	f7f9 f947 	bl	80002a8 <__aeabi_dsub>
 800701a:	4603      	mov	r3, r0
 800701c:	460c      	mov	r4, r1
 800701e:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
 8007022:	e003      	b.n	800702c <scaraInitScurve+0x294>
			 } else {
				 v_design = v_upper;
 8007024:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8007028:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
			 }
			 a_upper  = v_design / t_upper;
 800702c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8007030:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007034:	f7f9 fc1a 	bl	800086c <__aeabi_ddiv>
 8007038:	4603      	mov	r3, r0
 800703a:	460c      	mov	r4, r1
 800703c:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
			 if ( a_upper > a_design) {
 8007040:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8007044:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007048:	f7f9 fd76 	bl	8000b38 <__aeabi_dcmpgt>
 800704c:	4603      	mov	r3, r0
 800704e:	2b00      	cmp	r3, #0
 8007050:	d001      	beq.n	8007056 <scaraInitScurve+0x2be>
				 return SCARA_STATUS_ERROR_OVER_ACCEL;
 8007052:	230a      	movs	r3, #10
 8007054:	e223      	b.n	800749e <scaraInitScurve+0x706>
			 } else {
				 a_design = a_upper;
 8007056:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 800705a:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 800705e:	e00b      	b.n	8007078 <scaraInitScurve+0x2e0>
			 }
		 } else {
			 v_design = 0;
 8007060:	f04f 0300 	mov.w	r3, #0
 8007064:	f04f 0400 	mov.w	r4, #0
 8007068:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
			 a_design = 0;
 800706c:	f04f 0300 	mov.w	r3, #0
 8007070:	f04f 0400 	mov.w	r4, #0
 8007074:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
		 }
	 }
	 // Avoid division by 0
	 if (a_design > 0.0000001 && v_design > 0.0000001) {
 8007078:	a353      	add	r3, pc, #332	; (adr r3, 80071c8 <scaraInitScurve+0x430>)
 800707a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800707e:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8007082:	f7f9 fd59 	bl	8000b38 <__aeabi_dcmpgt>
 8007086:	4603      	mov	r3, r0
 8007088:	2b00      	cmp	r3, #0
 800708a:	f000 80bf 	beq.w	800720c <scaraInitScurve+0x474>
 800708e:	a34e      	add	r3, pc, #312	; (adr r3, 80071c8 <scaraInitScurve+0x430>)
 8007090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007094:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007098:	f7f9 fd4e 	bl	8000b38 <__aeabi_dcmpgt>
 800709c:	4603      	mov	r3, r0
 800709e:	2b00      	cmp	r3, #0
 80070a0:	f000 80b4 	beq.w	800720c <scaraInitScurve+0x474>
		 no_phases = 5;
 80070a4:	2305      	movs	r3, #5
 80070a6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		 tm = v_design/a_design;
 80070aa:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 80070ae:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80070b2:	f7f9 fbdb 	bl	800086c <__aeabi_ddiv>
 80070b6:	4603      	mov	r3, r0
 80070b8:	460c      	mov	r4, r1
 80070ba:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		 tc = total_s/v_design - 2*tm;
 80070be:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 80070c2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80070c6:	f7f9 fbd1 	bl	800086c <__aeabi_ddiv>
 80070ca:	4603      	mov	r3, r0
 80070cc:	460c      	mov	r4, r1
 80070ce:	4625      	mov	r5, r4
 80070d0:	461c      	mov	r4, r3
 80070d2:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80070d6:	4602      	mov	r2, r0
 80070d8:	460b      	mov	r3, r1
 80070da:	f7f9 f8e7 	bl	80002ac <__adddf3>
 80070de:	4602      	mov	r2, r0
 80070e0:	460b      	mov	r3, r1
 80070e2:	4620      	mov	r0, r4
 80070e4:	4629      	mov	r1, r5
 80070e6:	f7f9 f8df 	bl	80002a8 <__aeabi_dsub>
 80070ea:	4603      	mov	r3, r0
 80070ec:	460c      	mov	r4, r1
 80070ee:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
		 // Check condition 5 phase ---> 4 phase
		 if (tc < 0.0) {
 80070f2:	f04f 0200 	mov.w	r2, #0
 80070f6:	f04f 0300 	mov.w	r3, #0
 80070fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80070fe:	f7f9 fcfd 	bl	8000afc <__aeabi_dcmplt>
 8007102:	4603      	mov	r3, r0
 8007104:	2b00      	cmp	r3, #0
 8007106:	d022      	beq.n	800714e <scaraInitScurve+0x3b6>
			 tc = 0;
 8007108:	f04f 0300 	mov.w	r3, #0
 800710c:	f04f 0400 	mov.w	r4, #0
 8007110:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
			 no_phases = 4;
 8007114:	2304      	movs	r3, #4
 8007116:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			 tm = sqrt(total_s/(2*a_design));
 800711a:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800711e:	4602      	mov	r2, r0
 8007120:	460b      	mov	r3, r1
 8007122:	f7f9 f8c3 	bl	80002ac <__adddf3>
 8007126:	4603      	mov	r3, r0
 8007128:	460c      	mov	r4, r1
 800712a:	461a      	mov	r2, r3
 800712c:	4623      	mov	r3, r4
 800712e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007132:	f7f9 fb9b 	bl	800086c <__aeabi_ddiv>
 8007136:	4603      	mov	r3, r0
 8007138:	460c      	mov	r4, r1
 800713a:	ec44 3b17 	vmov	d7, r3, r4
 800713e:	eeb0 0a47 	vmov.f32	s0, s14
 8007142:	eef0 0a67 	vmov.f32	s1, s15
 8007146:	f012 fa9d 	bl	8019684 <sqrt>
 800714a:	ed87 0b2e 	vstr	d0, [r7, #184]	; 0xb8
		 }
		 if (tm < 0.001) {
 800714e:	a31c      	add	r3, pc, #112	; (adr r3, 80071c0 <scaraInitScurve+0x428>)
 8007150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007154:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8007158:	f7f9 fcd0 	bl	8000afc <__aeabi_dcmplt>
 800715c:	4603      	mov	r3, r0
 800715e:	2b00      	cmp	r3, #0
 8007160:	d006      	beq.n	8007170 <scaraInitScurve+0x3d8>
			 j_max = 0;
 8007162:	f04f 0300 	mov.w	r3, #0
 8007166:	f04f 0400 	mov.w	r4, #0
 800716a:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
 800716e:	e009      	b.n	8007184 <scaraInitScurve+0x3ec>
		 } else {
			 j_max = a_design/tm;
 8007170:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8007174:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8007178:	f7f9 fb78 	bl	800086c <__aeabi_ddiv>
 800717c:	4603      	mov	r3, r0
 800717e:	460c      	mov	r4, r1
 8007180:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
		 }
		 v_lim = a_design*tm;
 8007184:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8007188:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800718c:	f7f9 fa44 	bl	8000618 <__aeabi_dmul>
 8007190:	4603      	mov	r3, r0
 8007192:	460c      	mov	r4, r1
 8007194:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
		 tf    = 4*tm + tc;
 8007198:	f04f 0200 	mov.w	r2, #0
 800719c:	4b0e      	ldr	r3, [pc, #56]	; (80071d8 <scaraInitScurve+0x440>)
 800719e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80071a2:	f7f9 fa39 	bl	8000618 <__aeabi_dmul>
 80071a6:	4603      	mov	r3, r0
 80071a8:	460c      	mov	r4, r1
 80071aa:	461a      	mov	r2, r3
 80071ac:	4623      	mov	r3, r4
 80071ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80071b2:	f7f9 f87b 	bl	80002ac <__adddf3>
 80071b6:	4603      	mov	r3, r0
 80071b8:	460c      	mov	r4, r1
 80071ba:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
 80071be:	e045      	b.n	800724c <scaraInitScurve+0x4b4>
 80071c0:	d2f1a9fc 	.word	0xd2f1a9fc
 80071c4:	3f50624d 	.word	0x3f50624d
 80071c8:	9abcaf48 	.word	0x9abcaf48
 80071cc:	3e7ad7f2 	.word	0x3e7ad7f2
 80071d0:	bff00000 	.word	0xbff00000
 80071d4:	3ff00000 	.word	0x3ff00000
 80071d8:	40100000 	.word	0x40100000
 80071dc:	00000000 	.word	0x00000000
 80071e0:	405c2000 	.word	0x405c2000
 80071e4:	00000000 	.word	0x00000000
 80071e8:	4052c000 	.word	0x4052c000
 80071ec:	14000000 	.word	0x14000000
 80071f0:	4000f6f0 	.word	0x4000f6f0
 80071f4:	70000000 	.word	0x70000000
 80071f8:	3ff69e95 	.word	0x3ff69e95
 80071fc:	6b259425 	.word	0x6b259425
 8007200:	40069b91 	.word	0x40069b91
 8007204:	e4321adc 	.word	0xe4321adc
 8007208:	3ffe24c1 	.word	0x3ffe24c1
	 } else {
		 j_max = 0;
 800720c:	f04f 0300 	mov.w	r3, #0
 8007210:	f04f 0400 	mov.w	r4, #0
 8007214:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
		 tc = 0;
 8007218:	f04f 0300 	mov.w	r3, #0
 800721c:	f04f 0400 	mov.w	r4, #0
 8007220:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
		 no_phases = 4;
 8007224:	2304      	movs	r3, #4
 8007226:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		 tm = tf / 4;
 800722a:	f04f 0200 	mov.w	r2, #0
 800722e:	4ba0      	ldr	r3, [pc, #640]	; (80074b0 <scaraInitScurve+0x718>)
 8007230:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8007234:	f7f9 fb1a 	bl	800086c <__aeabi_ddiv>
 8007238:	4603      	mov	r3, r0
 800723a:	460c      	mov	r4, r1
 800723c:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		 v_lim = 0;
 8007240:	f04f 0300 	mov.w	r3, #0
 8007244:	f04f 0400 	mov.w	r4, #0
 8007248:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
	 }

	 no_sample = ceil(tf / T_SAMPLING);
 800724c:	a396      	add	r3, pc, #600	; (adr r3, 80074a8 <scaraInitScurve+0x710>)
 800724e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007252:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8007256:	f7f9 fb09 	bl	800086c <__aeabi_ddiv>
 800725a:	4603      	mov	r3, r0
 800725c:	460c      	mov	r4, r1
 800725e:	ec44 3b17 	vmov	d7, r3, r4
 8007262:	eeb0 0a47 	vmov.f32	s0, s14
 8007266:	eef0 0a67 	vmov.f32	s1, s15
 800726a:	f012 f871 	bl	8019350 <ceil>
 800726e:	ec54 3b10 	vmov	r3, r4, d0
 8007272:	4618      	mov	r0, r3
 8007274:	4621      	mov	r1, r4
 8007276:	f7f9 fca7 	bl	8000bc8 <__aeabi_d2uiz>
 800727a:	4603      	mov	r3, r0
 800727c:	667b      	str	r3, [r7, #100]	; 0x64
	 v_1 = 0.5*j_max*tm*tm;
 800727e:	f04f 0200 	mov.w	r2, #0
 8007282:	4b8c      	ldr	r3, [pc, #560]	; (80074b4 <scaraInitScurve+0x71c>)
 8007284:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8007288:	f7f9 f9c6 	bl	8000618 <__aeabi_dmul>
 800728c:	4603      	mov	r3, r0
 800728e:	460c      	mov	r4, r1
 8007290:	4618      	mov	r0, r3
 8007292:	4621      	mov	r1, r4
 8007294:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8007298:	f7f9 f9be 	bl	8000618 <__aeabi_dmul>
 800729c:	4603      	mov	r3, r0
 800729e:	460c      	mov	r4, r1
 80072a0:	461a      	mov	r2, r3
 80072a2:	4623      	mov	r3, r4
 80072a4:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80072a8:	f7f9 f9b6 	bl	8000618 <__aeabi_dmul>
 80072ac:	4603      	mov	r3, r0
 80072ae:	460c      	mov	r4, r1
 80072b0:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	 s_1 = j_max*tm*tm*tm/6;
 80072b4:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80072b8:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80072bc:	f7f9 f9ac 	bl	8000618 <__aeabi_dmul>
 80072c0:	4603      	mov	r3, r0
 80072c2:	460c      	mov	r4, r1
 80072c4:	4618      	mov	r0, r3
 80072c6:	4621      	mov	r1, r4
 80072c8:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80072cc:	f7f9 f9a4 	bl	8000618 <__aeabi_dmul>
 80072d0:	4603      	mov	r3, r0
 80072d2:	460c      	mov	r4, r1
 80072d4:	4618      	mov	r0, r3
 80072d6:	4621      	mov	r1, r4
 80072d8:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80072dc:	f7f9 f99c 	bl	8000618 <__aeabi_dmul>
 80072e0:	4603      	mov	r3, r0
 80072e2:	460c      	mov	r4, r1
 80072e4:	4618      	mov	r0, r3
 80072e6:	4621      	mov	r1, r4
 80072e8:	f04f 0200 	mov.w	r2, #0
 80072ec:	4b72      	ldr	r3, [pc, #456]	; (80074b8 <scaraInitScurve+0x720>)
 80072ee:	f7f9 fabd 	bl	800086c <__aeabi_ddiv>
 80072f2:	4603      	mov	r3, r0
 80072f4:	460c      	mov	r4, r1
 80072f6:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	 v_2 = j_max*tm*tm;
 80072fa:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80072fe:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8007302:	f7f9 f989 	bl	8000618 <__aeabi_dmul>
 8007306:	4603      	mov	r3, r0
 8007308:	460c      	mov	r4, r1
 800730a:	461a      	mov	r2, r3
 800730c:	4623      	mov	r3, r4
 800730e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8007312:	f7f9 f981 	bl	8000618 <__aeabi_dmul>
 8007316:	4603      	mov	r3, r0
 8007318:	460c      	mov	r4, r1
 800731a:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
	 s_2 = v_2*tm;
 800731e:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8007322:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007326:	f7f9 f977 	bl	8000618 <__aeabi_dmul>
 800732a:	4603      	mov	r3, r0
 800732c:	460c      	mov	r4, r1
 800732e:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
	 v_3 = v_2;
 8007332:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8007336:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	 s_3 = s_2 + v_2*tc;
 800733a:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 800733e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007342:	f7f9 f969 	bl	8000618 <__aeabi_dmul>
 8007346:	4603      	mov	r3, r0
 8007348:	460c      	mov	r4, r1
 800734a:	461a      	mov	r2, r3
 800734c:	4623      	mov	r3, r4
 800734e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007352:	f7f8 ffab 	bl	80002ac <__adddf3>
 8007356:	4603      	mov	r3, r0
 8007358:	460c      	mov	r4, r1
 800735a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	 v_4 = v_1;
 800735e:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8007362:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	 s_4 = s_3 + s_2 - s_1;
 8007366:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800736a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800736e:	f7f8 ff9d 	bl	80002ac <__adddf3>
 8007372:	4603      	mov	r3, r0
 8007374:	460c      	mov	r4, r1
 8007376:	4618      	mov	r0, r3
 8007378:	4621      	mov	r1, r4
 800737a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800737e:	f7f8 ff93 	bl	80002a8 <__aeabi_dsub>
 8007382:	4603      	mov	r3, r0
 8007384:	460c      	mov	r4, r1
 8007386:	e9c7 3408 	strd	r3, r4, [r7, #32]

	 scurve->Tc = tc;
 800738a:	69fa      	ldr	r2, [r7, #28]
 800738c:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8007390:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	 scurve->Tf = tf;
 8007394:	69fa      	ldr	r2, [r7, #28]
 8007396:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 800739a:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	 scurve->Tm = tm;
 800739e:	69fa      	ldr	r2, [r7, #28]
 80073a0:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 80073a4:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	 scurve->a_design = a_design;
 80073a8:	69fa      	ldr	r2, [r7, #28]
 80073aa:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 80073ae:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	 scurve->v_design = v_design;
 80073b2:	69fa      	ldr	r2, [r7, #28]
 80073b4:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 80073b8:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	 scurve->v_lim = v_lim;
 80073bc:	69fa      	ldr	r2, [r7, #28]
 80073be:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 80073c2:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	 scurve->v0 = v0;
 80073c6:	69fa      	ldr	r2, [r7, #28]
 80073c8:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 80073cc:	e9c2 3406 	strd	r3, r4, [r2, #24]
	 scurve->v1 = v1;
 80073d0:	69fa      	ldr	r2, [r7, #28]
 80073d2:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 80073d6:	e9c2 3408 	strd	r3, r4, [r2, #32]
	 scurve->j_max = j_max;
 80073da:	69fa      	ldr	r2, [r7, #28]
 80073dc:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 80073e0:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	 scurve->s0   = q0;
 80073e4:	69fa      	ldr	r2, [r7, #28]
 80073e6:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80073ea:	e9c2 3402 	strd	r3, r4, [r2, #8]
	 scurve->s1   = q1;
 80073ee:	69fa      	ldr	r2, [r7, #28]
 80073f0:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 80073f4:	e9c2 3404 	strd	r3, r4, [r2, #16]
	 scurve->num_of_phase = no_phases;
 80073f8:	69fb      	ldr	r3, [r7, #28]
 80073fa:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 80073fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	 scurve->num_of_sampling = no_sample;
 8007402:	69fb      	ldr	r3, [r7, #28]
 8007404:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007406:	669a      	str	r2, [r3, #104]	; 0x68
	 scurve->total_s = total_s;
 8007408:	69fa      	ldr	r2, [r7, #28]
 800740a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800740e:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	 scurve->dir = dir;
 8007412:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8007416:	f7f9 fbaf 	bl	8000b78 <__aeabi_d2iz>
 800741a:	4603      	mov	r3, r0
 800741c:	b25a      	sxtb	r2, r3
 800741e:	69fb      	ldr	r3, [r7, #28]
 8007420:	701a      	strb	r2, [r3, #0]

	 scurve->a_current = 0;
 8007422:	69fa      	ldr	r2, [r7, #28]
 8007424:	f04f 0300 	mov.w	r3, #0
 8007428:	f04f 0400 	mov.w	r4, #0
 800742c:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
	 scurve->v_current = 0;
 8007430:	69fa      	ldr	r2, [r7, #28]
 8007432:	f04f 0300 	mov.w	r3, #0
 8007436:	f04f 0400 	mov.w	r4, #0
 800743a:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
	 scurve->s_current = 0;
 800743e:	69fa      	ldr	r2, [r7, #28]
 8007440:	f04f 0300 	mov.w	r3, #0
 8007444:	f04f 0400 	mov.w	r4, #0
 8007448:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
	 scurve->v_1 = v_1;
 800744c:	69fa      	ldr	r2, [r7, #28]
 800744e:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8007452:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	 scurve->v_2 = v_2;
 8007456:	69fa      	ldr	r2, [r7, #28]
 8007458:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800745c:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
	 scurve->v_3 = v_3;
 8007460:	69fa      	ldr	r2, [r7, #28]
 8007462:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8007466:	e9c2 3426 	strd	r3, r4, [r2, #152]	; 0x98
	 scurve->v_4 = v_4;
 800746a:	69fa      	ldr	r2, [r7, #28]
 800746c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8007470:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
	 scurve->s_1 = s_1;
 8007474:	69fa      	ldr	r2, [r7, #28]
 8007476:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800747a:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
	 scurve->s_2 = s_2;
 800747e:	69fa      	ldr	r2, [r7, #28]
 8007480:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8007484:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
	 scurve->s_3 = s_3;
 8007488:	69fa      	ldr	r2, [r7, #28]
 800748a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800748e:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0
	 scurve->s_4 = s_4;
 8007492:	69fa      	ldr	r2, [r7, #28]
 8007494:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8007498:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0

	 return SCARA_STATUS_OK;
 800749c:	2300      	movs	r3, #0
}
 800749e:	4618      	mov	r0, r3
 80074a0:	37e8      	adds	r7, #232	; 0xe8
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bdb0      	pop	{r4, r5, r7, pc}
 80074a6:	bf00      	nop
 80074a8:	40000000 	.word	0x40000000
 80074ac:	3f847ae1 	.word	0x3f847ae1
 80074b0:	40100000 	.word	0x40100000
 80074b4:	3fe00000 	.word	0x3fe00000
 80074b8:	40180000 	.word	0x40180000

080074bc <scaraFlowDuty>:

/* Compute new x, y , z, theta1, theta2 , d3, theta4 corresponding to time */
SCARA_StatusTypeDef	scaraFlowDuty		(double time,
										SCARA_PositionTypeDef *pos_Next ,
										SCARA_PositionTypeDef pos_Current) {
 80074bc:	b082      	sub	sp, #8
 80074be:	b5b0      	push	{r4, r5, r7, lr}
 80074c0:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80074c4:	af2c      	add	r7, sp, #176	; 0xb0
 80074c6:	f107 0108 	add.w	r1, r7, #8
 80074ca:	ed81 0b00 	vstr	d0, [r1]
 80074ce:	1d39      	adds	r1, r7, #4
 80074d0:	6008      	str	r0, [r1, #0]
 80074d2:	f507 71b4 	add.w	r1, r7, #360	; 0x168
 80074d6:	e881 000c 	stmia.w	r1, {r2, r3}
	SCARA_StatusTypeDef status1, status2, status3, status4;
	SCARA_PositionTypeDef	positionCompute;
	// Update time
	positionCompute.t = time;
 80074da:	f107 0210 	add.w	r2, r7, #16
 80074de:	f107 0308 	add.w	r3, r7, #8
 80074e2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80074e6:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	/*---- Task space ----*/
	if ( DUTY_SPACE_TASK == myDUTY.space_type) {
 80074ea:	4b92      	ldr	r3, [pc, #584]	; (8007734 <scaraFlowDuty+0x278>)
 80074ec:	781b      	ldrb	r3, [r3, #0]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	f040 812e 	bne.w	8007750 <scaraFlowDuty+0x294>
		double s, angle, x, y, z, v, v_angle;
		int8_t	dir_roll;
		//---Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.task.trajectory_3d.trajectory_type) {
 80074f4:	4b8f      	ldr	r3, [pc, #572]	; (8007734 <scaraFlowDuty+0x278>)
 80074f6:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d12d      	bne.n	800755a <scaraFlowDuty+0x9e>
			status1 = scaraFlowLSPB(&(myDUTY.task.trajectory_3d.lspb), time);
 80074fe:	f107 0308 	add.w	r3, r7, #8
 8007502:	ed93 0b00 	vldr	d0, [r3]
 8007506:	488c      	ldr	r0, [pc, #560]	; (8007738 <scaraFlowDuty+0x27c>)
 8007508:	f000 fc46 	bl	8007d98 <scaraFlowLSPB>
 800750c:	4603      	mov	r3, r0
 800750e:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
			status2 = scaraFlowLSPB(&(myDUTY.task.trajectory_roll.lspb), time);
 8007512:	f107 0308 	add.w	r3, r7, #8
 8007516:	ed93 0b00 	vldr	d0, [r3]
 800751a:	4888      	ldr	r0, [pc, #544]	; (800773c <scaraFlowDuty+0x280>)
 800751c:	f000 fc3c 	bl	8007d98 <scaraFlowLSPB>
 8007520:	4603      	mov	r3, r0
 8007522:	f887 3156 	strb.w	r3, [r7, #342]	; 0x156
			s = myDUTY.task.trajectory_3d.lspb.s_current;
 8007526:	4b83      	ldr	r3, [pc, #524]	; (8007734 <scaraFlowDuty+0x278>)
 8007528:	e9d3 3464 	ldrd	r3, r4, [r3, #400]	; 0x190
 800752c:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			v = myDUTY.task.trajectory_3d.lspb.v_current;
 8007530:	4b80      	ldr	r3, [pc, #512]	; (8007734 <scaraFlowDuty+0x278>)
 8007532:	e9d3 3462 	ldrd	r3, r4, [r3, #392]	; 0x188
 8007536:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
			angle = myDUTY.task.trajectory_roll.lspb.s_current;
 800753a:	4b7e      	ldr	r3, [pc, #504]	; (8007734 <scaraFlowDuty+0x278>)
 800753c:	e9d3 34ba 	ldrd	r3, r4, [r3, #744]	; 0x2e8
 8007540:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			v_angle = myDUTY.task.trajectory_roll.lspb.v_current;
 8007544:	4b7b      	ldr	r3, [pc, #492]	; (8007734 <scaraFlowDuty+0x278>)
 8007546:	e9d3 34b8 	ldrd	r3, r4, [r3, #736]	; 0x2e0
 800754a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
			dir_roll = myDUTY.task.trajectory_roll.lspb.dir;
 800754e:	4b79      	ldr	r3, [pc, #484]	; (8007734 <scaraFlowDuty+0x278>)
 8007550:	f893 3270 	ldrb.w	r3, [r3, #624]	; 0x270
 8007554:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8007558:	e034      	b.n	80075c4 <scaraFlowDuty+0x108>
			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == myDUTY.task.trajectory_3d.trajectory_type) {
 800755a:	4b76      	ldr	r3, [pc, #472]	; (8007734 <scaraFlowDuty+0x278>)
 800755c:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8007560:	2b01      	cmp	r3, #1
 8007562:	d12d      	bne.n	80075c0 <scaraFlowDuty+0x104>
			status1 = scaraFLowScurve(&(myDUTY.task.trajectory_3d.scurve), time);
 8007564:	f107 0308 	add.w	r3, r7, #8
 8007568:	ed93 0b00 	vldr	d0, [r3]
 800756c:	4874      	ldr	r0, [pc, #464]	; (8007740 <scaraFlowDuty+0x284>)
 800756e:	f000 fdbf 	bl	80080f0 <scaraFLowScurve>
 8007572:	4603      	mov	r3, r0
 8007574:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
			status2 = scaraFLowScurve(&(myDUTY.task.trajectory_roll.scurve), time);
 8007578:	f107 0308 	add.w	r3, r7, #8
 800757c:	ed93 0b00 	vldr	d0, [r3]
 8007580:	4870      	ldr	r0, [pc, #448]	; (8007744 <scaraFlowDuty+0x288>)
 8007582:	f000 fdb5 	bl	80080f0 <scaraFLowScurve>
 8007586:	4603      	mov	r3, r0
 8007588:	f887 3156 	strb.w	r3, [r7, #342]	; 0x156
			s = myDUTY.task.trajectory_3d.scurve.s_current;
 800758c:	4b69      	ldr	r3, [pc, #420]	; (8007734 <scaraFlowDuty+0x278>)
 800758e:	e9d3 3498 	ldrd	r3, r4, [r3, #608]	; 0x260
 8007592:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			v = myDUTY.task.trajectory_3d.scurve.v_current;
 8007596:	4b67      	ldr	r3, [pc, #412]	; (8007734 <scaraFlowDuty+0x278>)
 8007598:	e9d3 3496 	ldrd	r3, r4, [r3, #600]	; 0x258
 800759c:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
			angle = myDUTY.task.trajectory_roll.scurve.s_current;
 80075a0:	4b64      	ldr	r3, [pc, #400]	; (8007734 <scaraFlowDuty+0x278>)
 80075a2:	e9d3 34ee 	ldrd	r3, r4, [r3, #952]	; 0x3b8
 80075a6:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			v_angle = myDUTY.task.trajectory_roll.scurve.v_current;
 80075aa:	4b62      	ldr	r3, [pc, #392]	; (8007734 <scaraFlowDuty+0x278>)
 80075ac:	e9d3 34ec 	ldrd	r3, r4, [r3, #944]	; 0x3b0
 80075b0:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
			dir_roll = myDUTY.task.trajectory_roll.scurve.dir;
 80075b4:	4b5f      	ldr	r3, [pc, #380]	; (8007734 <scaraFlowDuty+0x278>)
 80075b6:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
 80075ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 80075be:	e001      	b.n	80075c4 <scaraFlowDuty+0x108>
		} else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 80075c0:	2305      	movs	r3, #5
 80075c2:	e2ce      	b.n	8007b62 <scaraFlowDuty+0x6a6>
		}

		if ( SCARA_STATUS_OK != status1) {
 80075c4:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d002      	beq.n	80075d2 <scaraFlowDuty+0x116>
			return status1;
 80075cc:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 80075d0:	e2c7      	b.n	8007b62 <scaraFlowDuty+0x6a6>
		}
		if ( SCARA_STATUS_OK != status2) {
 80075d2:	f897 3156 	ldrb.w	r3, [r7, #342]	; 0x156
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d002      	beq.n	80075e0 <scaraFlowDuty+0x124>
			return status2;
 80075da:	f897 3156 	ldrb.w	r3, [r7, #342]	; 0x156
 80075de:	e2c0      	b.n	8007b62 <scaraFlowDuty+0x6a6>
		}

		//---Path flowing
			// Straight line
		if( DUTY_PATH_LINE == myDUTY.task.path.path_type) {
 80075e0:	4b54      	ldr	r3, [pc, #336]	; (8007734 <scaraFlowDuty+0x278>)
 80075e2:	7a1b      	ldrb	r3, [r3, #8]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d117      	bne.n	8007618 <scaraFlowDuty+0x15c>
			status1 = scaraFlowLine(&(myDUTY.task.path.line), s);
 80075e8:	ed97 0b52 	vldr	d0, [r7, #328]	; 0x148
 80075ec:	4856      	ldr	r0, [pc, #344]	; (8007748 <scaraFlowDuty+0x28c>)
 80075ee:	f000 fac3 	bl	8007b78 <scaraFlowLine>
 80075f2:	4603      	mov	r3, r0
 80075f4:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
			x = myDUTY.task.path.line.x_current;
 80075f8:	4b4e      	ldr	r3, [pc, #312]	; (8007734 <scaraFlowDuty+0x278>)
 80075fa:	e9d3 341a 	ldrd	r3, r4, [r3, #104]	; 0x68
 80075fe:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
			y = myDUTY.task.path.line.y_current;
 8007602:	4b4c      	ldr	r3, [pc, #304]	; (8007734 <scaraFlowDuty+0x278>)
 8007604:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8007608:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
			z = myDUTY.task.path.line.z_current;
 800760c:	4b49      	ldr	r3, [pc, #292]	; (8007734 <scaraFlowDuty+0x278>)
 800760e:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 8007612:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
 8007616:	e01d      	b.n	8007654 <scaraFlowDuty+0x198>
			// Circular
		} else if ( DUTY_PATH_CIRCLE == myDUTY.task.path.path_type) {
 8007618:	4b46      	ldr	r3, [pc, #280]	; (8007734 <scaraFlowDuty+0x278>)
 800761a:	7a1b      	ldrb	r3, [r3, #8]
 800761c:	2b01      	cmp	r3, #1
 800761e:	d117      	bne.n	8007650 <scaraFlowDuty+0x194>
			status1 = scaraFlowCircle(&(myDUTY.task.path.circle), s);
 8007620:	ed97 0b52 	vldr	d0, [r7, #328]	; 0x148
 8007624:	4849      	ldr	r0, [pc, #292]	; (800774c <scaraFlowDuty+0x290>)
 8007626:	f000 fb2f 	bl	8007c88 <scaraFlowCircle>
 800762a:	4603      	mov	r3, r0
 800762c:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
			x = myDUTY.task.path.circle.x_current;
 8007630:	4b40      	ldr	r3, [pc, #256]	; (8007734 <scaraFlowDuty+0x278>)
 8007632:	e9d3 343e 	ldrd	r3, r4, [r3, #248]	; 0xf8
 8007636:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
			y = myDUTY.task.path.circle.y_current;
 800763a:	4b3e      	ldr	r3, [pc, #248]	; (8007734 <scaraFlowDuty+0x278>)
 800763c:	e9d3 3440 	ldrd	r3, r4, [r3, #256]	; 0x100
 8007640:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
			z = myDUTY.task.path.circle.z_current;
 8007644:	4b3b      	ldr	r3, [pc, #236]	; (8007734 <scaraFlowDuty+0x278>)
 8007646:	e9d3 3442 	ldrd	r3, r4, [r3, #264]	; 0x108
 800764a:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
 800764e:	e001      	b.n	8007654 <scaraFlowDuty+0x198>
		} else {
			return SCARA_STATUS_ERROR_TASK;
 8007650:	2303      	movs	r3, #3
 8007652:	e286      	b.n	8007b62 <scaraFlowDuty+0x6a6>
		}

		positionCompute.x 		= x;
 8007654:	f107 0210 	add.w	r2, r7, #16
 8007658:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 800765c:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
		positionCompute.y		= y;
 8007660:	f107 0210 	add.w	r2, r7, #16
 8007664:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8007668:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
		positionCompute.z 		= z;
 800766c:	f107 0210 	add.w	r2, r7, #16
 8007670:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 8007674:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
		positionCompute.roll 	= myDUTY.task.roll_start + angle*dir_roll;
 8007678:	4b2e      	ldr	r3, [pc, #184]	; (8007734 <scaraFlowDuty+0x278>)
 800767a:	e9d3 45f0 	ldrd	r4, r5, [r3, #960]	; 0x3c0
 800767e:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8007682:	4618      	mov	r0, r3
 8007684:	f7f8 ff5e 	bl	8000544 <__aeabi_i2d>
 8007688:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 800768c:	f7f8 ffc4 	bl	8000618 <__aeabi_dmul>
 8007690:	4602      	mov	r2, r0
 8007692:	460b      	mov	r3, r1
 8007694:	4620      	mov	r0, r4
 8007696:	4629      	mov	r1, r5
 8007698:	f7f8 fe08 	bl	80002ac <__adddf3>
 800769c:	4603      	mov	r3, r0
 800769e:	460c      	mov	r4, r1
 80076a0:	f107 0210 	add.w	r2, r7, #16
 80076a4:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

		positionCompute.q		= s;
 80076a8:	f107 0210 	add.w	r2, r7, #16
 80076ac:	e9d7 3452 	ldrd	r3, r4, [r7, #328]	; 0x148
 80076b0:	e9c2 3400 	strd	r3, r4, [r2]
		positionCompute.q_roll  = angle;
 80076b4:	f107 0210 	add.w	r2, r7, #16
 80076b8:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 80076bc:	e9c2 3402 	strd	r3, r4, [r2, #8]

		positionCompute.v_3d    = v;
 80076c0:	f107 0210 	add.w	r2, r7, #16
 80076c4:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 80076c8:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
		positionCompute.v_roll  = v_angle;
 80076cc:	f107 0210 	add.w	r2, r7, #16
 80076d0:	e9d7 3446 	ldrd	r3, r4, [r7, #280]	; 0x118
 80076d4:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0

		positionCompute.total_time = myDUTY.time_total;
 80076d8:	4b16      	ldr	r3, [pc, #88]	; (8007734 <scaraFlowDuty+0x278>)
 80076da:	f603 1348 	addw	r3, r3, #2376	; 0x948
 80076de:	e9d3 3400 	ldrd	r3, r4, [r3]
 80076e2:	f107 0210 	add.w	r2, r7, #16
 80076e6:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
		positionCompute.t		= time;
 80076ea:	f107 0210 	add.w	r2, r7, #16
 80076ee:	f107 0308 	add.w	r3, r7, #8
 80076f2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80076f6:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
		if ( FALSE == kinematicInverse(&positionCompute, pos_Current)) {
 80076fa:	f107 0410 	add.w	r4, r7, #16
 80076fe:	4668      	mov	r0, sp
 8007700:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8007704:	22b0      	movs	r2, #176	; 0xb0
 8007706:	4619      	mov	r1, r3
 8007708:	f00d fc72 	bl	8014ff0 <memcpy>
 800770c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8007710:	cb0c      	ldmia	r3, {r2, r3}
 8007712:	4620      	mov	r0, r4
 8007714:	f7fb ff38 	bl	8003588 <kinematicInverse>
 8007718:	4603      	mov	r3, r0
 800771a:	2b00      	cmp	r3, #0
 800771c:	d101      	bne.n	8007722 <scaraFlowDuty+0x266>
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800771e:	2307      	movs	r3, #7
 8007720:	e21f      	b.n	8007b62 <scaraFlowDuty+0x6a6>
		} else {
			memcpy(pos_Next, &positionCompute, sizeof(SCARA_PositionTypeDef));
 8007722:	f107 0110 	add.w	r1, r7, #16
 8007726:	1d3b      	adds	r3, r7, #4
 8007728:	22b8      	movs	r2, #184	; 0xb8
 800772a:	6818      	ldr	r0, [r3, #0]
 800772c:	f00d fc60 	bl	8014ff0 <memcpy>
 8007730:	e216      	b.n	8007b60 <scaraFlowDuty+0x6a4>
 8007732:	bf00      	nop
 8007734:	200053c8 	.word	0x200053c8
 8007738:	200054e0 	.word	0x200054e0
 800773c:	20005638 	.word	0x20005638
 8007740:	20005560 	.word	0x20005560
 8007744:	200056b8 	.word	0x200056b8
 8007748:	200053d8 	.word	0x200053d8
 800774c:	20005448 	.word	0x20005448
		}

	/*---- Joint space -----*/
	} else if (DUTY_SPACE_JOINT == myDUTY.space_type) {
 8007750:	4b8b      	ldr	r3, [pc, #556]	; (8007980 <scaraFlowDuty+0x4c4>)
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	2b01      	cmp	r3, #1
 8007756:	f040 8201 	bne.w	8007b5c <scaraFlowDuty+0x6a0>
		double s0, s1, s2, s3;
		double v0, v1, v2, v3;
		int8_t dir0, dir1, dir2, dir3;
		// Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.joint.trajectory[0].trajectory_type) {
 800775a:	4b89      	ldr	r3, [pc, #548]	; (8007980 <scaraFlowDuty+0x4c4>)
 800775c:	f893 33c8 	ldrb.w	r3, [r3, #968]	; 0x3c8
 8007760:	2b00      	cmp	r3, #0
 8007762:	d174      	bne.n	800784e <scaraFlowDuty+0x392>
			status1 = scaraFlowLSPB(&(myDUTY.joint.trajectory[0].lspb), time);
 8007764:	f107 0308 	add.w	r3, r7, #8
 8007768:	ed93 0b00 	vldr	d0, [r3]
 800776c:	4885      	ldr	r0, [pc, #532]	; (8007984 <scaraFlowDuty+0x4c8>)
 800776e:	f000 fb13 	bl	8007d98 <scaraFlowLSPB>
 8007772:	4603      	mov	r3, r0
 8007774:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
			status2 = scaraFlowLSPB(&(myDUTY.joint.trajectory[1].lspb), time);
 8007778:	f107 0308 	add.w	r3, r7, #8
 800777c:	ed93 0b00 	vldr	d0, [r3]
 8007780:	4881      	ldr	r0, [pc, #516]	; (8007988 <scaraFlowDuty+0x4cc>)
 8007782:	f000 fb09 	bl	8007d98 <scaraFlowLSPB>
 8007786:	4603      	mov	r3, r0
 8007788:	f887 3156 	strb.w	r3, [r7, #342]	; 0x156
			status3 = scaraFlowLSPB(&(myDUTY.joint.trajectory[2].lspb), time);
 800778c:	f107 0308 	add.w	r3, r7, #8
 8007790:	ed93 0b00 	vldr	d0, [r3]
 8007794:	487d      	ldr	r0, [pc, #500]	; (800798c <scaraFlowDuty+0x4d0>)
 8007796:	f000 faff 	bl	8007d98 <scaraFlowLSPB>
 800779a:	4603      	mov	r3, r0
 800779c:	f887 3155 	strb.w	r3, [r7, #341]	; 0x155
			status4 = scaraFlowLSPB(&(myDUTY.joint.trajectory[3].lspb), time);
 80077a0:	f107 0308 	add.w	r3, r7, #8
 80077a4:	ed93 0b00 	vldr	d0, [r3]
 80077a8:	4879      	ldr	r0, [pc, #484]	; (8007990 <scaraFlowDuty+0x4d4>)
 80077aa:	f000 faf5 	bl	8007d98 <scaraFlowLSPB>
 80077ae:	4603      	mov	r3, r0
 80077b0:	f887 3154 	strb.w	r3, [r7, #340]	; 0x154

			dir0 = myDUTY.joint.trajectory[0].lspb.dir;
 80077b4:	4b72      	ldr	r3, [pc, #456]	; (8007980 <scaraFlowDuty+0x4c4>)
 80077b6:	f893 33d0 	ldrb.w	r3, [r3, #976]	; 0x3d0
 80077ba:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			dir1 = myDUTY.joint.trajectory[1].lspb.dir;
 80077be:	4b70      	ldr	r3, [pc, #448]	; (8007980 <scaraFlowDuty+0x4c4>)
 80077c0:	f893 3528 	ldrb.w	r3, [r3, #1320]	; 0x528
 80077c4:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
			dir2 = myDUTY.joint.trajectory[2].lspb.dir;
 80077c8:	4b6d      	ldr	r3, [pc, #436]	; (8007980 <scaraFlowDuty+0x4c4>)
 80077ca:	f893 3680 	ldrb.w	r3, [r3, #1664]	; 0x680
 80077ce:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
			dir3 = myDUTY.joint.trajectory[3].lspb.dir;
 80077d2:	4b6b      	ldr	r3, [pc, #428]	; (8007980 <scaraFlowDuty+0x4c4>)
 80077d4:	f893 37d8 	ldrb.w	r3, [r3, #2008]	; 0x7d8
 80077d8:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc

			s0 = myDUTY.joint.trajectory[0].lspb.s_current;
 80077dc:	4b68      	ldr	r3, [pc, #416]	; (8007980 <scaraFlowDuty+0x4c4>)
 80077de:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 80077e2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80077e6:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
			s1 = myDUTY.joint.trajectory[1].lspb.s_current;
 80077ea:	4b65      	ldr	r3, [pc, #404]	; (8007980 <scaraFlowDuty+0x4c4>)
 80077ec:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 80077f0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80077f4:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
			s2 = myDUTY.joint.trajectory[2].lspb.s_current;
 80077f8:	4b61      	ldr	r3, [pc, #388]	; (8007980 <scaraFlowDuty+0x4c4>)
 80077fa:	f503 63df 	add.w	r3, r3, #1784	; 0x6f8
 80077fe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007802:	e9c7 343e 	strd	r3, r4, [r7, #248]	; 0xf8
			s3 = myDUTY.joint.trajectory[3].lspb.s_current;
 8007806:	4b5e      	ldr	r3, [pc, #376]	; (8007980 <scaraFlowDuty+0x4c4>)
 8007808:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 800780c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007810:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0

			v0 = myDUTY.joint.trajectory[0].lspb.v_current;
 8007814:	4b5a      	ldr	r3, [pc, #360]	; (8007980 <scaraFlowDuty+0x4c4>)
 8007816:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800781a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800781e:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
			v1 = myDUTY.joint.trajectory[1].lspb.v_current;
 8007822:	4b57      	ldr	r3, [pc, #348]	; (8007980 <scaraFlowDuty+0x4c4>)
 8007824:	f503 63b3 	add.w	r3, r3, #1432	; 0x598
 8007828:	e9d3 3400 	ldrd	r3, r4, [r3]
 800782c:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
			v2 = myDUTY.joint.trajectory[2].lspb.v_current;
 8007830:	4b53      	ldr	r3, [pc, #332]	; (8007980 <scaraFlowDuty+0x4c4>)
 8007832:	f503 63de 	add.w	r3, r3, #1776	; 0x6f0
 8007836:	e9d3 3400 	ldrd	r3, r4, [r3]
 800783a:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
			v3 = myDUTY.joint.trajectory[3].lspb.v_current;
 800783e:	4b50      	ldr	r3, [pc, #320]	; (8007980 <scaraFlowDuty+0x4c4>)
 8007840:	f603 0348 	addw	r3, r3, #2120	; 0x848
 8007844:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007848:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
 800784c:	e07b      	b.n	8007946 <scaraFlowDuty+0x48a>

			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == myDUTY.joint.trajectory[0].trajectory_type) {
 800784e:	4b4c      	ldr	r3, [pc, #304]	; (8007980 <scaraFlowDuty+0x4c4>)
 8007850:	f893 33c8 	ldrb.w	r3, [r3, #968]	; 0x3c8
 8007854:	2b01      	cmp	r3, #1
 8007856:	d174      	bne.n	8007942 <scaraFlowDuty+0x486>
			status1 = scaraFLowScurve(&(myDUTY.joint.trajectory[0].scurve), time);
 8007858:	f107 0308 	add.w	r3, r7, #8
 800785c:	ed93 0b00 	vldr	d0, [r3]
 8007860:	484c      	ldr	r0, [pc, #304]	; (8007994 <scaraFlowDuty+0x4d8>)
 8007862:	f000 fc45 	bl	80080f0 <scaraFLowScurve>
 8007866:	4603      	mov	r3, r0
 8007868:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
			status2 = scaraFLowScurve(&(myDUTY.joint.trajectory[1].scurve), time);
 800786c:	f107 0308 	add.w	r3, r7, #8
 8007870:	ed93 0b00 	vldr	d0, [r3]
 8007874:	4848      	ldr	r0, [pc, #288]	; (8007998 <scaraFlowDuty+0x4dc>)
 8007876:	f000 fc3b 	bl	80080f0 <scaraFLowScurve>
 800787a:	4603      	mov	r3, r0
 800787c:	f887 3156 	strb.w	r3, [r7, #342]	; 0x156
			status3 = scaraFLowScurve(&(myDUTY.joint.trajectory[2].scurve), time);
 8007880:	f107 0308 	add.w	r3, r7, #8
 8007884:	ed93 0b00 	vldr	d0, [r3]
 8007888:	4844      	ldr	r0, [pc, #272]	; (800799c <scaraFlowDuty+0x4e0>)
 800788a:	f000 fc31 	bl	80080f0 <scaraFLowScurve>
 800788e:	4603      	mov	r3, r0
 8007890:	f887 3155 	strb.w	r3, [r7, #341]	; 0x155
			status4 = scaraFLowScurve(&(myDUTY.joint.trajectory[3].scurve), time);
 8007894:	f107 0308 	add.w	r3, r7, #8
 8007898:	ed93 0b00 	vldr	d0, [r3]
 800789c:	4840      	ldr	r0, [pc, #256]	; (80079a0 <scaraFlowDuty+0x4e4>)
 800789e:	f000 fc27 	bl	80080f0 <scaraFLowScurve>
 80078a2:	4603      	mov	r3, r0
 80078a4:	f887 3154 	strb.w	r3, [r7, #340]	; 0x154
			dir0 = myDUTY.joint.trajectory[0].scurve.dir;
 80078a8:	4b35      	ldr	r3, [pc, #212]	; (8007980 <scaraFlowDuty+0x4c4>)
 80078aa:	f893 3450 	ldrb.w	r3, [r3, #1104]	; 0x450
 80078ae:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			dir1 = myDUTY.joint.trajectory[1].scurve.dir;
 80078b2:	4b33      	ldr	r3, [pc, #204]	; (8007980 <scaraFlowDuty+0x4c4>)
 80078b4:	f893 35a8 	ldrb.w	r3, [r3, #1448]	; 0x5a8
 80078b8:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
			dir2 = myDUTY.joint.trajectory[2].scurve.dir;
 80078bc:	4b30      	ldr	r3, [pc, #192]	; (8007980 <scaraFlowDuty+0x4c4>)
 80078be:	f893 3700 	ldrb.w	r3, [r3, #1792]	; 0x700
 80078c2:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
			dir3 = myDUTY.joint.trajectory[3].scurve.dir;
 80078c6:	4b2e      	ldr	r3, [pc, #184]	; (8007980 <scaraFlowDuty+0x4c4>)
 80078c8:	f893 3858 	ldrb.w	r3, [r3, #2136]	; 0x858
 80078cc:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
			s0 = myDUTY.joint.trajectory[0].scurve.s_current;
 80078d0:	4b2b      	ldr	r3, [pc, #172]	; (8007980 <scaraFlowDuty+0x4c4>)
 80078d2:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 80078d6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80078da:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
			s1 = myDUTY.joint.trajectory[1].scurve.s_current;
 80078de:	4b28      	ldr	r3, [pc, #160]	; (8007980 <scaraFlowDuty+0x4c4>)
 80078e0:	f503 63ce 	add.w	r3, r3, #1648	; 0x670
 80078e4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80078e8:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
			s2 = myDUTY.joint.trajectory[2].scurve.s_current;
 80078ec:	4b24      	ldr	r3, [pc, #144]	; (8007980 <scaraFlowDuty+0x4c4>)
 80078ee:	f503 63f9 	add.w	r3, r3, #1992	; 0x7c8
 80078f2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80078f6:	e9c7 343e 	strd	r3, r4, [r7, #248]	; 0xf8
			s3 = myDUTY.joint.trajectory[3].scurve.s_current;
 80078fa:	4b21      	ldr	r3, [pc, #132]	; (8007980 <scaraFlowDuty+0x4c4>)
 80078fc:	f503 6312 	add.w	r3, r3, #2336	; 0x920
 8007900:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007904:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0

			v0 = myDUTY.joint.trajectory[0].scurve.v_current;
 8007908:	4b1d      	ldr	r3, [pc, #116]	; (8007980 <scaraFlowDuty+0x4c4>)
 800790a:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 800790e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007912:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
			v1 = myDUTY.joint.trajectory[1].scurve.v_current;
 8007916:	4b1a      	ldr	r3, [pc, #104]	; (8007980 <scaraFlowDuty+0x4c4>)
 8007918:	f503 63cd 	add.w	r3, r3, #1640	; 0x668
 800791c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007920:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
			v2 = myDUTY.joint.trajectory[2].scurve.v_current;
 8007924:	4b16      	ldr	r3, [pc, #88]	; (8007980 <scaraFlowDuty+0x4c4>)
 8007926:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 800792a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800792e:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
			v3 = myDUTY.joint.trajectory[3].scurve.v_current;
 8007932:	4b13      	ldr	r3, [pc, #76]	; (8007980 <scaraFlowDuty+0x4c4>)
 8007934:	f603 1318 	addw	r3, r3, #2328	; 0x918
 8007938:	e9d3 3400 	ldrd	r3, r4, [r3]
 800793c:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
 8007940:	e001      	b.n	8007946 <scaraFlowDuty+0x48a>

		} else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 8007942:	2305      	movs	r3, #5
 8007944:	e10d      	b.n	8007b62 <scaraFlowDuty+0x6a6>
		}
		// Check init status
		if ( SCARA_STATUS_OK != status1) {
 8007946:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 800794a:	2b00      	cmp	r3, #0
 800794c:	d002      	beq.n	8007954 <scaraFlowDuty+0x498>
			return status1;
 800794e:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8007952:	e106      	b.n	8007b62 <scaraFlowDuty+0x6a6>
		}
		if ( SCARA_STATUS_OK != status2) {
 8007954:	f897 3156 	ldrb.w	r3, [r7, #342]	; 0x156
 8007958:	2b00      	cmp	r3, #0
 800795a:	d002      	beq.n	8007962 <scaraFlowDuty+0x4a6>
			return status2;
 800795c:	f897 3156 	ldrb.w	r3, [r7, #342]	; 0x156
 8007960:	e0ff      	b.n	8007b62 <scaraFlowDuty+0x6a6>
		}
		if ( SCARA_STATUS_OK != status3) {
 8007962:	f897 3155 	ldrb.w	r3, [r7, #341]	; 0x155
 8007966:	2b00      	cmp	r3, #0
 8007968:	d002      	beq.n	8007970 <scaraFlowDuty+0x4b4>
			return status3;
 800796a:	f897 3155 	ldrb.w	r3, [r7, #341]	; 0x155
 800796e:	e0f8      	b.n	8007b62 <scaraFlowDuty+0x6a6>
		}
		if ( SCARA_STATUS_OK != status4) {
 8007970:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8007974:	2b00      	cmp	r3, #0
 8007976:	d015      	beq.n	80079a4 <scaraFlowDuty+0x4e8>
			return status4;
 8007978:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800797c:	e0f1      	b.n	8007b62 <scaraFlowDuty+0x6a6>
 800797e:	bf00      	nop
 8007980:	200053c8 	.word	0x200053c8
 8007984:	20005798 	.word	0x20005798
 8007988:	200058f0 	.word	0x200058f0
 800798c:	20005a48 	.word	0x20005a48
 8007990:	20005ba0 	.word	0x20005ba0
 8007994:	20005818 	.word	0x20005818
 8007998:	20005970 	.word	0x20005970
 800799c:	20005ac8 	.word	0x20005ac8
 80079a0:	20005c20 	.word	0x20005c20
		}

		positionCompute.Theta1 	= myDUTY.joint.theta1_start + s0*dir0;
 80079a4:	4b73      	ldr	r3, [pc, #460]	; (8007b74 <scaraFlowDuty+0x6b8>)
 80079a6:	f603 1328 	addw	r3, r3, #2344	; 0x928
 80079aa:	e9d3 4500 	ldrd	r4, r5, [r3]
 80079ae:	f997 30cf 	ldrsb.w	r3, [r7, #207]	; 0xcf
 80079b2:	4618      	mov	r0, r3
 80079b4:	f7f8 fdc6 	bl	8000544 <__aeabi_i2d>
 80079b8:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 80079bc:	f7f8 fe2c 	bl	8000618 <__aeabi_dmul>
 80079c0:	4602      	mov	r2, r0
 80079c2:	460b      	mov	r3, r1
 80079c4:	4620      	mov	r0, r4
 80079c6:	4629      	mov	r1, r5
 80079c8:	f7f8 fc70 	bl	80002ac <__adddf3>
 80079cc:	4603      	mov	r3, r0
 80079ce:	460c      	mov	r4, r1
 80079d0:	f107 0210 	add.w	r2, r7, #16
 80079d4:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		positionCompute.Theta2 	= myDUTY.joint.theta2_start + s1*dir1;
 80079d8:	4b66      	ldr	r3, [pc, #408]	; (8007b74 <scaraFlowDuty+0x6b8>)
 80079da:	f503 6313 	add.w	r3, r3, #2352	; 0x930
 80079de:	e9d3 4500 	ldrd	r4, r5, [r3]
 80079e2:	f997 30ce 	ldrsb.w	r3, [r7, #206]	; 0xce
 80079e6:	4618      	mov	r0, r3
 80079e8:	f7f8 fdac 	bl	8000544 <__aeabi_i2d>
 80079ec:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 80079f0:	f7f8 fe12 	bl	8000618 <__aeabi_dmul>
 80079f4:	4602      	mov	r2, r0
 80079f6:	460b      	mov	r3, r1
 80079f8:	4620      	mov	r0, r4
 80079fa:	4629      	mov	r1, r5
 80079fc:	f7f8 fc56 	bl	80002ac <__adddf3>
 8007a00:	4603      	mov	r3, r0
 8007a02:	460c      	mov	r4, r1
 8007a04:	f107 0210 	add.w	r2, r7, #16
 8007a08:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		positionCompute.D3 		= myDUTY.joint.d3_start 	+ s2*dir2;
 8007a0c:	4b59      	ldr	r3, [pc, #356]	; (8007b74 <scaraFlowDuty+0x6b8>)
 8007a0e:	f603 1338 	addw	r3, r3, #2360	; 0x938
 8007a12:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007a16:	f997 30cd 	ldrsb.w	r3, [r7, #205]	; 0xcd
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f7f8 fd92 	bl	8000544 <__aeabi_i2d>
 8007a20:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8007a24:	f7f8 fdf8 	bl	8000618 <__aeabi_dmul>
 8007a28:	4602      	mov	r2, r0
 8007a2a:	460b      	mov	r3, r1
 8007a2c:	4620      	mov	r0, r4
 8007a2e:	4629      	mov	r1, r5
 8007a30:	f7f8 fc3c 	bl	80002ac <__adddf3>
 8007a34:	4603      	mov	r3, r0
 8007a36:	460c      	mov	r4, r1
 8007a38:	f107 0210 	add.w	r2, r7, #16
 8007a3c:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
		positionCompute.Theta4 	= myDUTY.joint.theta4_start + s3*dir3;
 8007a40:	4b4c      	ldr	r3, [pc, #304]	; (8007b74 <scaraFlowDuty+0x6b8>)
 8007a42:	f503 6314 	add.w	r3, r3, #2368	; 0x940
 8007a46:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007a4a:	f997 30cc 	ldrsb.w	r3, [r7, #204]	; 0xcc
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f7f8 fd78 	bl	8000544 <__aeabi_i2d>
 8007a54:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8007a58:	f7f8 fdde 	bl	8000618 <__aeabi_dmul>
 8007a5c:	4602      	mov	r2, r0
 8007a5e:	460b      	mov	r3, r1
 8007a60:	4620      	mov	r0, r4
 8007a62:	4629      	mov	r1, r5
 8007a64:	f7f8 fc22 	bl	80002ac <__adddf3>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	460c      	mov	r4, r1
 8007a6c:	f107 0210 	add.w	r2, r7, #16
 8007a70:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80

		positionCompute.v_theta1 	= v0;
 8007a74:	f107 0210 	add.w	r2, r7, #16
 8007a78:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 8007a7c:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
		positionCompute.v_theta2 	= v1;
 8007a80:	f107 0210 	add.w	r2, r7, #16
 8007a84:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8007a88:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
		positionCompute.v_d3 		= v2;
 8007a8c:	f107 0210 	add.w	r2, r7, #16
 8007a90:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 8007a94:	e9c2 3426 	strd	r3, r4, [r2, #152]	; 0x98
		positionCompute.v_theta4 	= v3;
 8007a98:	f107 0210 	add.w	r2, r7, #16
 8007a9c:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 8007aa0:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0

		positionCompute.q_theta1 = s0;
 8007aa4:	f107 0210 	add.w	r2, r7, #16
 8007aa8:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 8007aac:	e9c2 3404 	strd	r3, r4, [r2, #16]
		positionCompute.q_theta2 = s1;
 8007ab0:	f107 0210 	add.w	r2, r7, #16
 8007ab4:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8007ab8:	e9c2 3406 	strd	r3, r4, [r2, #24]
		positionCompute.q_d3	 = s2;
 8007abc:	f107 0210 	add.w	r2, r7, #16
 8007ac0:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 8007ac4:	e9c2 3408 	strd	r3, r4, [r2, #32]
		positionCompute.q_theta4 = s3;
 8007ac8:	f107 0210 	add.w	r2, r7, #16
 8007acc:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8007ad0:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28

		positionCompute.total_time = myDUTY.time_total;
 8007ad4:	4b27      	ldr	r3, [pc, #156]	; (8007b74 <scaraFlowDuty+0x6b8>)
 8007ad6:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8007ada:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007ade:	f107 0210 	add.w	r2, r7, #16
 8007ae2:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
		positionCompute.t		= time;
 8007ae6:	f107 0210 	add.w	r2, r7, #16
 8007aea:	f107 0308 	add.w	r3, r7, #8
 8007aee:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007af2:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
		// Check workspace
		if( SCARA_STATUS_OK != scaraCheckWorkSpace4(positionCompute.Theta1,
 8007af6:	f107 0310 	add.w	r3, r7, #16
 8007afa:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8007afe:	f107 0310 	add.w	r3, r7, #16
 8007b02:	ed93 6b1c 	vldr	d6, [r3, #112]	; 0x70
 8007b06:	f107 0310 	add.w	r3, r7, #16
 8007b0a:	ed93 5b1e 	vldr	d5, [r3, #120]	; 0x78
 8007b0e:	f107 0310 	add.w	r3, r7, #16
 8007b12:	ed93 4b20 	vldr	d4, [r3, #128]	; 0x80
 8007b16:	eeb0 3a44 	vmov.f32	s6, s8
 8007b1a:	eef0 3a64 	vmov.f32	s7, s9
 8007b1e:	eeb0 2a45 	vmov.f32	s4, s10
 8007b22:	eef0 2a65 	vmov.f32	s5, s11
 8007b26:	eeb0 1a46 	vmov.f32	s2, s12
 8007b2a:	eef0 1a66 	vmov.f32	s3, s13
 8007b2e:	eeb0 0a47 	vmov.f32	s0, s14
 8007b32:	eef0 0a67 	vmov.f32	s1, s15
 8007b36:	f001 f9bf 	bl	8008eb8 <scaraCheckWorkSpace4>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d001      	beq.n	8007b44 <scaraFlowDuty+0x688>
							 	 	 	  positionCompute.Theta2,
										  positionCompute.D3,
										  positionCompute.Theta4)) {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8007b40:	2307      	movs	r3, #7
 8007b42:	e00e      	b.n	8007b62 <scaraFlowDuty+0x6a6>
		} else {
			memcpy(pos_Next, &positionCompute, sizeof(SCARA_PositionTypeDef));
 8007b44:	f107 0110 	add.w	r1, r7, #16
 8007b48:	1d3b      	adds	r3, r7, #4
 8007b4a:	22b8      	movs	r2, #184	; 0xb8
 8007b4c:	6818      	ldr	r0, [r3, #0]
 8007b4e:	f00d fa4f 	bl	8014ff0 <memcpy>
		}
		kinematicForward(pos_Next);
 8007b52:	1d3b      	adds	r3, r7, #4
 8007b54:	6818      	ldr	r0, [r3, #0]
 8007b56:	f7fb fbdb 	bl	8003310 <kinematicForward>
 8007b5a:	e001      	b.n	8007b60 <scaraFlowDuty+0x6a4>

	} else {
		return SCARA_STATUS_ERROR_SPACE;
 8007b5c:	2302      	movs	r3, #2
 8007b5e:	e000      	b.n	8007b62 <scaraFlowDuty+0x6a6>
	}

	return SCARA_STATUS_OK;
 8007b60:	2300      	movs	r3, #0
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8007b6e:	b002      	add	sp, #8
 8007b70:	4770      	bx	lr
 8007b72:	bf00      	nop
 8007b74:	200053c8 	.word	0x200053c8

08007b78 <scaraFlowLine>:

/* Compute new x, y ,z corresponding to s */
SCARA_StatusTypeDef	scaraFlowLine		(Path_Line_TypeDef *line, double s) {
 8007b78:	b5b0      	push	{r4, r5, r7, lr}
 8007b7a:	b084      	sub	sp, #16
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	60f8      	str	r0, [r7, #12]
 8007b80:	ed87 0b00 	vstr	d0, [r7]
	// Avoid div with 0
	if ( line->total_s > 0.01) {
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8007b8a:	a33d      	add	r3, pc, #244	; (adr r3, 8007c80 <scaraFlowLine+0x108>)
 8007b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b90:	f7f8 ffd2 	bl	8000b38 <__aeabi_dcmpgt>
 8007b94:	4603      	mov	r3, r0
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d05a      	beq.n	8007c50 <scaraFlowLine+0xd8>
		line->x_current	 = line->x0 + line->denta_x*s/line->total_s;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8007ba6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007baa:	f7f8 fd35 	bl	8000618 <__aeabi_dmul>
 8007bae:	4602      	mov	r2, r0
 8007bb0:	460b      	mov	r3, r1
 8007bb2:	4610      	mov	r0, r2
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8007bbc:	f7f8 fe56 	bl	800086c <__aeabi_ddiv>
 8007bc0:	4602      	mov	r2, r0
 8007bc2:	460b      	mov	r3, r1
 8007bc4:	4620      	mov	r0, r4
 8007bc6:	4629      	mov	r1, r5
 8007bc8:	f7f8 fb70 	bl	80002ac <__adddf3>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	460c      	mov	r4, r1
 8007bd0:	68fa      	ldr	r2, [r7, #12]
 8007bd2:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
		line->y_current	 = line->y0 + line->denta_y*s/line->total_s;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8007be2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007be6:	f7f8 fd17 	bl	8000618 <__aeabi_dmul>
 8007bea:	4602      	mov	r2, r0
 8007bec:	460b      	mov	r3, r1
 8007bee:	4610      	mov	r0, r2
 8007bf0:	4619      	mov	r1, r3
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8007bf8:	f7f8 fe38 	bl	800086c <__aeabi_ddiv>
 8007bfc:	4602      	mov	r2, r0
 8007bfe:	460b      	mov	r3, r1
 8007c00:	4620      	mov	r0, r4
 8007c02:	4629      	mov	r1, r5
 8007c04:	f7f8 fb52 	bl	80002ac <__adddf3>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	460c      	mov	r4, r1
 8007c0c:	68fa      	ldr	r2, [r7, #12]
 8007c0e:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
		line->z_current	 = line->z0 + line->denta_z*s/line->total_s;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8007c1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c22:	f7f8 fcf9 	bl	8000618 <__aeabi_dmul>
 8007c26:	4602      	mov	r2, r0
 8007c28:	460b      	mov	r3, r1
 8007c2a:	4610      	mov	r0, r2
 8007c2c:	4619      	mov	r1, r3
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8007c34:	f7f8 fe1a 	bl	800086c <__aeabi_ddiv>
 8007c38:	4602      	mov	r2, r0
 8007c3a:	460b      	mov	r3, r1
 8007c3c:	4620      	mov	r0, r4
 8007c3e:	4629      	mov	r1, r5
 8007c40:	f7f8 fb34 	bl	80002ac <__adddf3>
 8007c44:	4603      	mov	r3, r0
 8007c46:	460c      	mov	r4, r1
 8007c48:	68fa      	ldr	r2, [r7, #12]
 8007c4a:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
 8007c4e:	e011      	b.n	8007c74 <scaraFlowLine+0xfc>
	} else {
		line->x_current = line->x1;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8007c56:	68fa      	ldr	r2, [r7, #12]
 8007c58:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
		line->y_current = line->y1;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8007c62:	68fa      	ldr	r2, [r7, #12]
 8007c64:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
		line->z_current = line->z1;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8007c6e:	68fa      	ldr	r2, [r7, #12]
 8007c70:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	}

	return SCARA_STATUS_OK;
 8007c74:	2300      	movs	r3, #0
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3710      	adds	r7, #16
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bdb0      	pop	{r4, r5, r7, pc}
 8007c7e:	bf00      	nop
 8007c80:	47ae147b 	.word	0x47ae147b
 8007c84:	3f847ae1 	.word	0x3f847ae1

08007c88 <scaraFlowCircle>:

/* Compute new x, y ,z corresponding to s */
SCARA_StatusTypeDef	scaraFlowCircle		(Path_Circle_TypeDef *circle, double s) {
 8007c88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c8c:	b086      	sub	sp, #24
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	60f8      	str	r0, [r7, #12]
 8007c92:	ed87 0b00 	vstr	d0, [r7]
	double angle;
	angle = s/(circle->radius);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8007c9c:	461a      	mov	r2, r3
 8007c9e:	4623      	mov	r3, r4
 8007ca0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ca4:	f7f8 fde2 	bl	800086c <__aeabi_ddiv>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	460c      	mov	r4, r1
 8007cac:	e9c7 3404 	strd	r3, r4, [r7, #16]
	circle->x_current = circle->xi + circle->radius*cos(circle->angle_start + circle->dir*angle);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	f993 3000 	ldrsb.w	r3, [r3]
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f7f8 fc3b 	bl	8000544 <__aeabi_i2d>
 8007cce:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007cd2:	f7f8 fca1 	bl	8000618 <__aeabi_dmul>
 8007cd6:	4602      	mov	r2, r0
 8007cd8:	460b      	mov	r3, r1
 8007cda:	4650      	mov	r0, sl
 8007cdc:	4659      	mov	r1, fp
 8007cde:	f7f8 fae5 	bl	80002ac <__adddf3>
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	460b      	mov	r3, r1
 8007ce6:	ec43 2b17 	vmov	d7, r2, r3
 8007cea:	eeb0 0a47 	vmov.f32	s0, s14
 8007cee:	eef0 0a67 	vmov.f32	s1, s15
 8007cf2:	f011 fbad 	bl	8019450 <cos>
 8007cf6:	ec53 2b10 	vmov	r2, r3, d0
 8007cfa:	4640      	mov	r0, r8
 8007cfc:	4649      	mov	r1, r9
 8007cfe:	f7f8 fc8b 	bl	8000618 <__aeabi_dmul>
 8007d02:	4602      	mov	r2, r0
 8007d04:	460b      	mov	r3, r1
 8007d06:	4620      	mov	r0, r4
 8007d08:	4629      	mov	r1, r5
 8007d0a:	f7f8 facf 	bl	80002ac <__adddf3>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	460c      	mov	r4, r1
 8007d12:	68fa      	ldr	r2, [r7, #12]
 8007d14:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	circle->y_current = circle->yi + circle->radius*sin(circle->angle_start + circle->dir*angle);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	f993 3000 	ldrsb.w	r3, [r3]
 8007d30:	4618      	mov	r0, r3
 8007d32:	f7f8 fc07 	bl	8000544 <__aeabi_i2d>
 8007d36:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007d3a:	f7f8 fc6d 	bl	8000618 <__aeabi_dmul>
 8007d3e:	4602      	mov	r2, r0
 8007d40:	460b      	mov	r3, r1
 8007d42:	4650      	mov	r0, sl
 8007d44:	4659      	mov	r1, fp
 8007d46:	f7f8 fab1 	bl	80002ac <__adddf3>
 8007d4a:	4602      	mov	r2, r0
 8007d4c:	460b      	mov	r3, r1
 8007d4e:	ec43 2b17 	vmov	d7, r2, r3
 8007d52:	eeb0 0a47 	vmov.f32	s0, s14
 8007d56:	eef0 0a67 	vmov.f32	s1, s15
 8007d5a:	f011 fc09 	bl	8019570 <sin>
 8007d5e:	ec53 2b10 	vmov	r2, r3, d0
 8007d62:	4640      	mov	r0, r8
 8007d64:	4649      	mov	r1, r9
 8007d66:	f7f8 fc57 	bl	8000618 <__aeabi_dmul>
 8007d6a:	4602      	mov	r2, r0
 8007d6c:	460b      	mov	r3, r1
 8007d6e:	4620      	mov	r0, r4
 8007d70:	4629      	mov	r1, r5
 8007d72:	f7f8 fa9b 	bl	80002ac <__adddf3>
 8007d76:	4603      	mov	r3, r0
 8007d78:	460c      	mov	r4, r1
 8007d7a:	68fa      	ldr	r2, [r7, #12]
 8007d7c:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
	circle->z_current = circle->zi; // XY plane
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8007d86:	68fa      	ldr	r2, [r7, #12]
 8007d88:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88

	return SCARA_STATUS_OK;
 8007d8c:	2300      	movs	r3, #0
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3718      	adds	r7, #24
 8007d92:	46bd      	mov	sp, r7
 8007d94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007d98 <scaraFlowLSPB>:

/* Compute new s corresponding to time */
SCARA_StatusTypeDef	scaraFlowLSPB		(Trajectory_LSPB_TypeDef *lspb, double time) {
 8007d98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007d9c:	b08b      	sub	sp, #44	; 0x2c
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	60f8      	str	r0, [r7, #12]
 8007da2:	ed87 0b00 	vstr	d0, [r7]
	double tf, td, ta;

	tf = lspb->Tf;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8007dac:	e9c7 2308 	strd	r2, r3, [r7, #32]
	td = lspb->Td;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8007db6:	e9c7 2306 	strd	r2, r3, [r7, #24]
	ta = lspb->Ta;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8007dc0:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Accelerate
	if ( 0.0f <= time && time <= ta) {
 8007dc4:	f04f 0200 	mov.w	r2, #0
 8007dc8:	f04f 0300 	mov.w	r3, #0
 8007dcc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007dd0:	f7f8 fea8 	bl	8000b24 <__aeabi_dcmpge>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d05b      	beq.n	8007e92 <scaraFlowLSPB+0xfa>
 8007dda:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007dde:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007de2:	f7f8 fe95 	bl	8000b10 <__aeabi_dcmple>
 8007de6:	4603      	mov	r3, r0
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d052      	beq.n	8007e92 <scaraFlowLSPB+0xfa>
		lspb->a_current		=	lspb->a_design;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8007df2:	68fa      	ldr	r2, [r7, #12]
 8007df4:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	lspb->v0 + lspb->a_design*time;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8007e04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e08:	f7f8 fc06 	bl	8000618 <__aeabi_dmul>
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	460b      	mov	r3, r1
 8007e10:	4620      	mov	r0, r4
 8007e12:	4629      	mov	r1, r5
 8007e14:	f7f8 fa4a 	bl	80002ac <__adddf3>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	460c      	mov	r4, r1
 8007e1c:	68fa      	ldr	r2, [r7, #12]
 8007e1e:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s0 + lspb->v0*time + 0.5*lspb->a_design*time*time;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8007e2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e32:	f7f8 fbf1 	bl	8000618 <__aeabi_dmul>
 8007e36:	4602      	mov	r2, r0
 8007e38:	460b      	mov	r3, r1
 8007e3a:	4620      	mov	r0, r4
 8007e3c:	4629      	mov	r1, r5
 8007e3e:	f7f8 fa35 	bl	80002ac <__adddf3>
 8007e42:	4603      	mov	r3, r0
 8007e44:	460c      	mov	r4, r1
 8007e46:	4625      	mov	r5, r4
 8007e48:	461c      	mov	r4, r3
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8007e50:	f04f 0200 	mov.w	r2, #0
 8007e54:	4ba5      	ldr	r3, [pc, #660]	; (80080ec <scaraFlowLSPB+0x354>)
 8007e56:	f7f8 fbdf 	bl	8000618 <__aeabi_dmul>
 8007e5a:	4602      	mov	r2, r0
 8007e5c:	460b      	mov	r3, r1
 8007e5e:	4610      	mov	r0, r2
 8007e60:	4619      	mov	r1, r3
 8007e62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e66:	f7f8 fbd7 	bl	8000618 <__aeabi_dmul>
 8007e6a:	4602      	mov	r2, r0
 8007e6c:	460b      	mov	r3, r1
 8007e6e:	4610      	mov	r0, r2
 8007e70:	4619      	mov	r1, r3
 8007e72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e76:	f7f8 fbcf 	bl	8000618 <__aeabi_dmul>
 8007e7a:	4602      	mov	r2, r0
 8007e7c:	460b      	mov	r3, r1
 8007e7e:	4620      	mov	r0, r4
 8007e80:	4629      	mov	r1, r5
 8007e82:	f7f8 fa13 	bl	80002ac <__adddf3>
 8007e86:	4603      	mov	r3, r0
 8007e88:	460c      	mov	r4, r1
 8007e8a:	68fa      	ldr	r2, [r7, #12]
 8007e8c:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 8007e90:	e125      	b.n	80080de <scaraFlowLSPB+0x346>
	// Constant velocity
	} else if (ta <= time && time <= (tf - td)) {
 8007e92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e96:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007e9a:	f7f8 fe39 	bl	8000b10 <__aeabi_dcmple>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d05e      	beq.n	8007f62 <scaraFlowLSPB+0x1ca>
 8007ea4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007ea8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007eac:	f7f8 f9fc 	bl	80002a8 <__aeabi_dsub>
 8007eb0:	4602      	mov	r2, r0
 8007eb2:	460b      	mov	r3, r1
 8007eb4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007eb8:	f7f8 fe2a 	bl	8000b10 <__aeabi_dcmple>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d04f      	beq.n	8007f62 <scaraFlowLSPB+0x1ca>
		lspb->a_current		=	0;
 8007ec2:	68fa      	ldr	r2, [r7, #12]
 8007ec4:	f04f 0300 	mov.w	r3, #0
 8007ec8:	f04f 0400 	mov.w	r4, #0
 8007ecc:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	lspb->v_lim;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8007ed6:	68fa      	ldr	r2, [r7, #12]
 8007ed8:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s0 + lspb->v0*ta/2 + lspb->v_lim*(time - ta/2);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8007ee8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007eec:	f7f8 fb94 	bl	8000618 <__aeabi_dmul>
 8007ef0:	4602      	mov	r2, r0
 8007ef2:	460b      	mov	r3, r1
 8007ef4:	4610      	mov	r0, r2
 8007ef6:	4619      	mov	r1, r3
 8007ef8:	f04f 0200 	mov.w	r2, #0
 8007efc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007f00:	f7f8 fcb4 	bl	800086c <__aeabi_ddiv>
 8007f04:	4602      	mov	r2, r0
 8007f06:	460b      	mov	r3, r1
 8007f08:	4620      	mov	r0, r4
 8007f0a:	4629      	mov	r1, r5
 8007f0c:	f7f8 f9ce 	bl	80002ac <__adddf3>
 8007f10:	4603      	mov	r3, r0
 8007f12:	460c      	mov	r4, r1
 8007f14:	4698      	mov	r8, r3
 8007f16:	46a1      	mov	r9, r4
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8007f1e:	f04f 0200 	mov.w	r2, #0
 8007f22:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007f26:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007f2a:	f7f8 fc9f 	bl	800086c <__aeabi_ddiv>
 8007f2e:	4602      	mov	r2, r0
 8007f30:	460b      	mov	r3, r1
 8007f32:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f36:	f7f8 f9b7 	bl	80002a8 <__aeabi_dsub>
 8007f3a:	4602      	mov	r2, r0
 8007f3c:	460b      	mov	r3, r1
 8007f3e:	4620      	mov	r0, r4
 8007f40:	4629      	mov	r1, r5
 8007f42:	f7f8 fb69 	bl	8000618 <__aeabi_dmul>
 8007f46:	4603      	mov	r3, r0
 8007f48:	460c      	mov	r4, r1
 8007f4a:	461a      	mov	r2, r3
 8007f4c:	4623      	mov	r3, r4
 8007f4e:	4640      	mov	r0, r8
 8007f50:	4649      	mov	r1, r9
 8007f52:	f7f8 f9ab 	bl	80002ac <__adddf3>
 8007f56:	4603      	mov	r3, r0
 8007f58:	460c      	mov	r4, r1
 8007f5a:	68fa      	ldr	r2, [r7, #12]
 8007f5c:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 8007f60:	e0bd      	b.n	80080de <scaraFlowLSPB+0x346>
	// Decelerate
	} else if ((tf - td) <= time && time <= tf) {
 8007f62:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007f66:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007f6a:	f7f8 f99d 	bl	80002a8 <__aeabi_dsub>
 8007f6e:	4602      	mov	r2, r0
 8007f70:	460b      	mov	r3, r1
 8007f72:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f76:	f7f8 fdd5 	bl	8000b24 <__aeabi_dcmpge>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	f000 809a 	beq.w	80080b6 <scaraFlowLSPB+0x31e>
 8007f82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007f86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f8a:	f7f8 fdc1 	bl	8000b10 <__aeabi_dcmple>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	f000 8090 	beq.w	80080b6 <scaraFlowLSPB+0x31e>
		lspb->a_current		=	-lspb->a_design;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8007f9c:	4614      	mov	r4, r2
 8007f9e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	e9c3 451a 	strd	r4, r5, [r3, #104]	; 0x68
		lspb->v_current		=	lspb->v1 + lspb->a_design*(tf - time);
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	e9d3 890c 	ldrd	r8, r9, [r3, #48]	; 0x30
 8007fb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fb8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007fbc:	f7f8 f974 	bl	80002a8 <__aeabi_dsub>
 8007fc0:	4602      	mov	r2, r0
 8007fc2:	460b      	mov	r3, r1
 8007fc4:	4640      	mov	r0, r8
 8007fc6:	4649      	mov	r1, r9
 8007fc8:	f7f8 fb26 	bl	8000618 <__aeabi_dmul>
 8007fcc:	4602      	mov	r2, r0
 8007fce:	460b      	mov	r3, r1
 8007fd0:	4620      	mov	r0, r4
 8007fd2:	4629      	mov	r1, r5
 8007fd4:	f7f8 f96a 	bl	80002ac <__adddf3>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	460c      	mov	r4, r1
 8007fdc:	68fa      	ldr	r2, [r7, #12]
 8007fde:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s1 - lspb->v1*(tf - time)
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8007fee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ff2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007ff6:	f7f8 f957 	bl	80002a8 <__aeabi_dsub>
 8007ffa:	4602      	mov	r2, r0
 8007ffc:	460b      	mov	r3, r1
 8007ffe:	4640      	mov	r0, r8
 8008000:	4649      	mov	r1, r9
 8008002:	f7f8 fb09 	bl	8000618 <__aeabi_dmul>
 8008006:	4602      	mov	r2, r0
 8008008:	460b      	mov	r3, r1
 800800a:	4620      	mov	r0, r4
 800800c:	4629      	mov	r1, r5
 800800e:	f7f8 f94b 	bl	80002a8 <__aeabi_dsub>
 8008012:	4603      	mov	r3, r0
 8008014:	460c      	mov	r4, r1
 8008016:	461d      	mov	r5, r3
 8008018:	4626      	mov	r6, r4
								- (lspb->v_lim - lspb->v1)*(tf - time)*(tf - time)/(2*td);
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8008026:	461a      	mov	r2, r3
 8008028:	4623      	mov	r3, r4
 800802a:	f7f8 f93d 	bl	80002a8 <__aeabi_dsub>
 800802e:	4603      	mov	r3, r0
 8008030:	460c      	mov	r4, r1
 8008032:	4698      	mov	r8, r3
 8008034:	46a1      	mov	r9, r4
 8008036:	e9d7 2300 	ldrd	r2, r3, [r7]
 800803a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800803e:	f7f8 f933 	bl	80002a8 <__aeabi_dsub>
 8008042:	4603      	mov	r3, r0
 8008044:	460c      	mov	r4, r1
 8008046:	461a      	mov	r2, r3
 8008048:	4623      	mov	r3, r4
 800804a:	4640      	mov	r0, r8
 800804c:	4649      	mov	r1, r9
 800804e:	f7f8 fae3 	bl	8000618 <__aeabi_dmul>
 8008052:	4603      	mov	r3, r0
 8008054:	460c      	mov	r4, r1
 8008056:	4698      	mov	r8, r3
 8008058:	46a1      	mov	r9, r4
 800805a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800805e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008062:	f7f8 f921 	bl	80002a8 <__aeabi_dsub>
 8008066:	4603      	mov	r3, r0
 8008068:	460c      	mov	r4, r1
 800806a:	461a      	mov	r2, r3
 800806c:	4623      	mov	r3, r4
 800806e:	4640      	mov	r0, r8
 8008070:	4649      	mov	r1, r9
 8008072:	f7f8 fad1 	bl	8000618 <__aeabi_dmul>
 8008076:	4603      	mov	r3, r0
 8008078:	460c      	mov	r4, r1
 800807a:	4698      	mov	r8, r3
 800807c:	46a1      	mov	r9, r4
 800807e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008082:	4602      	mov	r2, r0
 8008084:	460b      	mov	r3, r1
 8008086:	f7f8 f911 	bl	80002ac <__adddf3>
 800808a:	4603      	mov	r3, r0
 800808c:	460c      	mov	r4, r1
 800808e:	461a      	mov	r2, r3
 8008090:	4623      	mov	r3, r4
 8008092:	4640      	mov	r0, r8
 8008094:	4649      	mov	r1, r9
 8008096:	f7f8 fbe9 	bl	800086c <__aeabi_ddiv>
 800809a:	4603      	mov	r3, r0
 800809c:	460c      	mov	r4, r1
 800809e:	461a      	mov	r2, r3
 80080a0:	4623      	mov	r3, r4
 80080a2:	4628      	mov	r0, r5
 80080a4:	4631      	mov	r1, r6
 80080a6:	f7f8 f8ff 	bl	80002a8 <__aeabi_dsub>
 80080aa:	4603      	mov	r3, r0
 80080ac:	460c      	mov	r4, r1
		lspb->s_current		=	lspb->s1 - lspb->v1*(tf - time)
 80080ae:	68fa      	ldr	r2, [r7, #12]
 80080b0:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 80080b4:	e013      	b.n	80080de <scaraFlowLSPB+0x346>
	} else {
		lspb->a_current 	=	0;
 80080b6:	68fa      	ldr	r2, [r7, #12]
 80080b8:	f04f 0300 	mov.w	r3, #0
 80080bc:	f04f 0400 	mov.w	r4, #0
 80080c0:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	0;
 80080c4:	68fa      	ldr	r2, [r7, #12]
 80080c6:	f04f 0300 	mov.w	r3, #0
 80080ca:	f04f 0400 	mov.w	r4, #0
 80080ce:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->total_s;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 80080d8:	68fa      	ldr	r2, [r7, #12]
 80080da:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	}

	return SCARA_STATUS_OK;
 80080de:	2300      	movs	r3, #0
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	372c      	adds	r7, #44	; 0x2c
 80080e4:	46bd      	mov	sp, r7
 80080e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80080ea:	bf00      	nop
 80080ec:	3fe00000 	.word	0x3fe00000

080080f0 <scaraFLowScurve>:

/* Compute new s corresponding to time */
SCARA_StatusTypeDef	scaraFLowScurve		(Trajectory_Scurve_TypeDef *scurve, double time) {
 80080f0:	b5b0      	push	{r4, r5, r7, lr}
 80080f2:	b092      	sub	sp, #72	; 0x48
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6278      	str	r0, [r7, #36]	; 0x24
 80080f8:	ed87 0b06 	vstr	d0, [r7, #24]
	double j_max, tm, tc, t;

	j_max = scurve->j_max;
 80080fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fe:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8008102:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	tm	  = scurve->Tm;
 8008106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008108:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800810c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	tc	  = scurve->Tc;
 8008110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008112:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8008116:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	 // SCURVE 4 PHASE: tc = 0;
	 if ( 4 == scurve->num_of_phase) {
 800811a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800811c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008120:	2b04      	cmp	r3, #4
 8008122:	f040 8321 	bne.w	8008768 <scaraFLowScurve+0x678>
		 // Phase 1
		 if ( (0.0f <= time) && ( time < tm)) {
 8008126:	f04f 0200 	mov.w	r2, #0
 800812a:	f04f 0300 	mov.w	r3, #0
 800812e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008132:	f7f8 fcf7 	bl	8000b24 <__aeabi_dcmpge>
 8008136:	4603      	mov	r3, r0
 8008138:	2b00      	cmp	r3, #0
 800813a:	d059      	beq.n	80081f0 <scaraFLowScurve+0x100>
 800813c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008140:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008144:	f7f8 fcda 	bl	8000afc <__aeabi_dcmplt>
 8008148:	4603      	mov	r3, r0
 800814a:	2b00      	cmp	r3, #0
 800814c:	d050      	beq.n	80081f0 <scaraFLowScurve+0x100>
			 t = time;
 800814e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8008152:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*t;
 8008156:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800815a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800815e:	f7f8 fa5b 	bl	8000618 <__aeabi_dmul>
 8008162:	4603      	mov	r3, r0
 8008164:	460c      	mov	r4, r1
 8008166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008168:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	= 	0.5*j_max*t*t;
 800816c:	f04f 0200 	mov.w	r2, #0
 8008170:	4b93      	ldr	r3, [pc, #588]	; (80083c0 <scaraFLowScurve+0x2d0>)
 8008172:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008176:	f7f8 fa4f 	bl	8000618 <__aeabi_dmul>
 800817a:	4603      	mov	r3, r0
 800817c:	460c      	mov	r4, r1
 800817e:	4618      	mov	r0, r3
 8008180:	4621      	mov	r1, r4
 8008182:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008186:	f7f8 fa47 	bl	8000618 <__aeabi_dmul>
 800818a:	4603      	mov	r3, r0
 800818c:	460c      	mov	r4, r1
 800818e:	4618      	mov	r0, r3
 8008190:	4621      	mov	r1, r4
 8008192:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008196:	f7f8 fa3f 	bl	8000618 <__aeabi_dmul>
 800819a:	4603      	mov	r3, r0
 800819c:	460c      	mov	r4, r1
 800819e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081a0:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current 	= 	j_max*t*t*t/6;
 80081a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80081a8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80081ac:	f7f8 fa34 	bl	8000618 <__aeabi_dmul>
 80081b0:	4603      	mov	r3, r0
 80081b2:	460c      	mov	r4, r1
 80081b4:	4618      	mov	r0, r3
 80081b6:	4621      	mov	r1, r4
 80081b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80081bc:	f7f8 fa2c 	bl	8000618 <__aeabi_dmul>
 80081c0:	4603      	mov	r3, r0
 80081c2:	460c      	mov	r4, r1
 80081c4:	4618      	mov	r0, r3
 80081c6:	4621      	mov	r1, r4
 80081c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80081cc:	f7f8 fa24 	bl	8000618 <__aeabi_dmul>
 80081d0:	4603      	mov	r3, r0
 80081d2:	460c      	mov	r4, r1
 80081d4:	4618      	mov	r0, r3
 80081d6:	4621      	mov	r1, r4
 80081d8:	f04f 0200 	mov.w	r2, #0
 80081dc:	4b79      	ldr	r3, [pc, #484]	; (80083c4 <scaraFLowScurve+0x2d4>)
 80081de:	f7f8 fb45 	bl	800086c <__aeabi_ddiv>
 80081e2:	4603      	mov	r3, r0
 80081e4:	460c      	mov	r4, r1
 80081e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081e8:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 80081ec:	f000 be56 	b.w	8008e9c <scaraFLowScurve+0xdac>
		 // Phase 2
		 } else if ( (tm <= time) && ( time < (2*tm) ) ) {
 80081f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80081f4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80081f8:	f7f8 fc8a 	bl	8000b10 <__aeabi_dcmple>
 80081fc:	4603      	mov	r3, r0
 80081fe:	2b00      	cmp	r3, #0
 8008200:	f000 80e2 	beq.w	80083c8 <scaraFLowScurve+0x2d8>
 8008204:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008208:	4602      	mov	r2, r0
 800820a:	460b      	mov	r3, r1
 800820c:	f7f8 f84e 	bl	80002ac <__adddf3>
 8008210:	4603      	mov	r3, r0
 8008212:	460c      	mov	r4, r1
 8008214:	461a      	mov	r2, r3
 8008216:	4623      	mov	r3, r4
 8008218:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800821c:	f7f8 fc6e 	bl	8000afc <__aeabi_dcmplt>
 8008220:	4603      	mov	r3, r0
 8008222:	2b00      	cmp	r3, #0
 8008224:	f000 80d0 	beq.w	80083c8 <scaraFLowScurve+0x2d8>
			 t = time - tm;
 8008228:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800822c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008230:	f7f8 f83a 	bl	80002a8 <__aeabi_dsub>
 8008234:	4603      	mov	r3, r0
 8008236:	460c      	mov	r4, r1
 8008238:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*tm - j_max*t;
 800823c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008240:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008244:	f7f8 f9e8 	bl	8000618 <__aeabi_dmul>
 8008248:	4603      	mov	r3, r0
 800824a:	460c      	mov	r4, r1
 800824c:	4625      	mov	r5, r4
 800824e:	461c      	mov	r4, r3
 8008250:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008254:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008258:	f7f8 f9de 	bl	8000618 <__aeabi_dmul>
 800825c:	4602      	mov	r2, r0
 800825e:	460b      	mov	r3, r1
 8008260:	4620      	mov	r0, r4
 8008262:	4629      	mov	r1, r5
 8008264:	f7f8 f820 	bl	80002a8 <__aeabi_dsub>
 8008268:	4603      	mov	r3, r0
 800826a:	460c      	mov	r4, r1
 800826c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800826e:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current 	= 	scurve->v_1 + j_max*tm*t - 0.5*j_max*t*t;
 8008272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008274:	e9d3 451e 	ldrd	r4, r5, [r3, #120]	; 0x78
 8008278:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800827c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008280:	f7f8 f9ca 	bl	8000618 <__aeabi_dmul>
 8008284:	4602      	mov	r2, r0
 8008286:	460b      	mov	r3, r1
 8008288:	4610      	mov	r0, r2
 800828a:	4619      	mov	r1, r3
 800828c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008290:	f7f8 f9c2 	bl	8000618 <__aeabi_dmul>
 8008294:	4602      	mov	r2, r0
 8008296:	460b      	mov	r3, r1
 8008298:	4620      	mov	r0, r4
 800829a:	4629      	mov	r1, r5
 800829c:	f7f8 f806 	bl	80002ac <__adddf3>
 80082a0:	4603      	mov	r3, r0
 80082a2:	460c      	mov	r4, r1
 80082a4:	4625      	mov	r5, r4
 80082a6:	461c      	mov	r4, r3
 80082a8:	f04f 0200 	mov.w	r2, #0
 80082ac:	4b44      	ldr	r3, [pc, #272]	; (80083c0 <scaraFLowScurve+0x2d0>)
 80082ae:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80082b2:	f7f8 f9b1 	bl	8000618 <__aeabi_dmul>
 80082b6:	4602      	mov	r2, r0
 80082b8:	460b      	mov	r3, r1
 80082ba:	4610      	mov	r0, r2
 80082bc:	4619      	mov	r1, r3
 80082be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80082c2:	f7f8 f9a9 	bl	8000618 <__aeabi_dmul>
 80082c6:	4602      	mov	r2, r0
 80082c8:	460b      	mov	r3, r1
 80082ca:	4610      	mov	r0, r2
 80082cc:	4619      	mov	r1, r3
 80082ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80082d2:	f7f8 f9a1 	bl	8000618 <__aeabi_dmul>
 80082d6:	4602      	mov	r2, r0
 80082d8:	460b      	mov	r3, r1
 80082da:	4620      	mov	r0, r4
 80082dc:	4629      	mov	r1, r5
 80082de:	f7f7 ffe3 	bl	80002a8 <__aeabi_dsub>
 80082e2:	4603      	mov	r3, r0
 80082e4:	460c      	mov	r4, r1
 80082e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082e8:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current 	=	scurve->s_1 + scurve->v_1*t + 0.5*j_max*tm*t*t - j_max*t*t*t/6;
 80082ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ee:	e9d3 4520 	ldrd	r4, r5, [r3, #128]	; 0x80
 80082f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f4:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 80082f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80082fc:	f7f8 f98c 	bl	8000618 <__aeabi_dmul>
 8008300:	4602      	mov	r2, r0
 8008302:	460b      	mov	r3, r1
 8008304:	4620      	mov	r0, r4
 8008306:	4629      	mov	r1, r5
 8008308:	f7f7 ffd0 	bl	80002ac <__adddf3>
 800830c:	4603      	mov	r3, r0
 800830e:	460c      	mov	r4, r1
 8008310:	4625      	mov	r5, r4
 8008312:	461c      	mov	r4, r3
 8008314:	f04f 0200 	mov.w	r2, #0
 8008318:	4b29      	ldr	r3, [pc, #164]	; (80083c0 <scaraFLowScurve+0x2d0>)
 800831a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800831e:	f7f8 f97b 	bl	8000618 <__aeabi_dmul>
 8008322:	4602      	mov	r2, r0
 8008324:	460b      	mov	r3, r1
 8008326:	4610      	mov	r0, r2
 8008328:	4619      	mov	r1, r3
 800832a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800832e:	f7f8 f973 	bl	8000618 <__aeabi_dmul>
 8008332:	4602      	mov	r2, r0
 8008334:	460b      	mov	r3, r1
 8008336:	4610      	mov	r0, r2
 8008338:	4619      	mov	r1, r3
 800833a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800833e:	f7f8 f96b 	bl	8000618 <__aeabi_dmul>
 8008342:	4602      	mov	r2, r0
 8008344:	460b      	mov	r3, r1
 8008346:	4610      	mov	r0, r2
 8008348:	4619      	mov	r1, r3
 800834a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800834e:	f7f8 f963 	bl	8000618 <__aeabi_dmul>
 8008352:	4602      	mov	r2, r0
 8008354:	460b      	mov	r3, r1
 8008356:	4620      	mov	r0, r4
 8008358:	4629      	mov	r1, r5
 800835a:	f7f7 ffa7 	bl	80002ac <__adddf3>
 800835e:	4603      	mov	r3, r0
 8008360:	460c      	mov	r4, r1
 8008362:	4625      	mov	r5, r4
 8008364:	461c      	mov	r4, r3
 8008366:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800836a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800836e:	f7f8 f953 	bl	8000618 <__aeabi_dmul>
 8008372:	4602      	mov	r2, r0
 8008374:	460b      	mov	r3, r1
 8008376:	4610      	mov	r0, r2
 8008378:	4619      	mov	r1, r3
 800837a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800837e:	f7f8 f94b 	bl	8000618 <__aeabi_dmul>
 8008382:	4602      	mov	r2, r0
 8008384:	460b      	mov	r3, r1
 8008386:	4610      	mov	r0, r2
 8008388:	4619      	mov	r1, r3
 800838a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800838e:	f7f8 f943 	bl	8000618 <__aeabi_dmul>
 8008392:	4602      	mov	r2, r0
 8008394:	460b      	mov	r3, r1
 8008396:	4610      	mov	r0, r2
 8008398:	4619      	mov	r1, r3
 800839a:	f04f 0200 	mov.w	r2, #0
 800839e:	4b09      	ldr	r3, [pc, #36]	; (80083c4 <scaraFLowScurve+0x2d4>)
 80083a0:	f7f8 fa64 	bl	800086c <__aeabi_ddiv>
 80083a4:	4602      	mov	r2, r0
 80083a6:	460b      	mov	r3, r1
 80083a8:	4620      	mov	r0, r4
 80083aa:	4629      	mov	r1, r5
 80083ac:	f7f7 ff7c 	bl	80002a8 <__aeabi_dsub>
 80083b0:	4603      	mov	r3, r0
 80083b2:	460c      	mov	r4, r1
 80083b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083b6:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 80083ba:	f000 bd6f 	b.w	8008e9c <scaraFLowScurve+0xdac>
 80083be:	bf00      	nop
 80083c0:	3fe00000 	.word	0x3fe00000
 80083c4:	40180000 	.word	0x40180000
		 // Phase 3: does not exist
		 // Phase 4
		 } else if ( ((2*tm) <= time) && ( time < (3*tm)) ) {
 80083c8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80083cc:	4602      	mov	r2, r0
 80083ce:	460b      	mov	r3, r1
 80083d0:	f7f7 ff6c 	bl	80002ac <__adddf3>
 80083d4:	4603      	mov	r3, r0
 80083d6:	460c      	mov	r4, r1
 80083d8:	461a      	mov	r2, r3
 80083da:	4623      	mov	r3, r4
 80083dc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80083e0:	f7f8 fba0 	bl	8000b24 <__aeabi_dcmpge>
 80083e4:	4603      	mov	r3, r0
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	f000 80a2 	beq.w	8008530 <scaraFLowScurve+0x440>
 80083ec:	f04f 0200 	mov.w	r2, #0
 80083f0:	4b4c      	ldr	r3, [pc, #304]	; (8008524 <scaraFLowScurve+0x434>)
 80083f2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80083f6:	f7f8 f90f 	bl	8000618 <__aeabi_dmul>
 80083fa:	4603      	mov	r3, r0
 80083fc:	460c      	mov	r4, r1
 80083fe:	461a      	mov	r2, r3
 8008400:	4623      	mov	r3, r4
 8008402:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008406:	f7f8 fb79 	bl	8000afc <__aeabi_dcmplt>
 800840a:	4603      	mov	r3, r0
 800840c:	2b00      	cmp	r3, #0
 800840e:	f000 808f 	beq.w	8008530 <scaraFLowScurve+0x440>
			 t = time - 2*tm;
 8008412:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008416:	4602      	mov	r2, r0
 8008418:	460b      	mov	r3, r1
 800841a:	f7f7 ff47 	bl	80002ac <__adddf3>
 800841e:	4603      	mov	r3, r0
 8008420:	460c      	mov	r4, r1
 8008422:	461a      	mov	r2, r3
 8008424:	4623      	mov	r3, r4
 8008426:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800842a:	f7f7 ff3d 	bl	80002a8 <__aeabi_dsub>
 800842e:	4603      	mov	r3, r0
 8008430:	460c      	mov	r4, r1
 8008432:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	=	-j_max*t;
 8008436:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008438:	613b      	str	r3, [r7, #16]
 800843a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800843c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008440:	617b      	str	r3, [r7, #20]
 8008442:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008446:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800844a:	f7f8 f8e5 	bl	8000618 <__aeabi_dmul>
 800844e:	4603      	mov	r3, r0
 8008450:	460c      	mov	r4, r1
 8008452:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008454:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_2 - 0.5*j_max*t*t;
 8008458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800845a:	e9d3 4522 	ldrd	r4, r5, [r3, #136]	; 0x88
 800845e:	f04f 0200 	mov.w	r2, #0
 8008462:	4b31      	ldr	r3, [pc, #196]	; (8008528 <scaraFLowScurve+0x438>)
 8008464:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008468:	f7f8 f8d6 	bl	8000618 <__aeabi_dmul>
 800846c:	4602      	mov	r2, r0
 800846e:	460b      	mov	r3, r1
 8008470:	4610      	mov	r0, r2
 8008472:	4619      	mov	r1, r3
 8008474:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008478:	f7f8 f8ce 	bl	8000618 <__aeabi_dmul>
 800847c:	4602      	mov	r2, r0
 800847e:	460b      	mov	r3, r1
 8008480:	4610      	mov	r0, r2
 8008482:	4619      	mov	r1, r3
 8008484:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008488:	f7f8 f8c6 	bl	8000618 <__aeabi_dmul>
 800848c:	4602      	mov	r2, r0
 800848e:	460b      	mov	r3, r1
 8008490:	4620      	mov	r0, r4
 8008492:	4629      	mov	r1, r5
 8008494:	f7f7 ff08 	bl	80002a8 <__aeabi_dsub>
 8008498:	4603      	mov	r3, r0
 800849a:	460c      	mov	r4, r1
 800849c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800849e:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_2 + scurve->v_2*t - j_max*t*t*t/6;
 80084a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a4:	e9d3 4524 	ldrd	r4, r5, [r3, #144]	; 0x90
 80084a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084aa:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 80084ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80084b2:	f7f8 f8b1 	bl	8000618 <__aeabi_dmul>
 80084b6:	4602      	mov	r2, r0
 80084b8:	460b      	mov	r3, r1
 80084ba:	4620      	mov	r0, r4
 80084bc:	4629      	mov	r1, r5
 80084be:	f7f7 fef5 	bl	80002ac <__adddf3>
 80084c2:	4603      	mov	r3, r0
 80084c4:	460c      	mov	r4, r1
 80084c6:	4625      	mov	r5, r4
 80084c8:	461c      	mov	r4, r3
 80084ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80084ce:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80084d2:	f7f8 f8a1 	bl	8000618 <__aeabi_dmul>
 80084d6:	4602      	mov	r2, r0
 80084d8:	460b      	mov	r3, r1
 80084da:	4610      	mov	r0, r2
 80084dc:	4619      	mov	r1, r3
 80084de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80084e2:	f7f8 f899 	bl	8000618 <__aeabi_dmul>
 80084e6:	4602      	mov	r2, r0
 80084e8:	460b      	mov	r3, r1
 80084ea:	4610      	mov	r0, r2
 80084ec:	4619      	mov	r1, r3
 80084ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80084f2:	f7f8 f891 	bl	8000618 <__aeabi_dmul>
 80084f6:	4602      	mov	r2, r0
 80084f8:	460b      	mov	r3, r1
 80084fa:	4610      	mov	r0, r2
 80084fc:	4619      	mov	r1, r3
 80084fe:	f04f 0200 	mov.w	r2, #0
 8008502:	4b0a      	ldr	r3, [pc, #40]	; (800852c <scaraFLowScurve+0x43c>)
 8008504:	f7f8 f9b2 	bl	800086c <__aeabi_ddiv>
 8008508:	4602      	mov	r2, r0
 800850a:	460b      	mov	r3, r1
 800850c:	4620      	mov	r0, r4
 800850e:	4629      	mov	r1, r5
 8008510:	f7f7 feca 	bl	80002a8 <__aeabi_dsub>
 8008514:	4603      	mov	r3, r0
 8008516:	460c      	mov	r4, r1
 8008518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800851a:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 800851e:	f000 bcbd 	b.w	8008e9c <scaraFLowScurve+0xdac>
 8008522:	bf00      	nop
 8008524:	40080000 	.word	0x40080000
 8008528:	3fe00000 	.word	0x3fe00000
 800852c:	40180000 	.word	0x40180000
		 // Phase 5
		 } else if ( ((3*tm) <= time) && ( time < (4*tm)) ) {
 8008530:	f04f 0200 	mov.w	r2, #0
 8008534:	4b88      	ldr	r3, [pc, #544]	; (8008758 <scaraFLowScurve+0x668>)
 8008536:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800853a:	f7f8 f86d 	bl	8000618 <__aeabi_dmul>
 800853e:	4603      	mov	r3, r0
 8008540:	460c      	mov	r4, r1
 8008542:	461a      	mov	r2, r3
 8008544:	4623      	mov	r3, r4
 8008546:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800854a:	f7f8 faeb 	bl	8000b24 <__aeabi_dcmpge>
 800854e:	4603      	mov	r3, r0
 8008550:	2b00      	cmp	r3, #0
 8008552:	f000 80ec 	beq.w	800872e <scaraFLowScurve+0x63e>
 8008556:	f04f 0200 	mov.w	r2, #0
 800855a:	4b80      	ldr	r3, [pc, #512]	; (800875c <scaraFLowScurve+0x66c>)
 800855c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008560:	f7f8 f85a 	bl	8000618 <__aeabi_dmul>
 8008564:	4603      	mov	r3, r0
 8008566:	460c      	mov	r4, r1
 8008568:	461a      	mov	r2, r3
 800856a:	4623      	mov	r3, r4
 800856c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008570:	f7f8 fac4 	bl	8000afc <__aeabi_dcmplt>
 8008574:	4603      	mov	r3, r0
 8008576:	2b00      	cmp	r3, #0
 8008578:	f000 80d9 	beq.w	800872e <scaraFLowScurve+0x63e>
			 t = time - 3*tm;
 800857c:	f04f 0200 	mov.w	r2, #0
 8008580:	4b75      	ldr	r3, [pc, #468]	; (8008758 <scaraFLowScurve+0x668>)
 8008582:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008586:	f7f8 f847 	bl	8000618 <__aeabi_dmul>
 800858a:	4603      	mov	r3, r0
 800858c:	460c      	mov	r4, r1
 800858e:	461a      	mov	r2, r3
 8008590:	4623      	mov	r3, r4
 8008592:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008596:	f7f7 fe87 	bl	80002a8 <__aeabi_dsub>
 800859a:	4603      	mov	r3, r0
 800859c:	460c      	mov	r4, r1
 800859e:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current	=	-j_max*tm + j_max*t;
 80085a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085a4:	60bb      	str	r3, [r7, #8]
 80085a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80085ac:	60fb      	str	r3, [r7, #12]
 80085ae:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80085b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80085b6:	f7f8 f82f 	bl	8000618 <__aeabi_dmul>
 80085ba:	4603      	mov	r3, r0
 80085bc:	460c      	mov	r4, r1
 80085be:	4625      	mov	r5, r4
 80085c0:	461c      	mov	r4, r3
 80085c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80085c6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80085ca:	f7f8 f825 	bl	8000618 <__aeabi_dmul>
 80085ce:	4602      	mov	r2, r0
 80085d0:	460b      	mov	r3, r1
 80085d2:	4620      	mov	r0, r4
 80085d4:	4629      	mov	r1, r5
 80085d6:	f7f7 fe69 	bl	80002ac <__adddf3>
 80085da:	4603      	mov	r3, r0
 80085dc:	460c      	mov	r4, r1
 80085de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085e0:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_4 - j_max*tm*t + 0.5*j_max*t*t;
 80085e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e6:	e9d3 452a 	ldrd	r4, r5, [r3, #168]	; 0xa8
 80085ea:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80085ee:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80085f2:	f7f8 f811 	bl	8000618 <__aeabi_dmul>
 80085f6:	4602      	mov	r2, r0
 80085f8:	460b      	mov	r3, r1
 80085fa:	4610      	mov	r0, r2
 80085fc:	4619      	mov	r1, r3
 80085fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008602:	f7f8 f809 	bl	8000618 <__aeabi_dmul>
 8008606:	4602      	mov	r2, r0
 8008608:	460b      	mov	r3, r1
 800860a:	4620      	mov	r0, r4
 800860c:	4629      	mov	r1, r5
 800860e:	f7f7 fe4b 	bl	80002a8 <__aeabi_dsub>
 8008612:	4603      	mov	r3, r0
 8008614:	460c      	mov	r4, r1
 8008616:	4625      	mov	r5, r4
 8008618:	461c      	mov	r4, r3
 800861a:	f04f 0200 	mov.w	r2, #0
 800861e:	4b50      	ldr	r3, [pc, #320]	; (8008760 <scaraFLowScurve+0x670>)
 8008620:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008624:	f7f7 fff8 	bl	8000618 <__aeabi_dmul>
 8008628:	4602      	mov	r2, r0
 800862a:	460b      	mov	r3, r1
 800862c:	4610      	mov	r0, r2
 800862e:	4619      	mov	r1, r3
 8008630:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008634:	f7f7 fff0 	bl	8000618 <__aeabi_dmul>
 8008638:	4602      	mov	r2, r0
 800863a:	460b      	mov	r3, r1
 800863c:	4610      	mov	r0, r2
 800863e:	4619      	mov	r1, r3
 8008640:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008644:	f7f7 ffe8 	bl	8000618 <__aeabi_dmul>
 8008648:	4602      	mov	r2, r0
 800864a:	460b      	mov	r3, r1
 800864c:	4620      	mov	r0, r4
 800864e:	4629      	mov	r1, r5
 8008650:	f7f7 fe2c 	bl	80002ac <__adddf3>
 8008654:	4603      	mov	r3, r0
 8008656:	460c      	mov	r4, r1
 8008658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800865a:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_4 + scurve->v_4*t
 800865e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008660:	e9d3 452c 	ldrd	r4, r5, [r3, #176]	; 0xb0
 8008664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008666:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
 800866a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800866e:	f7f7 ffd3 	bl	8000618 <__aeabi_dmul>
 8008672:	4602      	mov	r2, r0
 8008674:	460b      	mov	r3, r1
 8008676:	4620      	mov	r0, r4
 8008678:	4629      	mov	r1, r5
 800867a:	f7f7 fe17 	bl	80002ac <__adddf3>
 800867e:	4603      	mov	r3, r0
 8008680:	460c      	mov	r4, r1
 8008682:	4625      	mov	r5, r4
 8008684:	461c      	mov	r4, r3
									- 0.5*j_max*tm*t*t
 8008686:	f04f 0200 	mov.w	r2, #0
 800868a:	4b35      	ldr	r3, [pc, #212]	; (8008760 <scaraFLowScurve+0x670>)
 800868c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008690:	f7f7 ffc2 	bl	8000618 <__aeabi_dmul>
 8008694:	4602      	mov	r2, r0
 8008696:	460b      	mov	r3, r1
 8008698:	4610      	mov	r0, r2
 800869a:	4619      	mov	r1, r3
 800869c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80086a0:	f7f7 ffba 	bl	8000618 <__aeabi_dmul>
 80086a4:	4602      	mov	r2, r0
 80086a6:	460b      	mov	r3, r1
 80086a8:	4610      	mov	r0, r2
 80086aa:	4619      	mov	r1, r3
 80086ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80086b0:	f7f7 ffb2 	bl	8000618 <__aeabi_dmul>
 80086b4:	4602      	mov	r2, r0
 80086b6:	460b      	mov	r3, r1
 80086b8:	4610      	mov	r0, r2
 80086ba:	4619      	mov	r1, r3
 80086bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80086c0:	f7f7 ffaa 	bl	8000618 <__aeabi_dmul>
 80086c4:	4602      	mov	r2, r0
 80086c6:	460b      	mov	r3, r1
 80086c8:	4620      	mov	r0, r4
 80086ca:	4629      	mov	r1, r5
 80086cc:	f7f7 fdec 	bl	80002a8 <__aeabi_dsub>
 80086d0:	4603      	mov	r3, r0
 80086d2:	460c      	mov	r4, r1
 80086d4:	4625      	mov	r5, r4
 80086d6:	461c      	mov	r4, r3
									+ j_max*t*t*t/6;
 80086d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80086dc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80086e0:	f7f7 ff9a 	bl	8000618 <__aeabi_dmul>
 80086e4:	4602      	mov	r2, r0
 80086e6:	460b      	mov	r3, r1
 80086e8:	4610      	mov	r0, r2
 80086ea:	4619      	mov	r1, r3
 80086ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80086f0:	f7f7 ff92 	bl	8000618 <__aeabi_dmul>
 80086f4:	4602      	mov	r2, r0
 80086f6:	460b      	mov	r3, r1
 80086f8:	4610      	mov	r0, r2
 80086fa:	4619      	mov	r1, r3
 80086fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008700:	f7f7 ff8a 	bl	8000618 <__aeabi_dmul>
 8008704:	4602      	mov	r2, r0
 8008706:	460b      	mov	r3, r1
 8008708:	4610      	mov	r0, r2
 800870a:	4619      	mov	r1, r3
 800870c:	f04f 0200 	mov.w	r2, #0
 8008710:	4b14      	ldr	r3, [pc, #80]	; (8008764 <scaraFLowScurve+0x674>)
 8008712:	f7f8 f8ab 	bl	800086c <__aeabi_ddiv>
 8008716:	4602      	mov	r2, r0
 8008718:	460b      	mov	r3, r1
 800871a:	4620      	mov	r0, r4
 800871c:	4629      	mov	r1, r5
 800871e:	f7f7 fdc5 	bl	80002ac <__adddf3>
 8008722:	4603      	mov	r3, r0
 8008724:	460c      	mov	r4, r1
			 scurve->s_current	=	scurve->s_4 + scurve->v_4*t
 8008726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008728:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 800872c:	e3b6      	b.n	8008e9c <scaraFLowScurve+0xdac>
		 } else {
			 scurve->a_current = 0;
 800872e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008730:	f04f 0300 	mov.w	r3, #0
 8008734:	f04f 0400 	mov.w	r4, #0
 8008738:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current = 0;
 800873c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800873e:	f04f 0300 	mov.w	r3, #0
 8008742:	f04f 0400 	mov.w	r4, #0
 8008746:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current = scurve->total_s;
 800874a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800874c:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8008750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008752:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8008756:	e3a1      	b.n	8008e9c <scaraFLowScurve+0xdac>
 8008758:	40080000 	.word	0x40080000
 800875c:	40100000 	.word	0x40100000
 8008760:	3fe00000 	.word	0x3fe00000
 8008764:	40180000 	.word	0x40180000
		 }

	 // SCURVE 5 PHASE: tc > 0
	 } else if ( 5 == scurve->num_of_phase) {
 8008768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800876a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800876e:	2b05      	cmp	r3, #5
 8008770:	f040 8392 	bne.w	8008e98 <scaraFLowScurve+0xda8>
		 // Phase 1
		 if ( (0 <= time) && ( time < tm)) {
 8008774:	f04f 0200 	mov.w	r2, #0
 8008778:	f04f 0300 	mov.w	r3, #0
 800877c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008780:	f7f8 f9d0 	bl	8000b24 <__aeabi_dcmpge>
 8008784:	4603      	mov	r3, r0
 8008786:	2b00      	cmp	r3, #0
 8008788:	d058      	beq.n	800883c <scaraFLowScurve+0x74c>
 800878a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800878e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008792:	f7f8 f9b3 	bl	8000afc <__aeabi_dcmplt>
 8008796:	4603      	mov	r3, r0
 8008798:	2b00      	cmp	r3, #0
 800879a:	d04f      	beq.n	800883c <scaraFLowScurve+0x74c>
			 t = time;
 800879c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80087a0:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*t;
 80087a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80087a8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80087ac:	f7f7 ff34 	bl	8000618 <__aeabi_dmul>
 80087b0:	4603      	mov	r3, r0
 80087b2:	460c      	mov	r4, r1
 80087b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087b6:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	= 	0.5*j_max*t*t;
 80087ba:	f04f 0200 	mov.w	r2, #0
 80087be:	4b91      	ldr	r3, [pc, #580]	; (8008a04 <scaraFLowScurve+0x914>)
 80087c0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80087c4:	f7f7 ff28 	bl	8000618 <__aeabi_dmul>
 80087c8:	4603      	mov	r3, r0
 80087ca:	460c      	mov	r4, r1
 80087cc:	4618      	mov	r0, r3
 80087ce:	4621      	mov	r1, r4
 80087d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80087d4:	f7f7 ff20 	bl	8000618 <__aeabi_dmul>
 80087d8:	4603      	mov	r3, r0
 80087da:	460c      	mov	r4, r1
 80087dc:	4618      	mov	r0, r3
 80087de:	4621      	mov	r1, r4
 80087e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80087e4:	f7f7 ff18 	bl	8000618 <__aeabi_dmul>
 80087e8:	4603      	mov	r3, r0
 80087ea:	460c      	mov	r4, r1
 80087ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087ee:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current 	= 	j_max*t*t*t/6;
 80087f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80087f6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80087fa:	f7f7 ff0d 	bl	8000618 <__aeabi_dmul>
 80087fe:	4603      	mov	r3, r0
 8008800:	460c      	mov	r4, r1
 8008802:	4618      	mov	r0, r3
 8008804:	4621      	mov	r1, r4
 8008806:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800880a:	f7f7 ff05 	bl	8000618 <__aeabi_dmul>
 800880e:	4603      	mov	r3, r0
 8008810:	460c      	mov	r4, r1
 8008812:	4618      	mov	r0, r3
 8008814:	4621      	mov	r1, r4
 8008816:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800881a:	f7f7 fefd 	bl	8000618 <__aeabi_dmul>
 800881e:	4603      	mov	r3, r0
 8008820:	460c      	mov	r4, r1
 8008822:	4618      	mov	r0, r3
 8008824:	4621      	mov	r1, r4
 8008826:	f04f 0200 	mov.w	r2, #0
 800882a:	4b77      	ldr	r3, [pc, #476]	; (8008a08 <scaraFLowScurve+0x918>)
 800882c:	f7f8 f81e 	bl	800086c <__aeabi_ddiv>
 8008830:	4603      	mov	r3, r0
 8008832:	460c      	mov	r4, r1
 8008834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008836:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 800883a:	e32f      	b.n	8008e9c <scaraFLowScurve+0xdac>
		 // Phase 2
		 } else if ( (tm <= time) && ( time < (2*tm) ) ) {
 800883c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008840:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008844:	f7f8 f964 	bl	8000b10 <__aeabi_dcmple>
 8008848:	4603      	mov	r3, r0
 800884a:	2b00      	cmp	r3, #0
 800884c:	f000 80de 	beq.w	8008a0c <scaraFLowScurve+0x91c>
 8008850:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008854:	4602      	mov	r2, r0
 8008856:	460b      	mov	r3, r1
 8008858:	f7f7 fd28 	bl	80002ac <__adddf3>
 800885c:	4602      	mov	r2, r0
 800885e:	460b      	mov	r3, r1
 8008860:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008864:	f7f8 f94a 	bl	8000afc <__aeabi_dcmplt>
 8008868:	4603      	mov	r3, r0
 800886a:	2b00      	cmp	r3, #0
 800886c:	f000 80ce 	beq.w	8008a0c <scaraFLowScurve+0x91c>
			 t = time - tm;
 8008870:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008874:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008878:	f7f7 fd16 	bl	80002a8 <__aeabi_dsub>
 800887c:	4603      	mov	r3, r0
 800887e:	460c      	mov	r4, r1
 8008880:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*tm - j_max*t;
 8008884:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008888:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800888c:	f7f7 fec4 	bl	8000618 <__aeabi_dmul>
 8008890:	4603      	mov	r3, r0
 8008892:	460c      	mov	r4, r1
 8008894:	4625      	mov	r5, r4
 8008896:	461c      	mov	r4, r3
 8008898:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800889c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80088a0:	f7f7 feba 	bl	8000618 <__aeabi_dmul>
 80088a4:	4602      	mov	r2, r0
 80088a6:	460b      	mov	r3, r1
 80088a8:	4620      	mov	r0, r4
 80088aa:	4629      	mov	r1, r5
 80088ac:	f7f7 fcfc 	bl	80002a8 <__aeabi_dsub>
 80088b0:	4603      	mov	r3, r0
 80088b2:	460c      	mov	r4, r1
 80088b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088b6:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current 	= 	scurve->v_1 + j_max*tm*t - 0.5*j_max*t*t;
 80088ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088bc:	e9d3 451e 	ldrd	r4, r5, [r3, #120]	; 0x78
 80088c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80088c4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80088c8:	f7f7 fea6 	bl	8000618 <__aeabi_dmul>
 80088cc:	4602      	mov	r2, r0
 80088ce:	460b      	mov	r3, r1
 80088d0:	4610      	mov	r0, r2
 80088d2:	4619      	mov	r1, r3
 80088d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80088d8:	f7f7 fe9e 	bl	8000618 <__aeabi_dmul>
 80088dc:	4602      	mov	r2, r0
 80088de:	460b      	mov	r3, r1
 80088e0:	4620      	mov	r0, r4
 80088e2:	4629      	mov	r1, r5
 80088e4:	f7f7 fce2 	bl	80002ac <__adddf3>
 80088e8:	4603      	mov	r3, r0
 80088ea:	460c      	mov	r4, r1
 80088ec:	4625      	mov	r5, r4
 80088ee:	461c      	mov	r4, r3
 80088f0:	f04f 0200 	mov.w	r2, #0
 80088f4:	4b43      	ldr	r3, [pc, #268]	; (8008a04 <scaraFLowScurve+0x914>)
 80088f6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80088fa:	f7f7 fe8d 	bl	8000618 <__aeabi_dmul>
 80088fe:	4602      	mov	r2, r0
 8008900:	460b      	mov	r3, r1
 8008902:	4610      	mov	r0, r2
 8008904:	4619      	mov	r1, r3
 8008906:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800890a:	f7f7 fe85 	bl	8000618 <__aeabi_dmul>
 800890e:	4602      	mov	r2, r0
 8008910:	460b      	mov	r3, r1
 8008912:	4610      	mov	r0, r2
 8008914:	4619      	mov	r1, r3
 8008916:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800891a:	f7f7 fe7d 	bl	8000618 <__aeabi_dmul>
 800891e:	4602      	mov	r2, r0
 8008920:	460b      	mov	r3, r1
 8008922:	4620      	mov	r0, r4
 8008924:	4629      	mov	r1, r5
 8008926:	f7f7 fcbf 	bl	80002a8 <__aeabi_dsub>
 800892a:	4603      	mov	r3, r0
 800892c:	460c      	mov	r4, r1
 800892e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008930:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current 	=	scurve->s_1 + scurve->v_1*t + 0.5*j_max*tm*t*t - j_max*t*t*t/6;
 8008934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008936:	e9d3 4520 	ldrd	r4, r5, [r3, #128]	; 0x80
 800893a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800893c:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8008940:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008944:	f7f7 fe68 	bl	8000618 <__aeabi_dmul>
 8008948:	4602      	mov	r2, r0
 800894a:	460b      	mov	r3, r1
 800894c:	4620      	mov	r0, r4
 800894e:	4629      	mov	r1, r5
 8008950:	f7f7 fcac 	bl	80002ac <__adddf3>
 8008954:	4603      	mov	r3, r0
 8008956:	460c      	mov	r4, r1
 8008958:	4625      	mov	r5, r4
 800895a:	461c      	mov	r4, r3
 800895c:	f04f 0200 	mov.w	r2, #0
 8008960:	4b28      	ldr	r3, [pc, #160]	; (8008a04 <scaraFLowScurve+0x914>)
 8008962:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008966:	f7f7 fe57 	bl	8000618 <__aeabi_dmul>
 800896a:	4602      	mov	r2, r0
 800896c:	460b      	mov	r3, r1
 800896e:	4610      	mov	r0, r2
 8008970:	4619      	mov	r1, r3
 8008972:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008976:	f7f7 fe4f 	bl	8000618 <__aeabi_dmul>
 800897a:	4602      	mov	r2, r0
 800897c:	460b      	mov	r3, r1
 800897e:	4610      	mov	r0, r2
 8008980:	4619      	mov	r1, r3
 8008982:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008986:	f7f7 fe47 	bl	8000618 <__aeabi_dmul>
 800898a:	4602      	mov	r2, r0
 800898c:	460b      	mov	r3, r1
 800898e:	4610      	mov	r0, r2
 8008990:	4619      	mov	r1, r3
 8008992:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008996:	f7f7 fe3f 	bl	8000618 <__aeabi_dmul>
 800899a:	4602      	mov	r2, r0
 800899c:	460b      	mov	r3, r1
 800899e:	4620      	mov	r0, r4
 80089a0:	4629      	mov	r1, r5
 80089a2:	f7f7 fc83 	bl	80002ac <__adddf3>
 80089a6:	4603      	mov	r3, r0
 80089a8:	460c      	mov	r4, r1
 80089aa:	4625      	mov	r5, r4
 80089ac:	461c      	mov	r4, r3
 80089ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80089b2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80089b6:	f7f7 fe2f 	bl	8000618 <__aeabi_dmul>
 80089ba:	4602      	mov	r2, r0
 80089bc:	460b      	mov	r3, r1
 80089be:	4610      	mov	r0, r2
 80089c0:	4619      	mov	r1, r3
 80089c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80089c6:	f7f7 fe27 	bl	8000618 <__aeabi_dmul>
 80089ca:	4602      	mov	r2, r0
 80089cc:	460b      	mov	r3, r1
 80089ce:	4610      	mov	r0, r2
 80089d0:	4619      	mov	r1, r3
 80089d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80089d6:	f7f7 fe1f 	bl	8000618 <__aeabi_dmul>
 80089da:	4602      	mov	r2, r0
 80089dc:	460b      	mov	r3, r1
 80089de:	4610      	mov	r0, r2
 80089e0:	4619      	mov	r1, r3
 80089e2:	f04f 0200 	mov.w	r2, #0
 80089e6:	4b08      	ldr	r3, [pc, #32]	; (8008a08 <scaraFLowScurve+0x918>)
 80089e8:	f7f7 ff40 	bl	800086c <__aeabi_ddiv>
 80089ec:	4602      	mov	r2, r0
 80089ee:	460b      	mov	r3, r1
 80089f0:	4620      	mov	r0, r4
 80089f2:	4629      	mov	r1, r5
 80089f4:	f7f7 fc58 	bl	80002a8 <__aeabi_dsub>
 80089f8:	4603      	mov	r3, r0
 80089fa:	460c      	mov	r4, r1
 80089fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089fe:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8008a02:	e24b      	b.n	8008e9c <scaraFLowScurve+0xdac>
 8008a04:	3fe00000 	.word	0x3fe00000
 8008a08:	40180000 	.word	0x40180000
		 // Phase 3
		 } else if ( ((2*tm) <= time) && ( time < (2*tm + tc)) ) {
 8008a0c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008a10:	4602      	mov	r2, r0
 8008a12:	460b      	mov	r3, r1
 8008a14:	f7f7 fc4a 	bl	80002ac <__adddf3>
 8008a18:	4602      	mov	r2, r0
 8008a1a:	460b      	mov	r3, r1
 8008a1c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008a20:	f7f8 f880 	bl	8000b24 <__aeabi_dcmpge>
 8008a24:	4603      	mov	r3, r0
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d04b      	beq.n	8008ac2 <scaraFLowScurve+0x9d2>
 8008a2a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008a2e:	4602      	mov	r2, r0
 8008a30:	460b      	mov	r3, r1
 8008a32:	f7f7 fc3b 	bl	80002ac <__adddf3>
 8008a36:	4602      	mov	r2, r0
 8008a38:	460b      	mov	r3, r1
 8008a3a:	4610      	mov	r0, r2
 8008a3c:	4619      	mov	r1, r3
 8008a3e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008a42:	f7f7 fc33 	bl	80002ac <__adddf3>
 8008a46:	4602      	mov	r2, r0
 8008a48:	460b      	mov	r3, r1
 8008a4a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008a4e:	f7f8 f855 	bl	8000afc <__aeabi_dcmplt>
 8008a52:	4603      	mov	r3, r0
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d034      	beq.n	8008ac2 <scaraFLowScurve+0x9d2>
			 t = time - 2*tm;
 8008a58:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008a5c:	4602      	mov	r2, r0
 8008a5e:	460b      	mov	r3, r1
 8008a60:	f7f7 fc24 	bl	80002ac <__adddf3>
 8008a64:	4603      	mov	r3, r0
 8008a66:	460c      	mov	r4, r1
 8008a68:	461a      	mov	r2, r3
 8008a6a:	4623      	mov	r3, r4
 8008a6c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008a70:	f7f7 fc1a 	bl	80002a8 <__aeabi_dsub>
 8008a74:	4603      	mov	r3, r0
 8008a76:	460c      	mov	r4, r1
 8008a78:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	=	0;
 8008a7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a7e:	f04f 0300 	mov.w	r3, #0
 8008a82:	f04f 0400 	mov.w	r4, #0
 8008a86:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_2;
 8008a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a8c:	e9d3 3422 	ldrd	r3, r4, [r3, #136]	; 0x88
 8008a90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a92:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_2 + scurve->v_2*t;
 8008a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a98:	e9d3 4524 	ldrd	r4, r5, [r3, #144]	; 0x90
 8008a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a9e:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 8008aa2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008aa6:	f7f7 fdb7 	bl	8000618 <__aeabi_dmul>
 8008aaa:	4602      	mov	r2, r0
 8008aac:	460b      	mov	r3, r1
 8008aae:	4620      	mov	r0, r4
 8008ab0:	4629      	mov	r1, r5
 8008ab2:	f7f7 fbfb 	bl	80002ac <__adddf3>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	460c      	mov	r4, r1
 8008aba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008abc:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8008ac0:	e1ec      	b.n	8008e9c <scaraFLowScurve+0xdac>
		 // Phase 4
		 } else if ( ((2*tm + tc) <= time) && ( time < (3*tm + tc)) ) {
 8008ac2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008ac6:	4602      	mov	r2, r0
 8008ac8:	460b      	mov	r3, r1
 8008aca:	f7f7 fbef 	bl	80002ac <__adddf3>
 8008ace:	4602      	mov	r2, r0
 8008ad0:	460b      	mov	r3, r1
 8008ad2:	4610      	mov	r0, r2
 8008ad4:	4619      	mov	r1, r3
 8008ad6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008ada:	f7f7 fbe7 	bl	80002ac <__adddf3>
 8008ade:	4602      	mov	r2, r0
 8008ae0:	460b      	mov	r3, r1
 8008ae2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008ae6:	f7f8 f81d 	bl	8000b24 <__aeabi_dcmpge>
 8008aea:	4603      	mov	r3, r0
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	f000 80af 	beq.w	8008c50 <scaraFLowScurve+0xb60>
 8008af2:	f04f 0200 	mov.w	r2, #0
 8008af6:	4b53      	ldr	r3, [pc, #332]	; (8008c44 <scaraFLowScurve+0xb54>)
 8008af8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008afc:	f7f7 fd8c 	bl	8000618 <__aeabi_dmul>
 8008b00:	4602      	mov	r2, r0
 8008b02:	460b      	mov	r3, r1
 8008b04:	4610      	mov	r0, r2
 8008b06:	4619      	mov	r1, r3
 8008b08:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008b0c:	f7f7 fbce 	bl	80002ac <__adddf3>
 8008b10:	4602      	mov	r2, r0
 8008b12:	460b      	mov	r3, r1
 8008b14:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008b18:	f7f7 fff0 	bl	8000afc <__aeabi_dcmplt>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	f000 8096 	beq.w	8008c50 <scaraFLowScurve+0xb60>
			 t = time - (2*tm + tc);
 8008b24:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008b28:	4602      	mov	r2, r0
 8008b2a:	460b      	mov	r3, r1
 8008b2c:	f7f7 fbbe 	bl	80002ac <__adddf3>
 8008b30:	4603      	mov	r3, r0
 8008b32:	460c      	mov	r4, r1
 8008b34:	4618      	mov	r0, r3
 8008b36:	4621      	mov	r1, r4
 8008b38:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008b3c:	f7f7 fbb6 	bl	80002ac <__adddf3>
 8008b40:	4603      	mov	r3, r0
 8008b42:	460c      	mov	r4, r1
 8008b44:	461a      	mov	r2, r3
 8008b46:	4623      	mov	r3, r4
 8008b48:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008b4c:	f7f7 fbac 	bl	80002a8 <__aeabi_dsub>
 8008b50:	4603      	mov	r3, r0
 8008b52:	460c      	mov	r4, r1
 8008b54:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	=	-j_max*t;
 8008b58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b5a:	603b      	str	r3, [r7, #0]
 8008b5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b5e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008b62:	607b      	str	r3, [r7, #4]
 8008b64:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008b68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b6c:	f7f7 fd54 	bl	8000618 <__aeabi_dmul>
 8008b70:	4603      	mov	r3, r0
 8008b72:	460c      	mov	r4, r1
 8008b74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b76:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_3 - 0.5*j_max*t*t;
 8008b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b7c:	e9d3 4526 	ldrd	r4, r5, [r3, #152]	; 0x98
 8008b80:	f04f 0200 	mov.w	r2, #0
 8008b84:	4b30      	ldr	r3, [pc, #192]	; (8008c48 <scaraFLowScurve+0xb58>)
 8008b86:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008b8a:	f7f7 fd45 	bl	8000618 <__aeabi_dmul>
 8008b8e:	4602      	mov	r2, r0
 8008b90:	460b      	mov	r3, r1
 8008b92:	4610      	mov	r0, r2
 8008b94:	4619      	mov	r1, r3
 8008b96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008b9a:	f7f7 fd3d 	bl	8000618 <__aeabi_dmul>
 8008b9e:	4602      	mov	r2, r0
 8008ba0:	460b      	mov	r3, r1
 8008ba2:	4610      	mov	r0, r2
 8008ba4:	4619      	mov	r1, r3
 8008ba6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008baa:	f7f7 fd35 	bl	8000618 <__aeabi_dmul>
 8008bae:	4602      	mov	r2, r0
 8008bb0:	460b      	mov	r3, r1
 8008bb2:	4620      	mov	r0, r4
 8008bb4:	4629      	mov	r1, r5
 8008bb6:	f7f7 fb77 	bl	80002a8 <__aeabi_dsub>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	460c      	mov	r4, r1
 8008bbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bc0:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_3 + scurve->v_3*t - j_max*t*t*t/6;
 8008bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc6:	e9d3 4528 	ldrd	r4, r5, [r3, #160]	; 0xa0
 8008bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bcc:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	; 0x98
 8008bd0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008bd4:	f7f7 fd20 	bl	8000618 <__aeabi_dmul>
 8008bd8:	4602      	mov	r2, r0
 8008bda:	460b      	mov	r3, r1
 8008bdc:	4620      	mov	r0, r4
 8008bde:	4629      	mov	r1, r5
 8008be0:	f7f7 fb64 	bl	80002ac <__adddf3>
 8008be4:	4603      	mov	r3, r0
 8008be6:	460c      	mov	r4, r1
 8008be8:	4625      	mov	r5, r4
 8008bea:	461c      	mov	r4, r3
 8008bec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008bf0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008bf4:	f7f7 fd10 	bl	8000618 <__aeabi_dmul>
 8008bf8:	4602      	mov	r2, r0
 8008bfa:	460b      	mov	r3, r1
 8008bfc:	4610      	mov	r0, r2
 8008bfe:	4619      	mov	r1, r3
 8008c00:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008c04:	f7f7 fd08 	bl	8000618 <__aeabi_dmul>
 8008c08:	4602      	mov	r2, r0
 8008c0a:	460b      	mov	r3, r1
 8008c0c:	4610      	mov	r0, r2
 8008c0e:	4619      	mov	r1, r3
 8008c10:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008c14:	f7f7 fd00 	bl	8000618 <__aeabi_dmul>
 8008c18:	4602      	mov	r2, r0
 8008c1a:	460b      	mov	r3, r1
 8008c1c:	4610      	mov	r0, r2
 8008c1e:	4619      	mov	r1, r3
 8008c20:	f04f 0200 	mov.w	r2, #0
 8008c24:	4b09      	ldr	r3, [pc, #36]	; (8008c4c <scaraFLowScurve+0xb5c>)
 8008c26:	f7f7 fe21 	bl	800086c <__aeabi_ddiv>
 8008c2a:	4602      	mov	r2, r0
 8008c2c:	460b      	mov	r3, r1
 8008c2e:	4620      	mov	r0, r4
 8008c30:	4629      	mov	r1, r5
 8008c32:	f7f7 fb39 	bl	80002a8 <__aeabi_dsub>
 8008c36:	4603      	mov	r3, r0
 8008c38:	460c      	mov	r4, r1
 8008c3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c3c:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8008c40:	e12c      	b.n	8008e9c <scaraFLowScurve+0xdac>
 8008c42:	bf00      	nop
 8008c44:	40080000 	.word	0x40080000
 8008c48:	3fe00000 	.word	0x3fe00000
 8008c4c:	40180000 	.word	0x40180000
		 // Phase 5
		 } else if ( ((3*tm + tc) <= time) && ( time < (4*tm + tc)) ) {
 8008c50:	f04f 0200 	mov.w	r2, #0
 8008c54:	4b94      	ldr	r3, [pc, #592]	; (8008ea8 <scaraFLowScurve+0xdb8>)
 8008c56:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008c5a:	f7f7 fcdd 	bl	8000618 <__aeabi_dmul>
 8008c5e:	4602      	mov	r2, r0
 8008c60:	460b      	mov	r3, r1
 8008c62:	4610      	mov	r0, r2
 8008c64:	4619      	mov	r1, r3
 8008c66:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008c6a:	f7f7 fb1f 	bl	80002ac <__adddf3>
 8008c6e:	4602      	mov	r2, r0
 8008c70:	460b      	mov	r3, r1
 8008c72:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008c76:	f7f7 ff55 	bl	8000b24 <__aeabi_dcmpge>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	f000 80f6 	beq.w	8008e6e <scaraFLowScurve+0xd7e>
 8008c82:	f04f 0200 	mov.w	r2, #0
 8008c86:	4b89      	ldr	r3, [pc, #548]	; (8008eac <scaraFLowScurve+0xdbc>)
 8008c88:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008c8c:	f7f7 fcc4 	bl	8000618 <__aeabi_dmul>
 8008c90:	4602      	mov	r2, r0
 8008c92:	460b      	mov	r3, r1
 8008c94:	4610      	mov	r0, r2
 8008c96:	4619      	mov	r1, r3
 8008c98:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008c9c:	f7f7 fb06 	bl	80002ac <__adddf3>
 8008ca0:	4602      	mov	r2, r0
 8008ca2:	460b      	mov	r3, r1
 8008ca4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008ca8:	f7f7 ff28 	bl	8000afc <__aeabi_dcmplt>
 8008cac:	4603      	mov	r3, r0
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	f000 80dd 	beq.w	8008e6e <scaraFLowScurve+0xd7e>
			 t = time - (3*tm + tc);
 8008cb4:	f04f 0200 	mov.w	r2, #0
 8008cb8:	4b7b      	ldr	r3, [pc, #492]	; (8008ea8 <scaraFLowScurve+0xdb8>)
 8008cba:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008cbe:	f7f7 fcab 	bl	8000618 <__aeabi_dmul>
 8008cc2:	4602      	mov	r2, r0
 8008cc4:	460b      	mov	r3, r1
 8008cc6:	4610      	mov	r0, r2
 8008cc8:	4619      	mov	r1, r3
 8008cca:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008cce:	f7f7 faed 	bl	80002ac <__adddf3>
 8008cd2:	4602      	mov	r2, r0
 8008cd4:	460b      	mov	r3, r1
 8008cd6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008cda:	f7f7 fae5 	bl	80002a8 <__aeabi_dsub>
 8008cde:	4602      	mov	r2, r0
 8008ce0:	460b      	mov	r3, r1
 8008ce2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			 scurve->a_current	=	-j_max*tm + j_max*t;
 8008ce6:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8008ce8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008cea:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8008cee:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008cf2:	4620      	mov	r0, r4
 8008cf4:	4629      	mov	r1, r5
 8008cf6:	f7f7 fc8f 	bl	8000618 <__aeabi_dmul>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	460c      	mov	r4, r1
 8008cfe:	4625      	mov	r5, r4
 8008d00:	461c      	mov	r4, r3
 8008d02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008d06:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008d0a:	f7f7 fc85 	bl	8000618 <__aeabi_dmul>
 8008d0e:	4602      	mov	r2, r0
 8008d10:	460b      	mov	r3, r1
 8008d12:	4620      	mov	r0, r4
 8008d14:	4629      	mov	r1, r5
 8008d16:	f7f7 fac9 	bl	80002ac <__adddf3>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	460c      	mov	r4, r1
 8008d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d20:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_4 - j_max*tm*t + 0.5*j_max*t*t;
 8008d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d26:	e9d3 452a 	ldrd	r4, r5, [r3, #168]	; 0xa8
 8008d2a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008d2e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008d32:	f7f7 fc71 	bl	8000618 <__aeabi_dmul>
 8008d36:	4602      	mov	r2, r0
 8008d38:	460b      	mov	r3, r1
 8008d3a:	4610      	mov	r0, r2
 8008d3c:	4619      	mov	r1, r3
 8008d3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008d42:	f7f7 fc69 	bl	8000618 <__aeabi_dmul>
 8008d46:	4602      	mov	r2, r0
 8008d48:	460b      	mov	r3, r1
 8008d4a:	4620      	mov	r0, r4
 8008d4c:	4629      	mov	r1, r5
 8008d4e:	f7f7 faab 	bl	80002a8 <__aeabi_dsub>
 8008d52:	4603      	mov	r3, r0
 8008d54:	460c      	mov	r4, r1
 8008d56:	4625      	mov	r5, r4
 8008d58:	461c      	mov	r4, r3
 8008d5a:	f04f 0200 	mov.w	r2, #0
 8008d5e:	4b54      	ldr	r3, [pc, #336]	; (8008eb0 <scaraFLowScurve+0xdc0>)
 8008d60:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008d64:	f7f7 fc58 	bl	8000618 <__aeabi_dmul>
 8008d68:	4602      	mov	r2, r0
 8008d6a:	460b      	mov	r3, r1
 8008d6c:	4610      	mov	r0, r2
 8008d6e:	4619      	mov	r1, r3
 8008d70:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008d74:	f7f7 fc50 	bl	8000618 <__aeabi_dmul>
 8008d78:	4602      	mov	r2, r0
 8008d7a:	460b      	mov	r3, r1
 8008d7c:	4610      	mov	r0, r2
 8008d7e:	4619      	mov	r1, r3
 8008d80:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008d84:	f7f7 fc48 	bl	8000618 <__aeabi_dmul>
 8008d88:	4602      	mov	r2, r0
 8008d8a:	460b      	mov	r3, r1
 8008d8c:	4620      	mov	r0, r4
 8008d8e:	4629      	mov	r1, r5
 8008d90:	f7f7 fa8c 	bl	80002ac <__adddf3>
 8008d94:	4603      	mov	r3, r0
 8008d96:	460c      	mov	r4, r1
 8008d98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d9a:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_4 + scurve->v_4*t - 0.5*j_max*tm*t*t + j_max*t*t*t/6;
 8008d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da0:	e9d3 452c 	ldrd	r4, r5, [r3, #176]	; 0xb0
 8008da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da6:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
 8008daa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008dae:	f7f7 fc33 	bl	8000618 <__aeabi_dmul>
 8008db2:	4602      	mov	r2, r0
 8008db4:	460b      	mov	r3, r1
 8008db6:	4620      	mov	r0, r4
 8008db8:	4629      	mov	r1, r5
 8008dba:	f7f7 fa77 	bl	80002ac <__adddf3>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	460c      	mov	r4, r1
 8008dc2:	4625      	mov	r5, r4
 8008dc4:	461c      	mov	r4, r3
 8008dc6:	f04f 0200 	mov.w	r2, #0
 8008dca:	4b39      	ldr	r3, [pc, #228]	; (8008eb0 <scaraFLowScurve+0xdc0>)
 8008dcc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008dd0:	f7f7 fc22 	bl	8000618 <__aeabi_dmul>
 8008dd4:	4602      	mov	r2, r0
 8008dd6:	460b      	mov	r3, r1
 8008dd8:	4610      	mov	r0, r2
 8008dda:	4619      	mov	r1, r3
 8008ddc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008de0:	f7f7 fc1a 	bl	8000618 <__aeabi_dmul>
 8008de4:	4602      	mov	r2, r0
 8008de6:	460b      	mov	r3, r1
 8008de8:	4610      	mov	r0, r2
 8008dea:	4619      	mov	r1, r3
 8008dec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008df0:	f7f7 fc12 	bl	8000618 <__aeabi_dmul>
 8008df4:	4602      	mov	r2, r0
 8008df6:	460b      	mov	r3, r1
 8008df8:	4610      	mov	r0, r2
 8008dfa:	4619      	mov	r1, r3
 8008dfc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008e00:	f7f7 fc0a 	bl	8000618 <__aeabi_dmul>
 8008e04:	4602      	mov	r2, r0
 8008e06:	460b      	mov	r3, r1
 8008e08:	4620      	mov	r0, r4
 8008e0a:	4629      	mov	r1, r5
 8008e0c:	f7f7 fa4c 	bl	80002a8 <__aeabi_dsub>
 8008e10:	4603      	mov	r3, r0
 8008e12:	460c      	mov	r4, r1
 8008e14:	4625      	mov	r5, r4
 8008e16:	461c      	mov	r4, r3
 8008e18:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008e1c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008e20:	f7f7 fbfa 	bl	8000618 <__aeabi_dmul>
 8008e24:	4602      	mov	r2, r0
 8008e26:	460b      	mov	r3, r1
 8008e28:	4610      	mov	r0, r2
 8008e2a:	4619      	mov	r1, r3
 8008e2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008e30:	f7f7 fbf2 	bl	8000618 <__aeabi_dmul>
 8008e34:	4602      	mov	r2, r0
 8008e36:	460b      	mov	r3, r1
 8008e38:	4610      	mov	r0, r2
 8008e3a:	4619      	mov	r1, r3
 8008e3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008e40:	f7f7 fbea 	bl	8000618 <__aeabi_dmul>
 8008e44:	4602      	mov	r2, r0
 8008e46:	460b      	mov	r3, r1
 8008e48:	4610      	mov	r0, r2
 8008e4a:	4619      	mov	r1, r3
 8008e4c:	f04f 0200 	mov.w	r2, #0
 8008e50:	4b18      	ldr	r3, [pc, #96]	; (8008eb4 <scaraFLowScurve+0xdc4>)
 8008e52:	f7f7 fd0b 	bl	800086c <__aeabi_ddiv>
 8008e56:	4602      	mov	r2, r0
 8008e58:	460b      	mov	r3, r1
 8008e5a:	4620      	mov	r0, r4
 8008e5c:	4629      	mov	r1, r5
 8008e5e:	f7f7 fa25 	bl	80002ac <__adddf3>
 8008e62:	4603      	mov	r3, r0
 8008e64:	460c      	mov	r4, r1
 8008e66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e68:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8008e6c:	e016      	b.n	8008e9c <scaraFLowScurve+0xdac>
		 } else {
			 scurve->a_current = 0;
 8008e6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e70:	f04f 0300 	mov.w	r3, #0
 8008e74:	f04f 0400 	mov.w	r4, #0
 8008e78:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current = 0;
 8008e7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e7e:	f04f 0300 	mov.w	r3, #0
 8008e82:	f04f 0400 	mov.w	r4, #0
 8008e86:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current = scurve->total_s;
 8008e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e8c:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8008e90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e92:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8008e96:	e001      	b.n	8008e9c <scaraFLowScurve+0xdac>
		 }

	 } else {
		 return SCARA_STATUS_ERROR;
 8008e98:	2301      	movs	r3, #1
 8008e9a:	e000      	b.n	8008e9e <scaraFLowScurve+0xdae>
	 }

	 return SCARA_STATUS_OK;
 8008e9c:	2300      	movs	r3, #0
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3748      	adds	r7, #72	; 0x48
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bdb0      	pop	{r4, r5, r7, pc}
 8008ea6:	bf00      	nop
 8008ea8:	40080000 	.word	0x40080000
 8008eac:	40100000 	.word	0x40100000
 8008eb0:	3fe00000 	.word	0x3fe00000
 8008eb4:	40180000 	.word	0x40180000

08008eb8 <scaraCheckWorkSpace4>:

/* Check limit 4 joint variable */
SCARA_StatusTypeDef	scaraCheckWorkSpace4 (double theta1, double theta2, double d3, double theta4) {
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b088      	sub	sp, #32
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	ed87 0b06 	vstr	d0, [r7, #24]
 8008ec2:	ed87 1b04 	vstr	d1, [r7, #16]
 8008ec6:	ed87 2b02 	vstr	d2, [r7, #8]
 8008eca:	ed87 3b00 	vstr	d3, [r7]
	// check theta 1
	if ( theta1 < LIM_MIN_J0 || theta1 > LIM_MAX_J0) {
 8008ece:	a335      	add	r3, pc, #212	; (adr r3, 8008fa4 <scaraCheckWorkSpace4+0xec>)
 8008ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008ed8:	f7f7 fe10 	bl	8000afc <__aeabi_dcmplt>
 8008edc:	4603      	mov	r3, r0
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d109      	bne.n	8008ef6 <scaraCheckWorkSpace4+0x3e>
 8008ee2:	a332      	add	r3, pc, #200	; (adr r3, 8008fac <scaraCheckWorkSpace4+0xf4>)
 8008ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ee8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008eec:	f7f7 fe24 	bl	8000b38 <__aeabi_dcmpgt>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d001      	beq.n	8008efa <scaraCheckWorkSpace4+0x42>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8008ef6:	2307      	movs	r3, #7
 8008ef8:	e043      	b.n	8008f82 <scaraCheckWorkSpace4+0xca>
	}
	// check theta 2
	if ( theta2 < LIM_MIN_J1 || theta2 > LIM_MAX_J1) {
 8008efa:	a32e      	add	r3, pc, #184	; (adr r3, 8008fb4 <scaraCheckWorkSpace4+0xfc>)
 8008efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f00:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008f04:	f7f7 fdfa 	bl	8000afc <__aeabi_dcmplt>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d109      	bne.n	8008f22 <scaraCheckWorkSpace4+0x6a>
 8008f0e:	a32b      	add	r3, pc, #172	; (adr r3, 8008fbc <scaraCheckWorkSpace4+0x104>)
 8008f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f14:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008f18:	f7f7 fe0e 	bl	8000b38 <__aeabi_dcmpgt>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d001      	beq.n	8008f26 <scaraCheckWorkSpace4+0x6e>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8008f22:	2307      	movs	r3, #7
 8008f24:	e02d      	b.n	8008f82 <scaraCheckWorkSpace4+0xca>
	}
	// check d 3
	if ( d3 < LIM_MIN_J2 || d3 > LIM_MAX_J2) {
 8008f26:	f04f 0200 	mov.w	r2, #0
 8008f2a:	f04f 0300 	mov.w	r3, #0
 8008f2e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008f32:	f7f7 fde3 	bl	8000afc <__aeabi_dcmplt>
 8008f36:	4603      	mov	r3, r0
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d109      	bne.n	8008f50 <scaraCheckWorkSpace4+0x98>
 8008f3c:	f04f 0200 	mov.w	r2, #0
 8008f40:	4b17      	ldr	r3, [pc, #92]	; (8008fa0 <scaraCheckWorkSpace4+0xe8>)
 8008f42:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008f46:	f7f7 fdf7 	bl	8000b38 <__aeabi_dcmpgt>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d001      	beq.n	8008f54 <scaraCheckWorkSpace4+0x9c>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8008f50:	2307      	movs	r3, #7
 8008f52:	e016      	b.n	8008f82 <scaraCheckWorkSpace4+0xca>
	}
	// check theta 4
	if ( theta4 < LIM_MIN_J3 || theta4 > LIM_MAX_J3) {
 8008f54:	a30e      	add	r3, pc, #56	; (adr r3, 8008f90 <scaraCheckWorkSpace4+0xd8>)
 8008f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f5a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f5e:	f7f7 fdcd 	bl	8000afc <__aeabi_dcmplt>
 8008f62:	4603      	mov	r3, r0
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d109      	bne.n	8008f7c <scaraCheckWorkSpace4+0xc4>
 8008f68:	a30b      	add	r3, pc, #44	; (adr r3, 8008f98 <scaraCheckWorkSpace4+0xe0>)
 8008f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f6e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f72:	f7f7 fde1 	bl	8000b38 <__aeabi_dcmpgt>
 8008f76:	4603      	mov	r3, r0
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d001      	beq.n	8008f80 <scaraCheckWorkSpace4+0xc8>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8008f7c:	2307      	movs	r3, #7
 8008f7e:	e000      	b.n	8008f82 <scaraCheckWorkSpace4+0xca>
	}
	return SCARA_STATUS_OK;
 8008f80:	2300      	movs	r3, #0
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	3720      	adds	r7, #32
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}
 8008f8a:	bf00      	nop
 8008f8c:	f3af 8000 	nop.w
 8008f90:	daaaaaab 	.word	0xdaaaaaab
 8008f94:	c007bc89 	.word	0xc007bc89
 8008f98:	daaaaaab 	.word	0xdaaaaaab
 8008f9c:	4007bc89 	.word	0x4007bc89
 8008fa0:	40590000 	.word	0x40590000
 8008fa4:	daaaaaab 	.word	0xdaaaaaab
 8008fa8:	bff7bc89 	.word	0xbff7bc89
 8008fac:	daaaaaab 	.word	0xdaaaaaab
 8008fb0:	3ff7bc89 	.word	0x3ff7bc89
 8008fb4:	88000000 	.word	0x88000000
 8008fb8:	c002d97c 	.word	0xc002d97c
 8008fbc:	88000000 	.word	0x88000000
 8008fc0:	4002d97c 	.word	0x4002d97c
 8008fc4:	00000000 	.word	0x00000000

08008fc8 <scaraCheckWorkSpace1>:

/* Check limit 1 joint variable */
SCARA_StatusTypeDef	scaraCheckWorkSpace1 (Trajectory_TargetTypeDef target, double value) {
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b084      	sub	sp, #16
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	4603      	mov	r3, r0
 8008fd0:	ed87 0b00 	vstr	d0, [r7]
 8008fd4:	73fb      	strb	r3, [r7, #15]
	if ( TRAJECTORY_J0 == target) {
 8008fd6:	7bfb      	ldrb	r3, [r7, #15]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d117      	bne.n	800900c <scaraCheckWorkSpace1+0x44>
		if ( (LIM_MIN_J0 <= value) && ( value <= LIM_MAX_J0)) {
 8008fdc:	a33d      	add	r3, pc, #244	; (adr r3, 80090d4 <scaraCheckWorkSpace1+0x10c>)
 8008fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008fe6:	f7f7 fd9d 	bl	8000b24 <__aeabi_dcmpge>
 8008fea:	4603      	mov	r3, r0
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d00b      	beq.n	8009008 <scaraCheckWorkSpace1+0x40>
 8008ff0:	a33a      	add	r3, pc, #232	; (adr r3, 80090dc <scaraCheckWorkSpace1+0x114>)
 8008ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ff6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ffa:	f7f7 fd89 	bl	8000b10 <__aeabi_dcmple>
 8008ffe:	4603      	mov	r3, r0
 8009000:	2b00      	cmp	r3, #0
 8009002:	d001      	beq.n	8009008 <scaraCheckWorkSpace1+0x40>
			return SCARA_STATUS_OK;
 8009004:	2300      	movs	r3, #0
 8009006:	e054      	b.n	80090b2 <scaraCheckWorkSpace1+0xea>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8009008:	2307      	movs	r3, #7
 800900a:	e052      	b.n	80090b2 <scaraCheckWorkSpace1+0xea>
		}
	} else if (TRAJECTORY_J1 == target) {
 800900c:	7bfb      	ldrb	r3, [r7, #15]
 800900e:	2b01      	cmp	r3, #1
 8009010:	d117      	bne.n	8009042 <scaraCheckWorkSpace1+0x7a>
		if ( (LIM_MIN_J1 <= value) && ( value <= LIM_MAX_J1)) {
 8009012:	a334      	add	r3, pc, #208	; (adr r3, 80090e4 <scaraCheckWorkSpace1+0x11c>)
 8009014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009018:	e9d7 0100 	ldrd	r0, r1, [r7]
 800901c:	f7f7 fd82 	bl	8000b24 <__aeabi_dcmpge>
 8009020:	4603      	mov	r3, r0
 8009022:	2b00      	cmp	r3, #0
 8009024:	d00b      	beq.n	800903e <scaraCheckWorkSpace1+0x76>
 8009026:	a331      	add	r3, pc, #196	; (adr r3, 80090ec <scaraCheckWorkSpace1+0x124>)
 8009028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800902c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009030:	f7f7 fd6e 	bl	8000b10 <__aeabi_dcmple>
 8009034:	4603      	mov	r3, r0
 8009036:	2b00      	cmp	r3, #0
 8009038:	d001      	beq.n	800903e <scaraCheckWorkSpace1+0x76>
			return SCARA_STATUS_OK;
 800903a:	2300      	movs	r3, #0
 800903c:	e039      	b.n	80090b2 <scaraCheckWorkSpace1+0xea>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800903e:	2307      	movs	r3, #7
 8009040:	e037      	b.n	80090b2 <scaraCheckWorkSpace1+0xea>
		}
	} else if (TRAJECTORY_J2 == target) {
 8009042:	7bfb      	ldrb	r3, [r7, #15]
 8009044:	2b02      	cmp	r3, #2
 8009046:	d118      	bne.n	800907a <scaraCheckWorkSpace1+0xb2>
		if ( (LIM_MIN_J2 <= value) && ( value <= LIM_MAX_J2)) {
 8009048:	f04f 0200 	mov.w	r2, #0
 800904c:	f04f 0300 	mov.w	r3, #0
 8009050:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009054:	f7f7 fd66 	bl	8000b24 <__aeabi_dcmpge>
 8009058:	4603      	mov	r3, r0
 800905a:	2b00      	cmp	r3, #0
 800905c:	d00b      	beq.n	8009076 <scaraCheckWorkSpace1+0xae>
 800905e:	f04f 0200 	mov.w	r2, #0
 8009062:	4b1b      	ldr	r3, [pc, #108]	; (80090d0 <scaraCheckWorkSpace1+0x108>)
 8009064:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009068:	f7f7 fd52 	bl	8000b10 <__aeabi_dcmple>
 800906c:	4603      	mov	r3, r0
 800906e:	2b00      	cmp	r3, #0
 8009070:	d001      	beq.n	8009076 <scaraCheckWorkSpace1+0xae>
			return SCARA_STATUS_OK;
 8009072:	2300      	movs	r3, #0
 8009074:	e01d      	b.n	80090b2 <scaraCheckWorkSpace1+0xea>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8009076:	2307      	movs	r3, #7
 8009078:	e01b      	b.n	80090b2 <scaraCheckWorkSpace1+0xea>
		}
	} else if (TRAJECTORY_J3 == target) {
 800907a:	7bfb      	ldrb	r3, [r7, #15]
 800907c:	2b03      	cmp	r3, #3
 800907e:	d117      	bne.n	80090b0 <scaraCheckWorkSpace1+0xe8>
		if ( (LIM_MIN_J3 <= value) && ( value <= LIM_MAX_J3)) {
 8009080:	a30f      	add	r3, pc, #60	; (adr r3, 80090c0 <scaraCheckWorkSpace1+0xf8>)
 8009082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009086:	e9d7 0100 	ldrd	r0, r1, [r7]
 800908a:	f7f7 fd4b 	bl	8000b24 <__aeabi_dcmpge>
 800908e:	4603      	mov	r3, r0
 8009090:	2b00      	cmp	r3, #0
 8009092:	d00b      	beq.n	80090ac <scaraCheckWorkSpace1+0xe4>
 8009094:	a30c      	add	r3, pc, #48	; (adr r3, 80090c8 <scaraCheckWorkSpace1+0x100>)
 8009096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800909a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800909e:	f7f7 fd37 	bl	8000b10 <__aeabi_dcmple>
 80090a2:	4603      	mov	r3, r0
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d001      	beq.n	80090ac <scaraCheckWorkSpace1+0xe4>
			return SCARA_STATUS_OK;
 80090a8:	2300      	movs	r3, #0
 80090aa:	e002      	b.n	80090b2 <scaraCheckWorkSpace1+0xea>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 80090ac:	2307      	movs	r3, #7
 80090ae:	e000      	b.n	80090b2 <scaraCheckWorkSpace1+0xea>
		}
	} else {
		return SCARA_STATUS_ERROR;
 80090b0:	2301      	movs	r3, #1
	}
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3710      	adds	r7, #16
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
 80090ba:	bf00      	nop
 80090bc:	f3af 8000 	nop.w
 80090c0:	daaaaaab 	.word	0xdaaaaaab
 80090c4:	c007bc89 	.word	0xc007bc89
 80090c8:	daaaaaab 	.word	0xdaaaaaab
 80090cc:	4007bc89 	.word	0x4007bc89
 80090d0:	40590000 	.word	0x40590000
 80090d4:	daaaaaab 	.word	0xdaaaaaab
 80090d8:	bff7bc89 	.word	0xbff7bc89
 80090dc:	daaaaaab 	.word	0xdaaaaaab
 80090e0:	3ff7bc89 	.word	0x3ff7bc89
 80090e4:	88000000 	.word	0x88000000
 80090e8:	c002d97c 	.word	0xc002d97c
 80090ec:	88000000 	.word	0x88000000
 80090f0:	4002d97c 	.word	0x4002d97c
 80090f4:	00000000 	.word	0x00000000

080090f8 <scaraTestDuty>:

/* Check all of point in travel */
SCARA_StatusTypeDef	scaraTestDuty(void) {
 80090f8:	b5b0      	push	{r4, r5, r7, lr}
 80090fa:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 80090fe:	af2c      	add	r7, sp, #176	; 0xb0
	int32_t sample_count;
	double run_time = 0;
 8009100:	f04f 0300 	mov.w	r3, #0
 8009104:	f04f 0400 	mov.w	r4, #0
 8009108:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
	SCARA_PositionTypeDef test_Next, test_Current;
	SCARA_StatusTypeDef status;
	memcpy(&test_Current, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 800910c:	463b      	mov	r3, r7
 800910e:	4a36      	ldr	r2, [pc, #216]	; (80091e8 <scaraTestDuty+0xf0>)
 8009110:	4618      	mov	r0, r3
 8009112:	4611      	mov	r1, r2
 8009114:	23b8      	movs	r3, #184	; 0xb8
 8009116:	461a      	mov	r2, r3
 8009118:	f00b ff6a 	bl	8014ff0 <memcpy>
	sample_count = ceil(myDUTY.time_total/T_SAMPLING);
 800911c:	4b33      	ldr	r3, [pc, #204]	; (80091ec <scaraTestDuty+0xf4>)
 800911e:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8009122:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009126:	a32e      	add	r3, pc, #184	; (adr r3, 80091e0 <scaraTestDuty+0xe8>)
 8009128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800912c:	f7f7 fb9e 	bl	800086c <__aeabi_ddiv>
 8009130:	4603      	mov	r3, r0
 8009132:	460c      	mov	r4, r1
 8009134:	ec44 3b17 	vmov	d7, r3, r4
 8009138:	eeb0 0a47 	vmov.f32	s0, s14
 800913c:	eef0 0a67 	vmov.f32	s1, s15
 8009140:	f010 f906 	bl	8019350 <ceil>
 8009144:	ec54 3b10 	vmov	r3, r4, d0
 8009148:	4618      	mov	r0, r3
 800914a:	4621      	mov	r1, r4
 800914c:	f7f7 fd14 	bl	8000b78 <__aeabi_d2iz>
 8009150:	4603      	mov	r3, r0
 8009152:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
	for (int32_t i = 1; i < sample_count; i++) {
 8009156:	2301      	movs	r3, #1
 8009158:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800915c:	e032      	b.n	80091c4 <scaraTestDuty+0xcc>
		run_time += T_SAMPLING;
 800915e:	a320      	add	r3, pc, #128	; (adr r3, 80091e0 <scaraTestDuty+0xe8>)
 8009160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009164:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 8009168:	f7f7 f8a0 	bl	80002ac <__adddf3>
 800916c:	4603      	mov	r3, r0
 800916e:	460c      	mov	r4, r1
 8009170:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
		status = scaraFlowDuty(run_time, &test_Next, test_Current);
 8009174:	463c      	mov	r4, r7
 8009176:	f107 05b8 	add.w	r5, r7, #184	; 0xb8
 800917a:	4668      	mov	r0, sp
 800917c:	f104 0308 	add.w	r3, r4, #8
 8009180:	22b0      	movs	r2, #176	; 0xb0
 8009182:	4619      	mov	r1, r3
 8009184:	f00b ff34 	bl	8014ff0 <memcpy>
 8009188:	e894 000c 	ldmia.w	r4, {r2, r3}
 800918c:	4628      	mov	r0, r5
 800918e:	ed97 0b60 	vldr	d0, [r7, #384]	; 0x180
 8009192:	f7fe f993 	bl	80074bc <scaraFlowDuty>
 8009196:	4603      	mov	r3, r0
 8009198:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
		if (status != SCARA_STATUS_OK) {
 800919c:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d002      	beq.n	80091aa <scaraTestDuty+0xb2>
			return status;
 80091a4:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 80091a8:	e013      	b.n	80091d2 <scaraTestDuty+0xda>
		}
		memcpy(&test_Next, &test_Current, sizeof(SCARA_PositionTypeDef));
 80091aa:	463a      	mov	r2, r7
 80091ac:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80091b0:	4611      	mov	r1, r2
 80091b2:	22b8      	movs	r2, #184	; 0xb8
 80091b4:	4618      	mov	r0, r3
 80091b6:	f00b ff1b 	bl	8014ff0 <memcpy>
	for (int32_t i = 1; i < sample_count; i++) {
 80091ba:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80091be:	3301      	adds	r3, #1
 80091c0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80091c4:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80091c8:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80091cc:	429a      	cmp	r2, r3
 80091ce:	dbc6      	blt.n	800915e <scaraTestDuty+0x66>
	}
	return SCARA_STATUS_OK;
 80091d0:	2300      	movs	r3, #0
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	f507 77c4 	add.w	r7, r7, #392	; 0x188
 80091d8:	46bd      	mov	sp, r7
 80091da:	bdb0      	pop	{r4, r5, r7, pc}
 80091dc:	f3af 8000 	nop.w
 80091e0:	40000000 	.word	0x40000000
 80091e4:	3f847ae1 	.word	0x3f847ae1
 80091e8:	20005e88 	.word	0x20005e88
 80091ec:	200053c8 	.word	0x200053c8

080091f0 <scaraSetScanFlag>:

void				scaraSetScanFlag(void) {
 80091f0:	b480      	push	{r7}
 80091f2:	af00      	add	r7, sp, #0
	mySCARA.isScanLitmit = TRUE;
 80091f4:	4b03      	ldr	r3, [pc, #12]	; (8009204 <scaraSetScanFlag+0x14>)
 80091f6:	2201      	movs	r2, #1
 80091f8:	70da      	strb	r2, [r3, #3]
}
 80091fa:	bf00      	nop
 80091fc:	46bd      	mov	sp, r7
 80091fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009202:	4770      	bx	lr
 8009204:	20000c9c 	.word	0x20000c9c

08009208 <scaraSetOutput>:

void				scaraSetOutput		(uint8_t level) {
 8009208:	b580      	push	{r7, lr}
 800920a:	b082      	sub	sp, #8
 800920c:	af00      	add	r7, sp, #0
 800920e:	4603      	mov	r3, r0
 8009210:	71fb      	strb	r3, [r7, #7]
	mySCARA.outputSet	 = level;
 8009212:	4a05      	ldr	r2, [pc, #20]	; (8009228 <scaraSetOutput+0x20>)
 8009214:	79fb      	ldrb	r3, [r7, #7]
 8009216:	7113      	strb	r3, [r2, #4]
	lowlayer_setOutput(level);
 8009218:	79fb      	ldrb	r3, [r7, #7]
 800921a:	4618      	mov	r0, r3
 800921c:	f7fb fc40 	bl	8004aa0 <lowlayer_setOutput>
}
 8009220:	bf00      	nop
 8009222:	3708      	adds	r7, #8
 8009224:	46bd      	mov	sp, r7
 8009226:	bd80      	pop	{r7, pc}
 8009228:	20000c9c 	.word	0x20000c9c

0800922c <scaraSetDutyState>:

void				scaraSetDutyState(SCARA_DutyStateTypeDef state) {
 800922c:	b480      	push	{r7}
 800922e:	b083      	sub	sp, #12
 8009230:	af00      	add	r7, sp, #0
 8009232:	4603      	mov	r3, r0
 8009234:	71fb      	strb	r3, [r7, #7]
	mySCARA.duty_State = state;
 8009236:	4a04      	ldr	r2, [pc, #16]	; (8009248 <scaraSetDutyState+0x1c>)
 8009238:	79fb      	ldrb	r3, [r7, #7]
 800923a:	7093      	strb	r3, [r2, #2]
}
 800923c:	bf00      	nop
 800923e:	370c      	adds	r7, #12
 8009240:	46bd      	mov	sp, r7
 8009242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009246:	4770      	bx	lr
 8009248:	20000c9c 	.word	0x20000c9c

0800924c <scaraSetMode>:

void				scaraSetMode(SCARA_ModeTypeDef mode) {
 800924c:	b480      	push	{r7}
 800924e:	b083      	sub	sp, #12
 8009250:	af00      	add	r7, sp, #0
 8009252:	4603      	mov	r3, r0
 8009254:	71fb      	strb	r3, [r7, #7]
	mySCARA.mode = mode;
 8009256:	4a04      	ldr	r2, [pc, #16]	; (8009268 <scaraSetMode+0x1c>)
 8009258:	79fb      	ldrb	r3, [r7, #7]
 800925a:	7053      	strb	r3, [r2, #1]
}
 800925c:	bf00      	nop
 800925e:	370c      	adds	r7, #12
 8009260:	46bd      	mov	sp, r7
 8009262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009266:	4770      	bx	lr
 8009268:	20000c9c 	.word	0x20000c9c

0800926c <scaraGetPosition>:
void				scaraSetMethod(SCARA_MethodTypeDef method) {
	mySCARA.method = method;
}


void				scaraGetPosition	(SCARA_PositionTypeDef *pos) {
 800926c:	b580      	push	{r7, lr}
 800926e:	b082      	sub	sp, #8
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
	memcpy(pos, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 8009274:	22b8      	movs	r2, #184	; 0xb8
 8009276:	4904      	ldr	r1, [pc, #16]	; (8009288 <scaraGetPosition+0x1c>)
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f00b feb9 	bl	8014ff0 <memcpy>
}
 800927e:	bf00      	nop
 8009280:	3708      	adds	r7, #8
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}
 8009286:	bf00      	nop
 8009288:	20005e88 	.word	0x20005e88

0800928c <scaraGetMode>:


SCARA_ModeTypeDef	scaraGetMode(void) {
 800928c:	b480      	push	{r7}
 800928e:	af00      	add	r7, sp, #0
	return mySCARA.mode;
 8009290:	4b03      	ldr	r3, [pc, #12]	; (80092a0 <scaraGetMode+0x14>)
 8009292:	785b      	ldrb	r3, [r3, #1]
}
 8009294:	4618      	mov	r0, r3
 8009296:	46bd      	mov	sp, r7
 8009298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929c:	4770      	bx	lr
 800929e:	bf00      	nop
 80092a0:	20000c9c 	.word	0x20000c9c

080092a4 <scaraGetMethod>:

SCARA_MethodTypeDef	scaraGetMethod(void) {
 80092a4:	b480      	push	{r7}
 80092a6:	af00      	add	r7, sp, #0
	return mySCARA.method;
 80092a8:	4b03      	ldr	r3, [pc, #12]	; (80092b8 <scaraGetMethod+0x14>)
 80092aa:	781b      	ldrb	r3, [r3, #0]
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	46bd      	mov	sp, r7
 80092b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b4:	4770      	bx	lr
 80092b6:	bf00      	nop
 80092b8:	20000c9c 	.word	0x20000c9c

080092bc <scaraGetDutyState>:

SCARA_DutyStateTypeDef	scaraGetDutyState(void) {
 80092bc:	b480      	push	{r7}
 80092be:	af00      	add	r7, sp, #0
	return mySCARA.duty_State;
 80092c0:	4b03      	ldr	r3, [pc, #12]	; (80092d0 <scaraGetDutyState+0x14>)
 80092c2:	789b      	ldrb	r3, [r3, #2]
}
 80092c4:	4618      	mov	r0, r3
 80092c6:	46bd      	mov	sp, r7
 80092c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092cc:	4770      	bx	lr
 80092ce:	bf00      	nop
 80092d0:	20000c9c 	.word	0x20000c9c

080092d4 <scaraIsScanLimit>:

uint8_t					scaraIsScanLimit(void) {
 80092d4:	b480      	push	{r7}
 80092d6:	af00      	add	r7, sp, #0
	return mySCARA.isScanLitmit;
 80092d8:	4b03      	ldr	r3, [pc, #12]	; (80092e8 <scaraIsScanLimit+0x14>)
 80092da:	78db      	ldrb	r3, [r3, #3]
}
 80092dc:	4618      	mov	r0, r3
 80092de:	46bd      	mov	sp, r7
 80092e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e4:	4770      	bx	lr
 80092e6:	bf00      	nop
 80092e8:	20000c9c 	.word	0x20000c9c
 80092ec:	00000000 	.word	0x00000000

080092f0 <scaraIsFinish>:

uint8_t					scaraIsFinish		(double run_time) {
 80092f0:	b590      	push	{r4, r7, lr}
 80092f2:	b083      	sub	sp, #12
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	ed87 0b00 	vstr	d0, [r7]
	if(myDUTY.time_total + 0.03 < run_time) {
 80092fa:	4b11      	ldr	r3, [pc, #68]	; (8009340 <scaraIsFinish+0x50>)
 80092fc:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8009300:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009304:	a30c      	add	r3, pc, #48	; (adr r3, 8009338 <scaraIsFinish+0x48>)
 8009306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800930a:	f7f6 ffcf 	bl	80002ac <__adddf3>
 800930e:	4603      	mov	r3, r0
 8009310:	460c      	mov	r4, r1
 8009312:	461a      	mov	r2, r3
 8009314:	4623      	mov	r3, r4
 8009316:	e9d7 0100 	ldrd	r0, r1, [r7]
 800931a:	f7f7 fc0d 	bl	8000b38 <__aeabi_dcmpgt>
 800931e:	4603      	mov	r3, r0
 8009320:	2b00      	cmp	r3, #0
 8009322:	d001      	beq.n	8009328 <scaraIsFinish+0x38>
		return TRUE;
 8009324:	2301      	movs	r3, #1
 8009326:	e000      	b.n	800932a <scaraIsFinish+0x3a>
	} else {
		return FALSE;
 8009328:	2300      	movs	r3, #0
	}
}
 800932a:	4618      	mov	r0, r3
 800932c:	370c      	adds	r7, #12
 800932e:	46bd      	mov	sp, r7
 8009330:	bd90      	pop	{r4, r7, pc}
 8009332:	bf00      	nop
 8009334:	f3af 8000 	nop.w
 8009338:	eb851eb8 	.word	0xeb851eb8
 800933c:	3f9eb851 	.word	0x3f9eb851
 8009340:	200053c8 	.word	0x200053c8
 8009344:	00000000 	.word	0x00000000

08009348 <scaraPosition2String>:

/* Convert position to string*/
int32_t					scaraPosition2String(char *result, SCARA_PositionTypeDef position) {
 8009348:	b082      	sub	sp, #8
 800934a:	b590      	push	{r4, r7, lr}
 800934c:	b0af      	sub	sp, #188	; 0xbc
 800934e:	af0a      	add	r7, sp, #40	; 0x28
 8009350:	6078      	str	r0, [r7, #4]
 8009352:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8009356:	e881 000c 	stmia.w	r1, {r2, r3}
	uint8_t time[12];
	uint8_t total_time[12];

	int32_t lenght_buff;

	double2string(theta1, position.Theta1*180/PI, 6);
 800935a:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 800935e:	f04f 0200 	mov.w	r2, #0
 8009362:	4b7f      	ldr	r3, [pc, #508]	; (8009560 <scaraPosition2String+0x218>)
 8009364:	f7f7 f958 	bl	8000618 <__aeabi_dmul>
 8009368:	4603      	mov	r3, r0
 800936a:	460c      	mov	r4, r1
 800936c:	4618      	mov	r0, r3
 800936e:	4621      	mov	r1, r4
 8009370:	a379      	add	r3, pc, #484	; (adr r3, 8009558 <scaraPosition2String+0x210>)
 8009372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009376:	f7f7 fa79 	bl	800086c <__aeabi_ddiv>
 800937a:	4603      	mov	r3, r0
 800937c:	460c      	mov	r4, r1
 800937e:	ec44 3b17 	vmov	d7, r3, r4
 8009382:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009386:	2106      	movs	r1, #6
 8009388:	eeb0 0a47 	vmov.f32	s0, s14
 800938c:	eef0 0a67 	vmov.f32	s1, s15
 8009390:	4618      	mov	r0, r3
 8009392:	f7f8 fba9 	bl	8001ae8 <double2string>
	double2string(theta2, position.Theta2*180/PI, 6);
 8009396:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800939a:	f04f 0200 	mov.w	r2, #0
 800939e:	4b70      	ldr	r3, [pc, #448]	; (8009560 <scaraPosition2String+0x218>)
 80093a0:	f7f7 f93a 	bl	8000618 <__aeabi_dmul>
 80093a4:	4603      	mov	r3, r0
 80093a6:	460c      	mov	r4, r1
 80093a8:	4618      	mov	r0, r3
 80093aa:	4621      	mov	r1, r4
 80093ac:	a36a      	add	r3, pc, #424	; (adr r3, 8009558 <scaraPosition2String+0x210>)
 80093ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093b2:	f7f7 fa5b 	bl	800086c <__aeabi_ddiv>
 80093b6:	4603      	mov	r3, r0
 80093b8:	460c      	mov	r4, r1
 80093ba:	ec44 3b17 	vmov	d7, r3, r4
 80093be:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80093c2:	2106      	movs	r1, #6
 80093c4:	eeb0 0a47 	vmov.f32	s0, s14
 80093c8:	eef0 0a67 	vmov.f32	s1, s15
 80093cc:	4618      	mov	r0, r3
 80093ce:	f7f8 fb8b 	bl	8001ae8 <double2string>
	double2string(d3, position.D3, 6);
 80093d2:	ed97 7b46 	vldr	d7, [r7, #280]	; 0x118
 80093d6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80093da:	2106      	movs	r1, #6
 80093dc:	eeb0 0a47 	vmov.f32	s0, s14
 80093e0:	eef0 0a67 	vmov.f32	s1, s15
 80093e4:	4618      	mov	r0, r3
 80093e6:	f7f8 fb7f 	bl	8001ae8 <double2string>
	double2string(theta4, position.Theta4*180/PI, 6);
 80093ea:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 80093ee:	f04f 0200 	mov.w	r2, #0
 80093f2:	4b5b      	ldr	r3, [pc, #364]	; (8009560 <scaraPosition2String+0x218>)
 80093f4:	f7f7 f910 	bl	8000618 <__aeabi_dmul>
 80093f8:	4603      	mov	r3, r0
 80093fa:	460c      	mov	r4, r1
 80093fc:	4618      	mov	r0, r3
 80093fe:	4621      	mov	r1, r4
 8009400:	a355      	add	r3, pc, #340	; (adr r3, 8009558 <scaraPosition2String+0x210>)
 8009402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009406:	f7f7 fa31 	bl	800086c <__aeabi_ddiv>
 800940a:	4603      	mov	r3, r0
 800940c:	460c      	mov	r4, r1
 800940e:	ec44 3b17 	vmov	d7, r3, r4
 8009412:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8009416:	2106      	movs	r1, #6
 8009418:	eeb0 0a47 	vmov.f32	s0, s14
 800941c:	eef0 0a67 	vmov.f32	s1, s15
 8009420:	4618      	mov	r0, r3
 8009422:	f7f8 fb61 	bl	8001ae8 <double2string>
	double2string(x, position.x, 6);
 8009426:	ed97 7b3a 	vldr	d7, [r7, #232]	; 0xe8
 800942a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800942e:	2106      	movs	r1, #6
 8009430:	eeb0 0a47 	vmov.f32	s0, s14
 8009434:	eef0 0a67 	vmov.f32	s1, s15
 8009438:	4618      	mov	r0, r3
 800943a:	f7f8 fb55 	bl	8001ae8 <double2string>
	double2string(y, position.y, 6);
 800943e:	ed97 7b3c 	vldr	d7, [r7, #240]	; 0xf0
 8009442:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009446:	2106      	movs	r1, #6
 8009448:	eeb0 0a47 	vmov.f32	s0, s14
 800944c:	eef0 0a67 	vmov.f32	s1, s15
 8009450:	4618      	mov	r0, r3
 8009452:	f7f8 fb49 	bl	8001ae8 <double2string>
	double2string(z, position.z, 6);
 8009456:	ed97 7b3e 	vldr	d7, [r7, #248]	; 0xf8
 800945a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800945e:	2106      	movs	r1, #6
 8009460:	eeb0 0a47 	vmov.f32	s0, s14
 8009464:	eef0 0a67 	vmov.f32	s1, s15
 8009468:	4618      	mov	r0, r3
 800946a:	f7f8 fb3d 	bl	8001ae8 <double2string>
	double2string(roll, position.roll*180/PI, 6);
 800946e:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 8009472:	f04f 0200 	mov.w	r2, #0
 8009476:	4b3a      	ldr	r3, [pc, #232]	; (8009560 <scaraPosition2String+0x218>)
 8009478:	f7f7 f8ce 	bl	8000618 <__aeabi_dmul>
 800947c:	4603      	mov	r3, r0
 800947e:	460c      	mov	r4, r1
 8009480:	4618      	mov	r0, r3
 8009482:	4621      	mov	r1, r4
 8009484:	a334      	add	r3, pc, #208	; (adr r3, 8009558 <scaraPosition2String+0x210>)
 8009486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800948a:	f7f7 f9ef 	bl	800086c <__aeabi_ddiv>
 800948e:	4603      	mov	r3, r0
 8009490:	460c      	mov	r4, r1
 8009492:	ec44 3b17 	vmov	d7, r3, r4
 8009496:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800949a:	2106      	movs	r1, #6
 800949c:	eeb0 0a47 	vmov.f32	s0, s14
 80094a0:	eef0 0a67 	vmov.f32	s1, s15
 80094a4:	4618      	mov	r0, r3
 80094a6:	f7f8 fb1f 	bl	8001ae8 <double2string>
	double2string(lenght, position.q, 6);
 80094aa:	ed97 7b28 	vldr	d7, [r7, #160]	; 0xa0
 80094ae:	f107 0320 	add.w	r3, r7, #32
 80094b2:	2106      	movs	r1, #6
 80094b4:	eeb0 0a47 	vmov.f32	s0, s14
 80094b8:	eef0 0a67 	vmov.f32	s1, s15
 80094bc:	4618      	mov	r0, r3
 80094be:	f7f8 fb13 	bl	8001ae8 <double2string>
	double2string(total_time, position.total_time, 4);
 80094c2:	ed97 7b38 	vldr	d7, [r7, #224]	; 0xe0
 80094c6:	f107 0308 	add.w	r3, r7, #8
 80094ca:	2104      	movs	r1, #4
 80094cc:	eeb0 0a47 	vmov.f32	s0, s14
 80094d0:	eef0 0a67 	vmov.f32	s1, s15
 80094d4:	4618      	mov	r0, r3
 80094d6:	f7f8 fb07 	bl	8001ae8 <double2string>
	double2string(time, position.t, 4);
 80094da:	ed97 7b36 	vldr	d7, [r7, #216]	; 0xd8
 80094de:	f107 0314 	add.w	r3, r7, #20
 80094e2:	2104      	movs	r1, #4
 80094e4:	eeb0 0a47 	vmov.f32	s0, s14
 80094e8:	eef0 0a67 	vmov.f32	s1, s15
 80094ec:	4618      	mov	r0, r3
 80094ee:	f7f8 fafb 	bl	8001ae8 <double2string>
	lenght_buff = snprintf( (char *)result, 144,
 80094f2:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80094f6:	f107 0314 	add.w	r3, r7, #20
 80094fa:	9309      	str	r3, [sp, #36]	; 0x24
 80094fc:	f107 0308 	add.w	r3, r7, #8
 8009500:	9308      	str	r3, [sp, #32]
 8009502:	f107 0320 	add.w	r3, r7, #32
 8009506:	9307      	str	r3, [sp, #28]
 8009508:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800950c:	9306      	str	r3, [sp, #24]
 800950e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009512:	9305      	str	r3, [sp, #20]
 8009514:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009518:	9304      	str	r3, [sp, #16]
 800951a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800951e:	9303      	str	r3, [sp, #12]
 8009520:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8009524:	9302      	str	r3, [sp, #8]
 8009526:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800952a:	9301      	str	r3, [sp, #4]
 800952c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8009530:	9300      	str	r3, [sp, #0]
 8009532:	4613      	mov	r3, r2
 8009534:	4a0b      	ldr	r2, [pc, #44]	; (8009564 <scaraPosition2String+0x21c>)
 8009536:	2190      	movs	r1, #144	; 0x90
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f00c fc81 	bl	8015e40 <sniprintf>
 800953e:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
						z,
						roll,
						lenght,
						total_time,
						time);
	return lenght_buff;
 8009542:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
}
 8009546:	4618      	mov	r0, r3
 8009548:	3794      	adds	r7, #148	; 0x94
 800954a:	46bd      	mov	sp, r7
 800954c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8009550:	b002      	add	sp, #8
 8009552:	4770      	bx	lr
 8009554:	f3af 8000 	nop.w
 8009558:	60000000 	.word	0x60000000
 800955c:	400921fb 	.word	0x400921fb
 8009560:	40668000 	.word	0x40668000
 8009564:	0801b250 	.word	0x0801b250

08009568 <scaraKeyInit>:

/* Convert key command to duty */
SCARA_StatusTypeDef		scaraKeyInit(SCARA_KeyTypeDef key, double *runtime) {
 8009568:	b590      	push	{r4, r7, lr}
 800956a:	ed2d 8b02 	vpush	{d8}
 800956e:	f5ad 7d57 	sub.w	sp, sp, #860	; 0x35c
 8009572:	af66      	add	r7, sp, #408	; 0x198
 8009574:	4602      	mov	r2, r0
 8009576:	463b      	mov	r3, r7
 8009578:	6019      	str	r1, [r3, #0]
 800957a:	1dfb      	adds	r3, r7, #7
 800957c:	701a      	strb	r2, [r3, #0]
	DUTY_Command_TypeDef cmd;
	SCARA_StatusTypeDef  status;
	cmd.coordinate_type = DUTY_COORDINATES_REL;
 800957e:	f107 0308 	add.w	r3, r7, #8
 8009582:	2201      	movs	r2, #1
 8009584:	721a      	strb	r2, [r3, #8]
	cmd.trajec_type = DUTY_TRAJECTORY_LSPB;
 8009586:	f107 0308 	add.w	r3, r7, #8
 800958a:	2200      	movs	r2, #0
 800958c:	731a      	strb	r2, [r3, #12]
	cmd.modeInit_type = DUTY_MODE_INIT_QVA;
 800958e:	f107 0308 	add.w	r3, r7, #8
 8009592:	2200      	movs	r2, #0
 8009594:	735a      	strb	r2, [r3, #13]
	cmd.v_factor = 0.1;
 8009596:	f107 0208 	add.w	r2, r7, #8
 800959a:	a4e0      	add	r4, pc, #896	; (adr r4, 800991c <scaraKeyInit+0x3b4>)
 800959c:	e9d4 3400 	ldrd	r3, r4, [r4]
 80095a0:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
	cmd.a_factor = 0.7;
 80095a4:	f107 0208 	add.w	r2, r7, #8
 80095a8:	a4de      	add	r4, pc, #888	; (adr r4, 8009924 <scaraKeyInit+0x3bc>)
 80095aa:	e9d4 3400 	ldrd	r3, r4, [r4]
 80095ae:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0
	double v_current;
	Trajectory_LSPB_TypeDef *lspb;
	switch(key) {
 80095b2:	1dfb      	adds	r3, r7, #7
 80095b4:	781b      	ldrb	r3, [r3, #0]
 80095b6:	2b0f      	cmp	r3, #15
 80095b8:	f200 8298 	bhi.w	8009aec <scaraKeyInit+0x584>
 80095bc:	a201      	add	r2, pc, #4	; (adr r2, 80095c4 <scaraKeyInit+0x5c>)
 80095be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095c2:	bf00      	nop
 80095c4:	08009605 	.word	0x08009605
 80095c8:	08009665 	.word	0x08009665
 80095cc:	080096c5 	.word	0x080096c5
 80095d0:	08009725 	.word	0x08009725
 80095d4:	08009785 	.word	0x08009785
 80095d8:	080097e5 	.word	0x080097e5
 80095dc:	08009845 	.word	0x08009845
 80095e0:	080098a5 	.word	0x080098a5
 80095e4:	0800992d 	.word	0x0800992d
 80095e8:	08009965 	.word	0x08009965
 80095ec:	0800999d 	.word	0x0800999d
 80095f0:	080099d5 	.word	0x080099d5
 80095f4:	08009a0d 	.word	0x08009a0d
 80095f8:	08009a45 	.word	0x08009a45
 80095fc:	08009a7d 	.word	0x08009a7d
 8009600:	08009ab5 	.word	0x08009ab5
	case SCARA_KEY_X_INC:
	{
		cmd.space_type = DUTY_SPACE_TASK;
 8009604:	f107 0308 	add.w	r3, r7, #8
 8009608:	2200      	movs	r2, #0
 800960a:	725a      	strb	r2, [r3, #9]
		cmd.path_type = DUTY_PATH_LINE;
 800960c:	f107 0308 	add.w	r3, r7, #8
 8009610:	2200      	movs	r2, #0
 8009612:	729a      	strb	r2, [r3, #10]
		cmd.target_point.x 		= SHIFT_X; // Can define de phu hop vs toc do
 8009614:	f107 0208 	add.w	r2, r7, #8
 8009618:	f04f 0300 	mov.w	r3, #0
 800961c:	4cba      	ldr	r4, [pc, #744]	; (8009908 <scaraKeyInit+0x3a0>)
 800961e:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		cmd.target_point.y 		= 0;
 8009622:	f107 0208 	add.w	r2, r7, #8
 8009626:	f04f 0300 	mov.w	r3, #0
 800962a:	f04f 0400 	mov.w	r4, #0
 800962e:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
		cmd.target_point.z 		= 0;
 8009632:	f107 0208 	add.w	r2, r7, #8
 8009636:	f04f 0300 	mov.w	r3, #0
 800963a:	f04f 0400 	mov.w	r4, #0
 800963e:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
		cmd.target_point.roll 	= 0;
 8009642:	f107 0208 	add.w	r2, r7, #8
 8009646:	f04f 0300 	mov.w	r3, #0
 800964a:	f04f 0400 	mov.w	r4, #0
 800964e:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
		v_current = positionCurrent.v_3d;
 8009652:	4bae      	ldr	r3, [pc, #696]	; (800990c <scaraKeyInit+0x3a4>)
 8009654:	e9d3 342a 	ldrd	r3, r4, [r3, #168]	; 0xa8
 8009658:	e9c7 346e 	strd	r3, r4, [r7, #440]	; 0x1b8
		lspb = &(myDUTY.task.trajectory_3d.lspb);
 800965c:	4bac      	ldr	r3, [pc, #688]	; (8009910 <scaraKeyInit+0x3a8>)
 800965e:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
	}
	break;
 8009662:	e243      	b.n	8009aec <scaraKeyInit+0x584>
	case SCARA_KEY_X_DEC:
	{
		cmd.space_type = DUTY_SPACE_TASK;
 8009664:	f107 0308 	add.w	r3, r7, #8
 8009668:	2200      	movs	r2, #0
 800966a:	725a      	strb	r2, [r3, #9]
		cmd.path_type = DUTY_PATH_LINE;
 800966c:	f107 0308 	add.w	r3, r7, #8
 8009670:	2200      	movs	r2, #0
 8009672:	729a      	strb	r2, [r3, #10]
		cmd.target_point.x 		= -SHIFT_X;
 8009674:	f107 0208 	add.w	r2, r7, #8
 8009678:	f04f 0300 	mov.w	r3, #0
 800967c:	4ca5      	ldr	r4, [pc, #660]	; (8009914 <scaraKeyInit+0x3ac>)
 800967e:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		cmd.target_point.y 		= 0;
 8009682:	f107 0208 	add.w	r2, r7, #8
 8009686:	f04f 0300 	mov.w	r3, #0
 800968a:	f04f 0400 	mov.w	r4, #0
 800968e:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
		cmd.target_point.z 		= 0;
 8009692:	f107 0208 	add.w	r2, r7, #8
 8009696:	f04f 0300 	mov.w	r3, #0
 800969a:	f04f 0400 	mov.w	r4, #0
 800969e:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
		cmd.target_point.roll 	= 0;
 80096a2:	f107 0208 	add.w	r2, r7, #8
 80096a6:	f04f 0300 	mov.w	r3, #0
 80096aa:	f04f 0400 	mov.w	r4, #0
 80096ae:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
		v_current = positionCurrent.v_3d;
 80096b2:	4b96      	ldr	r3, [pc, #600]	; (800990c <scaraKeyInit+0x3a4>)
 80096b4:	e9d3 342a 	ldrd	r3, r4, [r3, #168]	; 0xa8
 80096b8:	e9c7 346e 	strd	r3, r4, [r7, #440]	; 0x1b8
		lspb = &(myDUTY.task.trajectory_3d.lspb);
 80096bc:	4b94      	ldr	r3, [pc, #592]	; (8009910 <scaraKeyInit+0x3a8>)
 80096be:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
	}
	break;
 80096c2:	e213      	b.n	8009aec <scaraKeyInit+0x584>
	case SCARA_KEY_Y_INC:
	{
		cmd.space_type = DUTY_SPACE_TASK;
 80096c4:	f107 0308 	add.w	r3, r7, #8
 80096c8:	2200      	movs	r2, #0
 80096ca:	725a      	strb	r2, [r3, #9]
		cmd.path_type = DUTY_PATH_LINE;
 80096cc:	f107 0308 	add.w	r3, r7, #8
 80096d0:	2200      	movs	r2, #0
 80096d2:	729a      	strb	r2, [r3, #10]
		cmd.target_point.x 		= 0;
 80096d4:	f107 0208 	add.w	r2, r7, #8
 80096d8:	f04f 0300 	mov.w	r3, #0
 80096dc:	f04f 0400 	mov.w	r4, #0
 80096e0:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		cmd.target_point.y 		= SHIFT_Y;
 80096e4:	f107 0208 	add.w	r2, r7, #8
 80096e8:	f04f 0300 	mov.w	r3, #0
 80096ec:	4c86      	ldr	r4, [pc, #536]	; (8009908 <scaraKeyInit+0x3a0>)
 80096ee:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
		cmd.target_point.z 		= 0;
 80096f2:	f107 0208 	add.w	r2, r7, #8
 80096f6:	f04f 0300 	mov.w	r3, #0
 80096fa:	f04f 0400 	mov.w	r4, #0
 80096fe:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
		cmd.target_point.roll	= 0;
 8009702:	f107 0208 	add.w	r2, r7, #8
 8009706:	f04f 0300 	mov.w	r3, #0
 800970a:	f04f 0400 	mov.w	r4, #0
 800970e:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
		v_current = positionCurrent.v_3d;
 8009712:	4b7e      	ldr	r3, [pc, #504]	; (800990c <scaraKeyInit+0x3a4>)
 8009714:	e9d3 342a 	ldrd	r3, r4, [r3, #168]	; 0xa8
 8009718:	e9c7 346e 	strd	r3, r4, [r7, #440]	; 0x1b8
		lspb = &(myDUTY.task.trajectory_3d.lspb);
 800971c:	4b7c      	ldr	r3, [pc, #496]	; (8009910 <scaraKeyInit+0x3a8>)
 800971e:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
	}
			break;
 8009722:	e1e3      	b.n	8009aec <scaraKeyInit+0x584>
	case SCARA_KEY_Y_DEC:
	{
		cmd.space_type = DUTY_SPACE_TASK;
 8009724:	f107 0308 	add.w	r3, r7, #8
 8009728:	2200      	movs	r2, #0
 800972a:	725a      	strb	r2, [r3, #9]
		cmd.path_type = DUTY_PATH_LINE;
 800972c:	f107 0308 	add.w	r3, r7, #8
 8009730:	2200      	movs	r2, #0
 8009732:	729a      	strb	r2, [r3, #10]
		cmd.target_point.x 		= 0;
 8009734:	f107 0208 	add.w	r2, r7, #8
 8009738:	f04f 0300 	mov.w	r3, #0
 800973c:	f04f 0400 	mov.w	r4, #0
 8009740:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		cmd.target_point.y 		= -SHIFT_Y;
 8009744:	f107 0208 	add.w	r2, r7, #8
 8009748:	f04f 0300 	mov.w	r3, #0
 800974c:	4c71      	ldr	r4, [pc, #452]	; (8009914 <scaraKeyInit+0x3ac>)
 800974e:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
		cmd.target_point.z 		= 0;
 8009752:	f107 0208 	add.w	r2, r7, #8
 8009756:	f04f 0300 	mov.w	r3, #0
 800975a:	f04f 0400 	mov.w	r4, #0
 800975e:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
		cmd.target_point.roll 	= 0;
 8009762:	f107 0208 	add.w	r2, r7, #8
 8009766:	f04f 0300 	mov.w	r3, #0
 800976a:	f04f 0400 	mov.w	r4, #0
 800976e:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
		v_current = positionCurrent.v_3d;
 8009772:	4b66      	ldr	r3, [pc, #408]	; (800990c <scaraKeyInit+0x3a4>)
 8009774:	e9d3 342a 	ldrd	r3, r4, [r3, #168]	; 0xa8
 8009778:	e9c7 346e 	strd	r3, r4, [r7, #440]	; 0x1b8
		lspb = &(myDUTY.task.trajectory_3d.lspb);
 800977c:	4b64      	ldr	r3, [pc, #400]	; (8009910 <scaraKeyInit+0x3a8>)
 800977e:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
	}
			break;
 8009782:	e1b3      	b.n	8009aec <scaraKeyInit+0x584>
	case SCARA_KEY_Z_INC:
	{
		cmd.space_type = DUTY_SPACE_TASK;
 8009784:	f107 0308 	add.w	r3, r7, #8
 8009788:	2200      	movs	r2, #0
 800978a:	725a      	strb	r2, [r3, #9]
		cmd.path_type = DUTY_PATH_LINE;
 800978c:	f107 0308 	add.w	r3, r7, #8
 8009790:	2200      	movs	r2, #0
 8009792:	729a      	strb	r2, [r3, #10]
		cmd.target_point.x 		= 0;
 8009794:	f107 0208 	add.w	r2, r7, #8
 8009798:	f04f 0300 	mov.w	r3, #0
 800979c:	f04f 0400 	mov.w	r4, #0
 80097a0:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		cmd.target_point.y 		= 0;
 80097a4:	f107 0208 	add.w	r2, r7, #8
 80097a8:	f04f 0300 	mov.w	r3, #0
 80097ac:	f04f 0400 	mov.w	r4, #0
 80097b0:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
		cmd.target_point.z 		= SHIFT_Z;
 80097b4:	f107 0208 	add.w	r2, r7, #8
 80097b8:	f04f 0300 	mov.w	r3, #0
 80097bc:	4c52      	ldr	r4, [pc, #328]	; (8009908 <scaraKeyInit+0x3a0>)
 80097be:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
		cmd.target_point.roll 	= 0;
 80097c2:	f107 0208 	add.w	r2, r7, #8
 80097c6:	f04f 0300 	mov.w	r3, #0
 80097ca:	f04f 0400 	mov.w	r4, #0
 80097ce:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
		v_current = positionCurrent.v_3d;
 80097d2:	4b4e      	ldr	r3, [pc, #312]	; (800990c <scaraKeyInit+0x3a4>)
 80097d4:	e9d3 342a 	ldrd	r3, r4, [r3, #168]	; 0xa8
 80097d8:	e9c7 346e 	strd	r3, r4, [r7, #440]	; 0x1b8
		lspb = &(myDUTY.task.trajectory_3d.lspb);
 80097dc:	4b4c      	ldr	r3, [pc, #304]	; (8009910 <scaraKeyInit+0x3a8>)
 80097de:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
	}
			break;
 80097e2:	e183      	b.n	8009aec <scaraKeyInit+0x584>
	case SCARA_KEY_Z_DEC:
	{
		cmd.space_type = DUTY_SPACE_TASK;
 80097e4:	f107 0308 	add.w	r3, r7, #8
 80097e8:	2200      	movs	r2, #0
 80097ea:	725a      	strb	r2, [r3, #9]
		cmd.path_type = DUTY_PATH_LINE;
 80097ec:	f107 0308 	add.w	r3, r7, #8
 80097f0:	2200      	movs	r2, #0
 80097f2:	729a      	strb	r2, [r3, #10]
		cmd.target_point.x 		= 0;
 80097f4:	f107 0208 	add.w	r2, r7, #8
 80097f8:	f04f 0300 	mov.w	r3, #0
 80097fc:	f04f 0400 	mov.w	r4, #0
 8009800:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		cmd.target_point.y 		= 0;
 8009804:	f107 0208 	add.w	r2, r7, #8
 8009808:	f04f 0300 	mov.w	r3, #0
 800980c:	f04f 0400 	mov.w	r4, #0
 8009810:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
		cmd.target_point.z 		= -SHIFT_Z;
 8009814:	f107 0208 	add.w	r2, r7, #8
 8009818:	f04f 0300 	mov.w	r3, #0
 800981c:	4c3d      	ldr	r4, [pc, #244]	; (8009914 <scaraKeyInit+0x3ac>)
 800981e:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
		cmd.target_point.roll 	= 0;
 8009822:	f107 0208 	add.w	r2, r7, #8
 8009826:	f04f 0300 	mov.w	r3, #0
 800982a:	f04f 0400 	mov.w	r4, #0
 800982e:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
		v_current = positionCurrent.v_3d;
 8009832:	4b36      	ldr	r3, [pc, #216]	; (800990c <scaraKeyInit+0x3a4>)
 8009834:	e9d3 342a 	ldrd	r3, r4, [r3, #168]	; 0xa8
 8009838:	e9c7 346e 	strd	r3, r4, [r7, #440]	; 0x1b8
		lspb = &(myDUTY.task.trajectory_3d.lspb);
 800983c:	4b34      	ldr	r3, [pc, #208]	; (8009910 <scaraKeyInit+0x3a8>)
 800983e:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
	}
			break;
 8009842:	e153      	b.n	8009aec <scaraKeyInit+0x584>
	case SCARA_KEY_ROLL_INC:
	{
		cmd.space_type = DUTY_SPACE_TASK;
 8009844:	f107 0308 	add.w	r3, r7, #8
 8009848:	2200      	movs	r2, #0
 800984a:	725a      	strb	r2, [r3, #9]
		cmd.path_type = DUTY_PATH_LINE;
 800984c:	f107 0308 	add.w	r3, r7, #8
 8009850:	2200      	movs	r2, #0
 8009852:	729a      	strb	r2, [r3, #10]
		cmd.target_point.x 		= 0;
 8009854:	f107 0208 	add.w	r2, r7, #8
 8009858:	f04f 0300 	mov.w	r3, #0
 800985c:	f04f 0400 	mov.w	r4, #0
 8009860:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		cmd.target_point.y 		= 0;
 8009864:	f107 0208 	add.w	r2, r7, #8
 8009868:	f04f 0300 	mov.w	r3, #0
 800986c:	f04f 0400 	mov.w	r4, #0
 8009870:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
		cmd.target_point.z 		= 0;
 8009874:	f107 0208 	add.w	r2, r7, #8
 8009878:	f04f 0300 	mov.w	r3, #0
 800987c:	f04f 0400 	mov.w	r4, #0
 8009880:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
		cmd.target_point.roll 	= SHIFT_ROLL;
 8009884:	f107 0208 	add.w	r2, r7, #8
 8009888:	f04f 0300 	mov.w	r3, #0
 800988c:	4c1e      	ldr	r4, [pc, #120]	; (8009908 <scaraKeyInit+0x3a0>)
 800988e:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
		v_current = positionCurrent.v_roll;
 8009892:	4b1e      	ldr	r3, [pc, #120]	; (800990c <scaraKeyInit+0x3a4>)
 8009894:	e9d3 342c 	ldrd	r3, r4, [r3, #176]	; 0xb0
 8009898:	e9c7 346e 	strd	r3, r4, [r7, #440]	; 0x1b8
		lspb = &(myDUTY.task.trajectory_roll.lspb);
 800989c:	4b1e      	ldr	r3, [pc, #120]	; (8009918 <scaraKeyInit+0x3b0>)
 800989e:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
	}
			break;
 80098a2:	e123      	b.n	8009aec <scaraKeyInit+0x584>
	case SCARA_KEY_ROLL_DEC:
	{
		cmd.space_type = DUTY_SPACE_TASK;
 80098a4:	f107 0308 	add.w	r3, r7, #8
 80098a8:	2200      	movs	r2, #0
 80098aa:	725a      	strb	r2, [r3, #9]
		cmd.path_type = DUTY_PATH_LINE;
 80098ac:	f107 0308 	add.w	r3, r7, #8
 80098b0:	2200      	movs	r2, #0
 80098b2:	729a      	strb	r2, [r3, #10]
		cmd.target_point.x 		= 10;
 80098b4:	f107 0208 	add.w	r2, r7, #8
 80098b8:	f04f 0300 	mov.w	r3, #0
 80098bc:	4c12      	ldr	r4, [pc, #72]	; (8009908 <scaraKeyInit+0x3a0>)
 80098be:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		cmd.target_point.y 		= 0;
 80098c2:	f107 0208 	add.w	r2, r7, #8
 80098c6:	f04f 0300 	mov.w	r3, #0
 80098ca:	f04f 0400 	mov.w	r4, #0
 80098ce:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
		cmd.target_point.z 		= 0;
 80098d2:	f107 0208 	add.w	r2, r7, #8
 80098d6:	f04f 0300 	mov.w	r3, #0
 80098da:	f04f 0400 	mov.w	r4, #0
 80098de:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
		cmd.target_point.roll 	= -SHIFT_ROLL;
 80098e2:	f107 0208 	add.w	r2, r7, #8
 80098e6:	f04f 0300 	mov.w	r3, #0
 80098ea:	4c0a      	ldr	r4, [pc, #40]	; (8009914 <scaraKeyInit+0x3ac>)
 80098ec:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
		v_current = positionCurrent.v_roll;
 80098f0:	4b06      	ldr	r3, [pc, #24]	; (800990c <scaraKeyInit+0x3a4>)
 80098f2:	e9d3 342c 	ldrd	r3, r4, [r3, #176]	; 0xb0
 80098f6:	e9c7 346e 	strd	r3, r4, [r7, #440]	; 0x1b8
		lspb = &(myDUTY.task.trajectory_roll.lspb);
 80098fa:	4b07      	ldr	r3, [pc, #28]	; (8009918 <scaraKeyInit+0x3b0>)
 80098fc:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
	}
			break;
 8009900:	e0f4      	b.n	8009aec <scaraKeyInit+0x584>
 8009902:	bf00      	nop
 8009904:	f3af 8000 	nop.w
 8009908:	40240000 	.word	0x40240000
 800990c:	20005e88 	.word	0x20005e88
 8009910:	200054e0 	.word	0x200054e0
 8009914:	c0240000 	.word	0xc0240000
 8009918:	20005638 	.word	0x20005638
 800991c:	9999999a 	.word	0x9999999a
 8009920:	3fb99999 	.word	0x3fb99999
 8009924:	66666666 	.word	0x66666666
 8009928:	3fe66666 	.word	0x3fe66666
	case SCARA_KEY_VAR0_INC:
	{
		cmd.space_type = DUTY_SPACE_JOINT;
 800992c:	f107 0308 	add.w	r3, r7, #8
 8009930:	2201      	movs	r2, #1
 8009932:	725a      	strb	r2, [r3, #9]
		cmd.joint_type = DUTY_JOINT_SINGLE;
 8009934:	f107 0308 	add.w	r3, r7, #8
 8009938:	2200      	movs	r2, #0
 800993a:	72da      	strb	r2, [r3, #11]
		cmd.sub_para_int 	= 0;
 800993c:	f107 0308 	add.w	r3, r7, #8
 8009940:	2200      	movs	r2, #0
 8009942:	611a      	str	r2, [r3, #16]
		cmd.sub_para_double = SHIFT_VAR0;
 8009944:	f107 0208 	add.w	r2, r7, #8
 8009948:	f04f 0300 	mov.w	r3, #0
 800994c:	4c96      	ldr	r4, [pc, #600]	; (8009ba8 <scaraKeyInit+0x640>)
 800994e:	e9c2 3406 	strd	r3, r4, [r2, #24]
		v_current = positionCurrent.v_theta1;
 8009952:	4b96      	ldr	r3, [pc, #600]	; (8009bac <scaraKeyInit+0x644>)
 8009954:	e9d3 3422 	ldrd	r3, r4, [r3, #136]	; 0x88
 8009958:	e9c7 346e 	strd	r3, r4, [r7, #440]	; 0x1b8
		lspb = &(myDUTY.joint.trajectory[0].lspb);
 800995c:	4b94      	ldr	r3, [pc, #592]	; (8009bb0 <scaraKeyInit+0x648>)
 800995e:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
	}
			break;
 8009962:	e0c3      	b.n	8009aec <scaraKeyInit+0x584>
	case SCARA_KEY_VAR0_DEC:
	{
		cmd.space_type = DUTY_SPACE_JOINT;
 8009964:	f107 0308 	add.w	r3, r7, #8
 8009968:	2201      	movs	r2, #1
 800996a:	725a      	strb	r2, [r3, #9]
		cmd.joint_type = DUTY_JOINT_SINGLE;
 800996c:	f107 0308 	add.w	r3, r7, #8
 8009970:	2200      	movs	r2, #0
 8009972:	72da      	strb	r2, [r3, #11]
		cmd.sub_para_int 	= 0;
 8009974:	f107 0308 	add.w	r3, r7, #8
 8009978:	2200      	movs	r2, #0
 800997a:	611a      	str	r2, [r3, #16]
		cmd.sub_para_double = -SHIFT_VAR0;
 800997c:	f107 0208 	add.w	r2, r7, #8
 8009980:	f04f 0300 	mov.w	r3, #0
 8009984:	4c8b      	ldr	r4, [pc, #556]	; (8009bb4 <scaraKeyInit+0x64c>)
 8009986:	e9c2 3406 	strd	r3, r4, [r2, #24]
		v_current = positionCurrent.v_theta1;
 800998a:	4b88      	ldr	r3, [pc, #544]	; (8009bac <scaraKeyInit+0x644>)
 800998c:	e9d3 3422 	ldrd	r3, r4, [r3, #136]	; 0x88
 8009990:	e9c7 346e 	strd	r3, r4, [r7, #440]	; 0x1b8
		lspb = &(myDUTY.joint.trajectory[0].lspb);
 8009994:	4b86      	ldr	r3, [pc, #536]	; (8009bb0 <scaraKeyInit+0x648>)
 8009996:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
	}
			break;
 800999a:	e0a7      	b.n	8009aec <scaraKeyInit+0x584>
	case SCARA_KEY_VAR1_INC:
	{
		cmd.space_type = DUTY_SPACE_JOINT;
 800999c:	f107 0308 	add.w	r3, r7, #8
 80099a0:	2201      	movs	r2, #1
 80099a2:	725a      	strb	r2, [r3, #9]
		cmd.joint_type = DUTY_JOINT_SINGLE;
 80099a4:	f107 0308 	add.w	r3, r7, #8
 80099a8:	2200      	movs	r2, #0
 80099aa:	72da      	strb	r2, [r3, #11]
		cmd.sub_para_int 	= 1;
 80099ac:	f107 0308 	add.w	r3, r7, #8
 80099b0:	2201      	movs	r2, #1
 80099b2:	611a      	str	r2, [r3, #16]
		cmd.sub_para_double = SHIFT_VAR1;
 80099b4:	f107 0208 	add.w	r2, r7, #8
 80099b8:	f04f 0300 	mov.w	r3, #0
 80099bc:	4c7e      	ldr	r4, [pc, #504]	; (8009bb8 <scaraKeyInit+0x650>)
 80099be:	e9c2 3406 	strd	r3, r4, [r2, #24]
		v_current = positionCurrent.v_theta2;
 80099c2:	4b7a      	ldr	r3, [pc, #488]	; (8009bac <scaraKeyInit+0x644>)
 80099c4:	e9d3 3424 	ldrd	r3, r4, [r3, #144]	; 0x90
 80099c8:	e9c7 346e 	strd	r3, r4, [r7, #440]	; 0x1b8
		lspb = &(myDUTY.joint.trajectory[1].lspb);
 80099cc:	4b7b      	ldr	r3, [pc, #492]	; (8009bbc <scaraKeyInit+0x654>)
 80099ce:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
	}
			break;
 80099d2:	e08b      	b.n	8009aec <scaraKeyInit+0x584>
	case SCARA_KEY_VAR1_DEC:
	{
		cmd.space_type = DUTY_SPACE_JOINT;
 80099d4:	f107 0308 	add.w	r3, r7, #8
 80099d8:	2201      	movs	r2, #1
 80099da:	725a      	strb	r2, [r3, #9]
		cmd.joint_type = DUTY_JOINT_SINGLE;
 80099dc:	f107 0308 	add.w	r3, r7, #8
 80099e0:	2200      	movs	r2, #0
 80099e2:	72da      	strb	r2, [r3, #11]
		cmd.sub_para_int 	= 1;
 80099e4:	f107 0308 	add.w	r3, r7, #8
 80099e8:	2201      	movs	r2, #1
 80099ea:	611a      	str	r2, [r3, #16]
		cmd.sub_para_double = -SHIFT_VAR1;
 80099ec:	f107 0208 	add.w	r2, r7, #8
 80099f0:	f04f 0300 	mov.w	r3, #0
 80099f4:	4c72      	ldr	r4, [pc, #456]	; (8009bc0 <scaraKeyInit+0x658>)
 80099f6:	e9c2 3406 	strd	r3, r4, [r2, #24]
		v_current = positionCurrent.v_theta2;
 80099fa:	4b6c      	ldr	r3, [pc, #432]	; (8009bac <scaraKeyInit+0x644>)
 80099fc:	e9d3 3424 	ldrd	r3, r4, [r3, #144]	; 0x90
 8009a00:	e9c7 346e 	strd	r3, r4, [r7, #440]	; 0x1b8
		lspb = &(myDUTY.joint.trajectory[1].lspb);
 8009a04:	4b6d      	ldr	r3, [pc, #436]	; (8009bbc <scaraKeyInit+0x654>)
 8009a06:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
	}
			break;
 8009a0a:	e06f      	b.n	8009aec <scaraKeyInit+0x584>
	case SCARA_KEY_VAR2_INC:
	{
		cmd.space_type = DUTY_SPACE_JOINT;
 8009a0c:	f107 0308 	add.w	r3, r7, #8
 8009a10:	2201      	movs	r2, #1
 8009a12:	725a      	strb	r2, [r3, #9]
		cmd.joint_type = DUTY_JOINT_SINGLE;
 8009a14:	f107 0308 	add.w	r3, r7, #8
 8009a18:	2200      	movs	r2, #0
 8009a1a:	72da      	strb	r2, [r3, #11]
		cmd.sub_para_int 	= 2;
 8009a1c:	f107 0308 	add.w	r3, r7, #8
 8009a20:	2202      	movs	r2, #2
 8009a22:	611a      	str	r2, [r3, #16]
		cmd.sub_para_double = SHIFT_VAR2;
 8009a24:	f107 0208 	add.w	r2, r7, #8
 8009a28:	f04f 0300 	mov.w	r3, #0
 8009a2c:	4c62      	ldr	r4, [pc, #392]	; (8009bb8 <scaraKeyInit+0x650>)
 8009a2e:	e9c2 3406 	strd	r3, r4, [r2, #24]
		v_current = positionCurrent.v_d3;
 8009a32:	4b5e      	ldr	r3, [pc, #376]	; (8009bac <scaraKeyInit+0x644>)
 8009a34:	e9d3 3426 	ldrd	r3, r4, [r3, #152]	; 0x98
 8009a38:	e9c7 346e 	strd	r3, r4, [r7, #440]	; 0x1b8
		lspb = &(myDUTY.joint.trajectory[2].lspb);
 8009a3c:	4b61      	ldr	r3, [pc, #388]	; (8009bc4 <scaraKeyInit+0x65c>)
 8009a3e:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
	}
			break;
 8009a42:	e053      	b.n	8009aec <scaraKeyInit+0x584>
	case SCARA_KEY_VAR2_DEC:
	{
		cmd.space_type = DUTY_SPACE_JOINT;
 8009a44:	f107 0308 	add.w	r3, r7, #8
 8009a48:	2201      	movs	r2, #1
 8009a4a:	725a      	strb	r2, [r3, #9]
		cmd.joint_type = DUTY_JOINT_SINGLE;
 8009a4c:	f107 0308 	add.w	r3, r7, #8
 8009a50:	2200      	movs	r2, #0
 8009a52:	72da      	strb	r2, [r3, #11]
		cmd.sub_para_int 	= 2;
 8009a54:	f107 0308 	add.w	r3, r7, #8
 8009a58:	2202      	movs	r2, #2
 8009a5a:	611a      	str	r2, [r3, #16]
		cmd.sub_para_double = -SHIFT_VAR2;
 8009a5c:	f107 0208 	add.w	r2, r7, #8
 8009a60:	f04f 0300 	mov.w	r3, #0
 8009a64:	4c56      	ldr	r4, [pc, #344]	; (8009bc0 <scaraKeyInit+0x658>)
 8009a66:	e9c2 3406 	strd	r3, r4, [r2, #24]
		v_current = positionCurrent.v_d3;
 8009a6a:	4b50      	ldr	r3, [pc, #320]	; (8009bac <scaraKeyInit+0x644>)
 8009a6c:	e9d3 3426 	ldrd	r3, r4, [r3, #152]	; 0x98
 8009a70:	e9c7 346e 	strd	r3, r4, [r7, #440]	; 0x1b8
		lspb = &(myDUTY.joint.trajectory[2].lspb);
 8009a74:	4b53      	ldr	r3, [pc, #332]	; (8009bc4 <scaraKeyInit+0x65c>)
 8009a76:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
	}
			break;
 8009a7a:	e037      	b.n	8009aec <scaraKeyInit+0x584>
	case SCARA_KEY_VAR3_INC:
	{
		cmd.space_type = DUTY_SPACE_JOINT;
 8009a7c:	f107 0308 	add.w	r3, r7, #8
 8009a80:	2201      	movs	r2, #1
 8009a82:	725a      	strb	r2, [r3, #9]
		cmd.joint_type = DUTY_JOINT_SINGLE;
 8009a84:	f107 0308 	add.w	r3, r7, #8
 8009a88:	2200      	movs	r2, #0
 8009a8a:	72da      	strb	r2, [r3, #11]
		cmd.sub_para_int 	= 3;
 8009a8c:	f107 0308 	add.w	r3, r7, #8
 8009a90:	2203      	movs	r2, #3
 8009a92:	611a      	str	r2, [r3, #16]
		cmd.sub_para_double = SHIFT_VAR3;
 8009a94:	f107 0208 	add.w	r2, r7, #8
 8009a98:	f04f 0300 	mov.w	r3, #0
 8009a9c:	4c46      	ldr	r4, [pc, #280]	; (8009bb8 <scaraKeyInit+0x650>)
 8009a9e:	e9c2 3406 	strd	r3, r4, [r2, #24]
		v_current = positionCurrent.v_theta4;
 8009aa2:	4b42      	ldr	r3, [pc, #264]	; (8009bac <scaraKeyInit+0x644>)
 8009aa4:	e9d3 3428 	ldrd	r3, r4, [r3, #160]	; 0xa0
 8009aa8:	e9c7 346e 	strd	r3, r4, [r7, #440]	; 0x1b8
		lspb = &(myDUTY.joint.trajectory[3].lspb);
 8009aac:	4b46      	ldr	r3, [pc, #280]	; (8009bc8 <scaraKeyInit+0x660>)
 8009aae:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
	}
			break;
 8009ab2:	e01b      	b.n	8009aec <scaraKeyInit+0x584>
	case SCARA_KEY_VAR3_DEC:
	{
		cmd.space_type = DUTY_SPACE_JOINT;
 8009ab4:	f107 0308 	add.w	r3, r7, #8
 8009ab8:	2201      	movs	r2, #1
 8009aba:	725a      	strb	r2, [r3, #9]
		cmd.joint_type = DUTY_JOINT_SINGLE;
 8009abc:	f107 0308 	add.w	r3, r7, #8
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	72da      	strb	r2, [r3, #11]
		cmd.sub_para_int 	= 3;
 8009ac4:	f107 0308 	add.w	r3, r7, #8
 8009ac8:	2203      	movs	r2, #3
 8009aca:	611a      	str	r2, [r3, #16]
		cmd.sub_para_double = -SHIFT_VAR3;
 8009acc:	f107 0208 	add.w	r2, r7, #8
 8009ad0:	f04f 0300 	mov.w	r3, #0
 8009ad4:	4c3a      	ldr	r4, [pc, #232]	; (8009bc0 <scaraKeyInit+0x658>)
 8009ad6:	e9c2 3406 	strd	r3, r4, [r2, #24]
		v_current = positionCurrent.v_theta4;
 8009ada:	4b34      	ldr	r3, [pc, #208]	; (8009bac <scaraKeyInit+0x644>)
 8009adc:	e9d3 3428 	ldrd	r3, r4, [r3, #160]	; 0xa0
 8009ae0:	e9c7 346e 	strd	r3, r4, [r7, #440]	; 0x1b8
		lspb = &(myDUTY.joint.trajectory[3].lspb);
 8009ae4:	4b38      	ldr	r3, [pc, #224]	; (8009bc8 <scaraKeyInit+0x660>)
 8009ae6:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
	}
			break;
 8009aea:	bf00      	nop
	}
	// Initial
	status = scaraInitDuty(cmd);
 8009aec:	f107 0408 	add.w	r4, r7, #8
 8009af0:	4668      	mov	r0, sp
 8009af2:	f104 0310 	add.w	r3, r4, #16
 8009af6:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8009afa:	4619      	mov	r1, r3
 8009afc:	f00b fa78 	bl	8014ff0 <memcpy>
 8009b00:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8009b04:	f7fb f81c 	bl	8004b40 <scaraInitDuty>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	f887 31b3 	strb.w	r3, [r7, #435]	; 0x1b3
	if (status == SCARA_STATUS_OK) {
 8009b0e:	f897 31b3 	ldrb.w	r3, [r7, #435]	; 0x1b3
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d13f      	bne.n	8009b96 <scaraKeyInit+0x62e>
		status = scaraTestDuty();
 8009b16:	f7ff faef 	bl	80090f8 <scaraTestDuty>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	f887 31b3 	strb.w	r3, [r7, #435]	; 0x1b3
		if (status != SCARA_STATUS_OK) {
 8009b20:	f897 31b3 	ldrb.w	r3, [r7, #435]	; 0x1b3
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d002      	beq.n	8009b2e <scaraKeyInit+0x5c6>
			return status;
 8009b28:	f897 31b3 	ldrb.w	r3, [r7, #435]	; 0x1b3
 8009b2c:	e035      	b.n	8009b9a <scaraKeyInit+0x632>
		}
		// tinh lai run time so vs v hien tai
		*(runtime) = (v_current - lspb->v0)/(lspb->a_design);
 8009b2e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8009b32:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8009b36:	461a      	mov	r2, r3
 8009b38:	4623      	mov	r3, r4
 8009b3a:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 8009b3e:	f7f6 fbb3 	bl	80002a8 <__aeabi_dsub>
 8009b42:	4603      	mov	r3, r0
 8009b44:	460c      	mov	r4, r1
 8009b46:	4618      	mov	r0, r3
 8009b48:	4621      	mov	r1, r4
 8009b4a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8009b4e:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8009b52:	461a      	mov	r2, r3
 8009b54:	4623      	mov	r3, r4
 8009b56:	f7f6 fe89 	bl	800086c <__aeabi_ddiv>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	460c      	mov	r4, r1
 8009b5e:	463a      	mov	r2, r7
 8009b60:	6812      	ldr	r2, [r2, #0]
 8009b62:	e9c2 3400 	strd	r3, r4, [r2]
		scaraFlowDuty(*runtime, &positionKeyInit, positionCurrent);
 8009b66:	463b      	mov	r3, r7
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	ed93 8b00 	vldr	d8, [r3]
 8009b6e:	4c0f      	ldr	r4, [pc, #60]	; (8009bac <scaraKeyInit+0x644>)
 8009b70:	4668      	mov	r0, sp
 8009b72:	f104 0308 	add.w	r3, r4, #8
 8009b76:	22b0      	movs	r2, #176	; 0xb0
 8009b78:	4619      	mov	r1, r3
 8009b7a:	f00b fa39 	bl	8014ff0 <memcpy>
 8009b7e:	e894 000c 	ldmia.w	r4, {r2, r3}
 8009b82:	4812      	ldr	r0, [pc, #72]	; (8009bcc <scaraKeyInit+0x664>)
 8009b84:	eeb0 0a48 	vmov.f32	s0, s16
 8009b88:	eef0 0a68 	vmov.f32	s1, s17
 8009b8c:	f7fd fc96 	bl	80074bc <scaraFlowDuty>
		return status;
 8009b90:	f897 31b3 	ldrb.w	r3, [r7, #435]	; 0x1b3
 8009b94:	e001      	b.n	8009b9a <scaraKeyInit+0x632>
	} else {
		return status;
 8009b96:	f897 31b3 	ldrb.w	r3, [r7, #435]	; 0x1b3
	}
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f507 77e2 	add.w	r7, r7, #452	; 0x1c4
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	ecbd 8b02 	vpop	{d8}
 8009ba6:	bd90      	pop	{r4, r7, pc}
 8009ba8:	40140000 	.word	0x40140000
 8009bac:	20005e88 	.word	0x20005e88
 8009bb0:	20005798 	.word	0x20005798
 8009bb4:	c0140000 	.word	0xc0140000
 8009bb8:	40240000 	.word	0x40240000
 8009bbc:	200058f0 	.word	0x200058f0
 8009bc0:	c0240000 	.word	0xc0240000
 8009bc4:	20005a48 	.word	0x20005a48
 8009bc8:	20005ba0 	.word	0x20005ba0
 8009bcc:	20005dd0 	.word	0x20005dd0

08009bd0 <scaraKeyFlow>:

SCARA_StatusTypeDef		scaraKeyFlow(double time,
									SCARA_PositionTypeDef *pos_Next,
									SCARA_PositionTypeDef pos_Current) {
 8009bd0:	b082      	sub	sp, #8
 8009bd2:	b5b0      	push	{r4, r5, r7, lr}
 8009bd4:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 8009bd8:	af2c      	add	r7, sp, #176	; 0xb0
 8009bda:	f107 0108 	add.w	r1, r7, #8
 8009bde:	ed81 0b00 	vstr	d0, [r1]
 8009be2:	1d39      	adds	r1, r7, #4
 8009be4:	6008      	str	r0, [r1, #0]
 8009be6:	f507 71cc 	add.w	r1, r7, #408	; 0x198
 8009bea:	e881 000c 	stmia.w	r1, {r2, r3}
	SCARA_StatusTypeDef status1, status2, status3, status4;
	SCARA_PositionTypeDef	positionCompute;
	// Update time
	positionCompute.t = time;
 8009bee:	f107 0210 	add.w	r2, r7, #16
 8009bf2:	f107 0308 	add.w	r3, r7, #8
 8009bf6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009bfa:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	/*---- Task space ----*/
	if ( DUTY_SPACE_TASK == myDUTY.space_type) {
 8009bfe:	4b74      	ldr	r3, [pc, #464]	; (8009dd0 <scaraKeyFlow+0x200>)
 8009c00:	781b      	ldrb	r3, [r3, #0]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	f040 80ee 	bne.w	8009de4 <scaraKeyFlow+0x214>
		double s, angle, x, y, z, v, v_angle;
		double s_shift, angle_shift;
		int8_t	dir_roll;
		//---Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.task.trajectory_3d.trajectory_type) {
 8009c08:	4b71      	ldr	r3, [pc, #452]	; (8009dd0 <scaraKeyFlow+0x200>)
 8009c0a:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d12c      	bne.n	8009c6c <scaraKeyFlow+0x9c>
			status1 = scaraFlowLSPB(&(myDUTY.task.trajectory_3d.lspb), time);
 8009c12:	f107 0308 	add.w	r3, r7, #8
 8009c16:	ed93 0b00 	vldr	d0, [r3]
 8009c1a:	486e      	ldr	r0, [pc, #440]	; (8009dd4 <scaraKeyFlow+0x204>)
 8009c1c:	f7fe f8bc 	bl	8007d98 <scaraFlowLSPB>
 8009c20:	4603      	mov	r3, r0
 8009c22:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
			status2 = scaraFlowLSPB(&(myDUTY.task.trajectory_roll.lspb), time);
 8009c26:	f107 0308 	add.w	r3, r7, #8
 8009c2a:	ed93 0b00 	vldr	d0, [r3]
 8009c2e:	486a      	ldr	r0, [pc, #424]	; (8009dd8 <scaraKeyFlow+0x208>)
 8009c30:	f7fe f8b2 	bl	8007d98 <scaraFlowLSPB>
 8009c34:	4603      	mov	r3, r0
 8009c36:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
			s = myDUTY.task.trajectory_3d.lspb.s_current;
 8009c3a:	4b65      	ldr	r3, [pc, #404]	; (8009dd0 <scaraKeyFlow+0x200>)
 8009c3c:	e9d3 3464 	ldrd	r3, r4, [r3, #400]	; 0x190
 8009c40:	e9c7 345e 	strd	r3, r4, [r7, #376]	; 0x178
			v = myDUTY.task.trajectory_3d.lspb.v_current;
 8009c44:	4b62      	ldr	r3, [pc, #392]	; (8009dd0 <scaraKeyFlow+0x200>)
 8009c46:	e9d3 3462 	ldrd	r3, r4, [r3, #392]	; 0x188
 8009c4a:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
			angle = myDUTY.task.trajectory_roll.lspb.s_current;
 8009c4e:	4b60      	ldr	r3, [pc, #384]	; (8009dd0 <scaraKeyFlow+0x200>)
 8009c50:	e9d3 34ba 	ldrd	r3, r4, [r3, #744]	; 0x2e8
 8009c54:	e9c7 345c 	strd	r3, r4, [r7, #368]	; 0x170
			v_angle = myDUTY.task.trajectory_roll.lspb.v_current;
 8009c58:	4b5d      	ldr	r3, [pc, #372]	; (8009dd0 <scaraKeyFlow+0x200>)
 8009c5a:	e9d3 34b8 	ldrd	r3, r4, [r3, #736]	; 0x2e0
 8009c5e:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			dir_roll = myDUTY.task.trajectory_roll.lspb.dir;
 8009c62:	4b5b      	ldr	r3, [pc, #364]	; (8009dd0 <scaraKeyFlow+0x200>)
 8009c64:	f893 3270 	ldrb.w	r3, [r3, #624]	; 0x270
 8009c68:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
		}

		if ( SCARA_STATUS_OK != status1) {
 8009c6c:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d002      	beq.n	8009c7a <scaraKeyFlow+0xaa>
			return status1;
 8009c74:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 8009c78:	e26b      	b.n	800a152 <scaraKeyFlow+0x582>
		}
		if ( SCARA_STATUS_OK != status2) {
 8009c7a:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d002      	beq.n	8009c88 <scaraKeyFlow+0xb8>
			return status2;
 8009c82:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 8009c86:	e264      	b.n	800a152 <scaraKeyFlow+0x582>
		}

		// Shift q , q_roll
		s_shift = s - positionKeyInit.q;
 8009c88:	4b54      	ldr	r3, [pc, #336]	; (8009ddc <scaraKeyFlow+0x20c>)
 8009c8a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009c8e:	461a      	mov	r2, r3
 8009c90:	4623      	mov	r3, r4
 8009c92:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8009c96:	f7f6 fb07 	bl	80002a8 <__aeabi_dsub>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	460c      	mov	r4, r1
 8009c9e:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
		angle_shift = angle - positionKeyInit.q_roll;
 8009ca2:	4b4e      	ldr	r3, [pc, #312]	; (8009ddc <scaraKeyFlow+0x20c>)
 8009ca4:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8009ca8:	461a      	mov	r2, r3
 8009caa:	4623      	mov	r3, r4
 8009cac:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8009cb0:	f7f6 fafa 	bl	80002a8 <__aeabi_dsub>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	460c      	mov	r4, r1
 8009cb8:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8

		//---Path flowing
			// Straight line
		if( DUTY_PATH_LINE == myDUTY.task.path.path_type) {
 8009cbc:	4b44      	ldr	r3, [pc, #272]	; (8009dd0 <scaraKeyFlow+0x200>)
 8009cbe:	7a1b      	ldrb	r3, [r3, #8]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d116      	bne.n	8009cf2 <scaraKeyFlow+0x122>
			status1 = scaraFlowLine(&(myDUTY.task.path.line), s_shift);//shift
 8009cc4:	ed97 0b34 	vldr	d0, [r7, #208]	; 0xd0
 8009cc8:	4845      	ldr	r0, [pc, #276]	; (8009de0 <scaraKeyFlow+0x210>)
 8009cca:	f7fd ff55 	bl	8007b78 <scaraFlowLine>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
			x = myDUTY.task.path.line.x_current;
 8009cd4:	4b3e      	ldr	r3, [pc, #248]	; (8009dd0 <scaraKeyFlow+0x200>)
 8009cd6:	e9d3 341a 	ldrd	r3, r4, [r3, #104]	; 0x68
 8009cda:	e9c7 345a 	strd	r3, r4, [r7, #360]	; 0x168
			y = myDUTY.task.path.line.y_current;
 8009cde:	4b3c      	ldr	r3, [pc, #240]	; (8009dd0 <scaraKeyFlow+0x200>)
 8009ce0:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8009ce4:	e9c7 3458 	strd	r3, r4, [r7, #352]	; 0x160
			z = myDUTY.task.path.line.z_current;
 8009ce8:	4b39      	ldr	r3, [pc, #228]	; (8009dd0 <scaraKeyFlow+0x200>)
 8009cea:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 8009cee:	e9c7 3456 	strd	r3, r4, [r7, #344]	; 0x158
		}

		positionCompute.x 		= x;
 8009cf2:	f107 0210 	add.w	r2, r7, #16
 8009cf6:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 8009cfa:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
		positionCompute.y		= y;
 8009cfe:	f107 0210 	add.w	r2, r7, #16
 8009d02:	e9d7 3458 	ldrd	r3, r4, [r7, #352]	; 0x160
 8009d06:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
		positionCompute.z 		= z;
 8009d0a:	f107 0210 	add.w	r2, r7, #16
 8009d0e:	e9d7 3456 	ldrd	r3, r4, [r7, #344]	; 0x158
 8009d12:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
		positionCompute.roll 	= myDUTY.task.roll_start + angle_shift*dir_roll;// shift
 8009d16:	4b2e      	ldr	r3, [pc, #184]	; (8009dd0 <scaraKeyFlow+0x200>)
 8009d18:	e9d3 45f0 	ldrd	r4, r5, [r3, #960]	; 0x3c0
 8009d1c:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8009d20:	4618      	mov	r0, r3
 8009d22:	f7f6 fc0f 	bl	8000544 <__aeabi_i2d>
 8009d26:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8009d2a:	f7f6 fc75 	bl	8000618 <__aeabi_dmul>
 8009d2e:	4602      	mov	r2, r0
 8009d30:	460b      	mov	r3, r1
 8009d32:	4620      	mov	r0, r4
 8009d34:	4629      	mov	r1, r5
 8009d36:	f7f6 fab9 	bl	80002ac <__adddf3>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	460c      	mov	r4, r1
 8009d3e:	f107 0210 	add.w	r2, r7, #16
 8009d42:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

		positionCompute.q		= s;
 8009d46:	f107 0210 	add.w	r2, r7, #16
 8009d4a:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8009d4e:	e9c2 3400 	strd	r3, r4, [r2]
		positionCompute.q_roll  = angle;
 8009d52:	f107 0210 	add.w	r2, r7, #16
 8009d56:	e9d7 345c 	ldrd	r3, r4, [r7, #368]	; 0x170
 8009d5a:	e9c2 3402 	strd	r3, r4, [r2, #8]

		positionCompute.v_3d    = v;
 8009d5e:	f107 0210 	add.w	r2, r7, #16
 8009d62:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8009d66:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
		positionCompute.v_roll  = v_angle;
 8009d6a:	f107 0210 	add.w	r2, r7, #16
 8009d6e:	e9d7 3452 	ldrd	r3, r4, [r7, #328]	; 0x148
 8009d72:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0

		positionCompute.total_time = myDUTY.time_total;
 8009d76:	4b16      	ldr	r3, [pc, #88]	; (8009dd0 <scaraKeyFlow+0x200>)
 8009d78:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8009d7c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009d80:	f107 0210 	add.w	r2, r7, #16
 8009d84:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
		positionCompute.t		= time;
 8009d88:	f107 0210 	add.w	r2, r7, #16
 8009d8c:	f107 0308 	add.w	r3, r7, #8
 8009d90:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009d94:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
		if ( FALSE == kinematicInverse(&positionCompute, pos_Current)) {
 8009d98:	f107 0410 	add.w	r4, r7, #16
 8009d9c:	4668      	mov	r0, sp
 8009d9e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8009da2:	22b0      	movs	r2, #176	; 0xb0
 8009da4:	4619      	mov	r1, r3
 8009da6:	f00b f923 	bl	8014ff0 <memcpy>
 8009daa:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8009dae:	cb0c      	ldmia	r3, {r2, r3}
 8009db0:	4620      	mov	r0, r4
 8009db2:	f7f9 fbe9 	bl	8003588 <kinematicInverse>
 8009db6:	4603      	mov	r3, r0
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d101      	bne.n	8009dc0 <scaraKeyFlow+0x1f0>
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8009dbc:	2307      	movs	r3, #7
 8009dbe:	e1c8      	b.n	800a152 <scaraKeyFlow+0x582>
		} else {
			memcpy(pos_Next, &positionCompute, sizeof(SCARA_PositionTypeDef));
 8009dc0:	f107 0110 	add.w	r1, r7, #16
 8009dc4:	1d3b      	adds	r3, r7, #4
 8009dc6:	22b8      	movs	r2, #184	; 0xb8
 8009dc8:	6818      	ldr	r0, [r3, #0]
 8009dca:	f00b f911 	bl	8014ff0 <memcpy>
 8009dce:	e1bf      	b.n	800a150 <scaraKeyFlow+0x580>
 8009dd0:	200053c8 	.word	0x200053c8
 8009dd4:	200054e0 	.word	0x200054e0
 8009dd8:	20005638 	.word	0x20005638
 8009ddc:	20005dd0 	.word	0x20005dd0
 8009de0:	200053d8 	.word	0x200053d8
		}

	/*---- Joint space -----*/
	} else if (DUTY_SPACE_JOINT == myDUTY.space_type) {
 8009de4:	4b4c      	ldr	r3, [pc, #304]	; (8009f18 <scaraKeyFlow+0x348>)
 8009de6:	781b      	ldrb	r3, [r3, #0]
 8009de8:	2b01      	cmp	r3, #1
 8009dea:	f040 81af 	bne.w	800a14c <scaraKeyFlow+0x57c>
		double v0, v1, v2, v3;
		double s0_shift, s1_shift, s2_shift, s3_shift;
		int8_t dir0, dir1, dir2, dir3;
		// Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.joint.trajectory[0].trajectory_type) {
 8009dee:	4b4a      	ldr	r3, [pc, #296]	; (8009f18 <scaraKeyFlow+0x348>)
 8009df0:	f893 33c8 	ldrb.w	r3, [r3, #968]	; 0x3c8
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d173      	bne.n	8009ee0 <scaraKeyFlow+0x310>
			status1 = scaraFlowLSPB(&(myDUTY.joint.trajectory[0].lspb), time);
 8009df8:	f107 0308 	add.w	r3, r7, #8
 8009dfc:	ed93 0b00 	vldr	d0, [r3]
 8009e00:	4846      	ldr	r0, [pc, #280]	; (8009f1c <scaraKeyFlow+0x34c>)
 8009e02:	f7fd ffc9 	bl	8007d98 <scaraFlowLSPB>
 8009e06:	4603      	mov	r3, r0
 8009e08:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
			status2 = scaraFlowLSPB(&(myDUTY.joint.trajectory[1].lspb), time);
 8009e0c:	f107 0308 	add.w	r3, r7, #8
 8009e10:	ed93 0b00 	vldr	d0, [r3]
 8009e14:	4842      	ldr	r0, [pc, #264]	; (8009f20 <scaraKeyFlow+0x350>)
 8009e16:	f7fd ffbf 	bl	8007d98 <scaraFlowLSPB>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
			status3 = scaraFlowLSPB(&(myDUTY.joint.trajectory[2].lspb), time);
 8009e20:	f107 0308 	add.w	r3, r7, #8
 8009e24:	ed93 0b00 	vldr	d0, [r3]
 8009e28:	483e      	ldr	r0, [pc, #248]	; (8009f24 <scaraKeyFlow+0x354>)
 8009e2a:	f7fd ffb5 	bl	8007d98 <scaraFlowLSPB>
 8009e2e:	4603      	mov	r3, r0
 8009e30:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
			status4 = scaraFlowLSPB(&(myDUTY.joint.trajectory[3].lspb), time);
 8009e34:	f107 0308 	add.w	r3, r7, #8
 8009e38:	ed93 0b00 	vldr	d0, [r3]
 8009e3c:	483a      	ldr	r0, [pc, #232]	; (8009f28 <scaraKeyFlow+0x358>)
 8009e3e:	f7fd ffab 	bl	8007d98 <scaraFlowLSPB>
 8009e42:	4603      	mov	r3, r0
 8009e44:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184

			dir0 = myDUTY.joint.trajectory[0].lspb.dir;
 8009e48:	4b33      	ldr	r3, [pc, #204]	; (8009f18 <scaraKeyFlow+0x348>)
 8009e4a:	f893 33d0 	ldrb.w	r3, [r3, #976]	; 0x3d0
 8009e4e:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
			dir1 = myDUTY.joint.trajectory[1].lspb.dir;
 8009e52:	4b31      	ldr	r3, [pc, #196]	; (8009f18 <scaraKeyFlow+0x348>)
 8009e54:	f893 3528 	ldrb.w	r3, [r3, #1320]	; 0x528
 8009e58:	f887 30fe 	strb.w	r3, [r7, #254]	; 0xfe
			dir2 = myDUTY.joint.trajectory[2].lspb.dir;
 8009e5c:	4b2e      	ldr	r3, [pc, #184]	; (8009f18 <scaraKeyFlow+0x348>)
 8009e5e:	f893 3680 	ldrb.w	r3, [r3, #1664]	; 0x680
 8009e62:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
			dir3 = myDUTY.joint.trajectory[3].lspb.dir;
 8009e66:	4b2c      	ldr	r3, [pc, #176]	; (8009f18 <scaraKeyFlow+0x348>)
 8009e68:	f893 37d8 	ldrb.w	r3, [r3, #2008]	; 0x7d8
 8009e6c:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc

			s0 = myDUTY.joint.trajectory[0].lspb.s_current;
 8009e70:	4b29      	ldr	r3, [pc, #164]	; (8009f18 <scaraKeyFlow+0x348>)
 8009e72:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 8009e76:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009e7a:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
			s1 = myDUTY.joint.trajectory[1].lspb.s_current;
 8009e7e:	4b26      	ldr	r3, [pc, #152]	; (8009f18 <scaraKeyFlow+0x348>)
 8009e80:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 8009e84:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009e88:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
			s2 = myDUTY.joint.trajectory[2].lspb.s_current;
 8009e8c:	4b22      	ldr	r3, [pc, #136]	; (8009f18 <scaraKeyFlow+0x348>)
 8009e8e:	f503 63df 	add.w	r3, r3, #1784	; 0x6f8
 8009e92:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009e96:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
			s3 = myDUTY.joint.trajectory[3].lspb.s_current;
 8009e9a:	4b1f      	ldr	r3, [pc, #124]	; (8009f18 <scaraKeyFlow+0x348>)
 8009e9c:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 8009ea0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009ea4:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120

			v0 = myDUTY.joint.trajectory[0].lspb.v_current;
 8009ea8:	4b1b      	ldr	r3, [pc, #108]	; (8009f18 <scaraKeyFlow+0x348>)
 8009eaa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009eae:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009eb2:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
			v1 = myDUTY.joint.trajectory[1].lspb.v_current;
 8009eb6:	4b18      	ldr	r3, [pc, #96]	; (8009f18 <scaraKeyFlow+0x348>)
 8009eb8:	f503 63b3 	add.w	r3, r3, #1432	; 0x598
 8009ebc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009ec0:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
			v2 = myDUTY.joint.trajectory[2].lspb.v_current;
 8009ec4:	4b14      	ldr	r3, [pc, #80]	; (8009f18 <scaraKeyFlow+0x348>)
 8009ec6:	f503 63de 	add.w	r3, r3, #1776	; 0x6f0
 8009eca:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009ece:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
			v3 = myDUTY.joint.trajectory[3].lspb.v_current;
 8009ed2:	4b11      	ldr	r3, [pc, #68]	; (8009f18 <scaraKeyFlow+0x348>)
 8009ed4:	f603 0348 	addw	r3, r3, #2120	; 0x848
 8009ed8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009edc:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100

		}
		// Check init status
		if ( SCARA_STATUS_OK != status1) {
 8009ee0:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d002      	beq.n	8009eee <scaraKeyFlow+0x31e>
			return status1;
 8009ee8:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 8009eec:	e131      	b.n	800a152 <scaraKeyFlow+0x582>
		}
		if ( SCARA_STATUS_OK != status2) {
 8009eee:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d002      	beq.n	8009efc <scaraKeyFlow+0x32c>
			return status2;
 8009ef6:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 8009efa:	e12a      	b.n	800a152 <scaraKeyFlow+0x582>
		}
		if ( SCARA_STATUS_OK != status3) {
 8009efc:	f897 3185 	ldrb.w	r3, [r7, #389]	; 0x185
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d002      	beq.n	8009f0a <scaraKeyFlow+0x33a>
			return status3;
 8009f04:	f897 3185 	ldrb.w	r3, [r7, #389]	; 0x185
 8009f08:	e123      	b.n	800a152 <scaraKeyFlow+0x582>
		}
		if ( SCARA_STATUS_OK != status4) {
 8009f0a:	f897 3184 	ldrb.w	r3, [r7, #388]	; 0x184
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d00c      	beq.n	8009f2c <scaraKeyFlow+0x35c>
			return status4;
 8009f12:	f897 3184 	ldrb.w	r3, [r7, #388]	; 0x184
 8009f16:	e11c      	b.n	800a152 <scaraKeyFlow+0x582>
 8009f18:	200053c8 	.word	0x200053c8
 8009f1c:	20005798 	.word	0x20005798
 8009f20:	200058f0 	.word	0x200058f0
 8009f24:	20005a48 	.word	0x20005a48
 8009f28:	20005ba0 	.word	0x20005ba0
		}
		// shift s0, s1, s2, s3
		s0_shift = s0 - positionKeyInit.q_theta1;
 8009f2c:	4b8d      	ldr	r3, [pc, #564]	; (800a164 <scaraKeyFlow+0x594>)
 8009f2e:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8009f32:	461a      	mov	r2, r3
 8009f34:	4623      	mov	r3, r4
 8009f36:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8009f3a:	f7f6 f9b5 	bl	80002a8 <__aeabi_dsub>
 8009f3e:	4603      	mov	r3, r0
 8009f40:	460c      	mov	r4, r1
 8009f42:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0
		s1_shift = s1 - positionKeyInit.q_theta2;
 8009f46:	4b87      	ldr	r3, [pc, #540]	; (800a164 <scaraKeyFlow+0x594>)
 8009f48:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8009f4c:	461a      	mov	r2, r3
 8009f4e:	4623      	mov	r3, r4
 8009f50:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 8009f54:	f7f6 f9a8 	bl	80002a8 <__aeabi_dsub>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	460c      	mov	r4, r1
 8009f5c:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
		s2_shift = s2 - positionKeyInit.q_d3;
 8009f60:	4b80      	ldr	r3, [pc, #512]	; (800a164 <scaraKeyFlow+0x594>)
 8009f62:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8009f66:	461a      	mov	r2, r3
 8009f68:	4623      	mov	r3, r4
 8009f6a:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8009f6e:	f7f6 f99b 	bl	80002a8 <__aeabi_dsub>
 8009f72:	4603      	mov	r3, r0
 8009f74:	460c      	mov	r4, r1
 8009f76:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		s3_shift = s3 - positionKeyInit.q_theta4;
 8009f7a:	4b7a      	ldr	r3, [pc, #488]	; (800a164 <scaraKeyFlow+0x594>)
 8009f7c:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8009f80:	461a      	mov	r2, r3
 8009f82:	4623      	mov	r3, r4
 8009f84:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8009f88:	f7f6 f98e 	bl	80002a8 <__aeabi_dsub>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	460c      	mov	r4, r1
 8009f90:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8

		positionCompute.Theta1 	= myDUTY.joint.theta1_start + s0_shift*dir0;
 8009f94:	4b74      	ldr	r3, [pc, #464]	; (800a168 <scaraKeyFlow+0x598>)
 8009f96:	f603 1328 	addw	r3, r3, #2344	; 0x928
 8009f9a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009f9e:	f997 30ff 	ldrsb.w	r3, [r7, #255]	; 0xff
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f7f6 face 	bl	8000544 <__aeabi_i2d>
 8009fa8:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8009fac:	f7f6 fb34 	bl	8000618 <__aeabi_dmul>
 8009fb0:	4602      	mov	r2, r0
 8009fb2:	460b      	mov	r3, r1
 8009fb4:	4620      	mov	r0, r4
 8009fb6:	4629      	mov	r1, r5
 8009fb8:	f7f6 f978 	bl	80002ac <__adddf3>
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	460c      	mov	r4, r1
 8009fc0:	f107 0210 	add.w	r2, r7, #16
 8009fc4:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		positionCompute.Theta2 	= myDUTY.joint.theta2_start + s1_shift*dir1;
 8009fc8:	4b67      	ldr	r3, [pc, #412]	; (800a168 <scaraKeyFlow+0x598>)
 8009fca:	f503 6313 	add.w	r3, r3, #2352	; 0x930
 8009fce:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009fd2:	f997 30fe 	ldrsb.w	r3, [r7, #254]	; 0xfe
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f7f6 fab4 	bl	8000544 <__aeabi_i2d>
 8009fdc:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8009fe0:	f7f6 fb1a 	bl	8000618 <__aeabi_dmul>
 8009fe4:	4602      	mov	r2, r0
 8009fe6:	460b      	mov	r3, r1
 8009fe8:	4620      	mov	r0, r4
 8009fea:	4629      	mov	r1, r5
 8009fec:	f7f6 f95e 	bl	80002ac <__adddf3>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	460c      	mov	r4, r1
 8009ff4:	f107 0210 	add.w	r2, r7, #16
 8009ff8:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		positionCompute.D3 		= myDUTY.joint.d3_start 	+ s2_shift*dir2;
 8009ffc:	4b5a      	ldr	r3, [pc, #360]	; (800a168 <scaraKeyFlow+0x598>)
 8009ffe:	f603 1338 	addw	r3, r3, #2360	; 0x938
 800a002:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a006:	f997 30fd 	ldrsb.w	r3, [r7, #253]	; 0xfd
 800a00a:	4618      	mov	r0, r3
 800a00c:	f7f6 fa9a 	bl	8000544 <__aeabi_i2d>
 800a010:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800a014:	f7f6 fb00 	bl	8000618 <__aeabi_dmul>
 800a018:	4602      	mov	r2, r0
 800a01a:	460b      	mov	r3, r1
 800a01c:	4620      	mov	r0, r4
 800a01e:	4629      	mov	r1, r5
 800a020:	f7f6 f944 	bl	80002ac <__adddf3>
 800a024:	4603      	mov	r3, r0
 800a026:	460c      	mov	r4, r1
 800a028:	f107 0210 	add.w	r2, r7, #16
 800a02c:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
		positionCompute.Theta4 	= myDUTY.joint.theta4_start + s3_shift*dir3;
 800a030:	4b4d      	ldr	r3, [pc, #308]	; (800a168 <scaraKeyFlow+0x598>)
 800a032:	f503 6314 	add.w	r3, r3, #2368	; 0x940
 800a036:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a03a:	f997 30fc 	ldrsb.w	r3, [r7, #252]	; 0xfc
 800a03e:	4618      	mov	r0, r3
 800a040:	f7f6 fa80 	bl	8000544 <__aeabi_i2d>
 800a044:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800a048:	f7f6 fae6 	bl	8000618 <__aeabi_dmul>
 800a04c:	4602      	mov	r2, r0
 800a04e:	460b      	mov	r3, r1
 800a050:	4620      	mov	r0, r4
 800a052:	4629      	mov	r1, r5
 800a054:	f7f6 f92a 	bl	80002ac <__adddf3>
 800a058:	4603      	mov	r3, r0
 800a05a:	460c      	mov	r4, r1
 800a05c:	f107 0210 	add.w	r2, r7, #16
 800a060:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80

		positionCompute.v_theta1 	= v0;
 800a064:	f107 0210 	add.w	r2, r7, #16
 800a068:	e9d7 3446 	ldrd	r3, r4, [r7, #280]	; 0x118
 800a06c:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
		positionCompute.v_theta2 	= v1;
 800a070:	f107 0210 	add.w	r2, r7, #16
 800a074:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 800a078:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
		positionCompute.v_d3 		= v2;
 800a07c:	f107 0210 	add.w	r2, r7, #16
 800a080:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 800a084:	e9c2 3426 	strd	r3, r4, [r2, #152]	; 0x98
		positionCompute.v_theta4 	= v3;
 800a088:	f107 0210 	add.w	r2, r7, #16
 800a08c:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 800a090:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0

		positionCompute.q_theta1 = s0;
 800a094:	f107 0210 	add.w	r2, r7, #16
 800a098:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 800a09c:	e9c2 3404 	strd	r3, r4, [r2, #16]
		positionCompute.q_theta2 = s1;
 800a0a0:	f107 0210 	add.w	r2, r7, #16
 800a0a4:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 800a0a8:	e9c2 3406 	strd	r3, r4, [r2, #24]
		positionCompute.q_d3	 = s2;
 800a0ac:	f107 0210 	add.w	r2, r7, #16
 800a0b0:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 800a0b4:	e9c2 3408 	strd	r3, r4, [r2, #32]
		positionCompute.q_theta4 = s3;
 800a0b8:	f107 0210 	add.w	r2, r7, #16
 800a0bc:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 800a0c0:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28

		positionCompute.total_time = myDUTY.time_total;
 800a0c4:	4b28      	ldr	r3, [pc, #160]	; (800a168 <scaraKeyFlow+0x598>)
 800a0c6:	f603 1348 	addw	r3, r3, #2376	; 0x948
 800a0ca:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a0ce:	f107 0210 	add.w	r2, r7, #16
 800a0d2:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
		positionCompute.t		= time;
 800a0d6:	f107 0210 	add.w	r2, r7, #16
 800a0da:	f107 0308 	add.w	r3, r7, #8
 800a0de:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a0e2:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
		// Check workspace
		if( SCARA_STATUS_OK != scaraCheckWorkSpace4(positionCompute.Theta1,
 800a0e6:	f107 0310 	add.w	r3, r7, #16
 800a0ea:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 800a0ee:	f107 0310 	add.w	r3, r7, #16
 800a0f2:	ed93 6b1c 	vldr	d6, [r3, #112]	; 0x70
 800a0f6:	f107 0310 	add.w	r3, r7, #16
 800a0fa:	ed93 5b1e 	vldr	d5, [r3, #120]	; 0x78
 800a0fe:	f107 0310 	add.w	r3, r7, #16
 800a102:	ed93 4b20 	vldr	d4, [r3, #128]	; 0x80
 800a106:	eeb0 3a44 	vmov.f32	s6, s8
 800a10a:	eef0 3a64 	vmov.f32	s7, s9
 800a10e:	eeb0 2a45 	vmov.f32	s4, s10
 800a112:	eef0 2a65 	vmov.f32	s5, s11
 800a116:	eeb0 1a46 	vmov.f32	s2, s12
 800a11a:	eef0 1a66 	vmov.f32	s3, s13
 800a11e:	eeb0 0a47 	vmov.f32	s0, s14
 800a122:	eef0 0a67 	vmov.f32	s1, s15
 800a126:	f7fe fec7 	bl	8008eb8 <scaraCheckWorkSpace4>
 800a12a:	4603      	mov	r3, r0
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d001      	beq.n	800a134 <scaraKeyFlow+0x564>
							 	 	 	  positionCompute.Theta2,
										  positionCompute.D3,
										  positionCompute.Theta4)) {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a130:	2307      	movs	r3, #7
 800a132:	e00e      	b.n	800a152 <scaraKeyFlow+0x582>
		} else {
			memcpy(pos_Next, &positionCompute, sizeof(SCARA_PositionTypeDef));
 800a134:	f107 0110 	add.w	r1, r7, #16
 800a138:	1d3b      	adds	r3, r7, #4
 800a13a:	22b8      	movs	r2, #184	; 0xb8
 800a13c:	6818      	ldr	r0, [r3, #0]
 800a13e:	f00a ff57 	bl	8014ff0 <memcpy>
		}
		kinematicForward(pos_Next);
 800a142:	1d3b      	adds	r3, r7, #4
 800a144:	6818      	ldr	r0, [r3, #0]
 800a146:	f7f9 f8e3 	bl	8003310 <kinematicForward>
 800a14a:	e001      	b.n	800a150 <scaraKeyFlow+0x580>

	} else {
		return SCARA_STATUS_ERROR_SPACE;
 800a14c:	2302      	movs	r3, #2
 800a14e:	e000      	b.n	800a152 <scaraKeyFlow+0x582>
	}

	return SCARA_STATUS_OK;
 800a150:	2300      	movs	r3, #0
}
 800a152:	4618      	mov	r0, r3
 800a154:	f507 77c4 	add.w	r7, r7, #392	; 0x188
 800a158:	46bd      	mov	sp, r7
 800a15a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800a15e:	b002      	add	sp, #8
 800a160:	4770      	bx	lr
 800a162:	bf00      	nop
 800a164:	20005dd0 	.word	0x20005dd0
 800a168:	200053c8 	.word	0x200053c8

0800a16c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b082      	sub	sp, #8
 800a170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a172:	2300      	movs	r3, #0
 800a174:	607b      	str	r3, [r7, #4]
 800a176:	4b12      	ldr	r3, [pc, #72]	; (800a1c0 <HAL_MspInit+0x54>)
 800a178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a17a:	4a11      	ldr	r2, [pc, #68]	; (800a1c0 <HAL_MspInit+0x54>)
 800a17c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a180:	6453      	str	r3, [r2, #68]	; 0x44
 800a182:	4b0f      	ldr	r3, [pc, #60]	; (800a1c0 <HAL_MspInit+0x54>)
 800a184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a186:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a18a:	607b      	str	r3, [r7, #4]
 800a18c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a18e:	2300      	movs	r3, #0
 800a190:	603b      	str	r3, [r7, #0]
 800a192:	4b0b      	ldr	r3, [pc, #44]	; (800a1c0 <HAL_MspInit+0x54>)
 800a194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a196:	4a0a      	ldr	r2, [pc, #40]	; (800a1c0 <HAL_MspInit+0x54>)
 800a198:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a19c:	6413      	str	r3, [r2, #64]	; 0x40
 800a19e:	4b08      	ldr	r3, [pc, #32]	; (800a1c0 <HAL_MspInit+0x54>)
 800a1a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a1a6:	603b      	str	r3, [r7, #0]
 800a1a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	210f      	movs	r1, #15
 800a1ae:	f06f 0001 	mvn.w	r0, #1
 800a1b2:	f000 fb85 	bl	800a8c0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a1b6:	bf00      	nop
 800a1b8:	3708      	adds	r7, #8
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}
 800a1be:	bf00      	nop
 800a1c0:	40023800 	.word	0x40023800

0800a1c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b08c      	sub	sp, #48	; 0x30
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	6879      	ldr	r1, [r7, #4]
 800a1d8:	2036      	movs	r0, #54	; 0x36
 800a1da:	f000 fb71 	bl	800a8c0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 800a1de:	2036      	movs	r0, #54	; 0x36
 800a1e0:	f000 fb8a 	bl	800a8f8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	60fb      	str	r3, [r7, #12]
 800a1e8:	4b1f      	ldr	r3, [pc, #124]	; (800a268 <HAL_InitTick+0xa4>)
 800a1ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ec:	4a1e      	ldr	r2, [pc, #120]	; (800a268 <HAL_InitTick+0xa4>)
 800a1ee:	f043 0310 	orr.w	r3, r3, #16
 800a1f2:	6413      	str	r3, [r2, #64]	; 0x40
 800a1f4:	4b1c      	ldr	r3, [pc, #112]	; (800a268 <HAL_InitTick+0xa4>)
 800a1f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1f8:	f003 0310 	and.w	r3, r3, #16
 800a1fc:	60fb      	str	r3, [r7, #12]
 800a1fe:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800a200:	f107 0210 	add.w	r2, r7, #16
 800a204:	f107 0314 	add.w	r3, r7, #20
 800a208:	4611      	mov	r1, r2
 800a20a:	4618      	mov	r0, r3
 800a20c:	f002 ff16 	bl	800d03c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800a210:	f002 feec 	bl	800cfec <HAL_RCC_GetPCLK1Freq>
 800a214:	4603      	mov	r3, r0
 800a216:	005b      	lsls	r3, r3, #1
 800a218:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800a21a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a21c:	4a13      	ldr	r2, [pc, #76]	; (800a26c <HAL_InitTick+0xa8>)
 800a21e:	fba2 2303 	umull	r2, r3, r2, r3
 800a222:	0c9b      	lsrs	r3, r3, #18
 800a224:	3b01      	subs	r3, #1
 800a226:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800a228:	4b11      	ldr	r3, [pc, #68]	; (800a270 <HAL_InitTick+0xac>)
 800a22a:	4a12      	ldr	r2, [pc, #72]	; (800a274 <HAL_InitTick+0xb0>)
 800a22c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800a22e:	4b10      	ldr	r3, [pc, #64]	; (800a270 <HAL_InitTick+0xac>)
 800a230:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a234:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800a236:	4a0e      	ldr	r2, [pc, #56]	; (800a270 <HAL_InitTick+0xac>)
 800a238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a23a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800a23c:	4b0c      	ldr	r3, [pc, #48]	; (800a270 <HAL_InitTick+0xac>)
 800a23e:	2200      	movs	r2, #0
 800a240:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a242:	4b0b      	ldr	r3, [pc, #44]	; (800a270 <HAL_InitTick+0xac>)
 800a244:	2200      	movs	r2, #0
 800a246:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800a248:	4809      	ldr	r0, [pc, #36]	; (800a270 <HAL_InitTick+0xac>)
 800a24a:	f002 ff29 	bl	800d0a0 <HAL_TIM_Base_Init>
 800a24e:	4603      	mov	r3, r0
 800a250:	2b00      	cmp	r3, #0
 800a252:	d104      	bne.n	800a25e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800a254:	4806      	ldr	r0, [pc, #24]	; (800a270 <HAL_InitTick+0xac>)
 800a256:	f002 ff4e 	bl	800d0f6 <HAL_TIM_Base_Start_IT>
 800a25a:	4603      	mov	r3, r0
 800a25c:	e000      	b.n	800a260 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800a25e:	2301      	movs	r3, #1
}
 800a260:	4618      	mov	r0, r3
 800a262:	3730      	adds	r7, #48	; 0x30
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}
 800a268:	40023800 	.word	0x40023800
 800a26c:	431bde83 	.word	0x431bde83
 800a270:	200060b0 	.word	0x200060b0
 800a274:	40001000 	.word	0x40001000

0800a278 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a278:	b480      	push	{r7}
 800a27a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800a27c:	bf00      	nop
 800a27e:	46bd      	mov	sp, r7
 800a280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a284:	4770      	bx	lr
	...

0800a288 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  LOG_REPORT("ic.c: HARDFAULT ERROR", __LINE__);
 800a28c:	2164      	movs	r1, #100	; 0x64
 800a28e:	4802      	ldr	r0, [pc, #8]	; (800a298 <HardFault_Handler+0x10>)
 800a290:	f7f7 fbe4 	bl	8001a5c <LOG_REPORT>
 800a294:	e7fa      	b.n	800a28c <HardFault_Handler+0x4>
 800a296:	bf00      	nop
 800a298:	0801b274 	.word	0x0801b274

0800a29c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  LOG_REPORT("ic.c: MEMORY ERROR", __LINE__);
 800a2a0:	2174      	movs	r1, #116	; 0x74
 800a2a2:	4802      	ldr	r0, [pc, #8]	; (800a2ac <MemManage_Handler+0x10>)
 800a2a4:	f7f7 fbda 	bl	8001a5c <LOG_REPORT>
 800a2a8:	e7fa      	b.n	800a2a0 <MemManage_Handler+0x4>
 800a2aa:	bf00      	nop
 800a2ac:	0801b28c 	.word	0x0801b28c

0800a2b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  LOG_REPORT("ic.c: BUS ERROR", __LINE__);
 800a2b4:	2184      	movs	r1, #132	; 0x84
 800a2b6:	4802      	ldr	r0, [pc, #8]	; (800a2c0 <BusFault_Handler+0x10>)
 800a2b8:	f7f7 fbd0 	bl	8001a5c <LOG_REPORT>
 800a2bc:	e7fa      	b.n	800a2b4 <BusFault_Handler+0x4>
 800a2be:	bf00      	nop
 800a2c0:	0801b2a0 	.word	0x0801b2a0

0800a2c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a2c8:	e7fe      	b.n	800a2c8 <UsageFault_Handler+0x4>

0800a2ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a2ca:	b480      	push	{r7}
 800a2cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a2ce:	bf00      	nop
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d6:	4770      	bx	lr

0800a2d8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 800a2dc:	4802      	ldr	r0, [pc, #8]	; (800a2e8 <DMA1_Stream4_IRQHandler+0x10>)
 800a2de:	f000 fc41 	bl	800ab64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800a2e2:	bf00      	nop
 800a2e4:	bd80      	pop	{r7, pc}
 800a2e6:	bf00      	nop
 800a2e8:	20006170 	.word	0x20006170

0800a2ec <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800a2f0:	4802      	ldr	r0, [pc, #8]	; (800a2fc <UART4_IRQHandler+0x10>)
 800a2f2:	f003 fa3f 	bl	800d774 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800a2f6:	bf00      	nop
 800a2f8:	bd80      	pop	{r7, pc}
 800a2fa:	bf00      	nop
 800a2fc:	20006130 	.word	0x20006130

0800a300 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800a304:	4802      	ldr	r0, [pc, #8]	; (800a310 <TIM6_DAC_IRQHandler+0x10>)
 800a306:	f002 ff1a 	bl	800d13e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800a30a:	bf00      	nop
 800a30c:	bd80      	pop	{r7, pc}
 800a30e:	bf00      	nop
 800a310:	200060b0 	.word	0x200060b0

0800a314 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	osSignalSet(defaultTaskHandle, 0x01);
 800a318:	4b05      	ldr	r3, [pc, #20]	; (800a330 <TIM7_IRQHandler+0x1c>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	2101      	movs	r1, #1
 800a31e:	4618      	mov	r0, r3
 800a320:	f006 ffe8 	bl	80112f4 <osSignalSet>
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800a324:	4803      	ldr	r0, [pc, #12]	; (800a334 <TIM7_IRQHandler+0x20>)
 800a326:	f002 ff0a 	bl	800d13e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
  /* USER CODE END TIM7_IRQn 1 */
}
 800a32a:	bf00      	nop
 800a32c:	bd80      	pop	{r7, pc}
 800a32e:	bf00      	nop
 800a330:	20005304 	.word	0x20005304
 800a334:	200060f0 	.word	0x200060f0

0800a338 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800a33c:	4802      	ldr	r0, [pc, #8]	; (800a348 <OTG_FS_IRQHandler+0x10>)
 800a33e:	f001 f9e1 	bl	800b704 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800a342:	bf00      	nop
 800a344:	bd80      	pop	{r7, pc}
 800a346:	bf00      	nop
 800a348:	20006a78 	.word	0x20006a78

0800a34c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b084      	sub	sp, #16
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800a354:	4b11      	ldr	r3, [pc, #68]	; (800a39c <_sbrk+0x50>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d102      	bne.n	800a362 <_sbrk+0x16>
		heap_end = &end;
 800a35c:	4b0f      	ldr	r3, [pc, #60]	; (800a39c <_sbrk+0x50>)
 800a35e:	4a10      	ldr	r2, [pc, #64]	; (800a3a0 <_sbrk+0x54>)
 800a360:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800a362:	4b0e      	ldr	r3, [pc, #56]	; (800a39c <_sbrk+0x50>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800a368:	4b0c      	ldr	r3, [pc, #48]	; (800a39c <_sbrk+0x50>)
 800a36a:	681a      	ldr	r2, [r3, #0]
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	4413      	add	r3, r2
 800a370:	466a      	mov	r2, sp
 800a372:	4293      	cmp	r3, r2
 800a374:	d907      	bls.n	800a386 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800a376:	f00a fe01 	bl	8014f7c <__errno>
 800a37a:	4602      	mov	r2, r0
 800a37c:	230c      	movs	r3, #12
 800a37e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800a380:	f04f 33ff 	mov.w	r3, #4294967295
 800a384:	e006      	b.n	800a394 <_sbrk+0x48>
	}

	heap_end += incr;
 800a386:	4b05      	ldr	r3, [pc, #20]	; (800a39c <_sbrk+0x50>)
 800a388:	681a      	ldr	r2, [r3, #0]
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	4413      	add	r3, r2
 800a38e:	4a03      	ldr	r2, [pc, #12]	; (800a39c <_sbrk+0x50>)
 800a390:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800a392:	68fb      	ldr	r3, [r7, #12]
}
 800a394:	4618      	mov	r0, r3
 800a396:	3710      	adds	r7, #16
 800a398:	46bd      	mov	sp, r7
 800a39a:	bd80      	pop	{r7, pc}
 800a39c:	200014a4 	.word	0x200014a4
 800a3a0:	20006e88 	.word	0x20006e88

0800a3a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a3a4:	b480      	push	{r7}
 800a3a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a3a8:	4b08      	ldr	r3, [pc, #32]	; (800a3cc <SystemInit+0x28>)
 800a3aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3ae:	4a07      	ldr	r2, [pc, #28]	; (800a3cc <SystemInit+0x28>)
 800a3b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a3b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800a3b8:	4b04      	ldr	r3, [pc, #16]	; (800a3cc <SystemInit+0x28>)
 800a3ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a3be:	609a      	str	r2, [r3, #8]
#endif
}
 800a3c0:	bf00      	nop
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c8:	4770      	bx	lr
 800a3ca:	bf00      	nop
 800a3cc:	e000ed00 	.word	0xe000ed00

0800a3d0 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b082      	sub	sp, #8
 800a3d4:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a3d6:	463b      	mov	r3, r7
 800a3d8:	2200      	movs	r2, #0
 800a3da:	601a      	str	r2, [r3, #0]
 800a3dc:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 800a3de:	4b15      	ldr	r3, [pc, #84]	; (800a434 <MX_TIM7_Init+0x64>)
 800a3e0:	4a15      	ldr	r2, [pc, #84]	; (800a438 <MX_TIM7_Init+0x68>)
 800a3e2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 800a3e4:	4b13      	ldr	r3, [pc, #76]	; (800a434 <MX_TIM7_Init+0x64>)
 800a3e6:	2253      	movs	r2, #83	; 0x53
 800a3e8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a3ea:	4b12      	ldr	r3, [pc, #72]	; (800a434 <MX_TIM7_Init+0x64>)
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 800a3f0:	4b10      	ldr	r3, [pc, #64]	; (800a434 <MX_TIM7_Init+0x64>)
 800a3f2:	f242 720f 	movw	r2, #9999	; 0x270f
 800a3f6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a3f8:	4b0e      	ldr	r3, [pc, #56]	; (800a434 <MX_TIM7_Init+0x64>)
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800a3fe:	480d      	ldr	r0, [pc, #52]	; (800a434 <MX_TIM7_Init+0x64>)
 800a400:	f002 fe4e 	bl	800d0a0 <HAL_TIM_Base_Init>
 800a404:	4603      	mov	r3, r0
 800a406:	2b00      	cmp	r3, #0
 800a408:	d001      	beq.n	800a40e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800a40a:	f7f9 fb4d 	bl	8003aa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a40e:	2300      	movs	r3, #0
 800a410:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a412:	2300      	movs	r3, #0
 800a414:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800a416:	463b      	mov	r3, r7
 800a418:	4619      	mov	r1, r3
 800a41a:	4806      	ldr	r0, [pc, #24]	; (800a434 <MX_TIM7_Init+0x64>)
 800a41c:	f003 f860 	bl	800d4e0 <HAL_TIMEx_MasterConfigSynchronization>
 800a420:	4603      	mov	r3, r0
 800a422:	2b00      	cmp	r3, #0
 800a424:	d001      	beq.n	800a42a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800a426:	f7f9 fb3f 	bl	8003aa8 <Error_Handler>
  }

}
 800a42a:	bf00      	nop
 800a42c:	3708      	adds	r7, #8
 800a42e:	46bd      	mov	sp, r7
 800a430:	bd80      	pop	{r7, pc}
 800a432:	bf00      	nop
 800a434:	200060f0 	.word	0x200060f0
 800a438:	40001400 	.word	0x40001400

0800a43c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b084      	sub	sp, #16
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	4a0e      	ldr	r2, [pc, #56]	; (800a484 <HAL_TIM_Base_MspInit+0x48>)
 800a44a:	4293      	cmp	r3, r2
 800a44c:	d115      	bne.n	800a47a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800a44e:	2300      	movs	r3, #0
 800a450:	60fb      	str	r3, [r7, #12]
 800a452:	4b0d      	ldr	r3, [pc, #52]	; (800a488 <HAL_TIM_Base_MspInit+0x4c>)
 800a454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a456:	4a0c      	ldr	r2, [pc, #48]	; (800a488 <HAL_TIM_Base_MspInit+0x4c>)
 800a458:	f043 0320 	orr.w	r3, r3, #32
 800a45c:	6413      	str	r3, [r2, #64]	; 0x40
 800a45e:	4b0a      	ldr	r3, [pc, #40]	; (800a488 <HAL_TIM_Base_MspInit+0x4c>)
 800a460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a462:	f003 0320 	and.w	r3, r3, #32
 800a466:	60fb      	str	r3, [r7, #12]
 800a468:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 800a46a:	2200      	movs	r2, #0
 800a46c:	2105      	movs	r1, #5
 800a46e:	2037      	movs	r0, #55	; 0x37
 800a470:	f000 fa26 	bl	800a8c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800a474:	2037      	movs	r0, #55	; 0x37
 800a476:	f000 fa3f 	bl	800a8f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800a47a:	bf00      	nop
 800a47c:	3710      	adds	r7, #16
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}
 800a482:	bf00      	nop
 800a484:	40001400 	.word	0x40001400
 800a488:	40023800 	.word	0x40023800

0800a48c <MX_UART4_Init>:
UART_HandleTypeDef huart4;
DMA_HandleTypeDef hdma_uart4_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 800a490:	4b11      	ldr	r3, [pc, #68]	; (800a4d8 <MX_UART4_Init+0x4c>)
 800a492:	4a12      	ldr	r2, [pc, #72]	; (800a4dc <MX_UART4_Init+0x50>)
 800a494:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800a496:	4b10      	ldr	r3, [pc, #64]	; (800a4d8 <MX_UART4_Init+0x4c>)
 800a498:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a49c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800a49e:	4b0e      	ldr	r3, [pc, #56]	; (800a4d8 <MX_UART4_Init+0x4c>)
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800a4a4:	4b0c      	ldr	r3, [pc, #48]	; (800a4d8 <MX_UART4_Init+0x4c>)
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800a4aa:	4b0b      	ldr	r3, [pc, #44]	; (800a4d8 <MX_UART4_Init+0x4c>)
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800a4b0:	4b09      	ldr	r3, [pc, #36]	; (800a4d8 <MX_UART4_Init+0x4c>)
 800a4b2:	220c      	movs	r2, #12
 800a4b4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a4b6:	4b08      	ldr	r3, [pc, #32]	; (800a4d8 <MX_UART4_Init+0x4c>)
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800a4bc:	4b06      	ldr	r3, [pc, #24]	; (800a4d8 <MX_UART4_Init+0x4c>)
 800a4be:	2200      	movs	r2, #0
 800a4c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800a4c2:	4805      	ldr	r0, [pc, #20]	; (800a4d8 <MX_UART4_Init+0x4c>)
 800a4c4:	f003 f89c 	bl	800d600 <HAL_UART_Init>
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d001      	beq.n	800a4d2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800a4ce:	f7f9 faeb 	bl	8003aa8 <Error_Handler>
  }

}
 800a4d2:	bf00      	nop
 800a4d4:	bd80      	pop	{r7, pc}
 800a4d6:	bf00      	nop
 800a4d8:	20006130 	.word	0x20006130
 800a4dc:	40004c00 	.word	0x40004c00

0800a4e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b08a      	sub	sp, #40	; 0x28
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a4e8:	f107 0314 	add.w	r3, r7, #20
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	601a      	str	r2, [r3, #0]
 800a4f0:	605a      	str	r2, [r3, #4]
 800a4f2:	609a      	str	r2, [r3, #8]
 800a4f4:	60da      	str	r2, [r3, #12]
 800a4f6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	4a34      	ldr	r2, [pc, #208]	; (800a5d0 <HAL_UART_MspInit+0xf0>)
 800a4fe:	4293      	cmp	r3, r2
 800a500:	d161      	bne.n	800a5c6 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800a502:	2300      	movs	r3, #0
 800a504:	613b      	str	r3, [r7, #16]
 800a506:	4b33      	ldr	r3, [pc, #204]	; (800a5d4 <HAL_UART_MspInit+0xf4>)
 800a508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a50a:	4a32      	ldr	r2, [pc, #200]	; (800a5d4 <HAL_UART_MspInit+0xf4>)
 800a50c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a510:	6413      	str	r3, [r2, #64]	; 0x40
 800a512:	4b30      	ldr	r3, [pc, #192]	; (800a5d4 <HAL_UART_MspInit+0xf4>)
 800a514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a516:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a51a:	613b      	str	r3, [r7, #16]
 800a51c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a51e:	2300      	movs	r3, #0
 800a520:	60fb      	str	r3, [r7, #12]
 800a522:	4b2c      	ldr	r3, [pc, #176]	; (800a5d4 <HAL_UART_MspInit+0xf4>)
 800a524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a526:	4a2b      	ldr	r2, [pc, #172]	; (800a5d4 <HAL_UART_MspInit+0xf4>)
 800a528:	f043 0301 	orr.w	r3, r3, #1
 800a52c:	6313      	str	r3, [r2, #48]	; 0x30
 800a52e:	4b29      	ldr	r3, [pc, #164]	; (800a5d4 <HAL_UART_MspInit+0xf4>)
 800a530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a532:	f003 0301 	and.w	r3, r3, #1
 800a536:	60fb      	str	r3, [r7, #12]
 800a538:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration    
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800a53a:	2303      	movs	r3, #3
 800a53c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a53e:	2302      	movs	r3, #2
 800a540:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a542:	2301      	movs	r3, #1
 800a544:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a546:	2303      	movs	r3, #3
 800a548:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800a54a:	2308      	movs	r3, #8
 800a54c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a54e:	f107 0314 	add.w	r3, r7, #20
 800a552:	4619      	mov	r1, r3
 800a554:	4820      	ldr	r0, [pc, #128]	; (800a5d8 <HAL_UART_MspInit+0xf8>)
 800a556:	f000 fd7b 	bl	800b050 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 800a55a:	4b20      	ldr	r3, [pc, #128]	; (800a5dc <HAL_UART_MspInit+0xfc>)
 800a55c:	4a20      	ldr	r2, [pc, #128]	; (800a5e0 <HAL_UART_MspInit+0x100>)
 800a55e:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 800a560:	4b1e      	ldr	r3, [pc, #120]	; (800a5dc <HAL_UART_MspInit+0xfc>)
 800a562:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a566:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a568:	4b1c      	ldr	r3, [pc, #112]	; (800a5dc <HAL_UART_MspInit+0xfc>)
 800a56a:	2240      	movs	r2, #64	; 0x40
 800a56c:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a56e:	4b1b      	ldr	r3, [pc, #108]	; (800a5dc <HAL_UART_MspInit+0xfc>)
 800a570:	2200      	movs	r2, #0
 800a572:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a574:	4b19      	ldr	r3, [pc, #100]	; (800a5dc <HAL_UART_MspInit+0xfc>)
 800a576:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a57a:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a57c:	4b17      	ldr	r3, [pc, #92]	; (800a5dc <HAL_UART_MspInit+0xfc>)
 800a57e:	2200      	movs	r2, #0
 800a580:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a582:	4b16      	ldr	r3, [pc, #88]	; (800a5dc <HAL_UART_MspInit+0xfc>)
 800a584:	2200      	movs	r2, #0
 800a586:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800a588:	4b14      	ldr	r3, [pc, #80]	; (800a5dc <HAL_UART_MspInit+0xfc>)
 800a58a:	2200      	movs	r2, #0
 800a58c:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800a58e:	4b13      	ldr	r3, [pc, #76]	; (800a5dc <HAL_UART_MspInit+0xfc>)
 800a590:	2200      	movs	r2, #0
 800a592:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a594:	4b11      	ldr	r3, [pc, #68]	; (800a5dc <HAL_UART_MspInit+0xfc>)
 800a596:	2200      	movs	r2, #0
 800a598:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800a59a:	4810      	ldr	r0, [pc, #64]	; (800a5dc <HAL_UART_MspInit+0xfc>)
 800a59c:	f000 f9ba 	bl	800a914 <HAL_DMA_Init>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d001      	beq.n	800a5aa <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800a5a6:	f7f9 fa7f 	bl	8003aa8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	4a0b      	ldr	r2, [pc, #44]	; (800a5dc <HAL_UART_MspInit+0xfc>)
 800a5ae:	631a      	str	r2, [r3, #48]	; 0x30
 800a5b0:	4a0a      	ldr	r2, [pc, #40]	; (800a5dc <HAL_UART_MspInit+0xfc>)
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	2105      	movs	r1, #5
 800a5ba:	2034      	movs	r0, #52	; 0x34
 800a5bc:	f000 f980 	bl	800a8c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800a5c0:	2034      	movs	r0, #52	; 0x34
 800a5c2:	f000 f999 	bl	800a8f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 800a5c6:	bf00      	nop
 800a5c8:	3728      	adds	r7, #40	; 0x28
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}
 800a5ce:	bf00      	nop
 800a5d0:	40004c00 	.word	0x40004c00
 800a5d4:	40023800 	.word	0x40023800
 800a5d8:	40020000 	.word	0x40020000
 800a5dc:	20006170 	.word	0x20006170
 800a5e0:	40026070 	.word	0x40026070

0800a5e4 <HAL_UART_TxCpltCallback>:
  /* USER CODE END UART4_MspDeInit 1 */
  }
} 

/* USER CODE BEGIN 1 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b084      	sub	sp, #16
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
	if (UART4 == huart->Instance) {
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	4a0c      	ldr	r2, [pc, #48]	; (800a624 <HAL_UART_TxCpltCallback+0x40>)
 800a5f2:	4293      	cmp	r3, r2
 800a5f4:	d112      	bne.n	800a61c <HAL_UART_TxCpltCallback+0x38>
		uint16_t size_dma;
		size_dma = ringBuff_PopArray(&uart_tx_ringbuff, log_uart_dma_buff, LOG_BUFFER_SIZE);
 800a5f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a5fa:	490b      	ldr	r1, [pc, #44]	; (800a628 <HAL_UART_TxCpltCallback+0x44>)
 800a5fc:	480b      	ldr	r0, [pc, #44]	; (800a62c <HAL_UART_TxCpltCallback+0x48>)
 800a5fe:	f7f9 faf2 	bl	8003be6 <ringBuff_PopArray>
 800a602:	4603      	mov	r3, r0
 800a604:	81fb      	strh	r3, [r7, #14]
		if (0 == size_dma) {
 800a606:	89fb      	ldrh	r3, [r7, #14]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d006      	beq.n	800a61a <HAL_UART_TxCpltCallback+0x36>
			return;
		}
		HAL_UART_Transmit_DMA(&huart4, log_uart_dma_buff, size_dma);
 800a60c:	89fb      	ldrh	r3, [r7, #14]
 800a60e:	461a      	mov	r2, r3
 800a610:	4905      	ldr	r1, [pc, #20]	; (800a628 <HAL_UART_TxCpltCallback+0x44>)
 800a612:	4807      	ldr	r0, [pc, #28]	; (800a630 <HAL_UART_TxCpltCallback+0x4c>)
 800a614:	f003 f842 	bl	800d69c <HAL_UART_Transmit_DMA>
 800a618:	e000      	b.n	800a61c <HAL_UART_TxCpltCallback+0x38>
			return;
 800a61a:	bf00      	nop
	}
}
 800a61c:	3710      	adds	r7, #16
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}
 800a622:	bf00      	nop
 800a624:	40004c00 	.word	0x40004c00
 800a628:	20005204 	.word	0x20005204
 800a62c:	20000890 	.word	0x20000890
 800a630:	20006130 	.word	0x20006130

0800a634 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800a634:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a66c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800a638:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800a63a:	e003      	b.n	800a644 <LoopCopyDataInit>

0800a63c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800a63c:	4b0c      	ldr	r3, [pc, #48]	; (800a670 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800a63e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800a640:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800a642:	3104      	adds	r1, #4

0800a644 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800a644:	480b      	ldr	r0, [pc, #44]	; (800a674 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800a646:	4b0c      	ldr	r3, [pc, #48]	; (800a678 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800a648:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800a64a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800a64c:	d3f6      	bcc.n	800a63c <CopyDataInit>
  ldr  r2, =_sbss
 800a64e:	4a0b      	ldr	r2, [pc, #44]	; (800a67c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800a650:	e002      	b.n	800a658 <LoopFillZerobss>

0800a652 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800a652:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800a654:	f842 3b04 	str.w	r3, [r2], #4

0800a658 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800a658:	4b09      	ldr	r3, [pc, #36]	; (800a680 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800a65a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800a65c:	d3f9      	bcc.n	800a652 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800a65e:	f7ff fea1 	bl	800a3a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a662:	f00a fc91 	bl	8014f88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a666:	f7f9 f98d 	bl	8003984 <main>
  bx  lr    
 800a66a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800a66c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800a670:	0801b890 	.word	0x0801b890
  ldr  r0, =_sdata
 800a674:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800a678:	20001030 	.word	0x20001030
  ldr  r2, =_sbss
 800a67c:	20001030 	.word	0x20001030
  ldr  r3, = _ebss
 800a680:	20006e84 	.word	0x20006e84

0800a684 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a684:	e7fe      	b.n	800a684 <ADC_IRQHandler>
	...

0800a688 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800a68c:	4b0e      	ldr	r3, [pc, #56]	; (800a6c8 <HAL_Init+0x40>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	4a0d      	ldr	r2, [pc, #52]	; (800a6c8 <HAL_Init+0x40>)
 800a692:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a696:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800a698:	4b0b      	ldr	r3, [pc, #44]	; (800a6c8 <HAL_Init+0x40>)
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	4a0a      	ldr	r2, [pc, #40]	; (800a6c8 <HAL_Init+0x40>)
 800a69e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a6a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800a6a4:	4b08      	ldr	r3, [pc, #32]	; (800a6c8 <HAL_Init+0x40>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	4a07      	ldr	r2, [pc, #28]	; (800a6c8 <HAL_Init+0x40>)
 800a6aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a6ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a6b0:	2003      	movs	r0, #3
 800a6b2:	f000 f8fa 	bl	800a8aa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800a6b6:	2000      	movs	r0, #0
 800a6b8:	f7ff fd84 	bl	800a1c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800a6bc:	f7ff fd56 	bl	800a16c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800a6c0:	2300      	movs	r3, #0
}
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	bd80      	pop	{r7, pc}
 800a6c6:	bf00      	nop
 800a6c8:	40023c00 	.word	0x40023c00

0800a6cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800a6d0:	4b06      	ldr	r3, [pc, #24]	; (800a6ec <HAL_IncTick+0x20>)
 800a6d2:	781b      	ldrb	r3, [r3, #0]
 800a6d4:	461a      	mov	r2, r3
 800a6d6:	4b06      	ldr	r3, [pc, #24]	; (800a6f0 <HAL_IncTick+0x24>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	4413      	add	r3, r2
 800a6dc:	4a04      	ldr	r2, [pc, #16]	; (800a6f0 <HAL_IncTick+0x24>)
 800a6de:	6013      	str	r3, [r2, #0]
}
 800a6e0:	bf00      	nop
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e8:	4770      	bx	lr
 800a6ea:	bf00      	nop
 800a6ec:	20000ce4 	.word	0x20000ce4
 800a6f0:	200061d0 	.word	0x200061d0

0800a6f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a6f4:	b480      	push	{r7}
 800a6f6:	af00      	add	r7, sp, #0
  return uwTick;
 800a6f8:	4b03      	ldr	r3, [pc, #12]	; (800a708 <HAL_GetTick+0x14>)
 800a6fa:	681b      	ldr	r3, [r3, #0]
}
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	46bd      	mov	sp, r7
 800a700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a704:	4770      	bx	lr
 800a706:	bf00      	nop
 800a708:	200061d0 	.word	0x200061d0

0800a70c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b084      	sub	sp, #16
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a714:	f7ff ffee 	bl	800a6f4 <HAL_GetTick>
 800a718:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a724:	d005      	beq.n	800a732 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800a726:	4b09      	ldr	r3, [pc, #36]	; (800a74c <HAL_Delay+0x40>)
 800a728:	781b      	ldrb	r3, [r3, #0]
 800a72a:	461a      	mov	r2, r3
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	4413      	add	r3, r2
 800a730:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800a732:	bf00      	nop
 800a734:	f7ff ffde 	bl	800a6f4 <HAL_GetTick>
 800a738:	4602      	mov	r2, r0
 800a73a:	68bb      	ldr	r3, [r7, #8]
 800a73c:	1ad3      	subs	r3, r2, r3
 800a73e:	68fa      	ldr	r2, [r7, #12]
 800a740:	429a      	cmp	r2, r3
 800a742:	d8f7      	bhi.n	800a734 <HAL_Delay+0x28>
  {
  }
}
 800a744:	bf00      	nop
 800a746:	3710      	adds	r7, #16
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}
 800a74c:	20000ce4 	.word	0x20000ce4

0800a750 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a750:	b480      	push	{r7}
 800a752:	b085      	sub	sp, #20
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f003 0307 	and.w	r3, r3, #7
 800a75e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a760:	4b0c      	ldr	r3, [pc, #48]	; (800a794 <__NVIC_SetPriorityGrouping+0x44>)
 800a762:	68db      	ldr	r3, [r3, #12]
 800a764:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a766:	68ba      	ldr	r2, [r7, #8]
 800a768:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a76c:	4013      	ands	r3, r2
 800a76e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a774:	68bb      	ldr	r3, [r7, #8]
 800a776:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a778:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a77c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a780:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a782:	4a04      	ldr	r2, [pc, #16]	; (800a794 <__NVIC_SetPriorityGrouping+0x44>)
 800a784:	68bb      	ldr	r3, [r7, #8]
 800a786:	60d3      	str	r3, [r2, #12]
}
 800a788:	bf00      	nop
 800a78a:	3714      	adds	r7, #20
 800a78c:	46bd      	mov	sp, r7
 800a78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a792:	4770      	bx	lr
 800a794:	e000ed00 	.word	0xe000ed00

0800a798 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a798:	b480      	push	{r7}
 800a79a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a79c:	4b04      	ldr	r3, [pc, #16]	; (800a7b0 <__NVIC_GetPriorityGrouping+0x18>)
 800a79e:	68db      	ldr	r3, [r3, #12]
 800a7a0:	0a1b      	lsrs	r3, r3, #8
 800a7a2:	f003 0307 	and.w	r3, r3, #7
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ae:	4770      	bx	lr
 800a7b0:	e000ed00 	.word	0xe000ed00

0800a7b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a7b4:	b480      	push	{r7}
 800a7b6:	b083      	sub	sp, #12
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a7be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	db0b      	blt.n	800a7de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a7c6:	79fb      	ldrb	r3, [r7, #7]
 800a7c8:	f003 021f 	and.w	r2, r3, #31
 800a7cc:	4907      	ldr	r1, [pc, #28]	; (800a7ec <__NVIC_EnableIRQ+0x38>)
 800a7ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a7d2:	095b      	lsrs	r3, r3, #5
 800a7d4:	2001      	movs	r0, #1
 800a7d6:	fa00 f202 	lsl.w	r2, r0, r2
 800a7da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a7de:	bf00      	nop
 800a7e0:	370c      	adds	r7, #12
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e8:	4770      	bx	lr
 800a7ea:	bf00      	nop
 800a7ec:	e000e100 	.word	0xe000e100

0800a7f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b083      	sub	sp, #12
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	6039      	str	r1, [r7, #0]
 800a7fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a7fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a800:	2b00      	cmp	r3, #0
 800a802:	db0a      	blt.n	800a81a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	b2da      	uxtb	r2, r3
 800a808:	490c      	ldr	r1, [pc, #48]	; (800a83c <__NVIC_SetPriority+0x4c>)
 800a80a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a80e:	0112      	lsls	r2, r2, #4
 800a810:	b2d2      	uxtb	r2, r2
 800a812:	440b      	add	r3, r1
 800a814:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a818:	e00a      	b.n	800a830 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	b2da      	uxtb	r2, r3
 800a81e:	4908      	ldr	r1, [pc, #32]	; (800a840 <__NVIC_SetPriority+0x50>)
 800a820:	79fb      	ldrb	r3, [r7, #7]
 800a822:	f003 030f 	and.w	r3, r3, #15
 800a826:	3b04      	subs	r3, #4
 800a828:	0112      	lsls	r2, r2, #4
 800a82a:	b2d2      	uxtb	r2, r2
 800a82c:	440b      	add	r3, r1
 800a82e:	761a      	strb	r2, [r3, #24]
}
 800a830:	bf00      	nop
 800a832:	370c      	adds	r7, #12
 800a834:	46bd      	mov	sp, r7
 800a836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83a:	4770      	bx	lr
 800a83c:	e000e100 	.word	0xe000e100
 800a840:	e000ed00 	.word	0xe000ed00

0800a844 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a844:	b480      	push	{r7}
 800a846:	b089      	sub	sp, #36	; 0x24
 800a848:	af00      	add	r7, sp, #0
 800a84a:	60f8      	str	r0, [r7, #12]
 800a84c:	60b9      	str	r1, [r7, #8]
 800a84e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	f003 0307 	and.w	r3, r3, #7
 800a856:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a858:	69fb      	ldr	r3, [r7, #28]
 800a85a:	f1c3 0307 	rsb	r3, r3, #7
 800a85e:	2b04      	cmp	r3, #4
 800a860:	bf28      	it	cs
 800a862:	2304      	movcs	r3, #4
 800a864:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a866:	69fb      	ldr	r3, [r7, #28]
 800a868:	3304      	adds	r3, #4
 800a86a:	2b06      	cmp	r3, #6
 800a86c:	d902      	bls.n	800a874 <NVIC_EncodePriority+0x30>
 800a86e:	69fb      	ldr	r3, [r7, #28]
 800a870:	3b03      	subs	r3, #3
 800a872:	e000      	b.n	800a876 <NVIC_EncodePriority+0x32>
 800a874:	2300      	movs	r3, #0
 800a876:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a878:	f04f 32ff 	mov.w	r2, #4294967295
 800a87c:	69bb      	ldr	r3, [r7, #24]
 800a87e:	fa02 f303 	lsl.w	r3, r2, r3
 800a882:	43da      	mvns	r2, r3
 800a884:	68bb      	ldr	r3, [r7, #8]
 800a886:	401a      	ands	r2, r3
 800a888:	697b      	ldr	r3, [r7, #20]
 800a88a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a88c:	f04f 31ff 	mov.w	r1, #4294967295
 800a890:	697b      	ldr	r3, [r7, #20]
 800a892:	fa01 f303 	lsl.w	r3, r1, r3
 800a896:	43d9      	mvns	r1, r3
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a89c:	4313      	orrs	r3, r2
         );
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3724      	adds	r7, #36	; 0x24
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a8:	4770      	bx	lr

0800a8aa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a8aa:	b580      	push	{r7, lr}
 800a8ac:	b082      	sub	sp, #8
 800a8ae:	af00      	add	r7, sp, #0
 800a8b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a8b2:	6878      	ldr	r0, [r7, #4]
 800a8b4:	f7ff ff4c 	bl	800a750 <__NVIC_SetPriorityGrouping>
}
 800a8b8:	bf00      	nop
 800a8ba:	3708      	adds	r7, #8
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	bd80      	pop	{r7, pc}

0800a8c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b086      	sub	sp, #24
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	60b9      	str	r1, [r7, #8]
 800a8ca:	607a      	str	r2, [r7, #4]
 800a8cc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a8d2:	f7ff ff61 	bl	800a798 <__NVIC_GetPriorityGrouping>
 800a8d6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a8d8:	687a      	ldr	r2, [r7, #4]
 800a8da:	68b9      	ldr	r1, [r7, #8]
 800a8dc:	6978      	ldr	r0, [r7, #20]
 800a8de:	f7ff ffb1 	bl	800a844 <NVIC_EncodePriority>
 800a8e2:	4602      	mov	r2, r0
 800a8e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a8e8:	4611      	mov	r1, r2
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	f7ff ff80 	bl	800a7f0 <__NVIC_SetPriority>
}
 800a8f0:	bf00      	nop
 800a8f2:	3718      	adds	r7, #24
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}

0800a8f8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b082      	sub	sp, #8
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	4603      	mov	r3, r0
 800a900:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a906:	4618      	mov	r0, r3
 800a908:	f7ff ff54 	bl	800a7b4 <__NVIC_EnableIRQ>
}
 800a90c:	bf00      	nop
 800a90e:	3708      	adds	r7, #8
 800a910:	46bd      	mov	sp, r7
 800a912:	bd80      	pop	{r7, pc}

0800a914 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b086      	sub	sp, #24
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a91c:	2300      	movs	r3, #0
 800a91e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a920:	f7ff fee8 	bl	800a6f4 <HAL_GetTick>
 800a924:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d101      	bne.n	800a930 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a92c:	2301      	movs	r3, #1
 800a92e:	e099      	b.n	800aa64 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2200      	movs	r2, #0
 800a934:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2202      	movs	r2, #2
 800a93c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	681a      	ldr	r2, [r3, #0]
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f022 0201 	bic.w	r2, r2, #1
 800a94e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a950:	e00f      	b.n	800a972 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a952:	f7ff fecf 	bl	800a6f4 <HAL_GetTick>
 800a956:	4602      	mov	r2, r0
 800a958:	693b      	ldr	r3, [r7, #16]
 800a95a:	1ad3      	subs	r3, r2, r3
 800a95c:	2b05      	cmp	r3, #5
 800a95e:	d908      	bls.n	800a972 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2220      	movs	r2, #32
 800a964:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2203      	movs	r2, #3
 800a96a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a96e:	2303      	movs	r3, #3
 800a970:	e078      	b.n	800aa64 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	f003 0301 	and.w	r3, r3, #1
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d1e8      	bne.n	800a952 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a988:	697a      	ldr	r2, [r7, #20]
 800a98a:	4b38      	ldr	r3, [pc, #224]	; (800aa6c <HAL_DMA_Init+0x158>)
 800a98c:	4013      	ands	r3, r2
 800a98e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	685a      	ldr	r2, [r3, #4]
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	689b      	ldr	r3, [r3, #8]
 800a998:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a99e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	691b      	ldr	r3, [r3, #16]
 800a9a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a9aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	699b      	ldr	r3, [r3, #24]
 800a9b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a9b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	6a1b      	ldr	r3, [r3, #32]
 800a9bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a9be:	697a      	ldr	r2, [r7, #20]
 800a9c0:	4313      	orrs	r3, r2
 800a9c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9c8:	2b04      	cmp	r3, #4
 800a9ca:	d107      	bne.n	800a9dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9d4:	4313      	orrs	r3, r2
 800a9d6:	697a      	ldr	r2, [r7, #20]
 800a9d8:	4313      	orrs	r3, r2
 800a9da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	697a      	ldr	r2, [r7, #20]
 800a9e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	695b      	ldr	r3, [r3, #20]
 800a9ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a9ec:	697b      	ldr	r3, [r7, #20]
 800a9ee:	f023 0307 	bic.w	r3, r3, #7
 800a9f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9f8:	697a      	ldr	r2, [r7, #20]
 800a9fa:	4313      	orrs	r3, r2
 800a9fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa02:	2b04      	cmp	r3, #4
 800aa04:	d117      	bne.n	800aa36 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa0a:	697a      	ldr	r2, [r7, #20]
 800aa0c:	4313      	orrs	r3, r2
 800aa0e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d00e      	beq.n	800aa36 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800aa18:	6878      	ldr	r0, [r7, #4]
 800aa1a:	f000 fa9f 	bl	800af5c <DMA_CheckFifoParam>
 800aa1e:	4603      	mov	r3, r0
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d008      	beq.n	800aa36 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2240      	movs	r2, #64	; 0x40
 800aa28:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	2201      	movs	r2, #1
 800aa2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800aa32:	2301      	movs	r3, #1
 800aa34:	e016      	b.n	800aa64 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	697a      	ldr	r2, [r7, #20]
 800aa3c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	f000 fa56 	bl	800aef0 <DMA_CalcBaseAndBitshift>
 800aa44:	4603      	mov	r3, r0
 800aa46:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa4c:	223f      	movs	r2, #63	; 0x3f
 800aa4e:	409a      	lsls	r2, r3
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2200      	movs	r2, #0
 800aa58:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	2201      	movs	r2, #1
 800aa5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800aa62:	2300      	movs	r3, #0
}
 800aa64:	4618      	mov	r0, r3
 800aa66:	3718      	adds	r7, #24
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	bd80      	pop	{r7, pc}
 800aa6c:	f010803f 	.word	0xf010803f

0800aa70 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b086      	sub	sp, #24
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	60f8      	str	r0, [r7, #12]
 800aa78:	60b9      	str	r1, [r7, #8]
 800aa7a:	607a      	str	r2, [r7, #4]
 800aa7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aa7e:	2300      	movs	r3, #0
 800aa80:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa86:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800aa8e:	2b01      	cmp	r3, #1
 800aa90:	d101      	bne.n	800aa96 <HAL_DMA_Start_IT+0x26>
 800aa92:	2302      	movs	r3, #2
 800aa94:	e040      	b.n	800ab18 <HAL_DMA_Start_IT+0xa8>
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	2201      	movs	r2, #1
 800aa9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800aaa4:	b2db      	uxtb	r3, r3
 800aaa6:	2b01      	cmp	r3, #1
 800aaa8:	d12f      	bne.n	800ab0a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	2202      	movs	r2, #2
 800aaae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	2200      	movs	r2, #0
 800aab6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	687a      	ldr	r2, [r7, #4]
 800aabc:	68b9      	ldr	r1, [r7, #8]
 800aabe:	68f8      	ldr	r0, [r7, #12]
 800aac0:	f000 f9e8 	bl	800ae94 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aac8:	223f      	movs	r2, #63	; 0x3f
 800aaca:	409a      	lsls	r2, r3
 800aacc:	693b      	ldr	r3, [r7, #16]
 800aace:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	681a      	ldr	r2, [r3, #0]
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	f042 0216 	orr.w	r2, r2, #22
 800aade:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d007      	beq.n	800aaf8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	681a      	ldr	r2, [r3, #0]
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	f042 0208 	orr.w	r2, r2, #8
 800aaf6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	681a      	ldr	r2, [r3, #0]
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	f042 0201 	orr.w	r2, r2, #1
 800ab06:	601a      	str	r2, [r3, #0]
 800ab08:	e005      	b.n	800ab16 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800ab12:	2302      	movs	r3, #2
 800ab14:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800ab16:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab18:	4618      	mov	r0, r3
 800ab1a:	3718      	adds	r7, #24
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	bd80      	pop	{r7, pc}

0800ab20 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800ab20:	b480      	push	{r7}
 800ab22:	b083      	sub	sp, #12
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ab2e:	b2db      	uxtb	r3, r3
 800ab30:	2b02      	cmp	r3, #2
 800ab32:	d004      	beq.n	800ab3e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2280      	movs	r2, #128	; 0x80
 800ab38:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800ab3a:	2301      	movs	r3, #1
 800ab3c:	e00c      	b.n	800ab58 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	2205      	movs	r2, #5
 800ab42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	681a      	ldr	r2, [r3, #0]
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	f022 0201 	bic.w	r2, r2, #1
 800ab54:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800ab56:	2300      	movs	r3, #0
}
 800ab58:	4618      	mov	r0, r3
 800ab5a:	370c      	adds	r7, #12
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab62:	4770      	bx	lr

0800ab64 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b086      	sub	sp, #24
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800ab70:	4b92      	ldr	r3, [pc, #584]	; (800adbc <HAL_DMA_IRQHandler+0x258>)
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	4a92      	ldr	r2, [pc, #584]	; (800adc0 <HAL_DMA_IRQHandler+0x25c>)
 800ab76:	fba2 2303 	umull	r2, r3, r2, r3
 800ab7a:	0a9b      	lsrs	r3, r3, #10
 800ab7c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab82:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800ab84:	693b      	ldr	r3, [r7, #16]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab8e:	2208      	movs	r2, #8
 800ab90:	409a      	lsls	r2, r3
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	4013      	ands	r3, r2
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d01a      	beq.n	800abd0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	f003 0304 	and.w	r3, r3, #4
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d013      	beq.n	800abd0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	681a      	ldr	r2, [r3, #0]
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	f022 0204 	bic.w	r2, r2, #4
 800abb6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abbc:	2208      	movs	r2, #8
 800abbe:	409a      	lsls	r2, r3
 800abc0:	693b      	ldr	r3, [r7, #16]
 800abc2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abc8:	f043 0201 	orr.w	r2, r3, #1
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abd4:	2201      	movs	r2, #1
 800abd6:	409a      	lsls	r2, r3
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	4013      	ands	r3, r2
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d012      	beq.n	800ac06 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	695b      	ldr	r3, [r3, #20]
 800abe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abea:	2b00      	cmp	r3, #0
 800abec:	d00b      	beq.n	800ac06 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abf2:	2201      	movs	r2, #1
 800abf4:	409a      	lsls	r2, r3
 800abf6:	693b      	ldr	r3, [r7, #16]
 800abf8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abfe:	f043 0202 	orr.w	r2, r3, #2
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac0a:	2204      	movs	r2, #4
 800ac0c:	409a      	lsls	r2, r3
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	4013      	ands	r3, r2
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d012      	beq.n	800ac3c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	f003 0302 	and.w	r3, r3, #2
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d00b      	beq.n	800ac3c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac28:	2204      	movs	r2, #4
 800ac2a:	409a      	lsls	r2, r3
 800ac2c:	693b      	ldr	r3, [r7, #16]
 800ac2e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac34:	f043 0204 	orr.w	r2, r3, #4
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac40:	2210      	movs	r2, #16
 800ac42:	409a      	lsls	r2, r3
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	4013      	ands	r3, r2
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d043      	beq.n	800acd4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	f003 0308 	and.w	r3, r3, #8
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d03c      	beq.n	800acd4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac5e:	2210      	movs	r2, #16
 800ac60:	409a      	lsls	r2, r3
 800ac62:	693b      	ldr	r3, [r7, #16]
 800ac64:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d018      	beq.n	800aca6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d108      	bne.n	800ac94 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d024      	beq.n	800acd4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	4798      	blx	r3
 800ac92:	e01f      	b.n	800acd4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d01b      	beq.n	800acd4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aca0:	6878      	ldr	r0, [r7, #4]
 800aca2:	4798      	blx	r3
 800aca4:	e016      	b.n	800acd4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d107      	bne.n	800acc4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	681a      	ldr	r2, [r3, #0]
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	f022 0208 	bic.w	r2, r2, #8
 800acc2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d003      	beq.n	800acd4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acd0:	6878      	ldr	r0, [r7, #4]
 800acd2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800acd8:	2220      	movs	r2, #32
 800acda:	409a      	lsls	r2, r3
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	4013      	ands	r3, r2
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	f000 808e 	beq.w	800ae02 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	f003 0310 	and.w	r3, r3, #16
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	f000 8086 	beq.w	800ae02 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800acfa:	2220      	movs	r2, #32
 800acfc:	409a      	lsls	r2, r3
 800acfe:	693b      	ldr	r3, [r7, #16]
 800ad00:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ad08:	b2db      	uxtb	r3, r3
 800ad0a:	2b05      	cmp	r3, #5
 800ad0c:	d136      	bne.n	800ad7c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	681a      	ldr	r2, [r3, #0]
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	f022 0216 	bic.w	r2, r2, #22
 800ad1c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	695a      	ldr	r2, [r3, #20]
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ad2c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d103      	bne.n	800ad3e <HAL_DMA_IRQHandler+0x1da>
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d007      	beq.n	800ad4e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	681a      	ldr	r2, [r3, #0]
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	f022 0208 	bic.w	r2, r2, #8
 800ad4c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad52:	223f      	movs	r2, #63	; 0x3f
 800ad54:	409a      	lsls	r2, r3
 800ad56:	693b      	ldr	r3, [r7, #16]
 800ad58:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2201      	movs	r2, #1
 800ad66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d07d      	beq.n	800ae6e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	4798      	blx	r3
        }
        return;
 800ad7a:	e078      	b.n	800ae6e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d01c      	beq.n	800adc4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d108      	bne.n	800adaa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d030      	beq.n	800ae02 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ada4:	6878      	ldr	r0, [r7, #4]
 800ada6:	4798      	blx	r3
 800ada8:	e02b      	b.n	800ae02 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d027      	beq.n	800ae02 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adb6:	6878      	ldr	r0, [r7, #4]
 800adb8:	4798      	blx	r3
 800adba:	e022      	b.n	800ae02 <HAL_DMA_IRQHandler+0x29e>
 800adbc:	20000cdc 	.word	0x20000cdc
 800adc0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800adce:	2b00      	cmp	r3, #0
 800add0:	d10f      	bne.n	800adf2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	681a      	ldr	r2, [r3, #0]
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	f022 0210 	bic.w	r2, r2, #16
 800ade0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2200      	movs	r2, #0
 800ade6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2201      	movs	r2, #1
 800adee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d003      	beq.n	800ae02 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adfe:	6878      	ldr	r0, [r7, #4]
 800ae00:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d032      	beq.n	800ae70 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae0e:	f003 0301 	and.w	r3, r3, #1
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d022      	beq.n	800ae5c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	2205      	movs	r2, #5
 800ae1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	681a      	ldr	r2, [r3, #0]
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	f022 0201 	bic.w	r2, r2, #1
 800ae2c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800ae2e:	68bb      	ldr	r3, [r7, #8]
 800ae30:	3301      	adds	r3, #1
 800ae32:	60bb      	str	r3, [r7, #8]
 800ae34:	697a      	ldr	r2, [r7, #20]
 800ae36:	429a      	cmp	r2, r3
 800ae38:	d307      	bcc.n	800ae4a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	f003 0301 	and.w	r3, r3, #1
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d1f2      	bne.n	800ae2e <HAL_DMA_IRQHandler+0x2ca>
 800ae48:	e000      	b.n	800ae4c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800ae4a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2200      	movs	r2, #0
 800ae50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2201      	movs	r2, #1
 800ae58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d005      	beq.n	800ae70 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	4798      	blx	r3
 800ae6c:	e000      	b.n	800ae70 <HAL_DMA_IRQHandler+0x30c>
        return;
 800ae6e:	bf00      	nop
    }
  }
}
 800ae70:	3718      	adds	r7, #24
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bd80      	pop	{r7, pc}
 800ae76:	bf00      	nop

0800ae78 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800ae78:	b480      	push	{r7}
 800ae7a:	b083      	sub	sp, #12
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ae86:	b2db      	uxtb	r3, r3
}
 800ae88:	4618      	mov	r0, r3
 800ae8a:	370c      	adds	r7, #12
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae92:	4770      	bx	lr

0800ae94 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ae94:	b480      	push	{r7}
 800ae96:	b085      	sub	sp, #20
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	60f8      	str	r0, [r7, #12]
 800ae9c:	60b9      	str	r1, [r7, #8]
 800ae9e:	607a      	str	r2, [r7, #4]
 800aea0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	681a      	ldr	r2, [r3, #0]
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800aeb0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	683a      	ldr	r2, [r7, #0]
 800aeb8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	689b      	ldr	r3, [r3, #8]
 800aebe:	2b40      	cmp	r3, #64	; 0x40
 800aec0:	d108      	bne.n	800aed4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	687a      	ldr	r2, [r7, #4]
 800aec8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	68ba      	ldr	r2, [r7, #8]
 800aed0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800aed2:	e007      	b.n	800aee4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	68ba      	ldr	r2, [r7, #8]
 800aeda:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	687a      	ldr	r2, [r7, #4]
 800aee2:	60da      	str	r2, [r3, #12]
}
 800aee4:	bf00      	nop
 800aee6:	3714      	adds	r7, #20
 800aee8:	46bd      	mov	sp, r7
 800aeea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeee:	4770      	bx	lr

0800aef0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800aef0:	b480      	push	{r7}
 800aef2:	b085      	sub	sp, #20
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	b2db      	uxtb	r3, r3
 800aefe:	3b10      	subs	r3, #16
 800af00:	4a14      	ldr	r2, [pc, #80]	; (800af54 <DMA_CalcBaseAndBitshift+0x64>)
 800af02:	fba2 2303 	umull	r2, r3, r2, r3
 800af06:	091b      	lsrs	r3, r3, #4
 800af08:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800af0a:	4a13      	ldr	r2, [pc, #76]	; (800af58 <DMA_CalcBaseAndBitshift+0x68>)
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	4413      	add	r3, r2
 800af10:	781b      	ldrb	r3, [r3, #0]
 800af12:	461a      	mov	r2, r3
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	2b03      	cmp	r3, #3
 800af1c:	d909      	bls.n	800af32 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800af26:	f023 0303 	bic.w	r3, r3, #3
 800af2a:	1d1a      	adds	r2, r3, #4
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	659a      	str	r2, [r3, #88]	; 0x58
 800af30:	e007      	b.n	800af42 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800af3a:	f023 0303 	bic.w	r3, r3, #3
 800af3e:	687a      	ldr	r2, [r7, #4]
 800af40:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800af46:	4618      	mov	r0, r3
 800af48:	3714      	adds	r7, #20
 800af4a:	46bd      	mov	sp, r7
 800af4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af50:	4770      	bx	lr
 800af52:	bf00      	nop
 800af54:	aaaaaaab 	.word	0xaaaaaaab
 800af58:	0801b328 	.word	0x0801b328

0800af5c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800af5c:	b480      	push	{r7}
 800af5e:	b085      	sub	sp, #20
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800af64:	2300      	movs	r3, #0
 800af66:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af6c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	699b      	ldr	r3, [r3, #24]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d11f      	bne.n	800afb6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800af76:	68bb      	ldr	r3, [r7, #8]
 800af78:	2b03      	cmp	r3, #3
 800af7a:	d855      	bhi.n	800b028 <DMA_CheckFifoParam+0xcc>
 800af7c:	a201      	add	r2, pc, #4	; (adr r2, 800af84 <DMA_CheckFifoParam+0x28>)
 800af7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af82:	bf00      	nop
 800af84:	0800af95 	.word	0x0800af95
 800af88:	0800afa7 	.word	0x0800afa7
 800af8c:	0800af95 	.word	0x0800af95
 800af90:	0800b029 	.word	0x0800b029
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d045      	beq.n	800b02c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800afa0:	2301      	movs	r3, #1
 800afa2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800afa4:	e042      	b.n	800b02c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afaa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800afae:	d13f      	bne.n	800b030 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800afb0:	2301      	movs	r3, #1
 800afb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800afb4:	e03c      	b.n	800b030 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	699b      	ldr	r3, [r3, #24]
 800afba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800afbe:	d121      	bne.n	800b004 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800afc0:	68bb      	ldr	r3, [r7, #8]
 800afc2:	2b03      	cmp	r3, #3
 800afc4:	d836      	bhi.n	800b034 <DMA_CheckFifoParam+0xd8>
 800afc6:	a201      	add	r2, pc, #4	; (adr r2, 800afcc <DMA_CheckFifoParam+0x70>)
 800afc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afcc:	0800afdd 	.word	0x0800afdd
 800afd0:	0800afe3 	.word	0x0800afe3
 800afd4:	0800afdd 	.word	0x0800afdd
 800afd8:	0800aff5 	.word	0x0800aff5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800afdc:	2301      	movs	r3, #1
 800afde:	73fb      	strb	r3, [r7, #15]
      break;
 800afe0:	e02f      	b.n	800b042 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afe6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800afea:	2b00      	cmp	r3, #0
 800afec:	d024      	beq.n	800b038 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800afee:	2301      	movs	r3, #1
 800aff0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800aff2:	e021      	b.n	800b038 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aff8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800affc:	d11e      	bne.n	800b03c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800affe:	2301      	movs	r3, #1
 800b000:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800b002:	e01b      	b.n	800b03c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800b004:	68bb      	ldr	r3, [r7, #8]
 800b006:	2b02      	cmp	r3, #2
 800b008:	d902      	bls.n	800b010 <DMA_CheckFifoParam+0xb4>
 800b00a:	2b03      	cmp	r3, #3
 800b00c:	d003      	beq.n	800b016 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800b00e:	e018      	b.n	800b042 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800b010:	2301      	movs	r3, #1
 800b012:	73fb      	strb	r3, [r7, #15]
      break;
 800b014:	e015      	b.n	800b042 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b01a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d00e      	beq.n	800b040 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800b022:	2301      	movs	r3, #1
 800b024:	73fb      	strb	r3, [r7, #15]
      break;
 800b026:	e00b      	b.n	800b040 <DMA_CheckFifoParam+0xe4>
      break;
 800b028:	bf00      	nop
 800b02a:	e00a      	b.n	800b042 <DMA_CheckFifoParam+0xe6>
      break;
 800b02c:	bf00      	nop
 800b02e:	e008      	b.n	800b042 <DMA_CheckFifoParam+0xe6>
      break;
 800b030:	bf00      	nop
 800b032:	e006      	b.n	800b042 <DMA_CheckFifoParam+0xe6>
      break;
 800b034:	bf00      	nop
 800b036:	e004      	b.n	800b042 <DMA_CheckFifoParam+0xe6>
      break;
 800b038:	bf00      	nop
 800b03a:	e002      	b.n	800b042 <DMA_CheckFifoParam+0xe6>
      break;   
 800b03c:	bf00      	nop
 800b03e:	e000      	b.n	800b042 <DMA_CheckFifoParam+0xe6>
      break;
 800b040:	bf00      	nop
    }
  } 
  
  return status; 
 800b042:	7bfb      	ldrb	r3, [r7, #15]
}
 800b044:	4618      	mov	r0, r3
 800b046:	3714      	adds	r7, #20
 800b048:	46bd      	mov	sp, r7
 800b04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04e:	4770      	bx	lr

0800b050 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b050:	b480      	push	{r7}
 800b052:	b089      	sub	sp, #36	; 0x24
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
 800b058:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800b05a:	2300      	movs	r3, #0
 800b05c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800b05e:	2300      	movs	r3, #0
 800b060:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800b062:	2300      	movs	r3, #0
 800b064:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b066:	2300      	movs	r3, #0
 800b068:	61fb      	str	r3, [r7, #28]
 800b06a:	e16b      	b.n	800b344 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800b06c:	2201      	movs	r2, #1
 800b06e:	69fb      	ldr	r3, [r7, #28]
 800b070:	fa02 f303 	lsl.w	r3, r2, r3
 800b074:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	697a      	ldr	r2, [r7, #20]
 800b07c:	4013      	ands	r3, r2
 800b07e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800b080:	693a      	ldr	r2, [r7, #16]
 800b082:	697b      	ldr	r3, [r7, #20]
 800b084:	429a      	cmp	r2, r3
 800b086:	f040 815a 	bne.w	800b33e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	685b      	ldr	r3, [r3, #4]
 800b08e:	2b01      	cmp	r3, #1
 800b090:	d00b      	beq.n	800b0aa <HAL_GPIO_Init+0x5a>
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	685b      	ldr	r3, [r3, #4]
 800b096:	2b02      	cmp	r3, #2
 800b098:	d007      	beq.n	800b0aa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b09e:	2b11      	cmp	r3, #17
 800b0a0:	d003      	beq.n	800b0aa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b0a2:	683b      	ldr	r3, [r7, #0]
 800b0a4:	685b      	ldr	r3, [r3, #4]
 800b0a6:	2b12      	cmp	r3, #18
 800b0a8:	d130      	bne.n	800b10c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	689b      	ldr	r3, [r3, #8]
 800b0ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800b0b0:	69fb      	ldr	r3, [r7, #28]
 800b0b2:	005b      	lsls	r3, r3, #1
 800b0b4:	2203      	movs	r2, #3
 800b0b6:	fa02 f303 	lsl.w	r3, r2, r3
 800b0ba:	43db      	mvns	r3, r3
 800b0bc:	69ba      	ldr	r2, [r7, #24]
 800b0be:	4013      	ands	r3, r2
 800b0c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	68da      	ldr	r2, [r3, #12]
 800b0c6:	69fb      	ldr	r3, [r7, #28]
 800b0c8:	005b      	lsls	r3, r3, #1
 800b0ca:	fa02 f303 	lsl.w	r3, r2, r3
 800b0ce:	69ba      	ldr	r2, [r7, #24]
 800b0d0:	4313      	orrs	r3, r2
 800b0d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	69ba      	ldr	r2, [r7, #24]
 800b0d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	685b      	ldr	r3, [r3, #4]
 800b0de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b0e0:	2201      	movs	r2, #1
 800b0e2:	69fb      	ldr	r3, [r7, #28]
 800b0e4:	fa02 f303 	lsl.w	r3, r2, r3
 800b0e8:	43db      	mvns	r3, r3
 800b0ea:	69ba      	ldr	r2, [r7, #24]
 800b0ec:	4013      	ands	r3, r2
 800b0ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	685b      	ldr	r3, [r3, #4]
 800b0f4:	091b      	lsrs	r3, r3, #4
 800b0f6:	f003 0201 	and.w	r2, r3, #1
 800b0fa:	69fb      	ldr	r3, [r7, #28]
 800b0fc:	fa02 f303 	lsl.w	r3, r2, r3
 800b100:	69ba      	ldr	r2, [r7, #24]
 800b102:	4313      	orrs	r3, r2
 800b104:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	69ba      	ldr	r2, [r7, #24]
 800b10a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	68db      	ldr	r3, [r3, #12]
 800b110:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800b112:	69fb      	ldr	r3, [r7, #28]
 800b114:	005b      	lsls	r3, r3, #1
 800b116:	2203      	movs	r2, #3
 800b118:	fa02 f303 	lsl.w	r3, r2, r3
 800b11c:	43db      	mvns	r3, r3
 800b11e:	69ba      	ldr	r2, [r7, #24]
 800b120:	4013      	ands	r3, r2
 800b122:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	689a      	ldr	r2, [r3, #8]
 800b128:	69fb      	ldr	r3, [r7, #28]
 800b12a:	005b      	lsls	r3, r3, #1
 800b12c:	fa02 f303 	lsl.w	r3, r2, r3
 800b130:	69ba      	ldr	r2, [r7, #24]
 800b132:	4313      	orrs	r3, r2
 800b134:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	69ba      	ldr	r2, [r7, #24]
 800b13a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	685b      	ldr	r3, [r3, #4]
 800b140:	2b02      	cmp	r3, #2
 800b142:	d003      	beq.n	800b14c <HAL_GPIO_Init+0xfc>
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	685b      	ldr	r3, [r3, #4]
 800b148:	2b12      	cmp	r3, #18
 800b14a:	d123      	bne.n	800b194 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b14c:	69fb      	ldr	r3, [r7, #28]
 800b14e:	08da      	lsrs	r2, r3, #3
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	3208      	adds	r2, #8
 800b154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b158:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800b15a:	69fb      	ldr	r3, [r7, #28]
 800b15c:	f003 0307 	and.w	r3, r3, #7
 800b160:	009b      	lsls	r3, r3, #2
 800b162:	220f      	movs	r2, #15
 800b164:	fa02 f303 	lsl.w	r3, r2, r3
 800b168:	43db      	mvns	r3, r3
 800b16a:	69ba      	ldr	r2, [r7, #24]
 800b16c:	4013      	ands	r3, r2
 800b16e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	691a      	ldr	r2, [r3, #16]
 800b174:	69fb      	ldr	r3, [r7, #28]
 800b176:	f003 0307 	and.w	r3, r3, #7
 800b17a:	009b      	lsls	r3, r3, #2
 800b17c:	fa02 f303 	lsl.w	r3, r2, r3
 800b180:	69ba      	ldr	r2, [r7, #24]
 800b182:	4313      	orrs	r3, r2
 800b184:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b186:	69fb      	ldr	r3, [r7, #28]
 800b188:	08da      	lsrs	r2, r3, #3
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	3208      	adds	r2, #8
 800b18e:	69b9      	ldr	r1, [r7, #24]
 800b190:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800b19a:	69fb      	ldr	r3, [r7, #28]
 800b19c:	005b      	lsls	r3, r3, #1
 800b19e:	2203      	movs	r2, #3
 800b1a0:	fa02 f303 	lsl.w	r3, r2, r3
 800b1a4:	43db      	mvns	r3, r3
 800b1a6:	69ba      	ldr	r2, [r7, #24]
 800b1a8:	4013      	ands	r3, r2
 800b1aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	685b      	ldr	r3, [r3, #4]
 800b1b0:	f003 0203 	and.w	r2, r3, #3
 800b1b4:	69fb      	ldr	r3, [r7, #28]
 800b1b6:	005b      	lsls	r3, r3, #1
 800b1b8:	fa02 f303 	lsl.w	r3, r2, r3
 800b1bc:	69ba      	ldr	r2, [r7, #24]
 800b1be:	4313      	orrs	r3, r2
 800b1c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	69ba      	ldr	r2, [r7, #24]
 800b1c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	685b      	ldr	r3, [r3, #4]
 800b1cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	f000 80b4 	beq.w	800b33e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	60fb      	str	r3, [r7, #12]
 800b1da:	4b5f      	ldr	r3, [pc, #380]	; (800b358 <HAL_GPIO_Init+0x308>)
 800b1dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1de:	4a5e      	ldr	r2, [pc, #376]	; (800b358 <HAL_GPIO_Init+0x308>)
 800b1e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b1e4:	6453      	str	r3, [r2, #68]	; 0x44
 800b1e6:	4b5c      	ldr	r3, [pc, #368]	; (800b358 <HAL_GPIO_Init+0x308>)
 800b1e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b1ee:	60fb      	str	r3, [r7, #12]
 800b1f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b1f2:	4a5a      	ldr	r2, [pc, #360]	; (800b35c <HAL_GPIO_Init+0x30c>)
 800b1f4:	69fb      	ldr	r3, [r7, #28]
 800b1f6:	089b      	lsrs	r3, r3, #2
 800b1f8:	3302      	adds	r3, #2
 800b1fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b1fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800b200:	69fb      	ldr	r3, [r7, #28]
 800b202:	f003 0303 	and.w	r3, r3, #3
 800b206:	009b      	lsls	r3, r3, #2
 800b208:	220f      	movs	r2, #15
 800b20a:	fa02 f303 	lsl.w	r3, r2, r3
 800b20e:	43db      	mvns	r3, r3
 800b210:	69ba      	ldr	r2, [r7, #24]
 800b212:	4013      	ands	r3, r2
 800b214:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	4a51      	ldr	r2, [pc, #324]	; (800b360 <HAL_GPIO_Init+0x310>)
 800b21a:	4293      	cmp	r3, r2
 800b21c:	d02b      	beq.n	800b276 <HAL_GPIO_Init+0x226>
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	4a50      	ldr	r2, [pc, #320]	; (800b364 <HAL_GPIO_Init+0x314>)
 800b222:	4293      	cmp	r3, r2
 800b224:	d025      	beq.n	800b272 <HAL_GPIO_Init+0x222>
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	4a4f      	ldr	r2, [pc, #316]	; (800b368 <HAL_GPIO_Init+0x318>)
 800b22a:	4293      	cmp	r3, r2
 800b22c:	d01f      	beq.n	800b26e <HAL_GPIO_Init+0x21e>
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	4a4e      	ldr	r2, [pc, #312]	; (800b36c <HAL_GPIO_Init+0x31c>)
 800b232:	4293      	cmp	r3, r2
 800b234:	d019      	beq.n	800b26a <HAL_GPIO_Init+0x21a>
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	4a4d      	ldr	r2, [pc, #308]	; (800b370 <HAL_GPIO_Init+0x320>)
 800b23a:	4293      	cmp	r3, r2
 800b23c:	d013      	beq.n	800b266 <HAL_GPIO_Init+0x216>
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	4a4c      	ldr	r2, [pc, #304]	; (800b374 <HAL_GPIO_Init+0x324>)
 800b242:	4293      	cmp	r3, r2
 800b244:	d00d      	beq.n	800b262 <HAL_GPIO_Init+0x212>
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	4a4b      	ldr	r2, [pc, #300]	; (800b378 <HAL_GPIO_Init+0x328>)
 800b24a:	4293      	cmp	r3, r2
 800b24c:	d007      	beq.n	800b25e <HAL_GPIO_Init+0x20e>
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	4a4a      	ldr	r2, [pc, #296]	; (800b37c <HAL_GPIO_Init+0x32c>)
 800b252:	4293      	cmp	r3, r2
 800b254:	d101      	bne.n	800b25a <HAL_GPIO_Init+0x20a>
 800b256:	2307      	movs	r3, #7
 800b258:	e00e      	b.n	800b278 <HAL_GPIO_Init+0x228>
 800b25a:	2308      	movs	r3, #8
 800b25c:	e00c      	b.n	800b278 <HAL_GPIO_Init+0x228>
 800b25e:	2306      	movs	r3, #6
 800b260:	e00a      	b.n	800b278 <HAL_GPIO_Init+0x228>
 800b262:	2305      	movs	r3, #5
 800b264:	e008      	b.n	800b278 <HAL_GPIO_Init+0x228>
 800b266:	2304      	movs	r3, #4
 800b268:	e006      	b.n	800b278 <HAL_GPIO_Init+0x228>
 800b26a:	2303      	movs	r3, #3
 800b26c:	e004      	b.n	800b278 <HAL_GPIO_Init+0x228>
 800b26e:	2302      	movs	r3, #2
 800b270:	e002      	b.n	800b278 <HAL_GPIO_Init+0x228>
 800b272:	2301      	movs	r3, #1
 800b274:	e000      	b.n	800b278 <HAL_GPIO_Init+0x228>
 800b276:	2300      	movs	r3, #0
 800b278:	69fa      	ldr	r2, [r7, #28]
 800b27a:	f002 0203 	and.w	r2, r2, #3
 800b27e:	0092      	lsls	r2, r2, #2
 800b280:	4093      	lsls	r3, r2
 800b282:	69ba      	ldr	r2, [r7, #24]
 800b284:	4313      	orrs	r3, r2
 800b286:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b288:	4934      	ldr	r1, [pc, #208]	; (800b35c <HAL_GPIO_Init+0x30c>)
 800b28a:	69fb      	ldr	r3, [r7, #28]
 800b28c:	089b      	lsrs	r3, r3, #2
 800b28e:	3302      	adds	r3, #2
 800b290:	69ba      	ldr	r2, [r7, #24]
 800b292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b296:	4b3a      	ldr	r3, [pc, #232]	; (800b380 <HAL_GPIO_Init+0x330>)
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b29c:	693b      	ldr	r3, [r7, #16]
 800b29e:	43db      	mvns	r3, r3
 800b2a0:	69ba      	ldr	r2, [r7, #24]
 800b2a2:	4013      	ands	r3, r2
 800b2a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	685b      	ldr	r3, [r3, #4]
 800b2aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d003      	beq.n	800b2ba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800b2b2:	69ba      	ldr	r2, [r7, #24]
 800b2b4:	693b      	ldr	r3, [r7, #16]
 800b2b6:	4313      	orrs	r3, r2
 800b2b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800b2ba:	4a31      	ldr	r2, [pc, #196]	; (800b380 <HAL_GPIO_Init+0x330>)
 800b2bc:	69bb      	ldr	r3, [r7, #24]
 800b2be:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800b2c0:	4b2f      	ldr	r3, [pc, #188]	; (800b380 <HAL_GPIO_Init+0x330>)
 800b2c2:	685b      	ldr	r3, [r3, #4]
 800b2c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b2c6:	693b      	ldr	r3, [r7, #16]
 800b2c8:	43db      	mvns	r3, r3
 800b2ca:	69ba      	ldr	r2, [r7, #24]
 800b2cc:	4013      	ands	r3, r2
 800b2ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	685b      	ldr	r3, [r3, #4]
 800b2d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d003      	beq.n	800b2e4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800b2dc:	69ba      	ldr	r2, [r7, #24]
 800b2de:	693b      	ldr	r3, [r7, #16]
 800b2e0:	4313      	orrs	r3, r2
 800b2e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800b2e4:	4a26      	ldr	r2, [pc, #152]	; (800b380 <HAL_GPIO_Init+0x330>)
 800b2e6:	69bb      	ldr	r3, [r7, #24]
 800b2e8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b2ea:	4b25      	ldr	r3, [pc, #148]	; (800b380 <HAL_GPIO_Init+0x330>)
 800b2ec:	689b      	ldr	r3, [r3, #8]
 800b2ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b2f0:	693b      	ldr	r3, [r7, #16]
 800b2f2:	43db      	mvns	r3, r3
 800b2f4:	69ba      	ldr	r2, [r7, #24]
 800b2f6:	4013      	ands	r3, r2
 800b2f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	685b      	ldr	r3, [r3, #4]
 800b2fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b302:	2b00      	cmp	r3, #0
 800b304:	d003      	beq.n	800b30e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800b306:	69ba      	ldr	r2, [r7, #24]
 800b308:	693b      	ldr	r3, [r7, #16]
 800b30a:	4313      	orrs	r3, r2
 800b30c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b30e:	4a1c      	ldr	r2, [pc, #112]	; (800b380 <HAL_GPIO_Init+0x330>)
 800b310:	69bb      	ldr	r3, [r7, #24]
 800b312:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b314:	4b1a      	ldr	r3, [pc, #104]	; (800b380 <HAL_GPIO_Init+0x330>)
 800b316:	68db      	ldr	r3, [r3, #12]
 800b318:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b31a:	693b      	ldr	r3, [r7, #16]
 800b31c:	43db      	mvns	r3, r3
 800b31e:	69ba      	ldr	r2, [r7, #24]
 800b320:	4013      	ands	r3, r2
 800b322:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	685b      	ldr	r3, [r3, #4]
 800b328:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d003      	beq.n	800b338 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800b330:	69ba      	ldr	r2, [r7, #24]
 800b332:	693b      	ldr	r3, [r7, #16]
 800b334:	4313      	orrs	r3, r2
 800b336:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b338:	4a11      	ldr	r2, [pc, #68]	; (800b380 <HAL_GPIO_Init+0x330>)
 800b33a:	69bb      	ldr	r3, [r7, #24]
 800b33c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b33e:	69fb      	ldr	r3, [r7, #28]
 800b340:	3301      	adds	r3, #1
 800b342:	61fb      	str	r3, [r7, #28]
 800b344:	69fb      	ldr	r3, [r7, #28]
 800b346:	2b0f      	cmp	r3, #15
 800b348:	f67f ae90 	bls.w	800b06c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800b34c:	bf00      	nop
 800b34e:	3724      	adds	r7, #36	; 0x24
 800b350:	46bd      	mov	sp, r7
 800b352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b356:	4770      	bx	lr
 800b358:	40023800 	.word	0x40023800
 800b35c:	40013800 	.word	0x40013800
 800b360:	40020000 	.word	0x40020000
 800b364:	40020400 	.word	0x40020400
 800b368:	40020800 	.word	0x40020800
 800b36c:	40020c00 	.word	0x40020c00
 800b370:	40021000 	.word	0x40021000
 800b374:	40021400 	.word	0x40021400
 800b378:	40021800 	.word	0x40021800
 800b37c:	40021c00 	.word	0x40021c00
 800b380:	40013c00 	.word	0x40013c00

0800b384 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b384:	b480      	push	{r7}
 800b386:	b083      	sub	sp, #12
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
 800b38c:	460b      	mov	r3, r1
 800b38e:	807b      	strh	r3, [r7, #2]
 800b390:	4613      	mov	r3, r2
 800b392:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b394:	787b      	ldrb	r3, [r7, #1]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d003      	beq.n	800b3a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b39a:	887a      	ldrh	r2, [r7, #2]
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800b3a0:	e003      	b.n	800b3aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800b3a2:	887b      	ldrh	r3, [r7, #2]
 800b3a4:	041a      	lsls	r2, r3, #16
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	619a      	str	r2, [r3, #24]
}
 800b3aa:	bf00      	nop
 800b3ac:	370c      	adds	r7, #12
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b4:	4770      	bx	lr
	...

0800b3b8 <HAL_NOR_Init>:
  * @param  Timing pointer to NOR control timing structure 
  * @param  ExtTiming pointer to NOR extended mode timing structure    
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NOR_Init(NOR_HandleTypeDef *hnor, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b084      	sub	sp, #16
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	60f8      	str	r0, [r7, #12]
 800b3c0:	60b9      	str	r1, [r7, #8]
 800b3c2:	607a      	str	r2, [r7, #4]
  /* Check the NOR handle parameter */
  if(hnor == NULL)
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d101      	bne.n	800b3ce <HAL_NOR_Init+0x16>
  {
     return HAL_ERROR;
 800b3ca:	2301      	movs	r3, #1
 800b3cc:	e043      	b.n	800b456 <HAL_NOR_Init+0x9e>
  }
  
  if(hnor->State == HAL_NOR_STATE_RESET)
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800b3d4:	b2db      	uxtb	r3, r3
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d106      	bne.n	800b3e8 <HAL_NOR_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnor->Lock = HAL_UNLOCKED;
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	2200      	movs	r2, #0
 800b3de:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hnor->MspInitCallback(hnor);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NOR_MspInit(hnor);
 800b3e2:	68f8      	ldr	r0, [r7, #12]
 800b3e4:	f7f7 fed0 	bl	8003188 <HAL_NOR_MspInit>
#endif /* (USE_HAL_NOR_REGISTER_CALLBACKS) */
  }
  
  /* Initialize NOR control Interface */
  FMC_NORSRAM_Init(hnor->Instance, &(hnor->Init));
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	681a      	ldr	r2, [r3, #0]
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	3308      	adds	r3, #8
 800b3f0:	4619      	mov	r1, r3
 800b3f2:	4610      	mov	r0, r2
 800b3f4:	f003 f810 	bl	800e418 <FSMC_NORSRAM_Init>

  /* Initialize NOR timing Interface */
  FMC_NORSRAM_Timing_Init(hnor->Instance, Timing, hnor->Init.NSBank); 
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	6818      	ldr	r0, [r3, #0]
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	689b      	ldr	r3, [r3, #8]
 800b400:	461a      	mov	r2, r3
 800b402:	68b9      	ldr	r1, [r7, #8]
 800b404:	f003 f85a 	bl	800e4bc <FSMC_NORSRAM_Timing_Init>

  /* Initialize NOR extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hnor->Extended, ExtTiming, hnor->Init.NSBank, hnor->Init.ExtendedMode);
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	6858      	ldr	r0, [r3, #4]
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	689a      	ldr	r2, [r3, #8]
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b414:	6879      	ldr	r1, [r7, #4]
 800b416:	f003 f88f 	bl	800e538 <FSMC_NORSRAM_Extended_Timing_Init>

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hnor->Instance, hnor->Init.NSBank);
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	68fa      	ldr	r2, [r7, #12]
 800b420:	6892      	ldr	r2, [r2, #8]
 800b422:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	68fa      	ldr	r2, [r7, #12]
 800b42c:	6892      	ldr	r2, [r2, #8]
 800b42e:	f041 0101 	orr.w	r1, r1, #1
 800b432:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize NOR Memory Data Width*/
  if (hnor->Init.MemoryDataWidth == FMC_NORSRAM_MEM_BUS_WIDTH_8)
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	695b      	ldr	r3, [r3, #20]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d103      	bne.n	800b446 <HAL_NOR_Init+0x8e>
  {
    uwNORMemoryDataWidth = NOR_MEMORY_8B;
 800b43e:	4b08      	ldr	r3, [pc, #32]	; (800b460 <HAL_NOR_Init+0xa8>)
 800b440:	2200      	movs	r2, #0
 800b442:	601a      	str	r2, [r3, #0]
 800b444:	e002      	b.n	800b44c <HAL_NOR_Init+0x94>
  }
  else
  {
    uwNORMemoryDataWidth = NOR_MEMORY_16B;
 800b446:	4b06      	ldr	r3, [pc, #24]	; (800b460 <HAL_NOR_Init+0xa8>)
 800b448:	2201      	movs	r2, #1
 800b44a:	601a      	str	r2, [r3, #0]
  }

  /* Check the NOR controller state */
  hnor->State = HAL_NOR_STATE_READY; 
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	2201      	movs	r2, #1
 800b450:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  return HAL_OK;
 800b454:	2300      	movs	r3, #0
}
 800b456:	4618      	mov	r0, r3
 800b458:	3710      	adds	r7, #16
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}
 800b45e:	bf00      	nop
 800b460:	200014a8 	.word	0x200014a8

0800b464 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800b464:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b466:	b08f      	sub	sp, #60	; 0x3c
 800b468:	af0a      	add	r7, sp, #40	; 0x28
 800b46a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d101      	bne.n	800b476 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800b472:	2301      	movs	r3, #1
 800b474:	e10f      	b.n	800b696 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800b482:	b2db      	uxtb	r3, r3
 800b484:	2b00      	cmp	r3, #0
 800b486:	d106      	bne.n	800b496 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2200      	movs	r2, #0
 800b48c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800b490:	6878      	ldr	r0, [r7, #4]
 800b492:	f009 fa73 	bl	801497c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	2203      	movs	r2, #3
 800b49a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800b49e:	68bb      	ldr	r3, [r7, #8]
 800b4a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d102      	bne.n	800b4b0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	f003 f994 	bl	800e7e2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	603b      	str	r3, [r7, #0]
 800b4c0:	687e      	ldr	r6, [r7, #4]
 800b4c2:	466d      	mov	r5, sp
 800b4c4:	f106 0410 	add.w	r4, r6, #16
 800b4c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b4ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b4cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b4ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b4d0:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b4d4:	e885 0003 	stmia.w	r5, {r0, r1}
 800b4d8:	1d33      	adds	r3, r6, #4
 800b4da:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b4dc:	6838      	ldr	r0, [r7, #0]
 800b4de:	f003 f86b 	bl	800e5b8 <USB_CoreInit>
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d005      	beq.n	800b4f4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2202      	movs	r2, #2
 800b4ec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800b4f0:	2301      	movs	r3, #1
 800b4f2:	e0d0      	b.n	800b696 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	2100      	movs	r1, #0
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	f003 f982 	bl	800e804 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b500:	2300      	movs	r3, #0
 800b502:	73fb      	strb	r3, [r7, #15]
 800b504:	e04a      	b.n	800b59c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800b506:	7bfa      	ldrb	r2, [r7, #15]
 800b508:	6879      	ldr	r1, [r7, #4]
 800b50a:	4613      	mov	r3, r2
 800b50c:	00db      	lsls	r3, r3, #3
 800b50e:	1a9b      	subs	r3, r3, r2
 800b510:	009b      	lsls	r3, r3, #2
 800b512:	440b      	add	r3, r1
 800b514:	333d      	adds	r3, #61	; 0x3d
 800b516:	2201      	movs	r2, #1
 800b518:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800b51a:	7bfa      	ldrb	r2, [r7, #15]
 800b51c:	6879      	ldr	r1, [r7, #4]
 800b51e:	4613      	mov	r3, r2
 800b520:	00db      	lsls	r3, r3, #3
 800b522:	1a9b      	subs	r3, r3, r2
 800b524:	009b      	lsls	r3, r3, #2
 800b526:	440b      	add	r3, r1
 800b528:	333c      	adds	r3, #60	; 0x3c
 800b52a:	7bfa      	ldrb	r2, [r7, #15]
 800b52c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800b52e:	7bfa      	ldrb	r2, [r7, #15]
 800b530:	7bfb      	ldrb	r3, [r7, #15]
 800b532:	b298      	uxth	r0, r3
 800b534:	6879      	ldr	r1, [r7, #4]
 800b536:	4613      	mov	r3, r2
 800b538:	00db      	lsls	r3, r3, #3
 800b53a:	1a9b      	subs	r3, r3, r2
 800b53c:	009b      	lsls	r3, r3, #2
 800b53e:	440b      	add	r3, r1
 800b540:	3342      	adds	r3, #66	; 0x42
 800b542:	4602      	mov	r2, r0
 800b544:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800b546:	7bfa      	ldrb	r2, [r7, #15]
 800b548:	6879      	ldr	r1, [r7, #4]
 800b54a:	4613      	mov	r3, r2
 800b54c:	00db      	lsls	r3, r3, #3
 800b54e:	1a9b      	subs	r3, r3, r2
 800b550:	009b      	lsls	r3, r3, #2
 800b552:	440b      	add	r3, r1
 800b554:	333f      	adds	r3, #63	; 0x3f
 800b556:	2200      	movs	r2, #0
 800b558:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800b55a:	7bfa      	ldrb	r2, [r7, #15]
 800b55c:	6879      	ldr	r1, [r7, #4]
 800b55e:	4613      	mov	r3, r2
 800b560:	00db      	lsls	r3, r3, #3
 800b562:	1a9b      	subs	r3, r3, r2
 800b564:	009b      	lsls	r3, r3, #2
 800b566:	440b      	add	r3, r1
 800b568:	3344      	adds	r3, #68	; 0x44
 800b56a:	2200      	movs	r2, #0
 800b56c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800b56e:	7bfa      	ldrb	r2, [r7, #15]
 800b570:	6879      	ldr	r1, [r7, #4]
 800b572:	4613      	mov	r3, r2
 800b574:	00db      	lsls	r3, r3, #3
 800b576:	1a9b      	subs	r3, r3, r2
 800b578:	009b      	lsls	r3, r3, #2
 800b57a:	440b      	add	r3, r1
 800b57c:	3348      	adds	r3, #72	; 0x48
 800b57e:	2200      	movs	r2, #0
 800b580:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800b582:	7bfa      	ldrb	r2, [r7, #15]
 800b584:	6879      	ldr	r1, [r7, #4]
 800b586:	4613      	mov	r3, r2
 800b588:	00db      	lsls	r3, r3, #3
 800b58a:	1a9b      	subs	r3, r3, r2
 800b58c:	009b      	lsls	r3, r3, #2
 800b58e:	440b      	add	r3, r1
 800b590:	3350      	adds	r3, #80	; 0x50
 800b592:	2200      	movs	r2, #0
 800b594:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b596:	7bfb      	ldrb	r3, [r7, #15]
 800b598:	3301      	adds	r3, #1
 800b59a:	73fb      	strb	r3, [r7, #15]
 800b59c:	7bfa      	ldrb	r2, [r7, #15]
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	685b      	ldr	r3, [r3, #4]
 800b5a2:	429a      	cmp	r2, r3
 800b5a4:	d3af      	bcc.n	800b506 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	73fb      	strb	r3, [r7, #15]
 800b5aa:	e044      	b.n	800b636 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800b5ac:	7bfa      	ldrb	r2, [r7, #15]
 800b5ae:	6879      	ldr	r1, [r7, #4]
 800b5b0:	4613      	mov	r3, r2
 800b5b2:	00db      	lsls	r3, r3, #3
 800b5b4:	1a9b      	subs	r3, r3, r2
 800b5b6:	009b      	lsls	r3, r3, #2
 800b5b8:	440b      	add	r3, r1
 800b5ba:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800b5be:	2200      	movs	r2, #0
 800b5c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800b5c2:	7bfa      	ldrb	r2, [r7, #15]
 800b5c4:	6879      	ldr	r1, [r7, #4]
 800b5c6:	4613      	mov	r3, r2
 800b5c8:	00db      	lsls	r3, r3, #3
 800b5ca:	1a9b      	subs	r3, r3, r2
 800b5cc:	009b      	lsls	r3, r3, #2
 800b5ce:	440b      	add	r3, r1
 800b5d0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800b5d4:	7bfa      	ldrb	r2, [r7, #15]
 800b5d6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800b5d8:	7bfa      	ldrb	r2, [r7, #15]
 800b5da:	6879      	ldr	r1, [r7, #4]
 800b5dc:	4613      	mov	r3, r2
 800b5de:	00db      	lsls	r3, r3, #3
 800b5e0:	1a9b      	subs	r3, r3, r2
 800b5e2:	009b      	lsls	r3, r3, #2
 800b5e4:	440b      	add	r3, r1
 800b5e6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800b5ee:	7bfa      	ldrb	r2, [r7, #15]
 800b5f0:	6879      	ldr	r1, [r7, #4]
 800b5f2:	4613      	mov	r3, r2
 800b5f4:	00db      	lsls	r3, r3, #3
 800b5f6:	1a9b      	subs	r3, r3, r2
 800b5f8:	009b      	lsls	r3, r3, #2
 800b5fa:	440b      	add	r3, r1
 800b5fc:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800b600:	2200      	movs	r2, #0
 800b602:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800b604:	7bfa      	ldrb	r2, [r7, #15]
 800b606:	6879      	ldr	r1, [r7, #4]
 800b608:	4613      	mov	r3, r2
 800b60a:	00db      	lsls	r3, r3, #3
 800b60c:	1a9b      	subs	r3, r3, r2
 800b60e:	009b      	lsls	r3, r3, #2
 800b610:	440b      	add	r3, r1
 800b612:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800b616:	2200      	movs	r2, #0
 800b618:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800b61a:	7bfa      	ldrb	r2, [r7, #15]
 800b61c:	6879      	ldr	r1, [r7, #4]
 800b61e:	4613      	mov	r3, r2
 800b620:	00db      	lsls	r3, r3, #3
 800b622:	1a9b      	subs	r3, r3, r2
 800b624:	009b      	lsls	r3, r3, #2
 800b626:	440b      	add	r3, r1
 800b628:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800b62c:	2200      	movs	r2, #0
 800b62e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b630:	7bfb      	ldrb	r3, [r7, #15]
 800b632:	3301      	adds	r3, #1
 800b634:	73fb      	strb	r3, [r7, #15]
 800b636:	7bfa      	ldrb	r2, [r7, #15]
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	685b      	ldr	r3, [r3, #4]
 800b63c:	429a      	cmp	r2, r3
 800b63e:	d3b5      	bcc.n	800b5ac <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	603b      	str	r3, [r7, #0]
 800b646:	687e      	ldr	r6, [r7, #4]
 800b648:	466d      	mov	r5, sp
 800b64a:	f106 0410 	add.w	r4, r6, #16
 800b64e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b650:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b652:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b654:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b656:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b65a:	e885 0003 	stmia.w	r5, {r0, r1}
 800b65e:	1d33      	adds	r3, r6, #4
 800b660:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b662:	6838      	ldr	r0, [r7, #0]
 800b664:	f003 f8f8 	bl	800e858 <USB_DevInit>
 800b668:	4603      	mov	r3, r0
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d005      	beq.n	800b67a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	2202      	movs	r2, #2
 800b672:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800b676:	2301      	movs	r3, #1
 800b678:	e00d      	b.n	800b696 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	2200      	movs	r2, #0
 800b67e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	2201      	movs	r2, #1
 800b686:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	4618      	mov	r0, r3
 800b690:	f004 f8ed 	bl	800f86e <USB_DevDisconnect>

  return HAL_OK;
 800b694:	2300      	movs	r3, #0
}
 800b696:	4618      	mov	r0, r3
 800b698:	3714      	adds	r7, #20
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b69e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800b69e:	b580      	push	{r7, lr}
 800b6a0:	b084      	sub	sp, #16
 800b6a2:	af00      	add	r7, sp, #0
 800b6a4:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800b6b2:	2b01      	cmp	r3, #1
 800b6b4:	d101      	bne.n	800b6ba <HAL_PCD_Start+0x1c>
 800b6b6:	2302      	movs	r3, #2
 800b6b8:	e020      	b.n	800b6fc <HAL_PCD_Start+0x5e>
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	2201      	movs	r2, #1
 800b6be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6c6:	2b01      	cmp	r3, #1
 800b6c8:	d109      	bne.n	800b6de <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800b6ce:	2b01      	cmp	r3, #1
 800b6d0:	d005      	beq.n	800b6de <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6d6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	f004 f8ab 	bl	800f83e <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	f003 f867 	bl	800e7c0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800b6fa:	2300      	movs	r3, #0
}
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	3710      	adds	r7, #16
 800b700:	46bd      	mov	sp, r7
 800b702:	bd80      	pop	{r7, pc}

0800b704 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800b704:	b590      	push	{r4, r7, lr}
 800b706:	b08d      	sub	sp, #52	; 0x34
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b712:	6a3b      	ldr	r3, [r7, #32]
 800b714:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	4618      	mov	r0, r3
 800b71c:	f004 f952 	bl	800f9c4 <USB_GetMode>
 800b720:	4603      	mov	r3, r0
 800b722:	2b00      	cmp	r3, #0
 800b724:	f040 838e 	bne.w	800be44 <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	4618      	mov	r0, r3
 800b72e:	f004 f8b6 	bl	800f89e <USB_ReadInterrupts>
 800b732:	4603      	mov	r3, r0
 800b734:	2b00      	cmp	r3, #0
 800b736:	f000 8384 	beq.w	800be42 <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	4618      	mov	r0, r3
 800b740:	f004 f8ad 	bl	800f89e <USB_ReadInterrupts>
 800b744:	4603      	mov	r3, r0
 800b746:	f003 0302 	and.w	r3, r3, #2
 800b74a:	2b02      	cmp	r3, #2
 800b74c:	d107      	bne.n	800b75e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	695a      	ldr	r2, [r3, #20]
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	f002 0202 	and.w	r2, r2, #2
 800b75c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	4618      	mov	r0, r3
 800b764:	f004 f89b 	bl	800f89e <USB_ReadInterrupts>
 800b768:	4603      	mov	r3, r0
 800b76a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b76e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b772:	d17b      	bne.n	800b86c <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 800b774:	2300      	movs	r3, #0
 800b776:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	4618      	mov	r0, r3
 800b77e:	f004 f8a1 	bl	800f8c4 <USB_ReadDevAllOutEpInterrupt>
 800b782:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800b784:	e06f      	b.n	800b866 <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 800b786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b788:	f003 0301 	and.w	r3, r3, #1
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d064      	beq.n	800b85a <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b796:	b2d2      	uxtb	r2, r2
 800b798:	4611      	mov	r1, r2
 800b79a:	4618      	mov	r0, r3
 800b79c:	f004 f8c6 	bl	800f92c <USB_ReadDevOutEPInterrupt>
 800b7a0:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800b7a2:	69bb      	ldr	r3, [r7, #24]
 800b7a4:	f003 0301 	and.w	r3, r3, #1
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d00c      	beq.n	800b7c6 <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800b7ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ae:	015a      	lsls	r2, r3, #5
 800b7b0:	69fb      	ldr	r3, [r7, #28]
 800b7b2:	4413      	add	r3, r2
 800b7b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7b8:	461a      	mov	r2, r3
 800b7ba:	2301      	movs	r3, #1
 800b7bc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800b7be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b7c0:	6878      	ldr	r0, [r7, #4]
 800b7c2:	f000 fe0d 	bl	800c3e0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800b7c6:	69bb      	ldr	r3, [r7, #24]
 800b7c8:	f003 0308 	and.w	r3, r3, #8
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d00c      	beq.n	800b7ea <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800b7d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	f000 ff0c 	bl	800c5f0 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800b7d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7da:	015a      	lsls	r2, r3, #5
 800b7dc:	69fb      	ldr	r3, [r7, #28]
 800b7de:	4413      	add	r3, r2
 800b7e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7e4:	461a      	mov	r2, r3
 800b7e6:	2308      	movs	r3, #8
 800b7e8:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800b7ea:	69bb      	ldr	r3, [r7, #24]
 800b7ec:	f003 0310 	and.w	r3, r3, #16
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d008      	beq.n	800b806 <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800b7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7f6:	015a      	lsls	r2, r3, #5
 800b7f8:	69fb      	ldr	r3, [r7, #28]
 800b7fa:	4413      	add	r3, r2
 800b7fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b800:	461a      	mov	r2, r3
 800b802:	2310      	movs	r3, #16
 800b804:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b806:	69bb      	ldr	r3, [r7, #24]
 800b808:	f003 0320 	and.w	r3, r3, #32
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d015      	beq.n	800b83c <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	691b      	ldr	r3, [r3, #16]
 800b814:	2b01      	cmp	r3, #1
 800b816:	d108      	bne.n	800b82a <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	6818      	ldr	r0, [r3, #0]
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b822:	461a      	mov	r2, r3
 800b824:	2101      	movs	r1, #1
 800b826:	f004 f911 	bl	800fa4c <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b82a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b82c:	015a      	lsls	r2, r3, #5
 800b82e:	69fb      	ldr	r3, [r7, #28]
 800b830:	4413      	add	r3, r2
 800b832:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b836:	461a      	mov	r2, r3
 800b838:	2320      	movs	r3, #32
 800b83a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800b83c:	69bb      	ldr	r3, [r7, #24]
 800b83e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b842:	2b00      	cmp	r3, #0
 800b844:	d009      	beq.n	800b85a <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800b846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b848:	015a      	lsls	r2, r3, #5
 800b84a:	69fb      	ldr	r3, [r7, #28]
 800b84c:	4413      	add	r3, r2
 800b84e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b852:	461a      	mov	r2, r3
 800b854:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b858:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800b85a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b85c:	3301      	adds	r3, #1
 800b85e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800b860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b862:	085b      	lsrs	r3, r3, #1
 800b864:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800b866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d18c      	bne.n	800b786 <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	4618      	mov	r0, r3
 800b872:	f004 f814 	bl	800f89e <USB_ReadInterrupts>
 800b876:	4603      	mov	r3, r0
 800b878:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b87c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b880:	f040 80c4 	bne.w	800ba0c <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	4618      	mov	r0, r3
 800b88a:	f004 f835 	bl	800f8f8 <USB_ReadDevAllInEpInterrupt>
 800b88e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800b890:	2300      	movs	r3, #0
 800b892:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800b894:	e0b6      	b.n	800ba04 <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800b896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b898:	f003 0301 	and.w	r3, r3, #1
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	f000 80ab 	beq.w	800b9f8 <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8a8:	b2d2      	uxtb	r2, r2
 800b8aa:	4611      	mov	r1, r2
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	f004 f85b 	bl	800f968 <USB_ReadDevInEPInterrupt>
 800b8b2:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800b8b4:	69bb      	ldr	r3, [r7, #24]
 800b8b6:	f003 0301 	and.w	r3, r3, #1
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d05b      	beq.n	800b976 <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b8be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8c0:	f003 030f 	and.w	r3, r3, #15
 800b8c4:	2201      	movs	r2, #1
 800b8c6:	fa02 f303 	lsl.w	r3, r2, r3
 800b8ca:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b8cc:	69fb      	ldr	r3, [r7, #28]
 800b8ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b8d4:	697b      	ldr	r3, [r7, #20]
 800b8d6:	43db      	mvns	r3, r3
 800b8d8:	69f9      	ldr	r1, [r7, #28]
 800b8da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b8de:	4013      	ands	r3, r2
 800b8e0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800b8e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e4:	015a      	lsls	r2, r3, #5
 800b8e6:	69fb      	ldr	r3, [r7, #28]
 800b8e8:	4413      	add	r3, r2
 800b8ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8ee:	461a      	mov	r2, r3
 800b8f0:	2301      	movs	r3, #1
 800b8f2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	691b      	ldr	r3, [r3, #16]
 800b8f8:	2b01      	cmp	r3, #1
 800b8fa:	d11b      	bne.n	800b934 <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800b8fc:	6879      	ldr	r1, [r7, #4]
 800b8fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b900:	4613      	mov	r3, r2
 800b902:	00db      	lsls	r3, r3, #3
 800b904:	1a9b      	subs	r3, r3, r2
 800b906:	009b      	lsls	r3, r3, #2
 800b908:	440b      	add	r3, r1
 800b90a:	3348      	adds	r3, #72	; 0x48
 800b90c:	6819      	ldr	r1, [r3, #0]
 800b90e:	6878      	ldr	r0, [r7, #4]
 800b910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b912:	4613      	mov	r3, r2
 800b914:	00db      	lsls	r3, r3, #3
 800b916:	1a9b      	subs	r3, r3, r2
 800b918:	009b      	lsls	r3, r3, #2
 800b91a:	4403      	add	r3, r0
 800b91c:	3344      	adds	r3, #68	; 0x44
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	4419      	add	r1, r3
 800b922:	6878      	ldr	r0, [r7, #4]
 800b924:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b926:	4613      	mov	r3, r2
 800b928:	00db      	lsls	r3, r3, #3
 800b92a:	1a9b      	subs	r3, r3, r2
 800b92c:	009b      	lsls	r3, r3, #2
 800b92e:	4403      	add	r3, r0
 800b930:	3348      	adds	r3, #72	; 0x48
 800b932:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800b934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b936:	b2db      	uxtb	r3, r3
 800b938:	4619      	mov	r1, r3
 800b93a:	6878      	ldr	r0, [r7, #4]
 800b93c:	f009 f89f 	bl	8014a7e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	691b      	ldr	r3, [r3, #16]
 800b944:	2b01      	cmp	r3, #1
 800b946:	d116      	bne.n	800b976 <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800b948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d113      	bne.n	800b976 <HAL_PCD_IRQHandler+0x272>
 800b94e:	6879      	ldr	r1, [r7, #4]
 800b950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b952:	4613      	mov	r3, r2
 800b954:	00db      	lsls	r3, r3, #3
 800b956:	1a9b      	subs	r3, r3, r2
 800b958:	009b      	lsls	r3, r3, #2
 800b95a:	440b      	add	r3, r1
 800b95c:	3350      	adds	r3, #80	; 0x50
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d108      	bne.n	800b976 <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	6818      	ldr	r0, [r3, #0]
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b96e:	461a      	mov	r2, r3
 800b970:	2101      	movs	r1, #1
 800b972:	f004 f86b 	bl	800fa4c <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800b976:	69bb      	ldr	r3, [r7, #24]
 800b978:	f003 0308 	and.w	r3, r3, #8
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d008      	beq.n	800b992 <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800b980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b982:	015a      	lsls	r2, r3, #5
 800b984:	69fb      	ldr	r3, [r7, #28]
 800b986:	4413      	add	r3, r2
 800b988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b98c:	461a      	mov	r2, r3
 800b98e:	2308      	movs	r3, #8
 800b990:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800b992:	69bb      	ldr	r3, [r7, #24]
 800b994:	f003 0310 	and.w	r3, r3, #16
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d008      	beq.n	800b9ae <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800b99c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b99e:	015a      	lsls	r2, r3, #5
 800b9a0:	69fb      	ldr	r3, [r7, #28]
 800b9a2:	4413      	add	r3, r2
 800b9a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9a8:	461a      	mov	r2, r3
 800b9aa:	2310      	movs	r3, #16
 800b9ac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800b9ae:	69bb      	ldr	r3, [r7, #24]
 800b9b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d008      	beq.n	800b9ca <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800b9b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ba:	015a      	lsls	r2, r3, #5
 800b9bc:	69fb      	ldr	r3, [r7, #28]
 800b9be:	4413      	add	r3, r2
 800b9c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9c4:	461a      	mov	r2, r3
 800b9c6:	2340      	movs	r3, #64	; 0x40
 800b9c8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800b9ca:	69bb      	ldr	r3, [r7, #24]
 800b9cc:	f003 0302 	and.w	r3, r3, #2
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d008      	beq.n	800b9e6 <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800b9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9d6:	015a      	lsls	r2, r3, #5
 800b9d8:	69fb      	ldr	r3, [r7, #28]
 800b9da:	4413      	add	r3, r2
 800b9dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9e0:	461a      	mov	r2, r3
 800b9e2:	2302      	movs	r3, #2
 800b9e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800b9e6:	69bb      	ldr	r3, [r7, #24]
 800b9e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d003      	beq.n	800b9f8 <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800b9f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b9f2:	6878      	ldr	r0, [r7, #4]
 800b9f4:	f000 fc67 	bl	800c2c6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800b9f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9fa:	3301      	adds	r3, #1
 800b9fc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800b9fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba00:	085b      	lsrs	r3, r3, #1
 800ba02:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800ba04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	f47f af45 	bne.w	800b896 <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	4618      	mov	r0, r3
 800ba12:	f003 ff44 	bl	800f89e <USB_ReadInterrupts>
 800ba16:	4603      	mov	r3, r0
 800ba18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ba1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ba20:	d122      	bne.n	800ba68 <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800ba22:	69fb      	ldr	r3, [r7, #28]
 800ba24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba28:	685b      	ldr	r3, [r3, #4]
 800ba2a:	69fa      	ldr	r2, [r7, #28]
 800ba2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ba30:	f023 0301 	bic.w	r3, r3, #1
 800ba34:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800ba3c:	2b01      	cmp	r3, #1
 800ba3e:	d108      	bne.n	800ba52 <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2200      	movs	r2, #0
 800ba44:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800ba48:	2100      	movs	r1, #0
 800ba4a:	6878      	ldr	r0, [r7, #4]
 800ba4c:	f000 fe88 	bl	800c760 <HAL_PCDEx_LPM_Callback>
 800ba50:	e002      	b.n	800ba58 <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800ba52:	6878      	ldr	r0, [r7, #4]
 800ba54:	f009 f88a 	bl	8014b6c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	695a      	ldr	r2, [r3, #20]
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800ba66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	f003 ff16 	bl	800f89e <USB_ReadInterrupts>
 800ba72:	4603      	mov	r3, r0
 800ba74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ba78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ba7c:	d112      	bne.n	800baa4 <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800ba7e:	69fb      	ldr	r3, [r7, #28]
 800ba80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba84:	689b      	ldr	r3, [r3, #8]
 800ba86:	f003 0301 	and.w	r3, r3, #1
 800ba8a:	2b01      	cmp	r3, #1
 800ba8c:	d102      	bne.n	800ba94 <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800ba8e:	6878      	ldr	r0, [r7, #4]
 800ba90:	f009 f846 	bl	8014b20 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	695a      	ldr	r2, [r3, #20]
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800baa2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	4618      	mov	r0, r3
 800baaa:	f003 fef8 	bl	800f89e <USB_ReadInterrupts>
 800baae:	4603      	mov	r3, r0
 800bab0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bab4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bab8:	f040 80a7 	bne.w	800bc0a <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800babc:	69fb      	ldr	r3, [r7, #28]
 800babe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bac2:	685b      	ldr	r3, [r3, #4]
 800bac4:	69fa      	ldr	r2, [r7, #28]
 800bac6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800baca:	f023 0301 	bic.w	r3, r3, #1
 800bace:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	2110      	movs	r1, #16
 800bad6:	4618      	mov	r0, r3
 800bad8:	f003 f830 	bl	800eb3c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800badc:	2300      	movs	r3, #0
 800bade:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bae0:	e036      	b.n	800bb50 <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800bae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bae4:	015a      	lsls	r2, r3, #5
 800bae6:	69fb      	ldr	r3, [r7, #28]
 800bae8:	4413      	add	r3, r2
 800baea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800baee:	461a      	mov	r2, r3
 800baf0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800baf4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800baf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baf8:	015a      	lsls	r2, r3, #5
 800bafa:	69fb      	ldr	r3, [r7, #28]
 800bafc:	4413      	add	r3, r2
 800bafe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb06:	0151      	lsls	r1, r2, #5
 800bb08:	69fa      	ldr	r2, [r7, #28]
 800bb0a:	440a      	add	r2, r1
 800bb0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb10:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bb14:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800bb16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb18:	015a      	lsls	r2, r3, #5
 800bb1a:	69fb      	ldr	r3, [r7, #28]
 800bb1c:	4413      	add	r3, r2
 800bb1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb22:	461a      	mov	r2, r3
 800bb24:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bb28:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800bb2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb2c:	015a      	lsls	r2, r3, #5
 800bb2e:	69fb      	ldr	r3, [r7, #28]
 800bb30:	4413      	add	r3, r2
 800bb32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb3a:	0151      	lsls	r1, r2, #5
 800bb3c:	69fa      	ldr	r2, [r7, #28]
 800bb3e:	440a      	add	r2, r1
 800bb40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb44:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bb48:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bb4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb4c:	3301      	adds	r3, #1
 800bb4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	685b      	ldr	r3, [r3, #4]
 800bb54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb56:	429a      	cmp	r2, r3
 800bb58:	d3c3      	bcc.n	800bae2 <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800bb5a:	69fb      	ldr	r3, [r7, #28]
 800bb5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb60:	69db      	ldr	r3, [r3, #28]
 800bb62:	69fa      	ldr	r2, [r7, #28]
 800bb64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bb68:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800bb6c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d016      	beq.n	800bba4 <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800bb76:	69fb      	ldr	r3, [r7, #28]
 800bb78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb80:	69fa      	ldr	r2, [r7, #28]
 800bb82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bb86:	f043 030b 	orr.w	r3, r3, #11
 800bb8a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800bb8e:	69fb      	ldr	r3, [r7, #28]
 800bb90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb96:	69fa      	ldr	r2, [r7, #28]
 800bb98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bb9c:	f043 030b 	orr.w	r3, r3, #11
 800bba0:	6453      	str	r3, [r2, #68]	; 0x44
 800bba2:	e015      	b.n	800bbd0 <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800bba4:	69fb      	ldr	r3, [r7, #28]
 800bba6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbaa:	695b      	ldr	r3, [r3, #20]
 800bbac:	69fa      	ldr	r2, [r7, #28]
 800bbae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bbb2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800bbb6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800bbba:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800bbbc:	69fb      	ldr	r3, [r7, #28]
 800bbbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbc2:	691b      	ldr	r3, [r3, #16]
 800bbc4:	69fa      	ldr	r2, [r7, #28]
 800bbc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bbca:	f043 030b 	orr.w	r3, r3, #11
 800bbce:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800bbd0:	69fb      	ldr	r3, [r7, #28]
 800bbd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	69fa      	ldr	r2, [r7, #28]
 800bbda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bbde:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800bbe2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	6818      	ldr	r0, [r3, #0]
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	691b      	ldr	r3, [r3, #16]
 800bbec:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800bbf4:	461a      	mov	r2, r3
 800bbf6:	f003 ff29 	bl	800fa4c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	695a      	ldr	r2, [r3, #20]
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800bc08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	4618      	mov	r0, r3
 800bc10:	f003 fe45 	bl	800f89e <USB_ReadInterrupts>
 800bc14:	4603      	mov	r3, r0
 800bc16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bc1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bc1e:	d124      	bne.n	800bc6a <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	4618      	mov	r0, r3
 800bc26:	f003 fedb 	bl	800f9e0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	4618      	mov	r0, r3
 800bc30:	f002 ffe5 	bl	800ebfe <USB_GetDevSpeed>
 800bc34:	4603      	mov	r3, r0
 800bc36:	461a      	mov	r2, r3
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681c      	ldr	r4, [r3, #0]
 800bc40:	f001 f9c8 	bl	800cfd4 <HAL_RCC_GetHCLKFreq>
 800bc44:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800bc4a:	b2db      	uxtb	r3, r3
 800bc4c:	461a      	mov	r2, r3
 800bc4e:	4620      	mov	r0, r4
 800bc50:	f002 fd14 	bl	800e67c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800bc54:	6878      	ldr	r0, [r7, #4]
 800bc56:	f008 ff3a 	bl	8014ace <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	695a      	ldr	r2, [r3, #20]
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800bc68:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	4618      	mov	r0, r3
 800bc70:	f003 fe15 	bl	800f89e <USB_ReadInterrupts>
 800bc74:	4603      	mov	r3, r0
 800bc76:	f003 0310 	and.w	r3, r3, #16
 800bc7a:	2b10      	cmp	r3, #16
 800bc7c:	d161      	bne.n	800bd42 <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	699a      	ldr	r2, [r3, #24]
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	f022 0210 	bic.w	r2, r2, #16
 800bc8c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800bc8e:	6a3b      	ldr	r3, [r7, #32]
 800bc90:	6a1b      	ldr	r3, [r3, #32]
 800bc92:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800bc94:	693b      	ldr	r3, [r7, #16]
 800bc96:	f003 020f 	and.w	r2, r3, #15
 800bc9a:	4613      	mov	r3, r2
 800bc9c:	00db      	lsls	r3, r3, #3
 800bc9e:	1a9b      	subs	r3, r3, r2
 800bca0:	009b      	lsls	r3, r3, #2
 800bca2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800bca6:	687a      	ldr	r2, [r7, #4]
 800bca8:	4413      	add	r3, r2
 800bcaa:	3304      	adds	r3, #4
 800bcac:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800bcae:	693b      	ldr	r3, [r7, #16]
 800bcb0:	0c5b      	lsrs	r3, r3, #17
 800bcb2:	f003 030f 	and.w	r3, r3, #15
 800bcb6:	2b02      	cmp	r3, #2
 800bcb8:	d124      	bne.n	800bd04 <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800bcba:	693a      	ldr	r2, [r7, #16]
 800bcbc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800bcc0:	4013      	ands	r3, r2
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d035      	beq.n	800bd32 <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800bcca:	693b      	ldr	r3, [r7, #16]
 800bccc:	091b      	lsrs	r3, r3, #4
 800bcce:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800bcd0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bcd4:	b29b      	uxth	r3, r3
 800bcd6:	461a      	mov	r2, r3
 800bcd8:	6a38      	ldr	r0, [r7, #32]
 800bcda:	f003 fc8d 	bl	800f5f8 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	68da      	ldr	r2, [r3, #12]
 800bce2:	693b      	ldr	r3, [r7, #16]
 800bce4:	091b      	lsrs	r3, r3, #4
 800bce6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bcea:	441a      	add	r2, r3
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	699a      	ldr	r2, [r3, #24]
 800bcf4:	693b      	ldr	r3, [r7, #16]
 800bcf6:	091b      	lsrs	r3, r3, #4
 800bcf8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bcfc:	441a      	add	r2, r3
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	619a      	str	r2, [r3, #24]
 800bd02:	e016      	b.n	800bd32 <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800bd04:	693b      	ldr	r3, [r7, #16]
 800bd06:	0c5b      	lsrs	r3, r3, #17
 800bd08:	f003 030f 	and.w	r3, r3, #15
 800bd0c:	2b06      	cmp	r3, #6
 800bd0e:	d110      	bne.n	800bd32 <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800bd16:	2208      	movs	r2, #8
 800bd18:	4619      	mov	r1, r3
 800bd1a:	6a38      	ldr	r0, [r7, #32]
 800bd1c:	f003 fc6c 	bl	800f5f8 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	699a      	ldr	r2, [r3, #24]
 800bd24:	693b      	ldr	r3, [r7, #16]
 800bd26:	091b      	lsrs	r3, r3, #4
 800bd28:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bd2c:	441a      	add	r2, r3
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	699a      	ldr	r2, [r3, #24]
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	f042 0210 	orr.w	r2, r2, #16
 800bd40:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	4618      	mov	r0, r3
 800bd48:	f003 fda9 	bl	800f89e <USB_ReadInterrupts>
 800bd4c:	4603      	mov	r3, r0
 800bd4e:	f003 0308 	and.w	r3, r3, #8
 800bd52:	2b08      	cmp	r3, #8
 800bd54:	d10a      	bne.n	800bd6c <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800bd56:	6878      	ldr	r0, [r7, #4]
 800bd58:	f008 feab 	bl	8014ab2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	695a      	ldr	r2, [r3, #20]
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	f002 0208 	and.w	r2, r2, #8
 800bd6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	4618      	mov	r0, r3
 800bd72:	f003 fd94 	bl	800f89e <USB_ReadInterrupts>
 800bd76:	4603      	mov	r3, r0
 800bd78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bd7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bd80:	d10f      	bne.n	800bda2 <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800bd82:	2300      	movs	r3, #0
 800bd84:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800bd86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd88:	b2db      	uxtb	r3, r3
 800bd8a:	4619      	mov	r1, r3
 800bd8c:	6878      	ldr	r0, [r7, #4]
 800bd8e:	f008 ff0d 	bl	8014bac <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	695a      	ldr	r2, [r3, #20]
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800bda0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	4618      	mov	r0, r3
 800bda8:	f003 fd79 	bl	800f89e <USB_ReadInterrupts>
 800bdac:	4603      	mov	r3, r0
 800bdae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bdb2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bdb6:	d10f      	bne.n	800bdd8 <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800bdb8:	2300      	movs	r3, #0
 800bdba:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800bdbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdbe:	b2db      	uxtb	r3, r3
 800bdc0:	4619      	mov	r1, r3
 800bdc2:	6878      	ldr	r0, [r7, #4]
 800bdc4:	f008 fee0 	bl	8014b88 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	695a      	ldr	r2, [r3, #20]
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800bdd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	4618      	mov	r0, r3
 800bdde:	f003 fd5e 	bl	800f89e <USB_ReadInterrupts>
 800bde2:	4603      	mov	r3, r0
 800bde4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bde8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bdec:	d10a      	bne.n	800be04 <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800bdee:	6878      	ldr	r0, [r7, #4]
 800bdf0:	f008 feee 	bl	8014bd0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	695a      	ldr	r2, [r3, #20]
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800be02:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	4618      	mov	r0, r3
 800be0a:	f003 fd48 	bl	800f89e <USB_ReadInterrupts>
 800be0e:	4603      	mov	r3, r0
 800be10:	f003 0304 	and.w	r3, r3, #4
 800be14:	2b04      	cmp	r3, #4
 800be16:	d115      	bne.n	800be44 <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	685b      	ldr	r3, [r3, #4]
 800be1e:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800be20:	693b      	ldr	r3, [r7, #16]
 800be22:	f003 0304 	and.w	r3, r3, #4
 800be26:	2b00      	cmp	r3, #0
 800be28:	d002      	beq.n	800be30 <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800be2a:	6878      	ldr	r0, [r7, #4]
 800be2c:	f008 fede 	bl	8014bec <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	6859      	ldr	r1, [r3, #4]
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	693a      	ldr	r2, [r7, #16]
 800be3c:	430a      	orrs	r2, r1
 800be3e:	605a      	str	r2, [r3, #4]
 800be40:	e000      	b.n	800be44 <HAL_PCD_IRQHandler+0x740>
      return;
 800be42:	bf00      	nop
    }
  }
}
 800be44:	3734      	adds	r7, #52	; 0x34
 800be46:	46bd      	mov	sp, r7
 800be48:	bd90      	pop	{r4, r7, pc}

0800be4a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800be4a:	b580      	push	{r7, lr}
 800be4c:	b082      	sub	sp, #8
 800be4e:	af00      	add	r7, sp, #0
 800be50:	6078      	str	r0, [r7, #4]
 800be52:	460b      	mov	r3, r1
 800be54:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800be5c:	2b01      	cmp	r3, #1
 800be5e:	d101      	bne.n	800be64 <HAL_PCD_SetAddress+0x1a>
 800be60:	2302      	movs	r3, #2
 800be62:	e013      	b.n	800be8c <HAL_PCD_SetAddress+0x42>
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2201      	movs	r2, #1
 800be68:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	78fa      	ldrb	r2, [r7, #3]
 800be70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	78fa      	ldrb	r2, [r7, #3]
 800be7a:	4611      	mov	r1, r2
 800be7c:	4618      	mov	r0, r3
 800be7e:	f003 fcb8 	bl	800f7f2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	2200      	movs	r2, #0
 800be86:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800be8a:	2300      	movs	r3, #0
}
 800be8c:	4618      	mov	r0, r3
 800be8e:	3708      	adds	r7, #8
 800be90:	46bd      	mov	sp, r7
 800be92:	bd80      	pop	{r7, pc}

0800be94 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b084      	sub	sp, #16
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
 800be9c:	4608      	mov	r0, r1
 800be9e:	4611      	mov	r1, r2
 800bea0:	461a      	mov	r2, r3
 800bea2:	4603      	mov	r3, r0
 800bea4:	70fb      	strb	r3, [r7, #3]
 800bea6:	460b      	mov	r3, r1
 800bea8:	803b      	strh	r3, [r7, #0]
 800beaa:	4613      	mov	r3, r2
 800beac:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800beae:	2300      	movs	r3, #0
 800beb0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800beb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	da0f      	bge.n	800beda <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800beba:	78fb      	ldrb	r3, [r7, #3]
 800bebc:	f003 020f 	and.w	r2, r3, #15
 800bec0:	4613      	mov	r3, r2
 800bec2:	00db      	lsls	r3, r3, #3
 800bec4:	1a9b      	subs	r3, r3, r2
 800bec6:	009b      	lsls	r3, r3, #2
 800bec8:	3338      	adds	r3, #56	; 0x38
 800beca:	687a      	ldr	r2, [r7, #4]
 800becc:	4413      	add	r3, r2
 800bece:	3304      	adds	r3, #4
 800bed0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	2201      	movs	r2, #1
 800bed6:	705a      	strb	r2, [r3, #1]
 800bed8:	e00f      	b.n	800befa <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800beda:	78fb      	ldrb	r3, [r7, #3]
 800bedc:	f003 020f 	and.w	r2, r3, #15
 800bee0:	4613      	mov	r3, r2
 800bee2:	00db      	lsls	r3, r3, #3
 800bee4:	1a9b      	subs	r3, r3, r2
 800bee6:	009b      	lsls	r3, r3, #2
 800bee8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800beec:	687a      	ldr	r2, [r7, #4]
 800beee:	4413      	add	r3, r2
 800bef0:	3304      	adds	r3, #4
 800bef2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	2200      	movs	r2, #0
 800bef8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800befa:	78fb      	ldrb	r3, [r7, #3]
 800befc:	f003 030f 	and.w	r3, r3, #15
 800bf00:	b2da      	uxtb	r2, r3
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800bf06:	883a      	ldrh	r2, [r7, #0]
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	78ba      	ldrb	r2, [r7, #2]
 800bf10:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	785b      	ldrb	r3, [r3, #1]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d004      	beq.n	800bf24 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	781b      	ldrb	r3, [r3, #0]
 800bf1e:	b29a      	uxth	r2, r3
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800bf24:	78bb      	ldrb	r3, [r7, #2]
 800bf26:	2b02      	cmp	r3, #2
 800bf28:	d102      	bne.n	800bf30 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800bf36:	2b01      	cmp	r3, #1
 800bf38:	d101      	bne.n	800bf3e <HAL_PCD_EP_Open+0xaa>
 800bf3a:	2302      	movs	r3, #2
 800bf3c:	e00e      	b.n	800bf5c <HAL_PCD_EP_Open+0xc8>
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	2201      	movs	r2, #1
 800bf42:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	68f9      	ldr	r1, [r7, #12]
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	f002 fe7b 	bl	800ec48 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	2200      	movs	r2, #0
 800bf56:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800bf5a:	7afb      	ldrb	r3, [r7, #11]
}
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	3710      	adds	r7, #16
 800bf60:	46bd      	mov	sp, r7
 800bf62:	bd80      	pop	{r7, pc}

0800bf64 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b084      	sub	sp, #16
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
 800bf6c:	460b      	mov	r3, r1
 800bf6e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800bf70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	da0f      	bge.n	800bf98 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bf78:	78fb      	ldrb	r3, [r7, #3]
 800bf7a:	f003 020f 	and.w	r2, r3, #15
 800bf7e:	4613      	mov	r3, r2
 800bf80:	00db      	lsls	r3, r3, #3
 800bf82:	1a9b      	subs	r3, r3, r2
 800bf84:	009b      	lsls	r3, r3, #2
 800bf86:	3338      	adds	r3, #56	; 0x38
 800bf88:	687a      	ldr	r2, [r7, #4]
 800bf8a:	4413      	add	r3, r2
 800bf8c:	3304      	adds	r3, #4
 800bf8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	2201      	movs	r2, #1
 800bf94:	705a      	strb	r2, [r3, #1]
 800bf96:	e00f      	b.n	800bfb8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bf98:	78fb      	ldrb	r3, [r7, #3]
 800bf9a:	f003 020f 	and.w	r2, r3, #15
 800bf9e:	4613      	mov	r3, r2
 800bfa0:	00db      	lsls	r3, r3, #3
 800bfa2:	1a9b      	subs	r3, r3, r2
 800bfa4:	009b      	lsls	r3, r3, #2
 800bfa6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800bfaa:	687a      	ldr	r2, [r7, #4]
 800bfac:	4413      	add	r3, r2
 800bfae:	3304      	adds	r3, #4
 800bfb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800bfb8:	78fb      	ldrb	r3, [r7, #3]
 800bfba:	f003 030f 	and.w	r3, r3, #15
 800bfbe:	b2da      	uxtb	r2, r3
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800bfca:	2b01      	cmp	r3, #1
 800bfcc:	d101      	bne.n	800bfd2 <HAL_PCD_EP_Close+0x6e>
 800bfce:	2302      	movs	r3, #2
 800bfd0:	e00e      	b.n	800bff0 <HAL_PCD_EP_Close+0x8c>
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	2201      	movs	r2, #1
 800bfd6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	68f9      	ldr	r1, [r7, #12]
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	f002 feb9 	bl	800ed58 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	2200      	movs	r2, #0
 800bfea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800bfee:	2300      	movs	r3, #0
}
 800bff0:	4618      	mov	r0, r3
 800bff2:	3710      	adds	r7, #16
 800bff4:	46bd      	mov	sp, r7
 800bff6:	bd80      	pop	{r7, pc}

0800bff8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b086      	sub	sp, #24
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	60f8      	str	r0, [r7, #12]
 800c000:	607a      	str	r2, [r7, #4]
 800c002:	603b      	str	r3, [r7, #0]
 800c004:	460b      	mov	r3, r1
 800c006:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c008:	7afb      	ldrb	r3, [r7, #11]
 800c00a:	f003 020f 	and.w	r2, r3, #15
 800c00e:	4613      	mov	r3, r2
 800c010:	00db      	lsls	r3, r3, #3
 800c012:	1a9b      	subs	r3, r3, r2
 800c014:	009b      	lsls	r3, r3, #2
 800c016:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800c01a:	68fa      	ldr	r2, [r7, #12]
 800c01c:	4413      	add	r3, r2
 800c01e:	3304      	adds	r3, #4
 800c020:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800c022:	697b      	ldr	r3, [r7, #20]
 800c024:	687a      	ldr	r2, [r7, #4]
 800c026:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800c028:	697b      	ldr	r3, [r7, #20]
 800c02a:	683a      	ldr	r2, [r7, #0]
 800c02c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800c02e:	697b      	ldr	r3, [r7, #20]
 800c030:	2200      	movs	r2, #0
 800c032:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800c034:	697b      	ldr	r3, [r7, #20]
 800c036:	2200      	movs	r2, #0
 800c038:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c03a:	7afb      	ldrb	r3, [r7, #11]
 800c03c:	f003 030f 	and.w	r3, r3, #15
 800c040:	b2da      	uxtb	r2, r3
 800c042:	697b      	ldr	r3, [r7, #20]
 800c044:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	691b      	ldr	r3, [r3, #16]
 800c04a:	2b01      	cmp	r3, #1
 800c04c:	d102      	bne.n	800c054 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800c04e:	687a      	ldr	r2, [r7, #4]
 800c050:	697b      	ldr	r3, [r7, #20]
 800c052:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800c054:	7afb      	ldrb	r3, [r7, #11]
 800c056:	f003 030f 	and.w	r3, r3, #15
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d109      	bne.n	800c072 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	6818      	ldr	r0, [r3, #0]
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	691b      	ldr	r3, [r3, #16]
 800c066:	b2db      	uxtb	r3, r3
 800c068:	461a      	mov	r2, r3
 800c06a:	6979      	ldr	r1, [r7, #20]
 800c06c:	f003 f93c 	bl	800f2e8 <USB_EP0StartXfer>
 800c070:	e008      	b.n	800c084 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	6818      	ldr	r0, [r3, #0]
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	691b      	ldr	r3, [r3, #16]
 800c07a:	b2db      	uxtb	r3, r3
 800c07c:	461a      	mov	r2, r3
 800c07e:	6979      	ldr	r1, [r7, #20]
 800c080:	f002 feee 	bl	800ee60 <USB_EPStartXfer>
  }

  return HAL_OK;
 800c084:	2300      	movs	r3, #0
}
 800c086:	4618      	mov	r0, r3
 800c088:	3718      	adds	r7, #24
 800c08a:	46bd      	mov	sp, r7
 800c08c:	bd80      	pop	{r7, pc}

0800c08e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c08e:	b480      	push	{r7}
 800c090:	b083      	sub	sp, #12
 800c092:	af00      	add	r7, sp, #0
 800c094:	6078      	str	r0, [r7, #4]
 800c096:	460b      	mov	r3, r1
 800c098:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800c09a:	78fb      	ldrb	r3, [r7, #3]
 800c09c:	f003 020f 	and.w	r2, r3, #15
 800c0a0:	6879      	ldr	r1, [r7, #4]
 800c0a2:	4613      	mov	r3, r2
 800c0a4:	00db      	lsls	r3, r3, #3
 800c0a6:	1a9b      	subs	r3, r3, r2
 800c0a8:	009b      	lsls	r3, r3, #2
 800c0aa:	440b      	add	r3, r1
 800c0ac:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800c0b0:	681b      	ldr	r3, [r3, #0]
}
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	370c      	adds	r7, #12
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0bc:	4770      	bx	lr

0800c0be <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800c0be:	b580      	push	{r7, lr}
 800c0c0:	b086      	sub	sp, #24
 800c0c2:	af00      	add	r7, sp, #0
 800c0c4:	60f8      	str	r0, [r7, #12]
 800c0c6:	607a      	str	r2, [r7, #4]
 800c0c8:	603b      	str	r3, [r7, #0]
 800c0ca:	460b      	mov	r3, r1
 800c0cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c0ce:	7afb      	ldrb	r3, [r7, #11]
 800c0d0:	f003 020f 	and.w	r2, r3, #15
 800c0d4:	4613      	mov	r3, r2
 800c0d6:	00db      	lsls	r3, r3, #3
 800c0d8:	1a9b      	subs	r3, r3, r2
 800c0da:	009b      	lsls	r3, r3, #2
 800c0dc:	3338      	adds	r3, #56	; 0x38
 800c0de:	68fa      	ldr	r2, [r7, #12]
 800c0e0:	4413      	add	r3, r2
 800c0e2:	3304      	adds	r3, #4
 800c0e4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800c0e6:	697b      	ldr	r3, [r7, #20]
 800c0e8:	687a      	ldr	r2, [r7, #4]
 800c0ea:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800c0ec:	697b      	ldr	r3, [r7, #20]
 800c0ee:	683a      	ldr	r2, [r7, #0]
 800c0f0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800c0f2:	697b      	ldr	r3, [r7, #20]
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800c0f8:	697b      	ldr	r3, [r7, #20]
 800c0fa:	2201      	movs	r2, #1
 800c0fc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c0fe:	7afb      	ldrb	r3, [r7, #11]
 800c100:	f003 030f 	and.w	r3, r3, #15
 800c104:	b2da      	uxtb	r2, r3
 800c106:	697b      	ldr	r3, [r7, #20]
 800c108:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	691b      	ldr	r3, [r3, #16]
 800c10e:	2b01      	cmp	r3, #1
 800c110:	d102      	bne.n	800c118 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800c112:	687a      	ldr	r2, [r7, #4]
 800c114:	697b      	ldr	r3, [r7, #20]
 800c116:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800c118:	7afb      	ldrb	r3, [r7, #11]
 800c11a:	f003 030f 	and.w	r3, r3, #15
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d109      	bne.n	800c136 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	6818      	ldr	r0, [r3, #0]
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	691b      	ldr	r3, [r3, #16]
 800c12a:	b2db      	uxtb	r3, r3
 800c12c:	461a      	mov	r2, r3
 800c12e:	6979      	ldr	r1, [r7, #20]
 800c130:	f003 f8da 	bl	800f2e8 <USB_EP0StartXfer>
 800c134:	e008      	b.n	800c148 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	6818      	ldr	r0, [r3, #0]
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	691b      	ldr	r3, [r3, #16]
 800c13e:	b2db      	uxtb	r3, r3
 800c140:	461a      	mov	r2, r3
 800c142:	6979      	ldr	r1, [r7, #20]
 800c144:	f002 fe8c 	bl	800ee60 <USB_EPStartXfer>
  }

  return HAL_OK;
 800c148:	2300      	movs	r3, #0
}
 800c14a:	4618      	mov	r0, r3
 800c14c:	3718      	adds	r7, #24
 800c14e:	46bd      	mov	sp, r7
 800c150:	bd80      	pop	{r7, pc}

0800c152 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c152:	b580      	push	{r7, lr}
 800c154:	b084      	sub	sp, #16
 800c156:	af00      	add	r7, sp, #0
 800c158:	6078      	str	r0, [r7, #4]
 800c15a:	460b      	mov	r3, r1
 800c15c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800c15e:	78fb      	ldrb	r3, [r7, #3]
 800c160:	f003 020f 	and.w	r2, r3, #15
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	685b      	ldr	r3, [r3, #4]
 800c168:	429a      	cmp	r2, r3
 800c16a:	d901      	bls.n	800c170 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800c16c:	2301      	movs	r3, #1
 800c16e:	e050      	b.n	800c212 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800c170:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c174:	2b00      	cmp	r3, #0
 800c176:	da0f      	bge.n	800c198 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c178:	78fb      	ldrb	r3, [r7, #3]
 800c17a:	f003 020f 	and.w	r2, r3, #15
 800c17e:	4613      	mov	r3, r2
 800c180:	00db      	lsls	r3, r3, #3
 800c182:	1a9b      	subs	r3, r3, r2
 800c184:	009b      	lsls	r3, r3, #2
 800c186:	3338      	adds	r3, #56	; 0x38
 800c188:	687a      	ldr	r2, [r7, #4]
 800c18a:	4413      	add	r3, r2
 800c18c:	3304      	adds	r3, #4
 800c18e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	2201      	movs	r2, #1
 800c194:	705a      	strb	r2, [r3, #1]
 800c196:	e00d      	b.n	800c1b4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800c198:	78fa      	ldrb	r2, [r7, #3]
 800c19a:	4613      	mov	r3, r2
 800c19c:	00db      	lsls	r3, r3, #3
 800c19e:	1a9b      	subs	r3, r3, r2
 800c1a0:	009b      	lsls	r3, r3, #2
 800c1a2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800c1a6:	687a      	ldr	r2, [r7, #4]
 800c1a8:	4413      	add	r3, r2
 800c1aa:	3304      	adds	r3, #4
 800c1ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	2201      	movs	r2, #1
 800c1b8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c1ba:	78fb      	ldrb	r3, [r7, #3]
 800c1bc:	f003 030f 	and.w	r3, r3, #15
 800c1c0:	b2da      	uxtb	r2, r3
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800c1cc:	2b01      	cmp	r3, #1
 800c1ce:	d101      	bne.n	800c1d4 <HAL_PCD_EP_SetStall+0x82>
 800c1d0:	2302      	movs	r3, #2
 800c1d2:	e01e      	b.n	800c212 <HAL_PCD_EP_SetStall+0xc0>
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2201      	movs	r2, #1
 800c1d8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	68f9      	ldr	r1, [r7, #12]
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	f003 fa31 	bl	800f64a <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800c1e8:	78fb      	ldrb	r3, [r7, #3]
 800c1ea:	f003 030f 	and.w	r3, r3, #15
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d10a      	bne.n	800c208 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	6818      	ldr	r0, [r3, #0]
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	691b      	ldr	r3, [r3, #16]
 800c1fa:	b2d9      	uxtb	r1, r3
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c202:	461a      	mov	r2, r3
 800c204:	f003 fc22 	bl	800fa4c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2200      	movs	r2, #0
 800c20c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800c210:	2300      	movs	r3, #0
}
 800c212:	4618      	mov	r0, r3
 800c214:	3710      	adds	r7, #16
 800c216:	46bd      	mov	sp, r7
 800c218:	bd80      	pop	{r7, pc}

0800c21a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c21a:	b580      	push	{r7, lr}
 800c21c:	b084      	sub	sp, #16
 800c21e:	af00      	add	r7, sp, #0
 800c220:	6078      	str	r0, [r7, #4]
 800c222:	460b      	mov	r3, r1
 800c224:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800c226:	78fb      	ldrb	r3, [r7, #3]
 800c228:	f003 020f 	and.w	r2, r3, #15
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	685b      	ldr	r3, [r3, #4]
 800c230:	429a      	cmp	r2, r3
 800c232:	d901      	bls.n	800c238 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800c234:	2301      	movs	r3, #1
 800c236:	e042      	b.n	800c2be <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800c238:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	da0f      	bge.n	800c260 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c240:	78fb      	ldrb	r3, [r7, #3]
 800c242:	f003 020f 	and.w	r2, r3, #15
 800c246:	4613      	mov	r3, r2
 800c248:	00db      	lsls	r3, r3, #3
 800c24a:	1a9b      	subs	r3, r3, r2
 800c24c:	009b      	lsls	r3, r3, #2
 800c24e:	3338      	adds	r3, #56	; 0x38
 800c250:	687a      	ldr	r2, [r7, #4]
 800c252:	4413      	add	r3, r2
 800c254:	3304      	adds	r3, #4
 800c256:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	2201      	movs	r2, #1
 800c25c:	705a      	strb	r2, [r3, #1]
 800c25e:	e00f      	b.n	800c280 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c260:	78fb      	ldrb	r3, [r7, #3]
 800c262:	f003 020f 	and.w	r2, r3, #15
 800c266:	4613      	mov	r3, r2
 800c268:	00db      	lsls	r3, r3, #3
 800c26a:	1a9b      	subs	r3, r3, r2
 800c26c:	009b      	lsls	r3, r3, #2
 800c26e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800c272:	687a      	ldr	r2, [r7, #4]
 800c274:	4413      	add	r3, r2
 800c276:	3304      	adds	r3, #4
 800c278:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	2200      	movs	r2, #0
 800c27e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	2200      	movs	r2, #0
 800c284:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c286:	78fb      	ldrb	r3, [r7, #3]
 800c288:	f003 030f 	and.w	r3, r3, #15
 800c28c:	b2da      	uxtb	r2, r3
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800c298:	2b01      	cmp	r3, #1
 800c29a:	d101      	bne.n	800c2a0 <HAL_PCD_EP_ClrStall+0x86>
 800c29c:	2302      	movs	r3, #2
 800c29e:	e00e      	b.n	800c2be <HAL_PCD_EP_ClrStall+0xa4>
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	2201      	movs	r2, #1
 800c2a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	68f9      	ldr	r1, [r7, #12]
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	f003 fa39 	bl	800f726 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800c2bc:	2300      	movs	r3, #0
}
 800c2be:	4618      	mov	r0, r3
 800c2c0:	3710      	adds	r7, #16
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	bd80      	pop	{r7, pc}

0800c2c6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c2c6:	b580      	push	{r7, lr}
 800c2c8:	b08a      	sub	sp, #40	; 0x28
 800c2ca:	af02      	add	r7, sp, #8
 800c2cc:	6078      	str	r0, [r7, #4]
 800c2ce:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2d6:	697b      	ldr	r3, [r7, #20]
 800c2d8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800c2da:	683a      	ldr	r2, [r7, #0]
 800c2dc:	4613      	mov	r3, r2
 800c2de:	00db      	lsls	r3, r3, #3
 800c2e0:	1a9b      	subs	r3, r3, r2
 800c2e2:	009b      	lsls	r3, r3, #2
 800c2e4:	3338      	adds	r3, #56	; 0x38
 800c2e6:	687a      	ldr	r2, [r7, #4]
 800c2e8:	4413      	add	r3, r2
 800c2ea:	3304      	adds	r3, #4
 800c2ec:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	699a      	ldr	r2, [r3, #24]
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	695b      	ldr	r3, [r3, #20]
 800c2f6:	429a      	cmp	r2, r3
 800c2f8:	d901      	bls.n	800c2fe <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800c2fa:	2301      	movs	r3, #1
 800c2fc:	e06c      	b.n	800c3d8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	695a      	ldr	r2, [r3, #20]
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	699b      	ldr	r3, [r3, #24]
 800c306:	1ad3      	subs	r3, r2, r3
 800c308:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	689b      	ldr	r3, [r3, #8]
 800c30e:	69fa      	ldr	r2, [r7, #28]
 800c310:	429a      	cmp	r2, r3
 800c312:	d902      	bls.n	800c31a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	689b      	ldr	r3, [r3, #8]
 800c318:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800c31a:	69fb      	ldr	r3, [r7, #28]
 800c31c:	3303      	adds	r3, #3
 800c31e:	089b      	lsrs	r3, r3, #2
 800c320:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c322:	e02b      	b.n	800c37c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	695a      	ldr	r2, [r3, #20]
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	699b      	ldr	r3, [r3, #24]
 800c32c:	1ad3      	subs	r3, r2, r3
 800c32e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	689b      	ldr	r3, [r3, #8]
 800c334:	69fa      	ldr	r2, [r7, #28]
 800c336:	429a      	cmp	r2, r3
 800c338:	d902      	bls.n	800c340 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	689b      	ldr	r3, [r3, #8]
 800c33e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800c340:	69fb      	ldr	r3, [r7, #28]
 800c342:	3303      	adds	r3, #3
 800c344:	089b      	lsrs	r3, r3, #2
 800c346:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	68d9      	ldr	r1, [r3, #12]
 800c34c:	683b      	ldr	r3, [r7, #0]
 800c34e:	b2da      	uxtb	r2, r3
 800c350:	69fb      	ldr	r3, [r7, #28]
 800c352:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800c358:	b2db      	uxtb	r3, r3
 800c35a:	9300      	str	r3, [sp, #0]
 800c35c:	4603      	mov	r3, r0
 800c35e:	6978      	ldr	r0, [r7, #20]
 800c360:	f003 f915 	bl	800f58e <USB_WritePacket>

    ep->xfer_buff  += len;
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	68da      	ldr	r2, [r3, #12]
 800c368:	69fb      	ldr	r3, [r7, #28]
 800c36a:	441a      	add	r2, r3
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	699a      	ldr	r2, [r3, #24]
 800c374:	69fb      	ldr	r3, [r7, #28]
 800c376:	441a      	add	r2, r3
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c37c:	683b      	ldr	r3, [r7, #0]
 800c37e:	015a      	lsls	r2, r3, #5
 800c380:	693b      	ldr	r3, [r7, #16]
 800c382:	4413      	add	r3, r2
 800c384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c388:	699b      	ldr	r3, [r3, #24]
 800c38a:	b29b      	uxth	r3, r3
 800c38c:	69ba      	ldr	r2, [r7, #24]
 800c38e:	429a      	cmp	r2, r3
 800c390:	d809      	bhi.n	800c3a6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	699a      	ldr	r2, [r3, #24]
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c39a:	429a      	cmp	r2, r3
 800c39c:	d203      	bcs.n	800c3a6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	695b      	ldr	r3, [r3, #20]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d1be      	bne.n	800c324 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	695a      	ldr	r2, [r3, #20]
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	699b      	ldr	r3, [r3, #24]
 800c3ae:	429a      	cmp	r2, r3
 800c3b0:	d811      	bhi.n	800c3d6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800c3b2:	683b      	ldr	r3, [r7, #0]
 800c3b4:	f003 030f 	and.w	r3, r3, #15
 800c3b8:	2201      	movs	r2, #1
 800c3ba:	fa02 f303 	lsl.w	r3, r2, r3
 800c3be:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800c3c0:	693b      	ldr	r3, [r7, #16]
 800c3c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c3c8:	68bb      	ldr	r3, [r7, #8]
 800c3ca:	43db      	mvns	r3, r3
 800c3cc:	6939      	ldr	r1, [r7, #16]
 800c3ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c3d2:	4013      	ands	r3, r2
 800c3d4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800c3d6:	2300      	movs	r3, #0
}
 800c3d8:	4618      	mov	r0, r3
 800c3da:	3720      	adds	r7, #32
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bd80      	pop	{r7, pc}

0800c3e0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b086      	sub	sp, #24
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
 800c3e8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3f0:	697b      	ldr	r3, [r7, #20]
 800c3f2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c3f4:	697b      	ldr	r3, [r7, #20]
 800c3f6:	333c      	adds	r3, #60	; 0x3c
 800c3f8:	3304      	adds	r3, #4
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	015a      	lsls	r2, r3, #5
 800c402:	693b      	ldr	r3, [r7, #16]
 800c404:	4413      	add	r3, r2
 800c406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c40a:	689b      	ldr	r3, [r3, #8]
 800c40c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	691b      	ldr	r3, [r3, #16]
 800c412:	2b01      	cmp	r3, #1
 800c414:	f040 80b3 	bne.w	800c57e <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800c418:	68bb      	ldr	r3, [r7, #8]
 800c41a:	f003 0308 	and.w	r3, r3, #8
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d028      	beq.n	800c474 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	4a70      	ldr	r2, [pc, #448]	; (800c5e8 <PCD_EP_OutXfrComplete_int+0x208>)
 800c426:	4293      	cmp	r3, r2
 800c428:	d90e      	bls.n	800c448 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c42a:	68bb      	ldr	r3, [r7, #8]
 800c42c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c430:	2b00      	cmp	r3, #0
 800c432:	d009      	beq.n	800c448 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c434:	683b      	ldr	r3, [r7, #0]
 800c436:	015a      	lsls	r2, r3, #5
 800c438:	693b      	ldr	r3, [r7, #16]
 800c43a:	4413      	add	r3, r2
 800c43c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c440:	461a      	mov	r2, r3
 800c442:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c446:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 800c448:	6878      	ldr	r0, [r7, #4]
 800c44a:	f008 faeb 	bl	8014a24 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	6818      	ldr	r0, [r3, #0]
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c458:	461a      	mov	r2, r3
 800c45a:	2101      	movs	r1, #1
 800c45c:	f003 faf6 	bl	800fa4c <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	015a      	lsls	r2, r3, #5
 800c464:	693b      	ldr	r3, [r7, #16]
 800c466:	4413      	add	r3, r2
 800c468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c46c:	461a      	mov	r2, r3
 800c46e:	2308      	movs	r3, #8
 800c470:	6093      	str	r3, [r2, #8]
 800c472:	e0b3      	b.n	800c5dc <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800c474:	68bb      	ldr	r3, [r7, #8]
 800c476:	f003 0320 	and.w	r3, r3, #32
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d009      	beq.n	800c492 <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c47e:	683b      	ldr	r3, [r7, #0]
 800c480:	015a      	lsls	r2, r3, #5
 800c482:	693b      	ldr	r3, [r7, #16]
 800c484:	4413      	add	r3, r2
 800c486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c48a:	461a      	mov	r2, r3
 800c48c:	2320      	movs	r3, #32
 800c48e:	6093      	str	r3, [r2, #8]
 800c490:	e0a4      	b.n	800c5dc <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800c492:	68bb      	ldr	r3, [r7, #8]
 800c494:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800c498:	2b00      	cmp	r3, #0
 800c49a:	f040 809f 	bne.w	800c5dc <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	4a51      	ldr	r2, [pc, #324]	; (800c5e8 <PCD_EP_OutXfrComplete_int+0x208>)
 800c4a2:	4293      	cmp	r3, r2
 800c4a4:	d90f      	bls.n	800c4c6 <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c4a6:	68bb      	ldr	r3, [r7, #8]
 800c4a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d00a      	beq.n	800c4c6 <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c4b0:	683b      	ldr	r3, [r7, #0]
 800c4b2:	015a      	lsls	r2, r3, #5
 800c4b4:	693b      	ldr	r3, [r7, #16]
 800c4b6:	4413      	add	r3, r2
 800c4b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4bc:	461a      	mov	r2, r3
 800c4be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c4c2:	6093      	str	r3, [r2, #8]
 800c4c4:	e08a      	b.n	800c5dc <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800c4c6:	6879      	ldr	r1, [r7, #4]
 800c4c8:	683a      	ldr	r2, [r7, #0]
 800c4ca:	4613      	mov	r3, r2
 800c4cc:	00db      	lsls	r3, r3, #3
 800c4ce:	1a9b      	subs	r3, r3, r2
 800c4d0:	009b      	lsls	r3, r3, #2
 800c4d2:	440b      	add	r3, r1
 800c4d4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800c4d8:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800c4da:	683b      	ldr	r3, [r7, #0]
 800c4dc:	0159      	lsls	r1, r3, #5
 800c4de:	693b      	ldr	r3, [r7, #16]
 800c4e0:	440b      	add	r3, r1
 800c4e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4e6:	691b      	ldr	r3, [r3, #16]
 800c4e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800c4ec:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800c4ee:	6878      	ldr	r0, [r7, #4]
 800c4f0:	683a      	ldr	r2, [r7, #0]
 800c4f2:	4613      	mov	r3, r2
 800c4f4:	00db      	lsls	r3, r3, #3
 800c4f6:	1a9b      	subs	r3, r3, r2
 800c4f8:	009b      	lsls	r3, r3, #2
 800c4fa:	4403      	add	r3, r0
 800c4fc:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800c500:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800c502:	6879      	ldr	r1, [r7, #4]
 800c504:	683a      	ldr	r2, [r7, #0]
 800c506:	4613      	mov	r3, r2
 800c508:	00db      	lsls	r3, r3, #3
 800c50a:	1a9b      	subs	r3, r3, r2
 800c50c:	009b      	lsls	r3, r3, #2
 800c50e:	440b      	add	r3, r1
 800c510:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c514:	6819      	ldr	r1, [r3, #0]
 800c516:	6878      	ldr	r0, [r7, #4]
 800c518:	683a      	ldr	r2, [r7, #0]
 800c51a:	4613      	mov	r3, r2
 800c51c:	00db      	lsls	r3, r3, #3
 800c51e:	1a9b      	subs	r3, r3, r2
 800c520:	009b      	lsls	r3, r3, #2
 800c522:	4403      	add	r3, r0
 800c524:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	4419      	add	r1, r3
 800c52c:	6878      	ldr	r0, [r7, #4]
 800c52e:	683a      	ldr	r2, [r7, #0]
 800c530:	4613      	mov	r3, r2
 800c532:	00db      	lsls	r3, r3, #3
 800c534:	1a9b      	subs	r3, r3, r2
 800c536:	009b      	lsls	r3, r3, #2
 800c538:	4403      	add	r3, r0
 800c53a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c53e:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	b2db      	uxtb	r3, r3
 800c544:	4619      	mov	r1, r3
 800c546:	6878      	ldr	r0, [r7, #4]
 800c548:	f008 fa7e 	bl	8014a48 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800c54c:	683b      	ldr	r3, [r7, #0]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d144      	bne.n	800c5dc <PCD_EP_OutXfrComplete_int+0x1fc>
 800c552:	6879      	ldr	r1, [r7, #4]
 800c554:	683a      	ldr	r2, [r7, #0]
 800c556:	4613      	mov	r3, r2
 800c558:	00db      	lsls	r3, r3, #3
 800c55a:	1a9b      	subs	r3, r3, r2
 800c55c:	009b      	lsls	r3, r3, #2
 800c55e:	440b      	add	r3, r1
 800c560:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d138      	bne.n	800c5dc <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	6818      	ldr	r0, [r3, #0]
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c574:	461a      	mov	r2, r3
 800c576:	2101      	movs	r1, #1
 800c578:	f003 fa68 	bl	800fa4c <USB_EP0_OutStart>
 800c57c:	e02e      	b.n	800c5dc <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	4a1a      	ldr	r2, [pc, #104]	; (800c5ec <PCD_EP_OutXfrComplete_int+0x20c>)
 800c582:	4293      	cmp	r3, r2
 800c584:	d124      	bne.n	800c5d0 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800c586:	68bb      	ldr	r3, [r7, #8]
 800c588:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d00a      	beq.n	800c5a6 <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c590:	683b      	ldr	r3, [r7, #0]
 800c592:	015a      	lsls	r2, r3, #5
 800c594:	693b      	ldr	r3, [r7, #16]
 800c596:	4413      	add	r3, r2
 800c598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c59c:	461a      	mov	r2, r3
 800c59e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c5a2:	6093      	str	r3, [r2, #8]
 800c5a4:	e01a      	b.n	800c5dc <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800c5a6:	68bb      	ldr	r3, [r7, #8]
 800c5a8:	f003 0320 	and.w	r3, r3, #32
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d008      	beq.n	800c5c2 <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c5b0:	683b      	ldr	r3, [r7, #0]
 800c5b2:	015a      	lsls	r2, r3, #5
 800c5b4:	693b      	ldr	r3, [r7, #16]
 800c5b6:	4413      	add	r3, r2
 800c5b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5bc:	461a      	mov	r2, r3
 800c5be:	2320      	movs	r3, #32
 800c5c0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c5c2:	683b      	ldr	r3, [r7, #0]
 800c5c4:	b2db      	uxtb	r3, r3
 800c5c6:	4619      	mov	r1, r3
 800c5c8:	6878      	ldr	r0, [r7, #4]
 800c5ca:	f008 fa3d 	bl	8014a48 <HAL_PCD_DataOutStageCallback>
 800c5ce:	e005      	b.n	800c5dc <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c5d0:	683b      	ldr	r3, [r7, #0]
 800c5d2:	b2db      	uxtb	r3, r3
 800c5d4:	4619      	mov	r1, r3
 800c5d6:	6878      	ldr	r0, [r7, #4]
 800c5d8:	f008 fa36 	bl	8014a48 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800c5dc:	2300      	movs	r3, #0
}
 800c5de:	4618      	mov	r0, r3
 800c5e0:	3718      	adds	r7, #24
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	bd80      	pop	{r7, pc}
 800c5e6:	bf00      	nop
 800c5e8:	4f54300a 	.word	0x4f54300a
 800c5ec:	4f54310a 	.word	0x4f54310a

0800c5f0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	b086      	sub	sp, #24
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	6078      	str	r0, [r7, #4]
 800c5f8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c600:	697b      	ldr	r3, [r7, #20]
 800c602:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c604:	697b      	ldr	r3, [r7, #20]
 800c606:	333c      	adds	r3, #60	; 0x3c
 800c608:	3304      	adds	r3, #4
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800c60e:	683b      	ldr	r3, [r7, #0]
 800c610:	015a      	lsls	r2, r3, #5
 800c612:	693b      	ldr	r3, [r7, #16]
 800c614:	4413      	add	r3, r2
 800c616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c61a:	689b      	ldr	r3, [r3, #8]
 800c61c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	691b      	ldr	r3, [r3, #16]
 800c622:	2b01      	cmp	r3, #1
 800c624:	d113      	bne.n	800c64e <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	4a1f      	ldr	r2, [pc, #124]	; (800c6a8 <PCD_EP_OutSetupPacket_int+0xb8>)
 800c62a:	4293      	cmp	r3, r2
 800c62c:	d922      	bls.n	800c674 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c62e:	68bb      	ldr	r3, [r7, #8]
 800c630:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c634:	2b00      	cmp	r3, #0
 800c636:	d01d      	beq.n	800c674 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c638:	683b      	ldr	r3, [r7, #0]
 800c63a:	015a      	lsls	r2, r3, #5
 800c63c:	693b      	ldr	r3, [r7, #16]
 800c63e:	4413      	add	r3, r2
 800c640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c644:	461a      	mov	r2, r3
 800c646:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c64a:	6093      	str	r3, [r2, #8]
 800c64c:	e012      	b.n	800c674 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	4a16      	ldr	r2, [pc, #88]	; (800c6ac <PCD_EP_OutSetupPacket_int+0xbc>)
 800c652:	4293      	cmp	r3, r2
 800c654:	d10e      	bne.n	800c674 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c656:	68bb      	ldr	r3, [r7, #8]
 800c658:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d009      	beq.n	800c674 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c660:	683b      	ldr	r3, [r7, #0]
 800c662:	015a      	lsls	r2, r3, #5
 800c664:	693b      	ldr	r3, [r7, #16]
 800c666:	4413      	add	r3, r2
 800c668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c66c:	461a      	mov	r2, r3
 800c66e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c672:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800c674:	6878      	ldr	r0, [r7, #4]
 800c676:	f008 f9d5 	bl	8014a24 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	4a0a      	ldr	r2, [pc, #40]	; (800c6a8 <PCD_EP_OutSetupPacket_int+0xb8>)
 800c67e:	4293      	cmp	r3, r2
 800c680:	d90c      	bls.n	800c69c <PCD_EP_OutSetupPacket_int+0xac>
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	691b      	ldr	r3, [r3, #16]
 800c686:	2b01      	cmp	r3, #1
 800c688:	d108      	bne.n	800c69c <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	6818      	ldr	r0, [r3, #0]
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c694:	461a      	mov	r2, r3
 800c696:	2101      	movs	r1, #1
 800c698:	f003 f9d8 	bl	800fa4c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800c69c:	2300      	movs	r3, #0
}
 800c69e:	4618      	mov	r0, r3
 800c6a0:	3718      	adds	r7, #24
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	bd80      	pop	{r7, pc}
 800c6a6:	bf00      	nop
 800c6a8:	4f54300a 	.word	0x4f54300a
 800c6ac:	4f54310a 	.word	0x4f54310a

0800c6b0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800c6b0:	b480      	push	{r7}
 800c6b2:	b085      	sub	sp, #20
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
 800c6b8:	460b      	mov	r3, r1
 800c6ba:	70fb      	strb	r3, [r7, #3]
 800c6bc:	4613      	mov	r3, r2
 800c6be:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6c6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800c6c8:	78fb      	ldrb	r3, [r7, #3]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d107      	bne.n	800c6de <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800c6ce:	883b      	ldrh	r3, [r7, #0]
 800c6d0:	0419      	lsls	r1, r3, #16
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	68ba      	ldr	r2, [r7, #8]
 800c6d8:	430a      	orrs	r2, r1
 800c6da:	629a      	str	r2, [r3, #40]	; 0x28
 800c6dc:	e028      	b.n	800c730 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6e4:	0c1b      	lsrs	r3, r3, #16
 800c6e6:	68ba      	ldr	r2, [r7, #8]
 800c6e8:	4413      	add	r3, r2
 800c6ea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	73fb      	strb	r3, [r7, #15]
 800c6f0:	e00d      	b.n	800c70e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681a      	ldr	r2, [r3, #0]
 800c6f6:	7bfb      	ldrb	r3, [r7, #15]
 800c6f8:	3340      	adds	r3, #64	; 0x40
 800c6fa:	009b      	lsls	r3, r3, #2
 800c6fc:	4413      	add	r3, r2
 800c6fe:	685b      	ldr	r3, [r3, #4]
 800c700:	0c1b      	lsrs	r3, r3, #16
 800c702:	68ba      	ldr	r2, [r7, #8]
 800c704:	4413      	add	r3, r2
 800c706:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800c708:	7bfb      	ldrb	r3, [r7, #15]
 800c70a:	3301      	adds	r3, #1
 800c70c:	73fb      	strb	r3, [r7, #15]
 800c70e:	7bfa      	ldrb	r2, [r7, #15]
 800c710:	78fb      	ldrb	r3, [r7, #3]
 800c712:	3b01      	subs	r3, #1
 800c714:	429a      	cmp	r2, r3
 800c716:	d3ec      	bcc.n	800c6f2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800c718:	883b      	ldrh	r3, [r7, #0]
 800c71a:	0418      	lsls	r0, r3, #16
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	6819      	ldr	r1, [r3, #0]
 800c720:	78fb      	ldrb	r3, [r7, #3]
 800c722:	3b01      	subs	r3, #1
 800c724:	68ba      	ldr	r2, [r7, #8]
 800c726:	4302      	orrs	r2, r0
 800c728:	3340      	adds	r3, #64	; 0x40
 800c72a:	009b      	lsls	r3, r3, #2
 800c72c:	440b      	add	r3, r1
 800c72e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800c730:	2300      	movs	r3, #0
}
 800c732:	4618      	mov	r0, r3
 800c734:	3714      	adds	r7, #20
 800c736:	46bd      	mov	sp, r7
 800c738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73c:	4770      	bx	lr

0800c73e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800c73e:	b480      	push	{r7}
 800c740:	b083      	sub	sp, #12
 800c742:	af00      	add	r7, sp, #0
 800c744:	6078      	str	r0, [r7, #4]
 800c746:	460b      	mov	r3, r1
 800c748:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	887a      	ldrh	r2, [r7, #2]
 800c750:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800c752:	2300      	movs	r3, #0
}
 800c754:	4618      	mov	r0, r3
 800c756:	370c      	adds	r7, #12
 800c758:	46bd      	mov	sp, r7
 800c75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75e:	4770      	bx	lr

0800c760 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c760:	b480      	push	{r7}
 800c762:	b083      	sub	sp, #12
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]
 800c768:	460b      	mov	r3, r1
 800c76a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800c76c:	bf00      	nop
 800c76e:	370c      	adds	r7, #12
 800c770:	46bd      	mov	sp, r7
 800c772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c776:	4770      	bx	lr

0800c778 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b086      	sub	sp, #24
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d101      	bne.n	800c78a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c786:	2301      	movs	r3, #1
 800c788:	e25b      	b.n	800cc42 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	f003 0301 	and.w	r3, r3, #1
 800c792:	2b00      	cmp	r3, #0
 800c794:	d075      	beq.n	800c882 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800c796:	4ba3      	ldr	r3, [pc, #652]	; (800ca24 <HAL_RCC_OscConfig+0x2ac>)
 800c798:	689b      	ldr	r3, [r3, #8]
 800c79a:	f003 030c 	and.w	r3, r3, #12
 800c79e:	2b04      	cmp	r3, #4
 800c7a0:	d00c      	beq.n	800c7bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c7a2:	4ba0      	ldr	r3, [pc, #640]	; (800ca24 <HAL_RCC_OscConfig+0x2ac>)
 800c7a4:	689b      	ldr	r3, [r3, #8]
 800c7a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800c7aa:	2b08      	cmp	r3, #8
 800c7ac:	d112      	bne.n	800c7d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c7ae:	4b9d      	ldr	r3, [pc, #628]	; (800ca24 <HAL_RCC_OscConfig+0x2ac>)
 800c7b0:	685b      	ldr	r3, [r3, #4]
 800c7b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c7b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c7ba:	d10b      	bne.n	800c7d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c7bc:	4b99      	ldr	r3, [pc, #612]	; (800ca24 <HAL_RCC_OscConfig+0x2ac>)
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d05b      	beq.n	800c880 <HAL_RCC_OscConfig+0x108>
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	685b      	ldr	r3, [r3, #4]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d157      	bne.n	800c880 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800c7d0:	2301      	movs	r3, #1
 800c7d2:	e236      	b.n	800cc42 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	685b      	ldr	r3, [r3, #4]
 800c7d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c7dc:	d106      	bne.n	800c7ec <HAL_RCC_OscConfig+0x74>
 800c7de:	4b91      	ldr	r3, [pc, #580]	; (800ca24 <HAL_RCC_OscConfig+0x2ac>)
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	4a90      	ldr	r2, [pc, #576]	; (800ca24 <HAL_RCC_OscConfig+0x2ac>)
 800c7e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c7e8:	6013      	str	r3, [r2, #0]
 800c7ea:	e01d      	b.n	800c828 <HAL_RCC_OscConfig+0xb0>
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	685b      	ldr	r3, [r3, #4]
 800c7f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c7f4:	d10c      	bne.n	800c810 <HAL_RCC_OscConfig+0x98>
 800c7f6:	4b8b      	ldr	r3, [pc, #556]	; (800ca24 <HAL_RCC_OscConfig+0x2ac>)
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	4a8a      	ldr	r2, [pc, #552]	; (800ca24 <HAL_RCC_OscConfig+0x2ac>)
 800c7fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c800:	6013      	str	r3, [r2, #0]
 800c802:	4b88      	ldr	r3, [pc, #544]	; (800ca24 <HAL_RCC_OscConfig+0x2ac>)
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	4a87      	ldr	r2, [pc, #540]	; (800ca24 <HAL_RCC_OscConfig+0x2ac>)
 800c808:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c80c:	6013      	str	r3, [r2, #0]
 800c80e:	e00b      	b.n	800c828 <HAL_RCC_OscConfig+0xb0>
 800c810:	4b84      	ldr	r3, [pc, #528]	; (800ca24 <HAL_RCC_OscConfig+0x2ac>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	4a83      	ldr	r2, [pc, #524]	; (800ca24 <HAL_RCC_OscConfig+0x2ac>)
 800c816:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c81a:	6013      	str	r3, [r2, #0]
 800c81c:	4b81      	ldr	r3, [pc, #516]	; (800ca24 <HAL_RCC_OscConfig+0x2ac>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	4a80      	ldr	r2, [pc, #512]	; (800ca24 <HAL_RCC_OscConfig+0x2ac>)
 800c822:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c826:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	685b      	ldr	r3, [r3, #4]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d013      	beq.n	800c858 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c830:	f7fd ff60 	bl	800a6f4 <HAL_GetTick>
 800c834:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c836:	e008      	b.n	800c84a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c838:	f7fd ff5c 	bl	800a6f4 <HAL_GetTick>
 800c83c:	4602      	mov	r2, r0
 800c83e:	693b      	ldr	r3, [r7, #16]
 800c840:	1ad3      	subs	r3, r2, r3
 800c842:	2b64      	cmp	r3, #100	; 0x64
 800c844:	d901      	bls.n	800c84a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800c846:	2303      	movs	r3, #3
 800c848:	e1fb      	b.n	800cc42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c84a:	4b76      	ldr	r3, [pc, #472]	; (800ca24 <HAL_RCC_OscConfig+0x2ac>)
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c852:	2b00      	cmp	r3, #0
 800c854:	d0f0      	beq.n	800c838 <HAL_RCC_OscConfig+0xc0>
 800c856:	e014      	b.n	800c882 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c858:	f7fd ff4c 	bl	800a6f4 <HAL_GetTick>
 800c85c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c85e:	e008      	b.n	800c872 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c860:	f7fd ff48 	bl	800a6f4 <HAL_GetTick>
 800c864:	4602      	mov	r2, r0
 800c866:	693b      	ldr	r3, [r7, #16]
 800c868:	1ad3      	subs	r3, r2, r3
 800c86a:	2b64      	cmp	r3, #100	; 0x64
 800c86c:	d901      	bls.n	800c872 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c86e:	2303      	movs	r3, #3
 800c870:	e1e7      	b.n	800cc42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c872:	4b6c      	ldr	r3, [pc, #432]	; (800ca24 <HAL_RCC_OscConfig+0x2ac>)
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d1f0      	bne.n	800c860 <HAL_RCC_OscConfig+0xe8>
 800c87e:	e000      	b.n	800c882 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c880:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	f003 0302 	and.w	r3, r3, #2
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d063      	beq.n	800c956 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800c88e:	4b65      	ldr	r3, [pc, #404]	; (800ca24 <HAL_RCC_OscConfig+0x2ac>)
 800c890:	689b      	ldr	r3, [r3, #8]
 800c892:	f003 030c 	and.w	r3, r3, #12
 800c896:	2b00      	cmp	r3, #0
 800c898:	d00b      	beq.n	800c8b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c89a:	4b62      	ldr	r3, [pc, #392]	; (800ca24 <HAL_RCC_OscConfig+0x2ac>)
 800c89c:	689b      	ldr	r3, [r3, #8]
 800c89e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800c8a2:	2b08      	cmp	r3, #8
 800c8a4:	d11c      	bne.n	800c8e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c8a6:	4b5f      	ldr	r3, [pc, #380]	; (800ca24 <HAL_RCC_OscConfig+0x2ac>)
 800c8a8:	685b      	ldr	r3, [r3, #4]
 800c8aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d116      	bne.n	800c8e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c8b2:	4b5c      	ldr	r3, [pc, #368]	; (800ca24 <HAL_RCC_OscConfig+0x2ac>)
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	f003 0302 	and.w	r3, r3, #2
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d005      	beq.n	800c8ca <HAL_RCC_OscConfig+0x152>
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	68db      	ldr	r3, [r3, #12]
 800c8c2:	2b01      	cmp	r3, #1
 800c8c4:	d001      	beq.n	800c8ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800c8c6:	2301      	movs	r3, #1
 800c8c8:	e1bb      	b.n	800cc42 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c8ca:	4b56      	ldr	r3, [pc, #344]	; (800ca24 <HAL_RCC_OscConfig+0x2ac>)
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	691b      	ldr	r3, [r3, #16]
 800c8d6:	00db      	lsls	r3, r3, #3
 800c8d8:	4952      	ldr	r1, [pc, #328]	; (800ca24 <HAL_RCC_OscConfig+0x2ac>)
 800c8da:	4313      	orrs	r3, r2
 800c8dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c8de:	e03a      	b.n	800c956 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	68db      	ldr	r3, [r3, #12]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d020      	beq.n	800c92a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c8e8:	4b4f      	ldr	r3, [pc, #316]	; (800ca28 <HAL_RCC_OscConfig+0x2b0>)
 800c8ea:	2201      	movs	r2, #1
 800c8ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c8ee:	f7fd ff01 	bl	800a6f4 <HAL_GetTick>
 800c8f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c8f4:	e008      	b.n	800c908 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c8f6:	f7fd fefd 	bl	800a6f4 <HAL_GetTick>
 800c8fa:	4602      	mov	r2, r0
 800c8fc:	693b      	ldr	r3, [r7, #16]
 800c8fe:	1ad3      	subs	r3, r2, r3
 800c900:	2b02      	cmp	r3, #2
 800c902:	d901      	bls.n	800c908 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800c904:	2303      	movs	r3, #3
 800c906:	e19c      	b.n	800cc42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c908:	4b46      	ldr	r3, [pc, #280]	; (800ca24 <HAL_RCC_OscConfig+0x2ac>)
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	f003 0302 	and.w	r3, r3, #2
 800c910:	2b00      	cmp	r3, #0
 800c912:	d0f0      	beq.n	800c8f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c914:	4b43      	ldr	r3, [pc, #268]	; (800ca24 <HAL_RCC_OscConfig+0x2ac>)
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	691b      	ldr	r3, [r3, #16]
 800c920:	00db      	lsls	r3, r3, #3
 800c922:	4940      	ldr	r1, [pc, #256]	; (800ca24 <HAL_RCC_OscConfig+0x2ac>)
 800c924:	4313      	orrs	r3, r2
 800c926:	600b      	str	r3, [r1, #0]
 800c928:	e015      	b.n	800c956 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c92a:	4b3f      	ldr	r3, [pc, #252]	; (800ca28 <HAL_RCC_OscConfig+0x2b0>)
 800c92c:	2200      	movs	r2, #0
 800c92e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c930:	f7fd fee0 	bl	800a6f4 <HAL_GetTick>
 800c934:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c936:	e008      	b.n	800c94a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c938:	f7fd fedc 	bl	800a6f4 <HAL_GetTick>
 800c93c:	4602      	mov	r2, r0
 800c93e:	693b      	ldr	r3, [r7, #16]
 800c940:	1ad3      	subs	r3, r2, r3
 800c942:	2b02      	cmp	r3, #2
 800c944:	d901      	bls.n	800c94a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800c946:	2303      	movs	r3, #3
 800c948:	e17b      	b.n	800cc42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c94a:	4b36      	ldr	r3, [pc, #216]	; (800ca24 <HAL_RCC_OscConfig+0x2ac>)
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	f003 0302 	and.w	r3, r3, #2
 800c952:	2b00      	cmp	r3, #0
 800c954:	d1f0      	bne.n	800c938 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	f003 0308 	and.w	r3, r3, #8
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d030      	beq.n	800c9c4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	695b      	ldr	r3, [r3, #20]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d016      	beq.n	800c998 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c96a:	4b30      	ldr	r3, [pc, #192]	; (800ca2c <HAL_RCC_OscConfig+0x2b4>)
 800c96c:	2201      	movs	r2, #1
 800c96e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c970:	f7fd fec0 	bl	800a6f4 <HAL_GetTick>
 800c974:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c976:	e008      	b.n	800c98a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c978:	f7fd febc 	bl	800a6f4 <HAL_GetTick>
 800c97c:	4602      	mov	r2, r0
 800c97e:	693b      	ldr	r3, [r7, #16]
 800c980:	1ad3      	subs	r3, r2, r3
 800c982:	2b02      	cmp	r3, #2
 800c984:	d901      	bls.n	800c98a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800c986:	2303      	movs	r3, #3
 800c988:	e15b      	b.n	800cc42 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c98a:	4b26      	ldr	r3, [pc, #152]	; (800ca24 <HAL_RCC_OscConfig+0x2ac>)
 800c98c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c98e:	f003 0302 	and.w	r3, r3, #2
 800c992:	2b00      	cmp	r3, #0
 800c994:	d0f0      	beq.n	800c978 <HAL_RCC_OscConfig+0x200>
 800c996:	e015      	b.n	800c9c4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c998:	4b24      	ldr	r3, [pc, #144]	; (800ca2c <HAL_RCC_OscConfig+0x2b4>)
 800c99a:	2200      	movs	r2, #0
 800c99c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c99e:	f7fd fea9 	bl	800a6f4 <HAL_GetTick>
 800c9a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c9a4:	e008      	b.n	800c9b8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c9a6:	f7fd fea5 	bl	800a6f4 <HAL_GetTick>
 800c9aa:	4602      	mov	r2, r0
 800c9ac:	693b      	ldr	r3, [r7, #16]
 800c9ae:	1ad3      	subs	r3, r2, r3
 800c9b0:	2b02      	cmp	r3, #2
 800c9b2:	d901      	bls.n	800c9b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800c9b4:	2303      	movs	r3, #3
 800c9b6:	e144      	b.n	800cc42 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c9b8:	4b1a      	ldr	r3, [pc, #104]	; (800ca24 <HAL_RCC_OscConfig+0x2ac>)
 800c9ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c9bc:	f003 0302 	and.w	r3, r3, #2
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d1f0      	bne.n	800c9a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	f003 0304 	and.w	r3, r3, #4
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	f000 80a0 	beq.w	800cb12 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c9d6:	4b13      	ldr	r3, [pc, #76]	; (800ca24 <HAL_RCC_OscConfig+0x2ac>)
 800c9d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d10f      	bne.n	800ca02 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	60bb      	str	r3, [r7, #8]
 800c9e6:	4b0f      	ldr	r3, [pc, #60]	; (800ca24 <HAL_RCC_OscConfig+0x2ac>)
 800c9e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9ea:	4a0e      	ldr	r2, [pc, #56]	; (800ca24 <HAL_RCC_OscConfig+0x2ac>)
 800c9ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c9f0:	6413      	str	r3, [r2, #64]	; 0x40
 800c9f2:	4b0c      	ldr	r3, [pc, #48]	; (800ca24 <HAL_RCC_OscConfig+0x2ac>)
 800c9f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c9fa:	60bb      	str	r3, [r7, #8]
 800c9fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c9fe:	2301      	movs	r3, #1
 800ca00:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ca02:	4b0b      	ldr	r3, [pc, #44]	; (800ca30 <HAL_RCC_OscConfig+0x2b8>)
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d121      	bne.n	800ca52 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ca0e:	4b08      	ldr	r3, [pc, #32]	; (800ca30 <HAL_RCC_OscConfig+0x2b8>)
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	4a07      	ldr	r2, [pc, #28]	; (800ca30 <HAL_RCC_OscConfig+0x2b8>)
 800ca14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ca18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ca1a:	f7fd fe6b 	bl	800a6f4 <HAL_GetTick>
 800ca1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ca20:	e011      	b.n	800ca46 <HAL_RCC_OscConfig+0x2ce>
 800ca22:	bf00      	nop
 800ca24:	40023800 	.word	0x40023800
 800ca28:	42470000 	.word	0x42470000
 800ca2c:	42470e80 	.word	0x42470e80
 800ca30:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ca34:	f7fd fe5e 	bl	800a6f4 <HAL_GetTick>
 800ca38:	4602      	mov	r2, r0
 800ca3a:	693b      	ldr	r3, [r7, #16]
 800ca3c:	1ad3      	subs	r3, r2, r3
 800ca3e:	2b02      	cmp	r3, #2
 800ca40:	d901      	bls.n	800ca46 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800ca42:	2303      	movs	r3, #3
 800ca44:	e0fd      	b.n	800cc42 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ca46:	4b81      	ldr	r3, [pc, #516]	; (800cc4c <HAL_RCC_OscConfig+0x4d4>)
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d0f0      	beq.n	800ca34 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	689b      	ldr	r3, [r3, #8]
 800ca56:	2b01      	cmp	r3, #1
 800ca58:	d106      	bne.n	800ca68 <HAL_RCC_OscConfig+0x2f0>
 800ca5a:	4b7d      	ldr	r3, [pc, #500]	; (800cc50 <HAL_RCC_OscConfig+0x4d8>)
 800ca5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca5e:	4a7c      	ldr	r2, [pc, #496]	; (800cc50 <HAL_RCC_OscConfig+0x4d8>)
 800ca60:	f043 0301 	orr.w	r3, r3, #1
 800ca64:	6713      	str	r3, [r2, #112]	; 0x70
 800ca66:	e01c      	b.n	800caa2 <HAL_RCC_OscConfig+0x32a>
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	689b      	ldr	r3, [r3, #8]
 800ca6c:	2b05      	cmp	r3, #5
 800ca6e:	d10c      	bne.n	800ca8a <HAL_RCC_OscConfig+0x312>
 800ca70:	4b77      	ldr	r3, [pc, #476]	; (800cc50 <HAL_RCC_OscConfig+0x4d8>)
 800ca72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca74:	4a76      	ldr	r2, [pc, #472]	; (800cc50 <HAL_RCC_OscConfig+0x4d8>)
 800ca76:	f043 0304 	orr.w	r3, r3, #4
 800ca7a:	6713      	str	r3, [r2, #112]	; 0x70
 800ca7c:	4b74      	ldr	r3, [pc, #464]	; (800cc50 <HAL_RCC_OscConfig+0x4d8>)
 800ca7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca80:	4a73      	ldr	r2, [pc, #460]	; (800cc50 <HAL_RCC_OscConfig+0x4d8>)
 800ca82:	f043 0301 	orr.w	r3, r3, #1
 800ca86:	6713      	str	r3, [r2, #112]	; 0x70
 800ca88:	e00b      	b.n	800caa2 <HAL_RCC_OscConfig+0x32a>
 800ca8a:	4b71      	ldr	r3, [pc, #452]	; (800cc50 <HAL_RCC_OscConfig+0x4d8>)
 800ca8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca8e:	4a70      	ldr	r2, [pc, #448]	; (800cc50 <HAL_RCC_OscConfig+0x4d8>)
 800ca90:	f023 0301 	bic.w	r3, r3, #1
 800ca94:	6713      	str	r3, [r2, #112]	; 0x70
 800ca96:	4b6e      	ldr	r3, [pc, #440]	; (800cc50 <HAL_RCC_OscConfig+0x4d8>)
 800ca98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca9a:	4a6d      	ldr	r2, [pc, #436]	; (800cc50 <HAL_RCC_OscConfig+0x4d8>)
 800ca9c:	f023 0304 	bic.w	r3, r3, #4
 800caa0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	689b      	ldr	r3, [r3, #8]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d015      	beq.n	800cad6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800caaa:	f7fd fe23 	bl	800a6f4 <HAL_GetTick>
 800caae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cab0:	e00a      	b.n	800cac8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cab2:	f7fd fe1f 	bl	800a6f4 <HAL_GetTick>
 800cab6:	4602      	mov	r2, r0
 800cab8:	693b      	ldr	r3, [r7, #16]
 800caba:	1ad3      	subs	r3, r2, r3
 800cabc:	f241 3288 	movw	r2, #5000	; 0x1388
 800cac0:	4293      	cmp	r3, r2
 800cac2:	d901      	bls.n	800cac8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800cac4:	2303      	movs	r3, #3
 800cac6:	e0bc      	b.n	800cc42 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cac8:	4b61      	ldr	r3, [pc, #388]	; (800cc50 <HAL_RCC_OscConfig+0x4d8>)
 800caca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cacc:	f003 0302 	and.w	r3, r3, #2
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d0ee      	beq.n	800cab2 <HAL_RCC_OscConfig+0x33a>
 800cad4:	e014      	b.n	800cb00 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800cad6:	f7fd fe0d 	bl	800a6f4 <HAL_GetTick>
 800cada:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cadc:	e00a      	b.n	800caf4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cade:	f7fd fe09 	bl	800a6f4 <HAL_GetTick>
 800cae2:	4602      	mov	r2, r0
 800cae4:	693b      	ldr	r3, [r7, #16]
 800cae6:	1ad3      	subs	r3, r2, r3
 800cae8:	f241 3288 	movw	r2, #5000	; 0x1388
 800caec:	4293      	cmp	r3, r2
 800caee:	d901      	bls.n	800caf4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800caf0:	2303      	movs	r3, #3
 800caf2:	e0a6      	b.n	800cc42 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800caf4:	4b56      	ldr	r3, [pc, #344]	; (800cc50 <HAL_RCC_OscConfig+0x4d8>)
 800caf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800caf8:	f003 0302 	and.w	r3, r3, #2
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d1ee      	bne.n	800cade <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800cb00:	7dfb      	ldrb	r3, [r7, #23]
 800cb02:	2b01      	cmp	r3, #1
 800cb04:	d105      	bne.n	800cb12 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cb06:	4b52      	ldr	r3, [pc, #328]	; (800cc50 <HAL_RCC_OscConfig+0x4d8>)
 800cb08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb0a:	4a51      	ldr	r2, [pc, #324]	; (800cc50 <HAL_RCC_OscConfig+0x4d8>)
 800cb0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cb10:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	699b      	ldr	r3, [r3, #24]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	f000 8092 	beq.w	800cc40 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800cb1c:	4b4c      	ldr	r3, [pc, #304]	; (800cc50 <HAL_RCC_OscConfig+0x4d8>)
 800cb1e:	689b      	ldr	r3, [r3, #8]
 800cb20:	f003 030c 	and.w	r3, r3, #12
 800cb24:	2b08      	cmp	r3, #8
 800cb26:	d05c      	beq.n	800cbe2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	699b      	ldr	r3, [r3, #24]
 800cb2c:	2b02      	cmp	r3, #2
 800cb2e:	d141      	bne.n	800cbb4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cb30:	4b48      	ldr	r3, [pc, #288]	; (800cc54 <HAL_RCC_OscConfig+0x4dc>)
 800cb32:	2200      	movs	r2, #0
 800cb34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cb36:	f7fd fddd 	bl	800a6f4 <HAL_GetTick>
 800cb3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cb3c:	e008      	b.n	800cb50 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cb3e:	f7fd fdd9 	bl	800a6f4 <HAL_GetTick>
 800cb42:	4602      	mov	r2, r0
 800cb44:	693b      	ldr	r3, [r7, #16]
 800cb46:	1ad3      	subs	r3, r2, r3
 800cb48:	2b02      	cmp	r3, #2
 800cb4a:	d901      	bls.n	800cb50 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800cb4c:	2303      	movs	r3, #3
 800cb4e:	e078      	b.n	800cc42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cb50:	4b3f      	ldr	r3, [pc, #252]	; (800cc50 <HAL_RCC_OscConfig+0x4d8>)
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d1f0      	bne.n	800cb3e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	69da      	ldr	r2, [r3, #28]
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	6a1b      	ldr	r3, [r3, #32]
 800cb64:	431a      	orrs	r2, r3
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb6a:	019b      	lsls	r3, r3, #6
 800cb6c:	431a      	orrs	r2, r3
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb72:	085b      	lsrs	r3, r3, #1
 800cb74:	3b01      	subs	r3, #1
 800cb76:	041b      	lsls	r3, r3, #16
 800cb78:	431a      	orrs	r2, r3
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb7e:	061b      	lsls	r3, r3, #24
 800cb80:	4933      	ldr	r1, [pc, #204]	; (800cc50 <HAL_RCC_OscConfig+0x4d8>)
 800cb82:	4313      	orrs	r3, r2
 800cb84:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800cb86:	4b33      	ldr	r3, [pc, #204]	; (800cc54 <HAL_RCC_OscConfig+0x4dc>)
 800cb88:	2201      	movs	r2, #1
 800cb8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cb8c:	f7fd fdb2 	bl	800a6f4 <HAL_GetTick>
 800cb90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cb92:	e008      	b.n	800cba6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cb94:	f7fd fdae 	bl	800a6f4 <HAL_GetTick>
 800cb98:	4602      	mov	r2, r0
 800cb9a:	693b      	ldr	r3, [r7, #16]
 800cb9c:	1ad3      	subs	r3, r2, r3
 800cb9e:	2b02      	cmp	r3, #2
 800cba0:	d901      	bls.n	800cba6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800cba2:	2303      	movs	r3, #3
 800cba4:	e04d      	b.n	800cc42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cba6:	4b2a      	ldr	r3, [pc, #168]	; (800cc50 <HAL_RCC_OscConfig+0x4d8>)
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d0f0      	beq.n	800cb94 <HAL_RCC_OscConfig+0x41c>
 800cbb2:	e045      	b.n	800cc40 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cbb4:	4b27      	ldr	r3, [pc, #156]	; (800cc54 <HAL_RCC_OscConfig+0x4dc>)
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cbba:	f7fd fd9b 	bl	800a6f4 <HAL_GetTick>
 800cbbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cbc0:	e008      	b.n	800cbd4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cbc2:	f7fd fd97 	bl	800a6f4 <HAL_GetTick>
 800cbc6:	4602      	mov	r2, r0
 800cbc8:	693b      	ldr	r3, [r7, #16]
 800cbca:	1ad3      	subs	r3, r2, r3
 800cbcc:	2b02      	cmp	r3, #2
 800cbce:	d901      	bls.n	800cbd4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800cbd0:	2303      	movs	r3, #3
 800cbd2:	e036      	b.n	800cc42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cbd4:	4b1e      	ldr	r3, [pc, #120]	; (800cc50 <HAL_RCC_OscConfig+0x4d8>)
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d1f0      	bne.n	800cbc2 <HAL_RCC_OscConfig+0x44a>
 800cbe0:	e02e      	b.n	800cc40 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	699b      	ldr	r3, [r3, #24]
 800cbe6:	2b01      	cmp	r3, #1
 800cbe8:	d101      	bne.n	800cbee <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800cbea:	2301      	movs	r3, #1
 800cbec:	e029      	b.n	800cc42 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800cbee:	4b18      	ldr	r3, [pc, #96]	; (800cc50 <HAL_RCC_OscConfig+0x4d8>)
 800cbf0:	689b      	ldr	r3, [r3, #8]
 800cbf2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	69db      	ldr	r3, [r3, #28]
 800cbfe:	429a      	cmp	r2, r3
 800cc00:	d11c      	bne.n	800cc3c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cc0c:	429a      	cmp	r2, r3
 800cc0e:	d115      	bne.n	800cc3c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800cc10:	68fa      	ldr	r2, [r7, #12]
 800cc12:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800cc16:	4013      	ands	r3, r2
 800cc18:	687a      	ldr	r2, [r7, #4]
 800cc1a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800cc1c:	4293      	cmp	r3, r2
 800cc1e:	d10d      	bne.n	800cc3c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800cc2a:	429a      	cmp	r2, r3
 800cc2c:	d106      	bne.n	800cc3c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800cc38:	429a      	cmp	r2, r3
 800cc3a:	d001      	beq.n	800cc40 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800cc3c:	2301      	movs	r3, #1
 800cc3e:	e000      	b.n	800cc42 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800cc40:	2300      	movs	r3, #0
}
 800cc42:	4618      	mov	r0, r3
 800cc44:	3718      	adds	r7, #24
 800cc46:	46bd      	mov	sp, r7
 800cc48:	bd80      	pop	{r7, pc}
 800cc4a:	bf00      	nop
 800cc4c:	40007000 	.word	0x40007000
 800cc50:	40023800 	.word	0x40023800
 800cc54:	42470060 	.word	0x42470060

0800cc58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b084      	sub	sp, #16
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
 800cc60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d101      	bne.n	800cc6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800cc68:	2301      	movs	r3, #1
 800cc6a:	e0cc      	b.n	800ce06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800cc6c:	4b68      	ldr	r3, [pc, #416]	; (800ce10 <HAL_RCC_ClockConfig+0x1b8>)
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	f003 030f 	and.w	r3, r3, #15
 800cc74:	683a      	ldr	r2, [r7, #0]
 800cc76:	429a      	cmp	r2, r3
 800cc78:	d90c      	bls.n	800cc94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cc7a:	4b65      	ldr	r3, [pc, #404]	; (800ce10 <HAL_RCC_ClockConfig+0x1b8>)
 800cc7c:	683a      	ldr	r2, [r7, #0]
 800cc7e:	b2d2      	uxtb	r2, r2
 800cc80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800cc82:	4b63      	ldr	r3, [pc, #396]	; (800ce10 <HAL_RCC_ClockConfig+0x1b8>)
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	f003 030f 	and.w	r3, r3, #15
 800cc8a:	683a      	ldr	r2, [r7, #0]
 800cc8c:	429a      	cmp	r2, r3
 800cc8e:	d001      	beq.n	800cc94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800cc90:	2301      	movs	r3, #1
 800cc92:	e0b8      	b.n	800ce06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	f003 0302 	and.w	r3, r3, #2
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d020      	beq.n	800cce2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	f003 0304 	and.w	r3, r3, #4
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d005      	beq.n	800ccb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ccac:	4b59      	ldr	r3, [pc, #356]	; (800ce14 <HAL_RCC_ClockConfig+0x1bc>)
 800ccae:	689b      	ldr	r3, [r3, #8]
 800ccb0:	4a58      	ldr	r2, [pc, #352]	; (800ce14 <HAL_RCC_ClockConfig+0x1bc>)
 800ccb2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800ccb6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	f003 0308 	and.w	r3, r3, #8
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d005      	beq.n	800ccd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ccc4:	4b53      	ldr	r3, [pc, #332]	; (800ce14 <HAL_RCC_ClockConfig+0x1bc>)
 800ccc6:	689b      	ldr	r3, [r3, #8]
 800ccc8:	4a52      	ldr	r2, [pc, #328]	; (800ce14 <HAL_RCC_ClockConfig+0x1bc>)
 800ccca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800ccce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ccd0:	4b50      	ldr	r3, [pc, #320]	; (800ce14 <HAL_RCC_ClockConfig+0x1bc>)
 800ccd2:	689b      	ldr	r3, [r3, #8]
 800ccd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	689b      	ldr	r3, [r3, #8]
 800ccdc:	494d      	ldr	r1, [pc, #308]	; (800ce14 <HAL_RCC_ClockConfig+0x1bc>)
 800ccde:	4313      	orrs	r3, r2
 800cce0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	f003 0301 	and.w	r3, r3, #1
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d044      	beq.n	800cd78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	685b      	ldr	r3, [r3, #4]
 800ccf2:	2b01      	cmp	r3, #1
 800ccf4:	d107      	bne.n	800cd06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ccf6:	4b47      	ldr	r3, [pc, #284]	; (800ce14 <HAL_RCC_ClockConfig+0x1bc>)
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d119      	bne.n	800cd36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cd02:	2301      	movs	r3, #1
 800cd04:	e07f      	b.n	800ce06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	685b      	ldr	r3, [r3, #4]
 800cd0a:	2b02      	cmp	r3, #2
 800cd0c:	d003      	beq.n	800cd16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800cd12:	2b03      	cmp	r3, #3
 800cd14:	d107      	bne.n	800cd26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cd16:	4b3f      	ldr	r3, [pc, #252]	; (800ce14 <HAL_RCC_ClockConfig+0x1bc>)
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d109      	bne.n	800cd36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cd22:	2301      	movs	r3, #1
 800cd24:	e06f      	b.n	800ce06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cd26:	4b3b      	ldr	r3, [pc, #236]	; (800ce14 <HAL_RCC_ClockConfig+0x1bc>)
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	f003 0302 	and.w	r3, r3, #2
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d101      	bne.n	800cd36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cd32:	2301      	movs	r3, #1
 800cd34:	e067      	b.n	800ce06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800cd36:	4b37      	ldr	r3, [pc, #220]	; (800ce14 <HAL_RCC_ClockConfig+0x1bc>)
 800cd38:	689b      	ldr	r3, [r3, #8]
 800cd3a:	f023 0203 	bic.w	r2, r3, #3
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	685b      	ldr	r3, [r3, #4]
 800cd42:	4934      	ldr	r1, [pc, #208]	; (800ce14 <HAL_RCC_ClockConfig+0x1bc>)
 800cd44:	4313      	orrs	r3, r2
 800cd46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800cd48:	f7fd fcd4 	bl	800a6f4 <HAL_GetTick>
 800cd4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cd4e:	e00a      	b.n	800cd66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cd50:	f7fd fcd0 	bl	800a6f4 <HAL_GetTick>
 800cd54:	4602      	mov	r2, r0
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	1ad3      	subs	r3, r2, r3
 800cd5a:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd5e:	4293      	cmp	r3, r2
 800cd60:	d901      	bls.n	800cd66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800cd62:	2303      	movs	r3, #3
 800cd64:	e04f      	b.n	800ce06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cd66:	4b2b      	ldr	r3, [pc, #172]	; (800ce14 <HAL_RCC_ClockConfig+0x1bc>)
 800cd68:	689b      	ldr	r3, [r3, #8]
 800cd6a:	f003 020c 	and.w	r2, r3, #12
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	685b      	ldr	r3, [r3, #4]
 800cd72:	009b      	lsls	r3, r3, #2
 800cd74:	429a      	cmp	r2, r3
 800cd76:	d1eb      	bne.n	800cd50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800cd78:	4b25      	ldr	r3, [pc, #148]	; (800ce10 <HAL_RCC_ClockConfig+0x1b8>)
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	f003 030f 	and.w	r3, r3, #15
 800cd80:	683a      	ldr	r2, [r7, #0]
 800cd82:	429a      	cmp	r2, r3
 800cd84:	d20c      	bcs.n	800cda0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cd86:	4b22      	ldr	r3, [pc, #136]	; (800ce10 <HAL_RCC_ClockConfig+0x1b8>)
 800cd88:	683a      	ldr	r2, [r7, #0]
 800cd8a:	b2d2      	uxtb	r2, r2
 800cd8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800cd8e:	4b20      	ldr	r3, [pc, #128]	; (800ce10 <HAL_RCC_ClockConfig+0x1b8>)
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	f003 030f 	and.w	r3, r3, #15
 800cd96:	683a      	ldr	r2, [r7, #0]
 800cd98:	429a      	cmp	r2, r3
 800cd9a:	d001      	beq.n	800cda0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800cd9c:	2301      	movs	r3, #1
 800cd9e:	e032      	b.n	800ce06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	f003 0304 	and.w	r3, r3, #4
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d008      	beq.n	800cdbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800cdac:	4b19      	ldr	r3, [pc, #100]	; (800ce14 <HAL_RCC_ClockConfig+0x1bc>)
 800cdae:	689b      	ldr	r3, [r3, #8]
 800cdb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	68db      	ldr	r3, [r3, #12]
 800cdb8:	4916      	ldr	r1, [pc, #88]	; (800ce14 <HAL_RCC_ClockConfig+0x1bc>)
 800cdba:	4313      	orrs	r3, r2
 800cdbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	f003 0308 	and.w	r3, r3, #8
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d009      	beq.n	800cdde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800cdca:	4b12      	ldr	r3, [pc, #72]	; (800ce14 <HAL_RCC_ClockConfig+0x1bc>)
 800cdcc:	689b      	ldr	r3, [r3, #8]
 800cdce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	691b      	ldr	r3, [r3, #16]
 800cdd6:	00db      	lsls	r3, r3, #3
 800cdd8:	490e      	ldr	r1, [pc, #56]	; (800ce14 <HAL_RCC_ClockConfig+0x1bc>)
 800cdda:	4313      	orrs	r3, r2
 800cddc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800cdde:	f000 f821 	bl	800ce24 <HAL_RCC_GetSysClockFreq>
 800cde2:	4601      	mov	r1, r0
 800cde4:	4b0b      	ldr	r3, [pc, #44]	; (800ce14 <HAL_RCC_ClockConfig+0x1bc>)
 800cde6:	689b      	ldr	r3, [r3, #8]
 800cde8:	091b      	lsrs	r3, r3, #4
 800cdea:	f003 030f 	and.w	r3, r3, #15
 800cdee:	4a0a      	ldr	r2, [pc, #40]	; (800ce18 <HAL_RCC_ClockConfig+0x1c0>)
 800cdf0:	5cd3      	ldrb	r3, [r2, r3]
 800cdf2:	fa21 f303 	lsr.w	r3, r1, r3
 800cdf6:	4a09      	ldr	r2, [pc, #36]	; (800ce1c <HAL_RCC_ClockConfig+0x1c4>)
 800cdf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800cdfa:	4b09      	ldr	r3, [pc, #36]	; (800ce20 <HAL_RCC_ClockConfig+0x1c8>)
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	4618      	mov	r0, r3
 800ce00:	f7fd f9e0 	bl	800a1c4 <HAL_InitTick>

  return HAL_OK;
 800ce04:	2300      	movs	r3, #0
}
 800ce06:	4618      	mov	r0, r3
 800ce08:	3710      	adds	r7, #16
 800ce0a:	46bd      	mov	sp, r7
 800ce0c:	bd80      	pop	{r7, pc}
 800ce0e:	bf00      	nop
 800ce10:	40023c00 	.word	0x40023c00
 800ce14:	40023800 	.word	0x40023800
 800ce18:	0801b310 	.word	0x0801b310
 800ce1c:	20000cdc 	.word	0x20000cdc
 800ce20:	20000ce0 	.word	0x20000ce0

0800ce24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ce24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce26:	b085      	sub	sp, #20
 800ce28:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	607b      	str	r3, [r7, #4]
 800ce2e:	2300      	movs	r3, #0
 800ce30:	60fb      	str	r3, [r7, #12]
 800ce32:	2300      	movs	r3, #0
 800ce34:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800ce36:	2300      	movs	r3, #0
 800ce38:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ce3a:	4b63      	ldr	r3, [pc, #396]	; (800cfc8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800ce3c:	689b      	ldr	r3, [r3, #8]
 800ce3e:	f003 030c 	and.w	r3, r3, #12
 800ce42:	2b04      	cmp	r3, #4
 800ce44:	d007      	beq.n	800ce56 <HAL_RCC_GetSysClockFreq+0x32>
 800ce46:	2b08      	cmp	r3, #8
 800ce48:	d008      	beq.n	800ce5c <HAL_RCC_GetSysClockFreq+0x38>
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	f040 80b4 	bne.w	800cfb8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800ce50:	4b5e      	ldr	r3, [pc, #376]	; (800cfcc <HAL_RCC_GetSysClockFreq+0x1a8>)
 800ce52:	60bb      	str	r3, [r7, #8]
       break;
 800ce54:	e0b3      	b.n	800cfbe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800ce56:	4b5e      	ldr	r3, [pc, #376]	; (800cfd0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800ce58:	60bb      	str	r3, [r7, #8]
      break;
 800ce5a:	e0b0      	b.n	800cfbe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ce5c:	4b5a      	ldr	r3, [pc, #360]	; (800cfc8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800ce5e:	685b      	ldr	r3, [r3, #4]
 800ce60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ce64:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800ce66:	4b58      	ldr	r3, [pc, #352]	; (800cfc8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800ce68:	685b      	ldr	r3, [r3, #4]
 800ce6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d04a      	beq.n	800cf08 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ce72:	4b55      	ldr	r3, [pc, #340]	; (800cfc8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800ce74:	685b      	ldr	r3, [r3, #4]
 800ce76:	099b      	lsrs	r3, r3, #6
 800ce78:	f04f 0400 	mov.w	r4, #0
 800ce7c:	f240 11ff 	movw	r1, #511	; 0x1ff
 800ce80:	f04f 0200 	mov.w	r2, #0
 800ce84:	ea03 0501 	and.w	r5, r3, r1
 800ce88:	ea04 0602 	and.w	r6, r4, r2
 800ce8c:	4629      	mov	r1, r5
 800ce8e:	4632      	mov	r2, r6
 800ce90:	f04f 0300 	mov.w	r3, #0
 800ce94:	f04f 0400 	mov.w	r4, #0
 800ce98:	0154      	lsls	r4, r2, #5
 800ce9a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800ce9e:	014b      	lsls	r3, r1, #5
 800cea0:	4619      	mov	r1, r3
 800cea2:	4622      	mov	r2, r4
 800cea4:	1b49      	subs	r1, r1, r5
 800cea6:	eb62 0206 	sbc.w	r2, r2, r6
 800ceaa:	f04f 0300 	mov.w	r3, #0
 800ceae:	f04f 0400 	mov.w	r4, #0
 800ceb2:	0194      	lsls	r4, r2, #6
 800ceb4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800ceb8:	018b      	lsls	r3, r1, #6
 800ceba:	1a5b      	subs	r3, r3, r1
 800cebc:	eb64 0402 	sbc.w	r4, r4, r2
 800cec0:	f04f 0100 	mov.w	r1, #0
 800cec4:	f04f 0200 	mov.w	r2, #0
 800cec8:	00e2      	lsls	r2, r4, #3
 800ceca:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800cece:	00d9      	lsls	r1, r3, #3
 800ced0:	460b      	mov	r3, r1
 800ced2:	4614      	mov	r4, r2
 800ced4:	195b      	adds	r3, r3, r5
 800ced6:	eb44 0406 	adc.w	r4, r4, r6
 800ceda:	f04f 0100 	mov.w	r1, #0
 800cede:	f04f 0200 	mov.w	r2, #0
 800cee2:	0262      	lsls	r2, r4, #9
 800cee4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800cee8:	0259      	lsls	r1, r3, #9
 800ceea:	460b      	mov	r3, r1
 800ceec:	4614      	mov	r4, r2
 800ceee:	4618      	mov	r0, r3
 800cef0:	4621      	mov	r1, r4
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	f04f 0400 	mov.w	r4, #0
 800cef8:	461a      	mov	r2, r3
 800cefa:	4623      	mov	r3, r4
 800cefc:	f7f3 fed4 	bl	8000ca8 <__aeabi_uldivmod>
 800cf00:	4603      	mov	r3, r0
 800cf02:	460c      	mov	r4, r1
 800cf04:	60fb      	str	r3, [r7, #12]
 800cf06:	e049      	b.n	800cf9c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800cf08:	4b2f      	ldr	r3, [pc, #188]	; (800cfc8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800cf0a:	685b      	ldr	r3, [r3, #4]
 800cf0c:	099b      	lsrs	r3, r3, #6
 800cf0e:	f04f 0400 	mov.w	r4, #0
 800cf12:	f240 11ff 	movw	r1, #511	; 0x1ff
 800cf16:	f04f 0200 	mov.w	r2, #0
 800cf1a:	ea03 0501 	and.w	r5, r3, r1
 800cf1e:	ea04 0602 	and.w	r6, r4, r2
 800cf22:	4629      	mov	r1, r5
 800cf24:	4632      	mov	r2, r6
 800cf26:	f04f 0300 	mov.w	r3, #0
 800cf2a:	f04f 0400 	mov.w	r4, #0
 800cf2e:	0154      	lsls	r4, r2, #5
 800cf30:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800cf34:	014b      	lsls	r3, r1, #5
 800cf36:	4619      	mov	r1, r3
 800cf38:	4622      	mov	r2, r4
 800cf3a:	1b49      	subs	r1, r1, r5
 800cf3c:	eb62 0206 	sbc.w	r2, r2, r6
 800cf40:	f04f 0300 	mov.w	r3, #0
 800cf44:	f04f 0400 	mov.w	r4, #0
 800cf48:	0194      	lsls	r4, r2, #6
 800cf4a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800cf4e:	018b      	lsls	r3, r1, #6
 800cf50:	1a5b      	subs	r3, r3, r1
 800cf52:	eb64 0402 	sbc.w	r4, r4, r2
 800cf56:	f04f 0100 	mov.w	r1, #0
 800cf5a:	f04f 0200 	mov.w	r2, #0
 800cf5e:	00e2      	lsls	r2, r4, #3
 800cf60:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800cf64:	00d9      	lsls	r1, r3, #3
 800cf66:	460b      	mov	r3, r1
 800cf68:	4614      	mov	r4, r2
 800cf6a:	195b      	adds	r3, r3, r5
 800cf6c:	eb44 0406 	adc.w	r4, r4, r6
 800cf70:	f04f 0100 	mov.w	r1, #0
 800cf74:	f04f 0200 	mov.w	r2, #0
 800cf78:	02a2      	lsls	r2, r4, #10
 800cf7a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800cf7e:	0299      	lsls	r1, r3, #10
 800cf80:	460b      	mov	r3, r1
 800cf82:	4614      	mov	r4, r2
 800cf84:	4618      	mov	r0, r3
 800cf86:	4621      	mov	r1, r4
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	f04f 0400 	mov.w	r4, #0
 800cf8e:	461a      	mov	r2, r3
 800cf90:	4623      	mov	r3, r4
 800cf92:	f7f3 fe89 	bl	8000ca8 <__aeabi_uldivmod>
 800cf96:	4603      	mov	r3, r0
 800cf98:	460c      	mov	r4, r1
 800cf9a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800cf9c:	4b0a      	ldr	r3, [pc, #40]	; (800cfc8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800cf9e:	685b      	ldr	r3, [r3, #4]
 800cfa0:	0c1b      	lsrs	r3, r3, #16
 800cfa2:	f003 0303 	and.w	r3, r3, #3
 800cfa6:	3301      	adds	r3, #1
 800cfa8:	005b      	lsls	r3, r3, #1
 800cfaa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800cfac:	68fa      	ldr	r2, [r7, #12]
 800cfae:	683b      	ldr	r3, [r7, #0]
 800cfb0:	fbb2 f3f3 	udiv	r3, r2, r3
 800cfb4:	60bb      	str	r3, [r7, #8]
      break;
 800cfb6:	e002      	b.n	800cfbe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800cfb8:	4b04      	ldr	r3, [pc, #16]	; (800cfcc <HAL_RCC_GetSysClockFreq+0x1a8>)
 800cfba:	60bb      	str	r3, [r7, #8]
      break;
 800cfbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 800cfbe:	68bb      	ldr	r3, [r7, #8]
}
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	3714      	adds	r7, #20
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cfc8:	40023800 	.word	0x40023800
 800cfcc:	00f42400 	.word	0x00f42400
 800cfd0:	007a1200 	.word	0x007a1200

0800cfd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cfd4:	b480      	push	{r7}
 800cfd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800cfd8:	4b03      	ldr	r3, [pc, #12]	; (800cfe8 <HAL_RCC_GetHCLKFreq+0x14>)
 800cfda:	681b      	ldr	r3, [r3, #0]
}
 800cfdc:	4618      	mov	r0, r3
 800cfde:	46bd      	mov	sp, r7
 800cfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe4:	4770      	bx	lr
 800cfe6:	bf00      	nop
 800cfe8:	20000cdc 	.word	0x20000cdc

0800cfec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800cfec:	b580      	push	{r7, lr}
 800cfee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800cff0:	f7ff fff0 	bl	800cfd4 <HAL_RCC_GetHCLKFreq>
 800cff4:	4601      	mov	r1, r0
 800cff6:	4b05      	ldr	r3, [pc, #20]	; (800d00c <HAL_RCC_GetPCLK1Freq+0x20>)
 800cff8:	689b      	ldr	r3, [r3, #8]
 800cffa:	0a9b      	lsrs	r3, r3, #10
 800cffc:	f003 0307 	and.w	r3, r3, #7
 800d000:	4a03      	ldr	r2, [pc, #12]	; (800d010 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d002:	5cd3      	ldrb	r3, [r2, r3]
 800d004:	fa21 f303 	lsr.w	r3, r1, r3
}
 800d008:	4618      	mov	r0, r3
 800d00a:	bd80      	pop	{r7, pc}
 800d00c:	40023800 	.word	0x40023800
 800d010:	0801b320 	.word	0x0801b320

0800d014 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d014:	b580      	push	{r7, lr}
 800d016:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800d018:	f7ff ffdc 	bl	800cfd4 <HAL_RCC_GetHCLKFreq>
 800d01c:	4601      	mov	r1, r0
 800d01e:	4b05      	ldr	r3, [pc, #20]	; (800d034 <HAL_RCC_GetPCLK2Freq+0x20>)
 800d020:	689b      	ldr	r3, [r3, #8]
 800d022:	0b5b      	lsrs	r3, r3, #13
 800d024:	f003 0307 	and.w	r3, r3, #7
 800d028:	4a03      	ldr	r2, [pc, #12]	; (800d038 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d02a:	5cd3      	ldrb	r3, [r2, r3]
 800d02c:	fa21 f303 	lsr.w	r3, r1, r3
}
 800d030:	4618      	mov	r0, r3
 800d032:	bd80      	pop	{r7, pc}
 800d034:	40023800 	.word	0x40023800
 800d038:	0801b320 	.word	0x0801b320

0800d03c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800d03c:	b480      	push	{r7}
 800d03e:	b083      	sub	sp, #12
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
 800d044:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	220f      	movs	r2, #15
 800d04a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800d04c:	4b12      	ldr	r3, [pc, #72]	; (800d098 <HAL_RCC_GetClockConfig+0x5c>)
 800d04e:	689b      	ldr	r3, [r3, #8]
 800d050:	f003 0203 	and.w	r2, r3, #3
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800d058:	4b0f      	ldr	r3, [pc, #60]	; (800d098 <HAL_RCC_GetClockConfig+0x5c>)
 800d05a:	689b      	ldr	r3, [r3, #8]
 800d05c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800d064:	4b0c      	ldr	r3, [pc, #48]	; (800d098 <HAL_RCC_GetClockConfig+0x5c>)
 800d066:	689b      	ldr	r3, [r3, #8]
 800d068:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800d070:	4b09      	ldr	r3, [pc, #36]	; (800d098 <HAL_RCC_GetClockConfig+0x5c>)
 800d072:	689b      	ldr	r3, [r3, #8]
 800d074:	08db      	lsrs	r3, r3, #3
 800d076:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800d07e:	4b07      	ldr	r3, [pc, #28]	; (800d09c <HAL_RCC_GetClockConfig+0x60>)
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	f003 020f 	and.w	r2, r3, #15
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	601a      	str	r2, [r3, #0]
}
 800d08a:	bf00      	nop
 800d08c:	370c      	adds	r7, #12
 800d08e:	46bd      	mov	sp, r7
 800d090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d094:	4770      	bx	lr
 800d096:	bf00      	nop
 800d098:	40023800 	.word	0x40023800
 800d09c:	40023c00 	.word	0x40023c00

0800d0a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b082      	sub	sp, #8
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d101      	bne.n	800d0b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d0ae:	2301      	movs	r3, #1
 800d0b0:	e01d      	b.n	800d0ee <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d0b8:	b2db      	uxtb	r3, r3
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d106      	bne.n	800d0cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	2200      	movs	r2, #0
 800d0c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d0c6:	6878      	ldr	r0, [r7, #4]
 800d0c8:	f7fd f9b8 	bl	800a43c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	2202      	movs	r2, #2
 800d0d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681a      	ldr	r2, [r3, #0]
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	3304      	adds	r3, #4
 800d0dc:	4619      	mov	r1, r3
 800d0de:	4610      	mov	r0, r2
 800d0e0:	f000 f95e 	bl	800d3a0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	2201      	movs	r2, #1
 800d0e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d0ec:	2300      	movs	r3, #0
}
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	3708      	adds	r7, #8
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	bd80      	pop	{r7, pc}

0800d0f6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d0f6:	b480      	push	{r7}
 800d0f8:	b085      	sub	sp, #20
 800d0fa:	af00      	add	r7, sp, #0
 800d0fc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	68da      	ldr	r2, [r3, #12]
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	f042 0201 	orr.w	r2, r2, #1
 800d10c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	689b      	ldr	r3, [r3, #8]
 800d114:	f003 0307 	and.w	r3, r3, #7
 800d118:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	2b06      	cmp	r3, #6
 800d11e:	d007      	beq.n	800d130 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	681a      	ldr	r2, [r3, #0]
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	f042 0201 	orr.w	r2, r2, #1
 800d12e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d130:	2300      	movs	r3, #0
}
 800d132:	4618      	mov	r0, r3
 800d134:	3714      	adds	r7, #20
 800d136:	46bd      	mov	sp, r7
 800d138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13c:	4770      	bx	lr

0800d13e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d13e:	b580      	push	{r7, lr}
 800d140:	b082      	sub	sp, #8
 800d142:	af00      	add	r7, sp, #0
 800d144:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	691b      	ldr	r3, [r3, #16]
 800d14c:	f003 0302 	and.w	r3, r3, #2
 800d150:	2b02      	cmp	r3, #2
 800d152:	d122      	bne.n	800d19a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	68db      	ldr	r3, [r3, #12]
 800d15a:	f003 0302 	and.w	r3, r3, #2
 800d15e:	2b02      	cmp	r3, #2
 800d160:	d11b      	bne.n	800d19a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	f06f 0202 	mvn.w	r2, #2
 800d16a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	2201      	movs	r2, #1
 800d170:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	699b      	ldr	r3, [r3, #24]
 800d178:	f003 0303 	and.w	r3, r3, #3
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d003      	beq.n	800d188 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d180:	6878      	ldr	r0, [r7, #4]
 800d182:	f000 f8ee 	bl	800d362 <HAL_TIM_IC_CaptureCallback>
 800d186:	e005      	b.n	800d194 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d188:	6878      	ldr	r0, [r7, #4]
 800d18a:	f000 f8e0 	bl	800d34e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d18e:	6878      	ldr	r0, [r7, #4]
 800d190:	f000 f8f1 	bl	800d376 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	2200      	movs	r2, #0
 800d198:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	691b      	ldr	r3, [r3, #16]
 800d1a0:	f003 0304 	and.w	r3, r3, #4
 800d1a4:	2b04      	cmp	r3, #4
 800d1a6:	d122      	bne.n	800d1ee <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	68db      	ldr	r3, [r3, #12]
 800d1ae:	f003 0304 	and.w	r3, r3, #4
 800d1b2:	2b04      	cmp	r3, #4
 800d1b4:	d11b      	bne.n	800d1ee <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	f06f 0204 	mvn.w	r2, #4
 800d1be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	2202      	movs	r2, #2
 800d1c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	699b      	ldr	r3, [r3, #24]
 800d1cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d003      	beq.n	800d1dc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d1d4:	6878      	ldr	r0, [r7, #4]
 800d1d6:	f000 f8c4 	bl	800d362 <HAL_TIM_IC_CaptureCallback>
 800d1da:	e005      	b.n	800d1e8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d1dc:	6878      	ldr	r0, [r7, #4]
 800d1de:	f000 f8b6 	bl	800d34e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d1e2:	6878      	ldr	r0, [r7, #4]
 800d1e4:	f000 f8c7 	bl	800d376 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	691b      	ldr	r3, [r3, #16]
 800d1f4:	f003 0308 	and.w	r3, r3, #8
 800d1f8:	2b08      	cmp	r3, #8
 800d1fa:	d122      	bne.n	800d242 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	68db      	ldr	r3, [r3, #12]
 800d202:	f003 0308 	and.w	r3, r3, #8
 800d206:	2b08      	cmp	r3, #8
 800d208:	d11b      	bne.n	800d242 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	f06f 0208 	mvn.w	r2, #8
 800d212:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	2204      	movs	r2, #4
 800d218:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	69db      	ldr	r3, [r3, #28]
 800d220:	f003 0303 	and.w	r3, r3, #3
 800d224:	2b00      	cmp	r3, #0
 800d226:	d003      	beq.n	800d230 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d228:	6878      	ldr	r0, [r7, #4]
 800d22a:	f000 f89a 	bl	800d362 <HAL_TIM_IC_CaptureCallback>
 800d22e:	e005      	b.n	800d23c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d230:	6878      	ldr	r0, [r7, #4]
 800d232:	f000 f88c 	bl	800d34e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d236:	6878      	ldr	r0, [r7, #4]
 800d238:	f000 f89d 	bl	800d376 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	2200      	movs	r2, #0
 800d240:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	691b      	ldr	r3, [r3, #16]
 800d248:	f003 0310 	and.w	r3, r3, #16
 800d24c:	2b10      	cmp	r3, #16
 800d24e:	d122      	bne.n	800d296 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	68db      	ldr	r3, [r3, #12]
 800d256:	f003 0310 	and.w	r3, r3, #16
 800d25a:	2b10      	cmp	r3, #16
 800d25c:	d11b      	bne.n	800d296 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	f06f 0210 	mvn.w	r2, #16
 800d266:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	2208      	movs	r2, #8
 800d26c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	69db      	ldr	r3, [r3, #28]
 800d274:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d003      	beq.n	800d284 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d27c:	6878      	ldr	r0, [r7, #4]
 800d27e:	f000 f870 	bl	800d362 <HAL_TIM_IC_CaptureCallback>
 800d282:	e005      	b.n	800d290 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d284:	6878      	ldr	r0, [r7, #4]
 800d286:	f000 f862 	bl	800d34e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d28a:	6878      	ldr	r0, [r7, #4]
 800d28c:	f000 f873 	bl	800d376 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	2200      	movs	r2, #0
 800d294:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	691b      	ldr	r3, [r3, #16]
 800d29c:	f003 0301 	and.w	r3, r3, #1
 800d2a0:	2b01      	cmp	r3, #1
 800d2a2:	d10e      	bne.n	800d2c2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	68db      	ldr	r3, [r3, #12]
 800d2aa:	f003 0301 	and.w	r3, r3, #1
 800d2ae:	2b01      	cmp	r3, #1
 800d2b0:	d107      	bne.n	800d2c2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	f06f 0201 	mvn.w	r2, #1
 800d2ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d2bc:	6878      	ldr	r0, [r7, #4]
 800d2be:	f7f6 fbe1 	bl	8003a84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	691b      	ldr	r3, [r3, #16]
 800d2c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d2cc:	2b80      	cmp	r3, #128	; 0x80
 800d2ce:	d10e      	bne.n	800d2ee <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	68db      	ldr	r3, [r3, #12]
 800d2d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d2da:	2b80      	cmp	r3, #128	; 0x80
 800d2dc:	d107      	bne.n	800d2ee <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d2e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d2e8:	6878      	ldr	r0, [r7, #4]
 800d2ea:	f000 f97f 	bl	800d5ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	691b      	ldr	r3, [r3, #16]
 800d2f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d2f8:	2b40      	cmp	r3, #64	; 0x40
 800d2fa:	d10e      	bne.n	800d31a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	68db      	ldr	r3, [r3, #12]
 800d302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d306:	2b40      	cmp	r3, #64	; 0x40
 800d308:	d107      	bne.n	800d31a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d312:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d314:	6878      	ldr	r0, [r7, #4]
 800d316:	f000 f838 	bl	800d38a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	691b      	ldr	r3, [r3, #16]
 800d320:	f003 0320 	and.w	r3, r3, #32
 800d324:	2b20      	cmp	r3, #32
 800d326:	d10e      	bne.n	800d346 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	68db      	ldr	r3, [r3, #12]
 800d32e:	f003 0320 	and.w	r3, r3, #32
 800d332:	2b20      	cmp	r3, #32
 800d334:	d107      	bne.n	800d346 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	f06f 0220 	mvn.w	r2, #32
 800d33e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d340:	6878      	ldr	r0, [r7, #4]
 800d342:	f000 f949 	bl	800d5d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d346:	bf00      	nop
 800d348:	3708      	adds	r7, #8
 800d34a:	46bd      	mov	sp, r7
 800d34c:	bd80      	pop	{r7, pc}

0800d34e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d34e:	b480      	push	{r7}
 800d350:	b083      	sub	sp, #12
 800d352:	af00      	add	r7, sp, #0
 800d354:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d356:	bf00      	nop
 800d358:	370c      	adds	r7, #12
 800d35a:	46bd      	mov	sp, r7
 800d35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d360:	4770      	bx	lr

0800d362 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d362:	b480      	push	{r7}
 800d364:	b083      	sub	sp, #12
 800d366:	af00      	add	r7, sp, #0
 800d368:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d36a:	bf00      	nop
 800d36c:	370c      	adds	r7, #12
 800d36e:	46bd      	mov	sp, r7
 800d370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d374:	4770      	bx	lr

0800d376 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d376:	b480      	push	{r7}
 800d378:	b083      	sub	sp, #12
 800d37a:	af00      	add	r7, sp, #0
 800d37c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d37e:	bf00      	nop
 800d380:	370c      	adds	r7, #12
 800d382:	46bd      	mov	sp, r7
 800d384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d388:	4770      	bx	lr

0800d38a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d38a:	b480      	push	{r7}
 800d38c:	b083      	sub	sp, #12
 800d38e:	af00      	add	r7, sp, #0
 800d390:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d392:	bf00      	nop
 800d394:	370c      	adds	r7, #12
 800d396:	46bd      	mov	sp, r7
 800d398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39c:	4770      	bx	lr
	...

0800d3a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d3a0:	b480      	push	{r7}
 800d3a2:	b085      	sub	sp, #20
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	6078      	str	r0, [r7, #4]
 800d3a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	4a40      	ldr	r2, [pc, #256]	; (800d4b4 <TIM_Base_SetConfig+0x114>)
 800d3b4:	4293      	cmp	r3, r2
 800d3b6:	d013      	beq.n	800d3e0 <TIM_Base_SetConfig+0x40>
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d3be:	d00f      	beq.n	800d3e0 <TIM_Base_SetConfig+0x40>
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	4a3d      	ldr	r2, [pc, #244]	; (800d4b8 <TIM_Base_SetConfig+0x118>)
 800d3c4:	4293      	cmp	r3, r2
 800d3c6:	d00b      	beq.n	800d3e0 <TIM_Base_SetConfig+0x40>
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	4a3c      	ldr	r2, [pc, #240]	; (800d4bc <TIM_Base_SetConfig+0x11c>)
 800d3cc:	4293      	cmp	r3, r2
 800d3ce:	d007      	beq.n	800d3e0 <TIM_Base_SetConfig+0x40>
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	4a3b      	ldr	r2, [pc, #236]	; (800d4c0 <TIM_Base_SetConfig+0x120>)
 800d3d4:	4293      	cmp	r3, r2
 800d3d6:	d003      	beq.n	800d3e0 <TIM_Base_SetConfig+0x40>
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	4a3a      	ldr	r2, [pc, #232]	; (800d4c4 <TIM_Base_SetConfig+0x124>)
 800d3dc:	4293      	cmp	r3, r2
 800d3de:	d108      	bne.n	800d3f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d3e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d3e8:	683b      	ldr	r3, [r7, #0]
 800d3ea:	685b      	ldr	r3, [r3, #4]
 800d3ec:	68fa      	ldr	r2, [r7, #12]
 800d3ee:	4313      	orrs	r3, r2
 800d3f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	4a2f      	ldr	r2, [pc, #188]	; (800d4b4 <TIM_Base_SetConfig+0x114>)
 800d3f6:	4293      	cmp	r3, r2
 800d3f8:	d02b      	beq.n	800d452 <TIM_Base_SetConfig+0xb2>
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d400:	d027      	beq.n	800d452 <TIM_Base_SetConfig+0xb2>
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	4a2c      	ldr	r2, [pc, #176]	; (800d4b8 <TIM_Base_SetConfig+0x118>)
 800d406:	4293      	cmp	r3, r2
 800d408:	d023      	beq.n	800d452 <TIM_Base_SetConfig+0xb2>
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	4a2b      	ldr	r2, [pc, #172]	; (800d4bc <TIM_Base_SetConfig+0x11c>)
 800d40e:	4293      	cmp	r3, r2
 800d410:	d01f      	beq.n	800d452 <TIM_Base_SetConfig+0xb2>
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	4a2a      	ldr	r2, [pc, #168]	; (800d4c0 <TIM_Base_SetConfig+0x120>)
 800d416:	4293      	cmp	r3, r2
 800d418:	d01b      	beq.n	800d452 <TIM_Base_SetConfig+0xb2>
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	4a29      	ldr	r2, [pc, #164]	; (800d4c4 <TIM_Base_SetConfig+0x124>)
 800d41e:	4293      	cmp	r3, r2
 800d420:	d017      	beq.n	800d452 <TIM_Base_SetConfig+0xb2>
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	4a28      	ldr	r2, [pc, #160]	; (800d4c8 <TIM_Base_SetConfig+0x128>)
 800d426:	4293      	cmp	r3, r2
 800d428:	d013      	beq.n	800d452 <TIM_Base_SetConfig+0xb2>
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	4a27      	ldr	r2, [pc, #156]	; (800d4cc <TIM_Base_SetConfig+0x12c>)
 800d42e:	4293      	cmp	r3, r2
 800d430:	d00f      	beq.n	800d452 <TIM_Base_SetConfig+0xb2>
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	4a26      	ldr	r2, [pc, #152]	; (800d4d0 <TIM_Base_SetConfig+0x130>)
 800d436:	4293      	cmp	r3, r2
 800d438:	d00b      	beq.n	800d452 <TIM_Base_SetConfig+0xb2>
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	4a25      	ldr	r2, [pc, #148]	; (800d4d4 <TIM_Base_SetConfig+0x134>)
 800d43e:	4293      	cmp	r3, r2
 800d440:	d007      	beq.n	800d452 <TIM_Base_SetConfig+0xb2>
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	4a24      	ldr	r2, [pc, #144]	; (800d4d8 <TIM_Base_SetConfig+0x138>)
 800d446:	4293      	cmp	r3, r2
 800d448:	d003      	beq.n	800d452 <TIM_Base_SetConfig+0xb2>
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	4a23      	ldr	r2, [pc, #140]	; (800d4dc <TIM_Base_SetConfig+0x13c>)
 800d44e:	4293      	cmp	r3, r2
 800d450:	d108      	bne.n	800d464 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d458:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d45a:	683b      	ldr	r3, [r7, #0]
 800d45c:	68db      	ldr	r3, [r3, #12]
 800d45e:	68fa      	ldr	r2, [r7, #12]
 800d460:	4313      	orrs	r3, r2
 800d462:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d46a:	683b      	ldr	r3, [r7, #0]
 800d46c:	695b      	ldr	r3, [r3, #20]
 800d46e:	4313      	orrs	r3, r2
 800d470:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	68fa      	ldr	r2, [r7, #12]
 800d476:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d478:	683b      	ldr	r3, [r7, #0]
 800d47a:	689a      	ldr	r2, [r3, #8]
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d480:	683b      	ldr	r3, [r7, #0]
 800d482:	681a      	ldr	r2, [r3, #0]
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	4a0a      	ldr	r2, [pc, #40]	; (800d4b4 <TIM_Base_SetConfig+0x114>)
 800d48c:	4293      	cmp	r3, r2
 800d48e:	d003      	beq.n	800d498 <TIM_Base_SetConfig+0xf8>
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	4a0c      	ldr	r2, [pc, #48]	; (800d4c4 <TIM_Base_SetConfig+0x124>)
 800d494:	4293      	cmp	r3, r2
 800d496:	d103      	bne.n	800d4a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d498:	683b      	ldr	r3, [r7, #0]
 800d49a:	691a      	ldr	r2, [r3, #16]
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	2201      	movs	r2, #1
 800d4a4:	615a      	str	r2, [r3, #20]
}
 800d4a6:	bf00      	nop
 800d4a8:	3714      	adds	r7, #20
 800d4aa:	46bd      	mov	sp, r7
 800d4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b0:	4770      	bx	lr
 800d4b2:	bf00      	nop
 800d4b4:	40010000 	.word	0x40010000
 800d4b8:	40000400 	.word	0x40000400
 800d4bc:	40000800 	.word	0x40000800
 800d4c0:	40000c00 	.word	0x40000c00
 800d4c4:	40010400 	.word	0x40010400
 800d4c8:	40014000 	.word	0x40014000
 800d4cc:	40014400 	.word	0x40014400
 800d4d0:	40014800 	.word	0x40014800
 800d4d4:	40001800 	.word	0x40001800
 800d4d8:	40001c00 	.word	0x40001c00
 800d4dc:	40002000 	.word	0x40002000

0800d4e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d4e0:	b480      	push	{r7}
 800d4e2:	b085      	sub	sp, #20
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]
 800d4e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d4f0:	2b01      	cmp	r3, #1
 800d4f2:	d101      	bne.n	800d4f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d4f4:	2302      	movs	r3, #2
 800d4f6:	e05a      	b.n	800d5ae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	2201      	movs	r2, #1
 800d4fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	2202      	movs	r2, #2
 800d504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	685b      	ldr	r3, [r3, #4]
 800d50e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	689b      	ldr	r3, [r3, #8]
 800d516:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d51e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d520:	683b      	ldr	r3, [r7, #0]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	68fa      	ldr	r2, [r7, #12]
 800d526:	4313      	orrs	r3, r2
 800d528:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	68fa      	ldr	r2, [r7, #12]
 800d530:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	4a21      	ldr	r2, [pc, #132]	; (800d5bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800d538:	4293      	cmp	r3, r2
 800d53a:	d022      	beq.n	800d582 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d544:	d01d      	beq.n	800d582 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	4a1d      	ldr	r2, [pc, #116]	; (800d5c0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800d54c:	4293      	cmp	r3, r2
 800d54e:	d018      	beq.n	800d582 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	4a1b      	ldr	r2, [pc, #108]	; (800d5c4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800d556:	4293      	cmp	r3, r2
 800d558:	d013      	beq.n	800d582 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	4a1a      	ldr	r2, [pc, #104]	; (800d5c8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800d560:	4293      	cmp	r3, r2
 800d562:	d00e      	beq.n	800d582 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	4a18      	ldr	r2, [pc, #96]	; (800d5cc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800d56a:	4293      	cmp	r3, r2
 800d56c:	d009      	beq.n	800d582 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	4a17      	ldr	r2, [pc, #92]	; (800d5d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800d574:	4293      	cmp	r3, r2
 800d576:	d004      	beq.n	800d582 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	4a15      	ldr	r2, [pc, #84]	; (800d5d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800d57e:	4293      	cmp	r3, r2
 800d580:	d10c      	bne.n	800d59c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d582:	68bb      	ldr	r3, [r7, #8]
 800d584:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d588:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d58a:	683b      	ldr	r3, [r7, #0]
 800d58c:	685b      	ldr	r3, [r3, #4]
 800d58e:	68ba      	ldr	r2, [r7, #8]
 800d590:	4313      	orrs	r3, r2
 800d592:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	68ba      	ldr	r2, [r7, #8]
 800d59a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	2201      	movs	r2, #1
 800d5a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d5ac:	2300      	movs	r3, #0
}
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	3714      	adds	r7, #20
 800d5b2:	46bd      	mov	sp, r7
 800d5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b8:	4770      	bx	lr
 800d5ba:	bf00      	nop
 800d5bc:	40010000 	.word	0x40010000
 800d5c0:	40000400 	.word	0x40000400
 800d5c4:	40000800 	.word	0x40000800
 800d5c8:	40000c00 	.word	0x40000c00
 800d5cc:	40010400 	.word	0x40010400
 800d5d0:	40014000 	.word	0x40014000
 800d5d4:	40001800 	.word	0x40001800

0800d5d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d5d8:	b480      	push	{r7}
 800d5da:	b083      	sub	sp, #12
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d5e0:	bf00      	nop
 800d5e2:	370c      	adds	r7, #12
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ea:	4770      	bx	lr

0800d5ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d5ec:	b480      	push	{r7}
 800d5ee:	b083      	sub	sp, #12
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d5f4:	bf00      	nop
 800d5f6:	370c      	adds	r7, #12
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fe:	4770      	bx	lr

0800d600 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d600:	b580      	push	{r7, lr}
 800d602:	b082      	sub	sp, #8
 800d604:	af00      	add	r7, sp, #0
 800d606:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d101      	bne.n	800d612 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d60e:	2301      	movs	r3, #1
 800d610:	e03f      	b.n	800d692 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d618:	b2db      	uxtb	r3, r3
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d106      	bne.n	800d62c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	2200      	movs	r2, #0
 800d622:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d626:	6878      	ldr	r0, [r7, #4]
 800d628:	f7fc ff5a 	bl	800a4e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	2224      	movs	r2, #36	; 0x24
 800d630:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	68da      	ldr	r2, [r3, #12]
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d642:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800d644:	6878      	ldr	r0, [r7, #4]
 800d646:	f000 fb6b 	bl	800dd20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	691a      	ldr	r2, [r3, #16]
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d658:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	695a      	ldr	r2, [r3, #20]
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d668:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	68da      	ldr	r2, [r3, #12]
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d678:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	2200      	movs	r2, #0
 800d67e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	2220      	movs	r2, #32
 800d684:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	2220      	movs	r2, #32
 800d68c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800d690:	2300      	movs	r3, #0
}
 800d692:	4618      	mov	r0, r3
 800d694:	3708      	adds	r7, #8
 800d696:	46bd      	mov	sp, r7
 800d698:	bd80      	pop	{r7, pc}
	...

0800d69c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d69c:	b580      	push	{r7, lr}
 800d69e:	b086      	sub	sp, #24
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	60f8      	str	r0, [r7, #12]
 800d6a4:	60b9      	str	r1, [r7, #8]
 800d6a6:	4613      	mov	r3, r2
 800d6a8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d6b0:	b2db      	uxtb	r3, r3
 800d6b2:	2b20      	cmp	r3, #32
 800d6b4:	d153      	bne.n	800d75e <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800d6b6:	68bb      	ldr	r3, [r7, #8]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d002      	beq.n	800d6c2 <HAL_UART_Transmit_DMA+0x26>
 800d6bc:	88fb      	ldrh	r3, [r7, #6]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d101      	bne.n	800d6c6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800d6c2:	2301      	movs	r3, #1
 800d6c4:	e04c      	b.n	800d760 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d6cc:	2b01      	cmp	r3, #1
 800d6ce:	d101      	bne.n	800d6d4 <HAL_UART_Transmit_DMA+0x38>
 800d6d0:	2302      	movs	r3, #2
 800d6d2:	e045      	b.n	800d760 <HAL_UART_Transmit_DMA+0xc4>
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	2201      	movs	r2, #1
 800d6d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800d6dc:	68ba      	ldr	r2, [r7, #8]
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	88fa      	ldrh	r2, [r7, #6]
 800d6e6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	88fa      	ldrh	r2, [r7, #6]
 800d6ec:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	2221      	movs	r2, #33	; 0x21
 800d6f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d700:	4a19      	ldr	r2, [pc, #100]	; (800d768 <HAL_UART_Transmit_DMA+0xcc>)
 800d702:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d708:	4a18      	ldr	r2, [pc, #96]	; (800d76c <HAL_UART_Transmit_DMA+0xd0>)
 800d70a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d710:	4a17      	ldr	r2, [pc, #92]	; (800d770 <HAL_UART_Transmit_DMA+0xd4>)
 800d712:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d718:	2200      	movs	r2, #0
 800d71a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800d71c:	f107 0308 	add.w	r3, r7, #8
 800d720:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d726:	697b      	ldr	r3, [r7, #20]
 800d728:	6819      	ldr	r1, [r3, #0]
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	3304      	adds	r3, #4
 800d730:	461a      	mov	r2, r3
 800d732:	88fb      	ldrh	r3, [r7, #6]
 800d734:	f7fd f99c 	bl	800aa70 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d740:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	2200      	movs	r2, #0
 800d746:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	695a      	ldr	r2, [r3, #20]
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d758:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800d75a:	2300      	movs	r3, #0
 800d75c:	e000      	b.n	800d760 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800d75e:	2302      	movs	r3, #2
  }
}
 800d760:	4618      	mov	r0, r3
 800d762:	3718      	adds	r7, #24
 800d764:	46bd      	mov	sp, r7
 800d766:	bd80      	pop	{r7, pc}
 800d768:	0800d9b1 	.word	0x0800d9b1
 800d76c:	0800da03 	.word	0x0800da03
 800d770:	0800da1f 	.word	0x0800da1f

0800d774 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d774:	b580      	push	{r7, lr}
 800d776:	b088      	sub	sp, #32
 800d778:	af00      	add	r7, sp, #0
 800d77a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	68db      	ldr	r3, [r3, #12]
 800d78a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	695b      	ldr	r3, [r3, #20]
 800d792:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800d794:	2300      	movs	r3, #0
 800d796:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800d798:	2300      	movs	r3, #0
 800d79a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800d79c:	69fb      	ldr	r3, [r7, #28]
 800d79e:	f003 030f 	and.w	r3, r3, #15
 800d7a2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800d7a4:	693b      	ldr	r3, [r7, #16]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d10d      	bne.n	800d7c6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d7aa:	69fb      	ldr	r3, [r7, #28]
 800d7ac:	f003 0320 	and.w	r3, r3, #32
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d008      	beq.n	800d7c6 <HAL_UART_IRQHandler+0x52>
 800d7b4:	69bb      	ldr	r3, [r7, #24]
 800d7b6:	f003 0320 	and.w	r3, r3, #32
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d003      	beq.n	800d7c6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800d7be:	6878      	ldr	r0, [r7, #4]
 800d7c0:	f000 fa2d 	bl	800dc1e <UART_Receive_IT>
      return;
 800d7c4:	e0d1      	b.n	800d96a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800d7c6:	693b      	ldr	r3, [r7, #16]
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	f000 80b0 	beq.w	800d92e <HAL_UART_IRQHandler+0x1ba>
 800d7ce:	697b      	ldr	r3, [r7, #20]
 800d7d0:	f003 0301 	and.w	r3, r3, #1
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d105      	bne.n	800d7e4 <HAL_UART_IRQHandler+0x70>
 800d7d8:	69bb      	ldr	r3, [r7, #24]
 800d7da:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	f000 80a5 	beq.w	800d92e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800d7e4:	69fb      	ldr	r3, [r7, #28]
 800d7e6:	f003 0301 	and.w	r3, r3, #1
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d00a      	beq.n	800d804 <HAL_UART_IRQHandler+0x90>
 800d7ee:	69bb      	ldr	r3, [r7, #24]
 800d7f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d005      	beq.n	800d804 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7fc:	f043 0201 	orr.w	r2, r3, #1
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d804:	69fb      	ldr	r3, [r7, #28]
 800d806:	f003 0304 	and.w	r3, r3, #4
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d00a      	beq.n	800d824 <HAL_UART_IRQHandler+0xb0>
 800d80e:	697b      	ldr	r3, [r7, #20]
 800d810:	f003 0301 	and.w	r3, r3, #1
 800d814:	2b00      	cmp	r3, #0
 800d816:	d005      	beq.n	800d824 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d81c:	f043 0202 	orr.w	r2, r3, #2
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d824:	69fb      	ldr	r3, [r7, #28]
 800d826:	f003 0302 	and.w	r3, r3, #2
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d00a      	beq.n	800d844 <HAL_UART_IRQHandler+0xd0>
 800d82e:	697b      	ldr	r3, [r7, #20]
 800d830:	f003 0301 	and.w	r3, r3, #1
 800d834:	2b00      	cmp	r3, #0
 800d836:	d005      	beq.n	800d844 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d83c:	f043 0204 	orr.w	r2, r3, #4
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800d844:	69fb      	ldr	r3, [r7, #28]
 800d846:	f003 0308 	and.w	r3, r3, #8
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d00f      	beq.n	800d86e <HAL_UART_IRQHandler+0xfa>
 800d84e:	69bb      	ldr	r3, [r7, #24]
 800d850:	f003 0320 	and.w	r3, r3, #32
 800d854:	2b00      	cmp	r3, #0
 800d856:	d104      	bne.n	800d862 <HAL_UART_IRQHandler+0xee>
 800d858:	697b      	ldr	r3, [r7, #20]
 800d85a:	f003 0301 	and.w	r3, r3, #1
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d005      	beq.n	800d86e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d866:	f043 0208 	orr.w	r2, r3, #8
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d872:	2b00      	cmp	r3, #0
 800d874:	d078      	beq.n	800d968 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d876:	69fb      	ldr	r3, [r7, #28]
 800d878:	f003 0320 	and.w	r3, r3, #32
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d007      	beq.n	800d890 <HAL_UART_IRQHandler+0x11c>
 800d880:	69bb      	ldr	r3, [r7, #24]
 800d882:	f003 0320 	and.w	r3, r3, #32
 800d886:	2b00      	cmp	r3, #0
 800d888:	d002      	beq.n	800d890 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800d88a:	6878      	ldr	r0, [r7, #4]
 800d88c:	f000 f9c7 	bl	800dc1e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	695b      	ldr	r3, [r3, #20]
 800d896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d89a:	2b40      	cmp	r3, #64	; 0x40
 800d89c:	bf0c      	ite	eq
 800d89e:	2301      	moveq	r3, #1
 800d8a0:	2300      	movne	r3, #0
 800d8a2:	b2db      	uxtb	r3, r3
 800d8a4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8aa:	f003 0308 	and.w	r3, r3, #8
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d102      	bne.n	800d8b8 <HAL_UART_IRQHandler+0x144>
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d031      	beq.n	800d91c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d8b8:	6878      	ldr	r0, [r7, #4]
 800d8ba:	f000 f910 	bl	800dade <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	695b      	ldr	r3, [r3, #20]
 800d8c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8c8:	2b40      	cmp	r3, #64	; 0x40
 800d8ca:	d123      	bne.n	800d914 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	695a      	ldr	r2, [r3, #20]
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d8da:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d013      	beq.n	800d90c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8e8:	4a21      	ldr	r2, [pc, #132]	; (800d970 <HAL_UART_IRQHandler+0x1fc>)
 800d8ea:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	f7fd f915 	bl	800ab20 <HAL_DMA_Abort_IT>
 800d8f6:	4603      	mov	r3, r0
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d016      	beq.n	800d92a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d900:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d902:	687a      	ldr	r2, [r7, #4]
 800d904:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800d906:	4610      	mov	r0, r2
 800d908:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d90a:	e00e      	b.n	800d92a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d90c:	6878      	ldr	r0, [r7, #4]
 800d90e:	f000 f845 	bl	800d99c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d912:	e00a      	b.n	800d92a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d914:	6878      	ldr	r0, [r7, #4]
 800d916:	f000 f841 	bl	800d99c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d91a:	e006      	b.n	800d92a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d91c:	6878      	ldr	r0, [r7, #4]
 800d91e:	f000 f83d 	bl	800d99c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	2200      	movs	r2, #0
 800d926:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800d928:	e01e      	b.n	800d968 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d92a:	bf00      	nop
    return;
 800d92c:	e01c      	b.n	800d968 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800d92e:	69fb      	ldr	r3, [r7, #28]
 800d930:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d934:	2b00      	cmp	r3, #0
 800d936:	d008      	beq.n	800d94a <HAL_UART_IRQHandler+0x1d6>
 800d938:	69bb      	ldr	r3, [r7, #24]
 800d93a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d003      	beq.n	800d94a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800d942:	6878      	ldr	r0, [r7, #4]
 800d944:	f000 f8fd 	bl	800db42 <UART_Transmit_IT>
    return;
 800d948:	e00f      	b.n	800d96a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800d94a:	69fb      	ldr	r3, [r7, #28]
 800d94c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d950:	2b00      	cmp	r3, #0
 800d952:	d00a      	beq.n	800d96a <HAL_UART_IRQHandler+0x1f6>
 800d954:	69bb      	ldr	r3, [r7, #24]
 800d956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d005      	beq.n	800d96a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800d95e:	6878      	ldr	r0, [r7, #4]
 800d960:	f000 f945 	bl	800dbee <UART_EndTransmit_IT>
    return;
 800d964:	bf00      	nop
 800d966:	e000      	b.n	800d96a <HAL_UART_IRQHandler+0x1f6>
    return;
 800d968:	bf00      	nop
  }
}
 800d96a:	3720      	adds	r7, #32
 800d96c:	46bd      	mov	sp, r7
 800d96e:	bd80      	pop	{r7, pc}
 800d970:	0800db1b 	.word	0x0800db1b

0800d974 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d974:	b480      	push	{r7}
 800d976:	b083      	sub	sp, #12
 800d978:	af00      	add	r7, sp, #0
 800d97a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800d97c:	bf00      	nop
 800d97e:	370c      	adds	r7, #12
 800d980:	46bd      	mov	sp, r7
 800d982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d986:	4770      	bx	lr

0800d988 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d988:	b480      	push	{r7}
 800d98a:	b083      	sub	sp, #12
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800d990:	bf00      	nop
 800d992:	370c      	adds	r7, #12
 800d994:	46bd      	mov	sp, r7
 800d996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99a:	4770      	bx	lr

0800d99c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d99c:	b480      	push	{r7}
 800d99e:	b083      	sub	sp, #12
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800d9a4:	bf00      	nop
 800d9a6:	370c      	adds	r7, #12
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ae:	4770      	bx	lr

0800d9b0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b084      	sub	sp, #16
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9bc:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d113      	bne.n	800d9f4 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	695a      	ldr	r2, [r3, #20]
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d9e0:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	68da      	ldr	r2, [r3, #12]
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d9f0:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d9f2:	e002      	b.n	800d9fa <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800d9f4:	68f8      	ldr	r0, [r7, #12]
 800d9f6:	f7fc fdf5 	bl	800a5e4 <HAL_UART_TxCpltCallback>
}
 800d9fa:	bf00      	nop
 800d9fc:	3710      	adds	r7, #16
 800d9fe:	46bd      	mov	sp, r7
 800da00:	bd80      	pop	{r7, pc}

0800da02 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800da02:	b580      	push	{r7, lr}
 800da04:	b084      	sub	sp, #16
 800da06:	af00      	add	r7, sp, #0
 800da08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da0e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800da10:	68f8      	ldr	r0, [r7, #12]
 800da12:	f7ff ffaf 	bl	800d974 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800da16:	bf00      	nop
 800da18:	3710      	adds	r7, #16
 800da1a:	46bd      	mov	sp, r7
 800da1c:	bd80      	pop	{r7, pc}

0800da1e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800da1e:	b580      	push	{r7, lr}
 800da20:	b084      	sub	sp, #16
 800da22:	af00      	add	r7, sp, #0
 800da24:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800da26:	2300      	movs	r3, #0
 800da28:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da2e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800da30:	68bb      	ldr	r3, [r7, #8]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	695b      	ldr	r3, [r3, #20]
 800da36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da3a:	2b80      	cmp	r3, #128	; 0x80
 800da3c:	bf0c      	ite	eq
 800da3e:	2301      	moveq	r3, #1
 800da40:	2300      	movne	r3, #0
 800da42:	b2db      	uxtb	r3, r3
 800da44:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800da46:	68bb      	ldr	r3, [r7, #8]
 800da48:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800da4c:	b2db      	uxtb	r3, r3
 800da4e:	2b21      	cmp	r3, #33	; 0x21
 800da50:	d108      	bne.n	800da64 <UART_DMAError+0x46>
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	2b00      	cmp	r3, #0
 800da56:	d005      	beq.n	800da64 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800da58:	68bb      	ldr	r3, [r7, #8]
 800da5a:	2200      	movs	r2, #0
 800da5c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800da5e:	68b8      	ldr	r0, [r7, #8]
 800da60:	f000 f827 	bl	800dab2 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800da64:	68bb      	ldr	r3, [r7, #8]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	695b      	ldr	r3, [r3, #20]
 800da6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da6e:	2b40      	cmp	r3, #64	; 0x40
 800da70:	bf0c      	ite	eq
 800da72:	2301      	moveq	r3, #1
 800da74:	2300      	movne	r3, #0
 800da76:	b2db      	uxtb	r3, r3
 800da78:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800da7a:	68bb      	ldr	r3, [r7, #8]
 800da7c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800da80:	b2db      	uxtb	r3, r3
 800da82:	2b22      	cmp	r3, #34	; 0x22
 800da84:	d108      	bne.n	800da98 <UART_DMAError+0x7a>
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d005      	beq.n	800da98 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800da8c:	68bb      	ldr	r3, [r7, #8]
 800da8e:	2200      	movs	r2, #0
 800da90:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800da92:	68b8      	ldr	r0, [r7, #8]
 800da94:	f000 f823 	bl	800dade <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800da98:	68bb      	ldr	r3, [r7, #8]
 800da9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da9c:	f043 0210 	orr.w	r2, r3, #16
 800daa0:	68bb      	ldr	r3, [r7, #8]
 800daa2:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800daa4:	68b8      	ldr	r0, [r7, #8]
 800daa6:	f7ff ff79 	bl	800d99c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800daaa:	bf00      	nop
 800daac:	3710      	adds	r7, #16
 800daae:	46bd      	mov	sp, r7
 800dab0:	bd80      	pop	{r7, pc}

0800dab2 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800dab2:	b480      	push	{r7}
 800dab4:	b083      	sub	sp, #12
 800dab6:	af00      	add	r7, sp, #0
 800dab8:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	68da      	ldr	r2, [r3, #12]
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800dac8:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	2220      	movs	r2, #32
 800dace:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800dad2:	bf00      	nop
 800dad4:	370c      	adds	r7, #12
 800dad6:	46bd      	mov	sp, r7
 800dad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dadc:	4770      	bx	lr

0800dade <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800dade:	b480      	push	{r7}
 800dae0:	b083      	sub	sp, #12
 800dae2:	af00      	add	r7, sp, #0
 800dae4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	68da      	ldr	r2, [r3, #12]
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800daf4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	695a      	ldr	r2, [r3, #20]
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	f022 0201 	bic.w	r2, r2, #1
 800db04:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	2220      	movs	r2, #32
 800db0a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800db0e:	bf00      	nop
 800db10:	370c      	adds	r7, #12
 800db12:	46bd      	mov	sp, r7
 800db14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db18:	4770      	bx	lr

0800db1a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800db1a:	b580      	push	{r7, lr}
 800db1c:	b084      	sub	sp, #16
 800db1e:	af00      	add	r7, sp, #0
 800db20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db26:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	2200      	movs	r2, #0
 800db2c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	2200      	movs	r2, #0
 800db32:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800db34:	68f8      	ldr	r0, [r7, #12]
 800db36:	f7ff ff31 	bl	800d99c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800db3a:	bf00      	nop
 800db3c:	3710      	adds	r7, #16
 800db3e:	46bd      	mov	sp, r7
 800db40:	bd80      	pop	{r7, pc}

0800db42 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800db42:	b480      	push	{r7}
 800db44:	b085      	sub	sp, #20
 800db46:	af00      	add	r7, sp, #0
 800db48:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800db50:	b2db      	uxtb	r3, r3
 800db52:	2b21      	cmp	r3, #33	; 0x21
 800db54:	d144      	bne.n	800dbe0 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	689b      	ldr	r3, [r3, #8]
 800db5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800db5e:	d11a      	bne.n	800db96 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	6a1b      	ldr	r3, [r3, #32]
 800db64:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	881b      	ldrh	r3, [r3, #0]
 800db6a:	461a      	mov	r2, r3
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800db74:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	691b      	ldr	r3, [r3, #16]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d105      	bne.n	800db8a <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	6a1b      	ldr	r3, [r3, #32]
 800db82:	1c9a      	adds	r2, r3, #2
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	621a      	str	r2, [r3, #32]
 800db88:	e00e      	b.n	800dba8 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	6a1b      	ldr	r3, [r3, #32]
 800db8e:	1c5a      	adds	r2, r3, #1
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	621a      	str	r2, [r3, #32]
 800db94:	e008      	b.n	800dba8 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	6a1b      	ldr	r3, [r3, #32]
 800db9a:	1c59      	adds	r1, r3, #1
 800db9c:	687a      	ldr	r2, [r7, #4]
 800db9e:	6211      	str	r1, [r2, #32]
 800dba0:	781a      	ldrb	r2, [r3, #0]
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800dbac:	b29b      	uxth	r3, r3
 800dbae:	3b01      	subs	r3, #1
 800dbb0:	b29b      	uxth	r3, r3
 800dbb2:	687a      	ldr	r2, [r7, #4]
 800dbb4:	4619      	mov	r1, r3
 800dbb6:	84d1      	strh	r1, [r2, #38]	; 0x26
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d10f      	bne.n	800dbdc <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	68da      	ldr	r2, [r3, #12]
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800dbca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	68da      	ldr	r2, [r3, #12]
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dbda:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800dbdc:	2300      	movs	r3, #0
 800dbde:	e000      	b.n	800dbe2 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800dbe0:	2302      	movs	r3, #2
  }
}
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	3714      	adds	r7, #20
 800dbe6:	46bd      	mov	sp, r7
 800dbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbec:	4770      	bx	lr

0800dbee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800dbee:	b580      	push	{r7, lr}
 800dbf0:	b082      	sub	sp, #8
 800dbf2:	af00      	add	r7, sp, #0
 800dbf4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	68da      	ldr	r2, [r3, #12]
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dc04:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	2220      	movs	r2, #32
 800dc0a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800dc0e:	6878      	ldr	r0, [r7, #4]
 800dc10:	f7fc fce8 	bl	800a5e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800dc14:	2300      	movs	r3, #0
}
 800dc16:	4618      	mov	r0, r3
 800dc18:	3708      	adds	r7, #8
 800dc1a:	46bd      	mov	sp, r7
 800dc1c:	bd80      	pop	{r7, pc}

0800dc1e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800dc1e:	b580      	push	{r7, lr}
 800dc20:	b084      	sub	sp, #16
 800dc22:	af00      	add	r7, sp, #0
 800dc24:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800dc2c:	b2db      	uxtb	r3, r3
 800dc2e:	2b22      	cmp	r3, #34	; 0x22
 800dc30:	d171      	bne.n	800dd16 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	689b      	ldr	r3, [r3, #8]
 800dc36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dc3a:	d123      	bne.n	800dc84 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc40:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	691b      	ldr	r3, [r3, #16]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d10e      	bne.n	800dc68 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	685b      	ldr	r3, [r3, #4]
 800dc50:	b29b      	uxth	r3, r3
 800dc52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc56:	b29a      	uxth	r2, r3
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc60:	1c9a      	adds	r2, r3, #2
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	629a      	str	r2, [r3, #40]	; 0x28
 800dc66:	e029      	b.n	800dcbc <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	685b      	ldr	r3, [r3, #4]
 800dc6e:	b29b      	uxth	r3, r3
 800dc70:	b2db      	uxtb	r3, r3
 800dc72:	b29a      	uxth	r2, r3
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc7c:	1c5a      	adds	r2, r3, #1
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	629a      	str	r2, [r3, #40]	; 0x28
 800dc82:	e01b      	b.n	800dcbc <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	691b      	ldr	r3, [r3, #16]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d10a      	bne.n	800dca2 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	6858      	ldr	r0, [r3, #4]
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc96:	1c59      	adds	r1, r3, #1
 800dc98:	687a      	ldr	r2, [r7, #4]
 800dc9a:	6291      	str	r1, [r2, #40]	; 0x28
 800dc9c:	b2c2      	uxtb	r2, r0
 800dc9e:	701a      	strb	r2, [r3, #0]
 800dca0:	e00c      	b.n	800dcbc <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	685b      	ldr	r3, [r3, #4]
 800dca8:	b2da      	uxtb	r2, r3
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcae:	1c58      	adds	r0, r3, #1
 800dcb0:	6879      	ldr	r1, [r7, #4]
 800dcb2:	6288      	str	r0, [r1, #40]	; 0x28
 800dcb4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800dcb8:	b2d2      	uxtb	r2, r2
 800dcba:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800dcc0:	b29b      	uxth	r3, r3
 800dcc2:	3b01      	subs	r3, #1
 800dcc4:	b29b      	uxth	r3, r3
 800dcc6:	687a      	ldr	r2, [r7, #4]
 800dcc8:	4619      	mov	r1, r3
 800dcca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d120      	bne.n	800dd12 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	68da      	ldr	r2, [r3, #12]
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	f022 0220 	bic.w	r2, r2, #32
 800dcde:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	68da      	ldr	r2, [r3, #12]
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800dcee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	695a      	ldr	r2, [r3, #20]
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	f022 0201 	bic.w	r2, r2, #1
 800dcfe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	2220      	movs	r2, #32
 800dd04:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800dd08:	6878      	ldr	r0, [r7, #4]
 800dd0a:	f7ff fe3d 	bl	800d988 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800dd0e:	2300      	movs	r3, #0
 800dd10:	e002      	b.n	800dd18 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800dd12:	2300      	movs	r3, #0
 800dd14:	e000      	b.n	800dd18 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800dd16:	2302      	movs	r3, #2
  }
}
 800dd18:	4618      	mov	r0, r3
 800dd1a:	3710      	adds	r7, #16
 800dd1c:	46bd      	mov	sp, r7
 800dd1e:	bd80      	pop	{r7, pc}

0800dd20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800dd20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd24:	b085      	sub	sp, #20
 800dd26:	af00      	add	r7, sp, #0
 800dd28:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	691b      	ldr	r3, [r3, #16]
 800dd30:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	68da      	ldr	r2, [r3, #12]
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	430a      	orrs	r2, r1
 800dd3e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	689a      	ldr	r2, [r3, #8]
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	691b      	ldr	r3, [r3, #16]
 800dd48:	431a      	orrs	r2, r3
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	695b      	ldr	r3, [r3, #20]
 800dd4e:	431a      	orrs	r2, r3
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	69db      	ldr	r3, [r3, #28]
 800dd54:	4313      	orrs	r3, r2
 800dd56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	68db      	ldr	r3, [r3, #12]
 800dd5e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800dd62:	f023 030c 	bic.w	r3, r3, #12
 800dd66:	687a      	ldr	r2, [r7, #4]
 800dd68:	6812      	ldr	r2, [r2, #0]
 800dd6a:	68f9      	ldr	r1, [r7, #12]
 800dd6c:	430b      	orrs	r3, r1
 800dd6e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	695b      	ldr	r3, [r3, #20]
 800dd76:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	699a      	ldr	r2, [r3, #24]
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	430a      	orrs	r2, r1
 800dd84:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	69db      	ldr	r3, [r3, #28]
 800dd8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dd8e:	f040 818b 	bne.w	800e0a8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	4ac1      	ldr	r2, [pc, #772]	; (800e09c <UART_SetConfig+0x37c>)
 800dd98:	4293      	cmp	r3, r2
 800dd9a:	d005      	beq.n	800dda8 <UART_SetConfig+0x88>
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	4abf      	ldr	r2, [pc, #764]	; (800e0a0 <UART_SetConfig+0x380>)
 800dda2:	4293      	cmp	r3, r2
 800dda4:	f040 80bd 	bne.w	800df22 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800dda8:	f7ff f934 	bl	800d014 <HAL_RCC_GetPCLK2Freq>
 800ddac:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ddae:	68bb      	ldr	r3, [r7, #8]
 800ddb0:	461d      	mov	r5, r3
 800ddb2:	f04f 0600 	mov.w	r6, #0
 800ddb6:	46a8      	mov	r8, r5
 800ddb8:	46b1      	mov	r9, r6
 800ddba:	eb18 0308 	adds.w	r3, r8, r8
 800ddbe:	eb49 0409 	adc.w	r4, r9, r9
 800ddc2:	4698      	mov	r8, r3
 800ddc4:	46a1      	mov	r9, r4
 800ddc6:	eb18 0805 	adds.w	r8, r8, r5
 800ddca:	eb49 0906 	adc.w	r9, r9, r6
 800ddce:	f04f 0100 	mov.w	r1, #0
 800ddd2:	f04f 0200 	mov.w	r2, #0
 800ddd6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ddda:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ddde:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800dde2:	4688      	mov	r8, r1
 800dde4:	4691      	mov	r9, r2
 800dde6:	eb18 0005 	adds.w	r0, r8, r5
 800ddea:	eb49 0106 	adc.w	r1, r9, r6
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	685b      	ldr	r3, [r3, #4]
 800ddf2:	461d      	mov	r5, r3
 800ddf4:	f04f 0600 	mov.w	r6, #0
 800ddf8:	196b      	adds	r3, r5, r5
 800ddfa:	eb46 0406 	adc.w	r4, r6, r6
 800ddfe:	461a      	mov	r2, r3
 800de00:	4623      	mov	r3, r4
 800de02:	f7f2 ff51 	bl	8000ca8 <__aeabi_uldivmod>
 800de06:	4603      	mov	r3, r0
 800de08:	460c      	mov	r4, r1
 800de0a:	461a      	mov	r2, r3
 800de0c:	4ba5      	ldr	r3, [pc, #660]	; (800e0a4 <UART_SetConfig+0x384>)
 800de0e:	fba3 2302 	umull	r2, r3, r3, r2
 800de12:	095b      	lsrs	r3, r3, #5
 800de14:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800de18:	68bb      	ldr	r3, [r7, #8]
 800de1a:	461d      	mov	r5, r3
 800de1c:	f04f 0600 	mov.w	r6, #0
 800de20:	46a9      	mov	r9, r5
 800de22:	46b2      	mov	sl, r6
 800de24:	eb19 0309 	adds.w	r3, r9, r9
 800de28:	eb4a 040a 	adc.w	r4, sl, sl
 800de2c:	4699      	mov	r9, r3
 800de2e:	46a2      	mov	sl, r4
 800de30:	eb19 0905 	adds.w	r9, r9, r5
 800de34:	eb4a 0a06 	adc.w	sl, sl, r6
 800de38:	f04f 0100 	mov.w	r1, #0
 800de3c:	f04f 0200 	mov.w	r2, #0
 800de40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800de44:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800de48:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800de4c:	4689      	mov	r9, r1
 800de4e:	4692      	mov	sl, r2
 800de50:	eb19 0005 	adds.w	r0, r9, r5
 800de54:	eb4a 0106 	adc.w	r1, sl, r6
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	685b      	ldr	r3, [r3, #4]
 800de5c:	461d      	mov	r5, r3
 800de5e:	f04f 0600 	mov.w	r6, #0
 800de62:	196b      	adds	r3, r5, r5
 800de64:	eb46 0406 	adc.w	r4, r6, r6
 800de68:	461a      	mov	r2, r3
 800de6a:	4623      	mov	r3, r4
 800de6c:	f7f2 ff1c 	bl	8000ca8 <__aeabi_uldivmod>
 800de70:	4603      	mov	r3, r0
 800de72:	460c      	mov	r4, r1
 800de74:	461a      	mov	r2, r3
 800de76:	4b8b      	ldr	r3, [pc, #556]	; (800e0a4 <UART_SetConfig+0x384>)
 800de78:	fba3 1302 	umull	r1, r3, r3, r2
 800de7c:	095b      	lsrs	r3, r3, #5
 800de7e:	2164      	movs	r1, #100	; 0x64
 800de80:	fb01 f303 	mul.w	r3, r1, r3
 800de84:	1ad3      	subs	r3, r2, r3
 800de86:	00db      	lsls	r3, r3, #3
 800de88:	3332      	adds	r3, #50	; 0x32
 800de8a:	4a86      	ldr	r2, [pc, #536]	; (800e0a4 <UART_SetConfig+0x384>)
 800de8c:	fba2 2303 	umull	r2, r3, r2, r3
 800de90:	095b      	lsrs	r3, r3, #5
 800de92:	005b      	lsls	r3, r3, #1
 800de94:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800de98:	4498      	add	r8, r3
 800de9a:	68bb      	ldr	r3, [r7, #8]
 800de9c:	461d      	mov	r5, r3
 800de9e:	f04f 0600 	mov.w	r6, #0
 800dea2:	46a9      	mov	r9, r5
 800dea4:	46b2      	mov	sl, r6
 800dea6:	eb19 0309 	adds.w	r3, r9, r9
 800deaa:	eb4a 040a 	adc.w	r4, sl, sl
 800deae:	4699      	mov	r9, r3
 800deb0:	46a2      	mov	sl, r4
 800deb2:	eb19 0905 	adds.w	r9, r9, r5
 800deb6:	eb4a 0a06 	adc.w	sl, sl, r6
 800deba:	f04f 0100 	mov.w	r1, #0
 800debe:	f04f 0200 	mov.w	r2, #0
 800dec2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800dec6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800deca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800dece:	4689      	mov	r9, r1
 800ded0:	4692      	mov	sl, r2
 800ded2:	eb19 0005 	adds.w	r0, r9, r5
 800ded6:	eb4a 0106 	adc.w	r1, sl, r6
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	685b      	ldr	r3, [r3, #4]
 800dede:	461d      	mov	r5, r3
 800dee0:	f04f 0600 	mov.w	r6, #0
 800dee4:	196b      	adds	r3, r5, r5
 800dee6:	eb46 0406 	adc.w	r4, r6, r6
 800deea:	461a      	mov	r2, r3
 800deec:	4623      	mov	r3, r4
 800deee:	f7f2 fedb 	bl	8000ca8 <__aeabi_uldivmod>
 800def2:	4603      	mov	r3, r0
 800def4:	460c      	mov	r4, r1
 800def6:	461a      	mov	r2, r3
 800def8:	4b6a      	ldr	r3, [pc, #424]	; (800e0a4 <UART_SetConfig+0x384>)
 800defa:	fba3 1302 	umull	r1, r3, r3, r2
 800defe:	095b      	lsrs	r3, r3, #5
 800df00:	2164      	movs	r1, #100	; 0x64
 800df02:	fb01 f303 	mul.w	r3, r1, r3
 800df06:	1ad3      	subs	r3, r2, r3
 800df08:	00db      	lsls	r3, r3, #3
 800df0a:	3332      	adds	r3, #50	; 0x32
 800df0c:	4a65      	ldr	r2, [pc, #404]	; (800e0a4 <UART_SetConfig+0x384>)
 800df0e:	fba2 2303 	umull	r2, r3, r2, r3
 800df12:	095b      	lsrs	r3, r3, #5
 800df14:	f003 0207 	and.w	r2, r3, #7
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	4442      	add	r2, r8
 800df1e:	609a      	str	r2, [r3, #8]
 800df20:	e26f      	b.n	800e402 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800df22:	f7ff f863 	bl	800cfec <HAL_RCC_GetPCLK1Freq>
 800df26:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800df28:	68bb      	ldr	r3, [r7, #8]
 800df2a:	461d      	mov	r5, r3
 800df2c:	f04f 0600 	mov.w	r6, #0
 800df30:	46a8      	mov	r8, r5
 800df32:	46b1      	mov	r9, r6
 800df34:	eb18 0308 	adds.w	r3, r8, r8
 800df38:	eb49 0409 	adc.w	r4, r9, r9
 800df3c:	4698      	mov	r8, r3
 800df3e:	46a1      	mov	r9, r4
 800df40:	eb18 0805 	adds.w	r8, r8, r5
 800df44:	eb49 0906 	adc.w	r9, r9, r6
 800df48:	f04f 0100 	mov.w	r1, #0
 800df4c:	f04f 0200 	mov.w	r2, #0
 800df50:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800df54:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800df58:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800df5c:	4688      	mov	r8, r1
 800df5e:	4691      	mov	r9, r2
 800df60:	eb18 0005 	adds.w	r0, r8, r5
 800df64:	eb49 0106 	adc.w	r1, r9, r6
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	685b      	ldr	r3, [r3, #4]
 800df6c:	461d      	mov	r5, r3
 800df6e:	f04f 0600 	mov.w	r6, #0
 800df72:	196b      	adds	r3, r5, r5
 800df74:	eb46 0406 	adc.w	r4, r6, r6
 800df78:	461a      	mov	r2, r3
 800df7a:	4623      	mov	r3, r4
 800df7c:	f7f2 fe94 	bl	8000ca8 <__aeabi_uldivmod>
 800df80:	4603      	mov	r3, r0
 800df82:	460c      	mov	r4, r1
 800df84:	461a      	mov	r2, r3
 800df86:	4b47      	ldr	r3, [pc, #284]	; (800e0a4 <UART_SetConfig+0x384>)
 800df88:	fba3 2302 	umull	r2, r3, r3, r2
 800df8c:	095b      	lsrs	r3, r3, #5
 800df8e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800df92:	68bb      	ldr	r3, [r7, #8]
 800df94:	461d      	mov	r5, r3
 800df96:	f04f 0600 	mov.w	r6, #0
 800df9a:	46a9      	mov	r9, r5
 800df9c:	46b2      	mov	sl, r6
 800df9e:	eb19 0309 	adds.w	r3, r9, r9
 800dfa2:	eb4a 040a 	adc.w	r4, sl, sl
 800dfa6:	4699      	mov	r9, r3
 800dfa8:	46a2      	mov	sl, r4
 800dfaa:	eb19 0905 	adds.w	r9, r9, r5
 800dfae:	eb4a 0a06 	adc.w	sl, sl, r6
 800dfb2:	f04f 0100 	mov.w	r1, #0
 800dfb6:	f04f 0200 	mov.w	r2, #0
 800dfba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800dfbe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800dfc2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800dfc6:	4689      	mov	r9, r1
 800dfc8:	4692      	mov	sl, r2
 800dfca:	eb19 0005 	adds.w	r0, r9, r5
 800dfce:	eb4a 0106 	adc.w	r1, sl, r6
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	685b      	ldr	r3, [r3, #4]
 800dfd6:	461d      	mov	r5, r3
 800dfd8:	f04f 0600 	mov.w	r6, #0
 800dfdc:	196b      	adds	r3, r5, r5
 800dfde:	eb46 0406 	adc.w	r4, r6, r6
 800dfe2:	461a      	mov	r2, r3
 800dfe4:	4623      	mov	r3, r4
 800dfe6:	f7f2 fe5f 	bl	8000ca8 <__aeabi_uldivmod>
 800dfea:	4603      	mov	r3, r0
 800dfec:	460c      	mov	r4, r1
 800dfee:	461a      	mov	r2, r3
 800dff0:	4b2c      	ldr	r3, [pc, #176]	; (800e0a4 <UART_SetConfig+0x384>)
 800dff2:	fba3 1302 	umull	r1, r3, r3, r2
 800dff6:	095b      	lsrs	r3, r3, #5
 800dff8:	2164      	movs	r1, #100	; 0x64
 800dffa:	fb01 f303 	mul.w	r3, r1, r3
 800dffe:	1ad3      	subs	r3, r2, r3
 800e000:	00db      	lsls	r3, r3, #3
 800e002:	3332      	adds	r3, #50	; 0x32
 800e004:	4a27      	ldr	r2, [pc, #156]	; (800e0a4 <UART_SetConfig+0x384>)
 800e006:	fba2 2303 	umull	r2, r3, r2, r3
 800e00a:	095b      	lsrs	r3, r3, #5
 800e00c:	005b      	lsls	r3, r3, #1
 800e00e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800e012:	4498      	add	r8, r3
 800e014:	68bb      	ldr	r3, [r7, #8]
 800e016:	461d      	mov	r5, r3
 800e018:	f04f 0600 	mov.w	r6, #0
 800e01c:	46a9      	mov	r9, r5
 800e01e:	46b2      	mov	sl, r6
 800e020:	eb19 0309 	adds.w	r3, r9, r9
 800e024:	eb4a 040a 	adc.w	r4, sl, sl
 800e028:	4699      	mov	r9, r3
 800e02a:	46a2      	mov	sl, r4
 800e02c:	eb19 0905 	adds.w	r9, r9, r5
 800e030:	eb4a 0a06 	adc.w	sl, sl, r6
 800e034:	f04f 0100 	mov.w	r1, #0
 800e038:	f04f 0200 	mov.w	r2, #0
 800e03c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e040:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e044:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e048:	4689      	mov	r9, r1
 800e04a:	4692      	mov	sl, r2
 800e04c:	eb19 0005 	adds.w	r0, r9, r5
 800e050:	eb4a 0106 	adc.w	r1, sl, r6
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	685b      	ldr	r3, [r3, #4]
 800e058:	461d      	mov	r5, r3
 800e05a:	f04f 0600 	mov.w	r6, #0
 800e05e:	196b      	adds	r3, r5, r5
 800e060:	eb46 0406 	adc.w	r4, r6, r6
 800e064:	461a      	mov	r2, r3
 800e066:	4623      	mov	r3, r4
 800e068:	f7f2 fe1e 	bl	8000ca8 <__aeabi_uldivmod>
 800e06c:	4603      	mov	r3, r0
 800e06e:	460c      	mov	r4, r1
 800e070:	461a      	mov	r2, r3
 800e072:	4b0c      	ldr	r3, [pc, #48]	; (800e0a4 <UART_SetConfig+0x384>)
 800e074:	fba3 1302 	umull	r1, r3, r3, r2
 800e078:	095b      	lsrs	r3, r3, #5
 800e07a:	2164      	movs	r1, #100	; 0x64
 800e07c:	fb01 f303 	mul.w	r3, r1, r3
 800e080:	1ad3      	subs	r3, r2, r3
 800e082:	00db      	lsls	r3, r3, #3
 800e084:	3332      	adds	r3, #50	; 0x32
 800e086:	4a07      	ldr	r2, [pc, #28]	; (800e0a4 <UART_SetConfig+0x384>)
 800e088:	fba2 2303 	umull	r2, r3, r2, r3
 800e08c:	095b      	lsrs	r3, r3, #5
 800e08e:	f003 0207 	and.w	r2, r3, #7
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	4442      	add	r2, r8
 800e098:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800e09a:	e1b2      	b.n	800e402 <UART_SetConfig+0x6e2>
 800e09c:	40011000 	.word	0x40011000
 800e0a0:	40011400 	.word	0x40011400
 800e0a4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	4ad7      	ldr	r2, [pc, #860]	; (800e40c <UART_SetConfig+0x6ec>)
 800e0ae:	4293      	cmp	r3, r2
 800e0b0:	d005      	beq.n	800e0be <UART_SetConfig+0x39e>
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	4ad6      	ldr	r2, [pc, #856]	; (800e410 <UART_SetConfig+0x6f0>)
 800e0b8:	4293      	cmp	r3, r2
 800e0ba:	f040 80d1 	bne.w	800e260 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800e0be:	f7fe ffa9 	bl	800d014 <HAL_RCC_GetPCLK2Freq>
 800e0c2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e0c4:	68bb      	ldr	r3, [r7, #8]
 800e0c6:	469a      	mov	sl, r3
 800e0c8:	f04f 0b00 	mov.w	fp, #0
 800e0cc:	46d0      	mov	r8, sl
 800e0ce:	46d9      	mov	r9, fp
 800e0d0:	eb18 0308 	adds.w	r3, r8, r8
 800e0d4:	eb49 0409 	adc.w	r4, r9, r9
 800e0d8:	4698      	mov	r8, r3
 800e0da:	46a1      	mov	r9, r4
 800e0dc:	eb18 080a 	adds.w	r8, r8, sl
 800e0e0:	eb49 090b 	adc.w	r9, r9, fp
 800e0e4:	f04f 0100 	mov.w	r1, #0
 800e0e8:	f04f 0200 	mov.w	r2, #0
 800e0ec:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800e0f0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800e0f4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800e0f8:	4688      	mov	r8, r1
 800e0fa:	4691      	mov	r9, r2
 800e0fc:	eb1a 0508 	adds.w	r5, sl, r8
 800e100:	eb4b 0609 	adc.w	r6, fp, r9
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	685b      	ldr	r3, [r3, #4]
 800e108:	4619      	mov	r1, r3
 800e10a:	f04f 0200 	mov.w	r2, #0
 800e10e:	f04f 0300 	mov.w	r3, #0
 800e112:	f04f 0400 	mov.w	r4, #0
 800e116:	0094      	lsls	r4, r2, #2
 800e118:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800e11c:	008b      	lsls	r3, r1, #2
 800e11e:	461a      	mov	r2, r3
 800e120:	4623      	mov	r3, r4
 800e122:	4628      	mov	r0, r5
 800e124:	4631      	mov	r1, r6
 800e126:	f7f2 fdbf 	bl	8000ca8 <__aeabi_uldivmod>
 800e12a:	4603      	mov	r3, r0
 800e12c:	460c      	mov	r4, r1
 800e12e:	461a      	mov	r2, r3
 800e130:	4bb8      	ldr	r3, [pc, #736]	; (800e414 <UART_SetConfig+0x6f4>)
 800e132:	fba3 2302 	umull	r2, r3, r3, r2
 800e136:	095b      	lsrs	r3, r3, #5
 800e138:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800e13c:	68bb      	ldr	r3, [r7, #8]
 800e13e:	469b      	mov	fp, r3
 800e140:	f04f 0c00 	mov.w	ip, #0
 800e144:	46d9      	mov	r9, fp
 800e146:	46e2      	mov	sl, ip
 800e148:	eb19 0309 	adds.w	r3, r9, r9
 800e14c:	eb4a 040a 	adc.w	r4, sl, sl
 800e150:	4699      	mov	r9, r3
 800e152:	46a2      	mov	sl, r4
 800e154:	eb19 090b 	adds.w	r9, r9, fp
 800e158:	eb4a 0a0c 	adc.w	sl, sl, ip
 800e15c:	f04f 0100 	mov.w	r1, #0
 800e160:	f04f 0200 	mov.w	r2, #0
 800e164:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e168:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e16c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e170:	4689      	mov	r9, r1
 800e172:	4692      	mov	sl, r2
 800e174:	eb1b 0509 	adds.w	r5, fp, r9
 800e178:	eb4c 060a 	adc.w	r6, ip, sl
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	685b      	ldr	r3, [r3, #4]
 800e180:	4619      	mov	r1, r3
 800e182:	f04f 0200 	mov.w	r2, #0
 800e186:	f04f 0300 	mov.w	r3, #0
 800e18a:	f04f 0400 	mov.w	r4, #0
 800e18e:	0094      	lsls	r4, r2, #2
 800e190:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800e194:	008b      	lsls	r3, r1, #2
 800e196:	461a      	mov	r2, r3
 800e198:	4623      	mov	r3, r4
 800e19a:	4628      	mov	r0, r5
 800e19c:	4631      	mov	r1, r6
 800e19e:	f7f2 fd83 	bl	8000ca8 <__aeabi_uldivmod>
 800e1a2:	4603      	mov	r3, r0
 800e1a4:	460c      	mov	r4, r1
 800e1a6:	461a      	mov	r2, r3
 800e1a8:	4b9a      	ldr	r3, [pc, #616]	; (800e414 <UART_SetConfig+0x6f4>)
 800e1aa:	fba3 1302 	umull	r1, r3, r3, r2
 800e1ae:	095b      	lsrs	r3, r3, #5
 800e1b0:	2164      	movs	r1, #100	; 0x64
 800e1b2:	fb01 f303 	mul.w	r3, r1, r3
 800e1b6:	1ad3      	subs	r3, r2, r3
 800e1b8:	011b      	lsls	r3, r3, #4
 800e1ba:	3332      	adds	r3, #50	; 0x32
 800e1bc:	4a95      	ldr	r2, [pc, #596]	; (800e414 <UART_SetConfig+0x6f4>)
 800e1be:	fba2 2303 	umull	r2, r3, r2, r3
 800e1c2:	095b      	lsrs	r3, r3, #5
 800e1c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e1c8:	4498      	add	r8, r3
 800e1ca:	68bb      	ldr	r3, [r7, #8]
 800e1cc:	469b      	mov	fp, r3
 800e1ce:	f04f 0c00 	mov.w	ip, #0
 800e1d2:	46d9      	mov	r9, fp
 800e1d4:	46e2      	mov	sl, ip
 800e1d6:	eb19 0309 	adds.w	r3, r9, r9
 800e1da:	eb4a 040a 	adc.w	r4, sl, sl
 800e1de:	4699      	mov	r9, r3
 800e1e0:	46a2      	mov	sl, r4
 800e1e2:	eb19 090b 	adds.w	r9, r9, fp
 800e1e6:	eb4a 0a0c 	adc.w	sl, sl, ip
 800e1ea:	f04f 0100 	mov.w	r1, #0
 800e1ee:	f04f 0200 	mov.w	r2, #0
 800e1f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e1f6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e1fa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e1fe:	4689      	mov	r9, r1
 800e200:	4692      	mov	sl, r2
 800e202:	eb1b 0509 	adds.w	r5, fp, r9
 800e206:	eb4c 060a 	adc.w	r6, ip, sl
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	685b      	ldr	r3, [r3, #4]
 800e20e:	4619      	mov	r1, r3
 800e210:	f04f 0200 	mov.w	r2, #0
 800e214:	f04f 0300 	mov.w	r3, #0
 800e218:	f04f 0400 	mov.w	r4, #0
 800e21c:	0094      	lsls	r4, r2, #2
 800e21e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800e222:	008b      	lsls	r3, r1, #2
 800e224:	461a      	mov	r2, r3
 800e226:	4623      	mov	r3, r4
 800e228:	4628      	mov	r0, r5
 800e22a:	4631      	mov	r1, r6
 800e22c:	f7f2 fd3c 	bl	8000ca8 <__aeabi_uldivmod>
 800e230:	4603      	mov	r3, r0
 800e232:	460c      	mov	r4, r1
 800e234:	461a      	mov	r2, r3
 800e236:	4b77      	ldr	r3, [pc, #476]	; (800e414 <UART_SetConfig+0x6f4>)
 800e238:	fba3 1302 	umull	r1, r3, r3, r2
 800e23c:	095b      	lsrs	r3, r3, #5
 800e23e:	2164      	movs	r1, #100	; 0x64
 800e240:	fb01 f303 	mul.w	r3, r1, r3
 800e244:	1ad3      	subs	r3, r2, r3
 800e246:	011b      	lsls	r3, r3, #4
 800e248:	3332      	adds	r3, #50	; 0x32
 800e24a:	4a72      	ldr	r2, [pc, #456]	; (800e414 <UART_SetConfig+0x6f4>)
 800e24c:	fba2 2303 	umull	r2, r3, r2, r3
 800e250:	095b      	lsrs	r3, r3, #5
 800e252:	f003 020f 	and.w	r2, r3, #15
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	4442      	add	r2, r8
 800e25c:	609a      	str	r2, [r3, #8]
 800e25e:	e0d0      	b.n	800e402 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800e260:	f7fe fec4 	bl	800cfec <HAL_RCC_GetPCLK1Freq>
 800e264:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e266:	68bb      	ldr	r3, [r7, #8]
 800e268:	469a      	mov	sl, r3
 800e26a:	f04f 0b00 	mov.w	fp, #0
 800e26e:	46d0      	mov	r8, sl
 800e270:	46d9      	mov	r9, fp
 800e272:	eb18 0308 	adds.w	r3, r8, r8
 800e276:	eb49 0409 	adc.w	r4, r9, r9
 800e27a:	4698      	mov	r8, r3
 800e27c:	46a1      	mov	r9, r4
 800e27e:	eb18 080a 	adds.w	r8, r8, sl
 800e282:	eb49 090b 	adc.w	r9, r9, fp
 800e286:	f04f 0100 	mov.w	r1, #0
 800e28a:	f04f 0200 	mov.w	r2, #0
 800e28e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800e292:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800e296:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800e29a:	4688      	mov	r8, r1
 800e29c:	4691      	mov	r9, r2
 800e29e:	eb1a 0508 	adds.w	r5, sl, r8
 800e2a2:	eb4b 0609 	adc.w	r6, fp, r9
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	685b      	ldr	r3, [r3, #4]
 800e2aa:	4619      	mov	r1, r3
 800e2ac:	f04f 0200 	mov.w	r2, #0
 800e2b0:	f04f 0300 	mov.w	r3, #0
 800e2b4:	f04f 0400 	mov.w	r4, #0
 800e2b8:	0094      	lsls	r4, r2, #2
 800e2ba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800e2be:	008b      	lsls	r3, r1, #2
 800e2c0:	461a      	mov	r2, r3
 800e2c2:	4623      	mov	r3, r4
 800e2c4:	4628      	mov	r0, r5
 800e2c6:	4631      	mov	r1, r6
 800e2c8:	f7f2 fcee 	bl	8000ca8 <__aeabi_uldivmod>
 800e2cc:	4603      	mov	r3, r0
 800e2ce:	460c      	mov	r4, r1
 800e2d0:	461a      	mov	r2, r3
 800e2d2:	4b50      	ldr	r3, [pc, #320]	; (800e414 <UART_SetConfig+0x6f4>)
 800e2d4:	fba3 2302 	umull	r2, r3, r3, r2
 800e2d8:	095b      	lsrs	r3, r3, #5
 800e2da:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800e2de:	68bb      	ldr	r3, [r7, #8]
 800e2e0:	469b      	mov	fp, r3
 800e2e2:	f04f 0c00 	mov.w	ip, #0
 800e2e6:	46d9      	mov	r9, fp
 800e2e8:	46e2      	mov	sl, ip
 800e2ea:	eb19 0309 	adds.w	r3, r9, r9
 800e2ee:	eb4a 040a 	adc.w	r4, sl, sl
 800e2f2:	4699      	mov	r9, r3
 800e2f4:	46a2      	mov	sl, r4
 800e2f6:	eb19 090b 	adds.w	r9, r9, fp
 800e2fa:	eb4a 0a0c 	adc.w	sl, sl, ip
 800e2fe:	f04f 0100 	mov.w	r1, #0
 800e302:	f04f 0200 	mov.w	r2, #0
 800e306:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e30a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e30e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e312:	4689      	mov	r9, r1
 800e314:	4692      	mov	sl, r2
 800e316:	eb1b 0509 	adds.w	r5, fp, r9
 800e31a:	eb4c 060a 	adc.w	r6, ip, sl
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	685b      	ldr	r3, [r3, #4]
 800e322:	4619      	mov	r1, r3
 800e324:	f04f 0200 	mov.w	r2, #0
 800e328:	f04f 0300 	mov.w	r3, #0
 800e32c:	f04f 0400 	mov.w	r4, #0
 800e330:	0094      	lsls	r4, r2, #2
 800e332:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800e336:	008b      	lsls	r3, r1, #2
 800e338:	461a      	mov	r2, r3
 800e33a:	4623      	mov	r3, r4
 800e33c:	4628      	mov	r0, r5
 800e33e:	4631      	mov	r1, r6
 800e340:	f7f2 fcb2 	bl	8000ca8 <__aeabi_uldivmod>
 800e344:	4603      	mov	r3, r0
 800e346:	460c      	mov	r4, r1
 800e348:	461a      	mov	r2, r3
 800e34a:	4b32      	ldr	r3, [pc, #200]	; (800e414 <UART_SetConfig+0x6f4>)
 800e34c:	fba3 1302 	umull	r1, r3, r3, r2
 800e350:	095b      	lsrs	r3, r3, #5
 800e352:	2164      	movs	r1, #100	; 0x64
 800e354:	fb01 f303 	mul.w	r3, r1, r3
 800e358:	1ad3      	subs	r3, r2, r3
 800e35a:	011b      	lsls	r3, r3, #4
 800e35c:	3332      	adds	r3, #50	; 0x32
 800e35e:	4a2d      	ldr	r2, [pc, #180]	; (800e414 <UART_SetConfig+0x6f4>)
 800e360:	fba2 2303 	umull	r2, r3, r2, r3
 800e364:	095b      	lsrs	r3, r3, #5
 800e366:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e36a:	4498      	add	r8, r3
 800e36c:	68bb      	ldr	r3, [r7, #8]
 800e36e:	469b      	mov	fp, r3
 800e370:	f04f 0c00 	mov.w	ip, #0
 800e374:	46d9      	mov	r9, fp
 800e376:	46e2      	mov	sl, ip
 800e378:	eb19 0309 	adds.w	r3, r9, r9
 800e37c:	eb4a 040a 	adc.w	r4, sl, sl
 800e380:	4699      	mov	r9, r3
 800e382:	46a2      	mov	sl, r4
 800e384:	eb19 090b 	adds.w	r9, r9, fp
 800e388:	eb4a 0a0c 	adc.w	sl, sl, ip
 800e38c:	f04f 0100 	mov.w	r1, #0
 800e390:	f04f 0200 	mov.w	r2, #0
 800e394:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e398:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e39c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e3a0:	4689      	mov	r9, r1
 800e3a2:	4692      	mov	sl, r2
 800e3a4:	eb1b 0509 	adds.w	r5, fp, r9
 800e3a8:	eb4c 060a 	adc.w	r6, ip, sl
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	685b      	ldr	r3, [r3, #4]
 800e3b0:	4619      	mov	r1, r3
 800e3b2:	f04f 0200 	mov.w	r2, #0
 800e3b6:	f04f 0300 	mov.w	r3, #0
 800e3ba:	f04f 0400 	mov.w	r4, #0
 800e3be:	0094      	lsls	r4, r2, #2
 800e3c0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800e3c4:	008b      	lsls	r3, r1, #2
 800e3c6:	461a      	mov	r2, r3
 800e3c8:	4623      	mov	r3, r4
 800e3ca:	4628      	mov	r0, r5
 800e3cc:	4631      	mov	r1, r6
 800e3ce:	f7f2 fc6b 	bl	8000ca8 <__aeabi_uldivmod>
 800e3d2:	4603      	mov	r3, r0
 800e3d4:	460c      	mov	r4, r1
 800e3d6:	461a      	mov	r2, r3
 800e3d8:	4b0e      	ldr	r3, [pc, #56]	; (800e414 <UART_SetConfig+0x6f4>)
 800e3da:	fba3 1302 	umull	r1, r3, r3, r2
 800e3de:	095b      	lsrs	r3, r3, #5
 800e3e0:	2164      	movs	r1, #100	; 0x64
 800e3e2:	fb01 f303 	mul.w	r3, r1, r3
 800e3e6:	1ad3      	subs	r3, r2, r3
 800e3e8:	011b      	lsls	r3, r3, #4
 800e3ea:	3332      	adds	r3, #50	; 0x32
 800e3ec:	4a09      	ldr	r2, [pc, #36]	; (800e414 <UART_SetConfig+0x6f4>)
 800e3ee:	fba2 2303 	umull	r2, r3, r2, r3
 800e3f2:	095b      	lsrs	r3, r3, #5
 800e3f4:	f003 020f 	and.w	r2, r3, #15
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	4442      	add	r2, r8
 800e3fe:	609a      	str	r2, [r3, #8]
}
 800e400:	e7ff      	b.n	800e402 <UART_SetConfig+0x6e2>
 800e402:	bf00      	nop
 800e404:	3714      	adds	r7, #20
 800e406:	46bd      	mov	sp, r7
 800e408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e40c:	40011000 	.word	0x40011000
 800e410:	40011400 	.word	0x40011400
 800e414:	51eb851f 	.word	0x51eb851f

0800e418 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800e418:	b480      	push	{r7}
 800e41a:	b085      	sub	sp, #20
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	6078      	str	r0, [r7, #4]
 800e420:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800e422:	2300      	movs	r3, #0
 800e424:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800e426:	683b      	ldr	r3, [r7, #0]
 800e428:	681a      	ldr	r2, [r3, #0]
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e430:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800e432:	68fa      	ldr	r2, [r7, #12]
 800e434:	4b20      	ldr	r3, [pc, #128]	; (800e4b8 <FSMC_NORSRAM_Init+0xa0>)
 800e436:	4013      	ands	r3, r2
 800e438:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800e43a:	683b      	ldr	r3, [r7, #0]
 800e43c:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800e43e:	683b      	ldr	r3, [r7, #0]
 800e440:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800e442:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800e444:	683b      	ldr	r3, [r7, #0]
 800e446:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800e448:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800e44a:	683b      	ldr	r3, [r7, #0]
 800e44c:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800e44e:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800e450:	683b      	ldr	r3, [r7, #0]
 800e452:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800e454:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800e456:	683b      	ldr	r3, [r7, #0]
 800e458:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800e45a:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800e45c:	683b      	ldr	r3, [r7, #0]
 800e45e:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800e460:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800e462:	683b      	ldr	r3, [r7, #0]
 800e464:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800e466:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800e468:	683b      	ldr	r3, [r7, #0]
 800e46a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800e46c:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800e46e:	683b      	ldr	r3, [r7, #0]
 800e470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800e472:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800e474:	683b      	ldr	r3, [r7, #0]
 800e476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800e478:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800e47a:	683b      	ldr	r3, [r7, #0]
 800e47c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800e47e:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800e480:	683b      	ldr	r3, [r7, #0]
 800e482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 800e484:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800e486:	68fa      	ldr	r2, [r7, #12]
 800e488:	4313      	orrs	r3, r2
 800e48a:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800e48c:	683b      	ldr	r3, [r7, #0]
 800e48e:	689b      	ldr	r3, [r3, #8]
 800e490:	2b08      	cmp	r3, #8
 800e492:	d103      	bne.n	800e49c <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e49a:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800e49c:	683b      	ldr	r3, [r7, #0]
 800e49e:	681a      	ldr	r2, [r3, #0]
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	68f9      	ldr	r1, [r7, #12]
 800e4a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800e4a8:	2300      	movs	r3, #0
}
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	3714      	adds	r7, #20
 800e4ae:	46bd      	mov	sp, r7
 800e4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b4:	4770      	bx	lr
 800e4b6:	bf00      	nop
 800e4b8:	fff00080 	.word	0xfff00080

0800e4bc <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800e4bc:	b480      	push	{r7}
 800e4be:	b087      	sub	sp, #28
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	60f8      	str	r0, [r7, #12]
 800e4c4:	60b9      	str	r1, [r7, #8]
 800e4c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800e4c8:	2300      	movs	r3, #0
 800e4ca:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	1c5a      	adds	r2, r3, #1
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4d6:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800e4d8:	697b      	ldr	r3, [r7, #20]
 800e4da:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800e4de:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800e4e0:	68bb      	ldr	r3, [r7, #8]
 800e4e2:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800e4e4:	68bb      	ldr	r3, [r7, #8]
 800e4e6:	685b      	ldr	r3, [r3, #4]
 800e4e8:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800e4ea:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800e4ec:	68bb      	ldr	r3, [r7, #8]
 800e4ee:	689b      	ldr	r3, [r3, #8]
 800e4f0:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800e4f2:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800e4f4:	68bb      	ldr	r3, [r7, #8]
 800e4f6:	68db      	ldr	r3, [r3, #12]
 800e4f8:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800e4fa:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800e4fc:	68bb      	ldr	r3, [r7, #8]
 800e4fe:	691b      	ldr	r3, [r3, #16]
 800e500:	3b01      	subs	r3, #1
 800e502:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800e504:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800e506:	68bb      	ldr	r3, [r7, #8]
 800e508:	695b      	ldr	r3, [r3, #20]
 800e50a:	3b02      	subs	r3, #2
 800e50c:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800e50e:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800e510:	68bb      	ldr	r3, [r7, #8]
 800e512:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800e514:	4313      	orrs	r3, r2
 800e516:	697a      	ldr	r2, [r7, #20]
 800e518:	4313      	orrs	r3, r2
 800e51a:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	1c5a      	adds	r2, r3, #1
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	6979      	ldr	r1, [r7, #20]
 800e524:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800e528:	2300      	movs	r3, #0
}
 800e52a:	4618      	mov	r0, r3
 800e52c:	371c      	adds	r7, #28
 800e52e:	46bd      	mov	sp, r7
 800e530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e534:	4770      	bx	lr
	...

0800e538 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800e538:	b480      	push	{r7}
 800e53a:	b087      	sub	sp, #28
 800e53c:	af00      	add	r7, sp, #0
 800e53e:	60f8      	str	r0, [r7, #12]
 800e540:	60b9      	str	r1, [r7, #8]
 800e542:	607a      	str	r2, [r7, #4]
 800e544:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800e546:	2300      	movs	r3, #0
 800e548:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800e54a:	683b      	ldr	r3, [r7, #0]
 800e54c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e550:	d122      	bne.n	800e598 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	687a      	ldr	r2, [r7, #4]
 800e556:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e55a:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800e55c:	697a      	ldr	r2, [r7, #20]
 800e55e:	4b15      	ldr	r3, [pc, #84]	; (800e5b4 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800e560:	4013      	ands	r3, r2
 800e562:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800e564:	68bb      	ldr	r3, [r7, #8]
 800e566:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800e568:	68bb      	ldr	r3, [r7, #8]
 800e56a:	685b      	ldr	r3, [r3, #4]
 800e56c:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800e56e:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800e570:	68bb      	ldr	r3, [r7, #8]
 800e572:	689b      	ldr	r3, [r3, #8]
 800e574:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800e576:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800e578:	68bb      	ldr	r3, [r7, #8]
 800e57a:	68db      	ldr	r3, [r3, #12]
 800e57c:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800e57e:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800e580:	68bb      	ldr	r3, [r7, #8]
 800e582:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800e584:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800e586:	697a      	ldr	r2, [r7, #20]
 800e588:	4313      	orrs	r3, r2
 800e58a:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	687a      	ldr	r2, [r7, #4]
 800e590:	6979      	ldr	r1, [r7, #20]
 800e592:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800e596:	e005      	b.n	800e5a4 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	687a      	ldr	r2, [r7, #4]
 800e59c:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800e5a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800e5a4:	2300      	movs	r3, #0
}
 800e5a6:	4618      	mov	r0, r3
 800e5a8:	371c      	adds	r7, #28
 800e5aa:	46bd      	mov	sp, r7
 800e5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b0:	4770      	bx	lr
 800e5b2:	bf00      	nop
 800e5b4:	cff00000 	.word	0xcff00000

0800e5b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e5b8:	b084      	sub	sp, #16
 800e5ba:	b580      	push	{r7, lr}
 800e5bc:	b084      	sub	sp, #16
 800e5be:	af00      	add	r7, sp, #0
 800e5c0:	6078      	str	r0, [r7, #4]
 800e5c2:	f107 001c 	add.w	r0, r7, #28
 800e5c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e5ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5cc:	2b01      	cmp	r3, #1
 800e5ce:	d122      	bne.n	800e616 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	68db      	ldr	r3, [r3, #12]
 800e5e0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800e5e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e5e8:	687a      	ldr	r2, [r7, #4]
 800e5ea:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	68db      	ldr	r3, [r3, #12]
 800e5f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800e5f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e5fa:	2b01      	cmp	r3, #1
 800e5fc:	d105      	bne.n	800e60a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	68db      	ldr	r3, [r3, #12]
 800e602:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800e60a:	6878      	ldr	r0, [r7, #4]
 800e60c:	f001 fa7c 	bl	800fb08 <USB_CoreReset>
 800e610:	4603      	mov	r3, r0
 800e612:	73fb      	strb	r3, [r7, #15]
 800e614:	e01a      	b.n	800e64c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	68db      	ldr	r3, [r3, #12]
 800e61a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800e622:	6878      	ldr	r0, [r7, #4]
 800e624:	f001 fa70 	bl	800fb08 <USB_CoreReset>
 800e628:	4603      	mov	r3, r0
 800e62a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800e62c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d106      	bne.n	800e640 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e636:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	639a      	str	r2, [r3, #56]	; 0x38
 800e63e:	e005      	b.n	800e64c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e644:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800e64c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e64e:	2b01      	cmp	r3, #1
 800e650:	d10b      	bne.n	800e66a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	689b      	ldr	r3, [r3, #8]
 800e656:	f043 0206 	orr.w	r2, r3, #6
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	689b      	ldr	r3, [r3, #8]
 800e662:	f043 0220 	orr.w	r2, r3, #32
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800e66a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e66c:	4618      	mov	r0, r3
 800e66e:	3710      	adds	r7, #16
 800e670:	46bd      	mov	sp, r7
 800e672:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e676:	b004      	add	sp, #16
 800e678:	4770      	bx	lr
	...

0800e67c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800e67c:	b480      	push	{r7}
 800e67e:	b087      	sub	sp, #28
 800e680:	af00      	add	r7, sp, #0
 800e682:	60f8      	str	r0, [r7, #12]
 800e684:	60b9      	str	r1, [r7, #8]
 800e686:	4613      	mov	r3, r2
 800e688:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800e68a:	79fb      	ldrb	r3, [r7, #7]
 800e68c:	2b02      	cmp	r3, #2
 800e68e:	d165      	bne.n	800e75c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800e690:	68bb      	ldr	r3, [r7, #8]
 800e692:	4a41      	ldr	r2, [pc, #260]	; (800e798 <USB_SetTurnaroundTime+0x11c>)
 800e694:	4293      	cmp	r3, r2
 800e696:	d906      	bls.n	800e6a6 <USB_SetTurnaroundTime+0x2a>
 800e698:	68bb      	ldr	r3, [r7, #8]
 800e69a:	4a40      	ldr	r2, [pc, #256]	; (800e79c <USB_SetTurnaroundTime+0x120>)
 800e69c:	4293      	cmp	r3, r2
 800e69e:	d802      	bhi.n	800e6a6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800e6a0:	230f      	movs	r3, #15
 800e6a2:	617b      	str	r3, [r7, #20]
 800e6a4:	e062      	b.n	800e76c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800e6a6:	68bb      	ldr	r3, [r7, #8]
 800e6a8:	4a3c      	ldr	r2, [pc, #240]	; (800e79c <USB_SetTurnaroundTime+0x120>)
 800e6aa:	4293      	cmp	r3, r2
 800e6ac:	d906      	bls.n	800e6bc <USB_SetTurnaroundTime+0x40>
 800e6ae:	68bb      	ldr	r3, [r7, #8]
 800e6b0:	4a3b      	ldr	r2, [pc, #236]	; (800e7a0 <USB_SetTurnaroundTime+0x124>)
 800e6b2:	4293      	cmp	r3, r2
 800e6b4:	d802      	bhi.n	800e6bc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800e6b6:	230e      	movs	r3, #14
 800e6b8:	617b      	str	r3, [r7, #20]
 800e6ba:	e057      	b.n	800e76c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800e6bc:	68bb      	ldr	r3, [r7, #8]
 800e6be:	4a38      	ldr	r2, [pc, #224]	; (800e7a0 <USB_SetTurnaroundTime+0x124>)
 800e6c0:	4293      	cmp	r3, r2
 800e6c2:	d906      	bls.n	800e6d2 <USB_SetTurnaroundTime+0x56>
 800e6c4:	68bb      	ldr	r3, [r7, #8]
 800e6c6:	4a37      	ldr	r2, [pc, #220]	; (800e7a4 <USB_SetTurnaroundTime+0x128>)
 800e6c8:	4293      	cmp	r3, r2
 800e6ca:	d802      	bhi.n	800e6d2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800e6cc:	230d      	movs	r3, #13
 800e6ce:	617b      	str	r3, [r7, #20]
 800e6d0:	e04c      	b.n	800e76c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800e6d2:	68bb      	ldr	r3, [r7, #8]
 800e6d4:	4a33      	ldr	r2, [pc, #204]	; (800e7a4 <USB_SetTurnaroundTime+0x128>)
 800e6d6:	4293      	cmp	r3, r2
 800e6d8:	d906      	bls.n	800e6e8 <USB_SetTurnaroundTime+0x6c>
 800e6da:	68bb      	ldr	r3, [r7, #8]
 800e6dc:	4a32      	ldr	r2, [pc, #200]	; (800e7a8 <USB_SetTurnaroundTime+0x12c>)
 800e6de:	4293      	cmp	r3, r2
 800e6e0:	d802      	bhi.n	800e6e8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800e6e2:	230c      	movs	r3, #12
 800e6e4:	617b      	str	r3, [r7, #20]
 800e6e6:	e041      	b.n	800e76c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800e6e8:	68bb      	ldr	r3, [r7, #8]
 800e6ea:	4a2f      	ldr	r2, [pc, #188]	; (800e7a8 <USB_SetTurnaroundTime+0x12c>)
 800e6ec:	4293      	cmp	r3, r2
 800e6ee:	d906      	bls.n	800e6fe <USB_SetTurnaroundTime+0x82>
 800e6f0:	68bb      	ldr	r3, [r7, #8]
 800e6f2:	4a2e      	ldr	r2, [pc, #184]	; (800e7ac <USB_SetTurnaroundTime+0x130>)
 800e6f4:	4293      	cmp	r3, r2
 800e6f6:	d802      	bhi.n	800e6fe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800e6f8:	230b      	movs	r3, #11
 800e6fa:	617b      	str	r3, [r7, #20]
 800e6fc:	e036      	b.n	800e76c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800e6fe:	68bb      	ldr	r3, [r7, #8]
 800e700:	4a2a      	ldr	r2, [pc, #168]	; (800e7ac <USB_SetTurnaroundTime+0x130>)
 800e702:	4293      	cmp	r3, r2
 800e704:	d906      	bls.n	800e714 <USB_SetTurnaroundTime+0x98>
 800e706:	68bb      	ldr	r3, [r7, #8]
 800e708:	4a29      	ldr	r2, [pc, #164]	; (800e7b0 <USB_SetTurnaroundTime+0x134>)
 800e70a:	4293      	cmp	r3, r2
 800e70c:	d802      	bhi.n	800e714 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800e70e:	230a      	movs	r3, #10
 800e710:	617b      	str	r3, [r7, #20]
 800e712:	e02b      	b.n	800e76c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800e714:	68bb      	ldr	r3, [r7, #8]
 800e716:	4a26      	ldr	r2, [pc, #152]	; (800e7b0 <USB_SetTurnaroundTime+0x134>)
 800e718:	4293      	cmp	r3, r2
 800e71a:	d906      	bls.n	800e72a <USB_SetTurnaroundTime+0xae>
 800e71c:	68bb      	ldr	r3, [r7, #8]
 800e71e:	4a25      	ldr	r2, [pc, #148]	; (800e7b4 <USB_SetTurnaroundTime+0x138>)
 800e720:	4293      	cmp	r3, r2
 800e722:	d802      	bhi.n	800e72a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800e724:	2309      	movs	r3, #9
 800e726:	617b      	str	r3, [r7, #20]
 800e728:	e020      	b.n	800e76c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800e72a:	68bb      	ldr	r3, [r7, #8]
 800e72c:	4a21      	ldr	r2, [pc, #132]	; (800e7b4 <USB_SetTurnaroundTime+0x138>)
 800e72e:	4293      	cmp	r3, r2
 800e730:	d906      	bls.n	800e740 <USB_SetTurnaroundTime+0xc4>
 800e732:	68bb      	ldr	r3, [r7, #8]
 800e734:	4a20      	ldr	r2, [pc, #128]	; (800e7b8 <USB_SetTurnaroundTime+0x13c>)
 800e736:	4293      	cmp	r3, r2
 800e738:	d802      	bhi.n	800e740 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800e73a:	2308      	movs	r3, #8
 800e73c:	617b      	str	r3, [r7, #20]
 800e73e:	e015      	b.n	800e76c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800e740:	68bb      	ldr	r3, [r7, #8]
 800e742:	4a1d      	ldr	r2, [pc, #116]	; (800e7b8 <USB_SetTurnaroundTime+0x13c>)
 800e744:	4293      	cmp	r3, r2
 800e746:	d906      	bls.n	800e756 <USB_SetTurnaroundTime+0xda>
 800e748:	68bb      	ldr	r3, [r7, #8]
 800e74a:	4a1c      	ldr	r2, [pc, #112]	; (800e7bc <USB_SetTurnaroundTime+0x140>)
 800e74c:	4293      	cmp	r3, r2
 800e74e:	d802      	bhi.n	800e756 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800e750:	2307      	movs	r3, #7
 800e752:	617b      	str	r3, [r7, #20]
 800e754:	e00a      	b.n	800e76c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800e756:	2306      	movs	r3, #6
 800e758:	617b      	str	r3, [r7, #20]
 800e75a:	e007      	b.n	800e76c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800e75c:	79fb      	ldrb	r3, [r7, #7]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d102      	bne.n	800e768 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800e762:	2309      	movs	r3, #9
 800e764:	617b      	str	r3, [r7, #20]
 800e766:	e001      	b.n	800e76c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800e768:	2309      	movs	r3, #9
 800e76a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	68db      	ldr	r3, [r3, #12]
 800e770:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	68da      	ldr	r2, [r3, #12]
 800e77c:	697b      	ldr	r3, [r7, #20]
 800e77e:	029b      	lsls	r3, r3, #10
 800e780:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800e784:	431a      	orrs	r2, r3
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800e78a:	2300      	movs	r3, #0
}
 800e78c:	4618      	mov	r0, r3
 800e78e:	371c      	adds	r7, #28
 800e790:	46bd      	mov	sp, r7
 800e792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e796:	4770      	bx	lr
 800e798:	00d8acbf 	.word	0x00d8acbf
 800e79c:	00e4e1bf 	.word	0x00e4e1bf
 800e7a0:	00f423ff 	.word	0x00f423ff
 800e7a4:	0106737f 	.word	0x0106737f
 800e7a8:	011a499f 	.word	0x011a499f
 800e7ac:	01312cff 	.word	0x01312cff
 800e7b0:	014ca43f 	.word	0x014ca43f
 800e7b4:	016e35ff 	.word	0x016e35ff
 800e7b8:	01a6ab1f 	.word	0x01a6ab1f
 800e7bc:	01e847ff 	.word	0x01e847ff

0800e7c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e7c0:	b480      	push	{r7}
 800e7c2:	b083      	sub	sp, #12
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	689b      	ldr	r3, [r3, #8]
 800e7cc:	f043 0201 	orr.w	r2, r3, #1
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e7d4:	2300      	movs	r3, #0
}
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	370c      	adds	r7, #12
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e0:	4770      	bx	lr

0800e7e2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e7e2:	b480      	push	{r7}
 800e7e4:	b083      	sub	sp, #12
 800e7e6:	af00      	add	r7, sp, #0
 800e7e8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	689b      	ldr	r3, [r3, #8]
 800e7ee:	f023 0201 	bic.w	r2, r3, #1
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e7f6:	2300      	movs	r3, #0
}
 800e7f8:	4618      	mov	r0, r3
 800e7fa:	370c      	adds	r7, #12
 800e7fc:	46bd      	mov	sp, r7
 800e7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e802:	4770      	bx	lr

0800e804 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800e804:	b580      	push	{r7, lr}
 800e806:	b082      	sub	sp, #8
 800e808:	af00      	add	r7, sp, #0
 800e80a:	6078      	str	r0, [r7, #4]
 800e80c:	460b      	mov	r3, r1
 800e80e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	68db      	ldr	r3, [r3, #12]
 800e814:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800e81c:	78fb      	ldrb	r3, [r7, #3]
 800e81e:	2b01      	cmp	r3, #1
 800e820:	d106      	bne.n	800e830 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	68db      	ldr	r3, [r3, #12]
 800e826:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	60da      	str	r2, [r3, #12]
 800e82e:	e00b      	b.n	800e848 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800e830:	78fb      	ldrb	r3, [r7, #3]
 800e832:	2b00      	cmp	r3, #0
 800e834:	d106      	bne.n	800e844 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	68db      	ldr	r3, [r3, #12]
 800e83a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	60da      	str	r2, [r3, #12]
 800e842:	e001      	b.n	800e848 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800e844:	2301      	movs	r3, #1
 800e846:	e003      	b.n	800e850 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800e848:	2032      	movs	r0, #50	; 0x32
 800e84a:	f7fb ff5f 	bl	800a70c <HAL_Delay>

  return HAL_OK;
 800e84e:	2300      	movs	r3, #0
}
 800e850:	4618      	mov	r0, r3
 800e852:	3708      	adds	r7, #8
 800e854:	46bd      	mov	sp, r7
 800e856:	bd80      	pop	{r7, pc}

0800e858 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e858:	b084      	sub	sp, #16
 800e85a:	b580      	push	{r7, lr}
 800e85c:	b086      	sub	sp, #24
 800e85e:	af00      	add	r7, sp, #0
 800e860:	6078      	str	r0, [r7, #4]
 800e862:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800e866:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800e86a:	2300      	movs	r3, #0
 800e86c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800e872:	2300      	movs	r3, #0
 800e874:	613b      	str	r3, [r7, #16]
 800e876:	e009      	b.n	800e88c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800e878:	687a      	ldr	r2, [r7, #4]
 800e87a:	693b      	ldr	r3, [r7, #16]
 800e87c:	3340      	adds	r3, #64	; 0x40
 800e87e:	009b      	lsls	r3, r3, #2
 800e880:	4413      	add	r3, r2
 800e882:	2200      	movs	r2, #0
 800e884:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800e886:	693b      	ldr	r3, [r7, #16]
 800e888:	3301      	adds	r3, #1
 800e88a:	613b      	str	r3, [r7, #16]
 800e88c:	693b      	ldr	r3, [r7, #16]
 800e88e:	2b0e      	cmp	r3, #14
 800e890:	d9f2      	bls.n	800e878 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800e892:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e894:	2b00      	cmp	r3, #0
 800e896:	d112      	bne.n	800e8be <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e89c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8a8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8b4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	639a      	str	r2, [r3, #56]	; 0x38
 800e8bc:	e00b      	b.n	800e8d6 <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8ce:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e8dc:	461a      	mov	r2, r3
 800e8de:	2300      	movs	r3, #0
 800e8e0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e8e8:	4619      	mov	r1, r3
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e8f0:	461a      	mov	r2, r3
 800e8f2:	680b      	ldr	r3, [r1, #0]
 800e8f4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e8f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8f8:	2b01      	cmp	r3, #1
 800e8fa:	d10c      	bne.n	800e916 <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800e8fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d104      	bne.n	800e90c <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800e902:	2100      	movs	r1, #0
 800e904:	6878      	ldr	r0, [r7, #4]
 800e906:	f000 f961 	bl	800ebcc <USB_SetDevSpeed>
 800e90a:	e008      	b.n	800e91e <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800e90c:	2101      	movs	r1, #1
 800e90e:	6878      	ldr	r0, [r7, #4]
 800e910:	f000 f95c 	bl	800ebcc <USB_SetDevSpeed>
 800e914:	e003      	b.n	800e91e <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800e916:	2103      	movs	r1, #3
 800e918:	6878      	ldr	r0, [r7, #4]
 800e91a:	f000 f957 	bl	800ebcc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e91e:	2110      	movs	r1, #16
 800e920:	6878      	ldr	r0, [r7, #4]
 800e922:	f000 f90b 	bl	800eb3c <USB_FlushTxFifo>
 800e926:	4603      	mov	r3, r0
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d001      	beq.n	800e930 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 800e92c:	2301      	movs	r3, #1
 800e92e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e930:	6878      	ldr	r0, [r7, #4]
 800e932:	f000 f929 	bl	800eb88 <USB_FlushRxFifo>
 800e936:	4603      	mov	r3, r0
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d001      	beq.n	800e940 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 800e93c:	2301      	movs	r3, #1
 800e93e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e946:	461a      	mov	r2, r3
 800e948:	2300      	movs	r3, #0
 800e94a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e952:	461a      	mov	r2, r3
 800e954:	2300      	movs	r3, #0
 800e956:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e95e:	461a      	mov	r2, r3
 800e960:	2300      	movs	r3, #0
 800e962:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e964:	2300      	movs	r3, #0
 800e966:	613b      	str	r3, [r7, #16]
 800e968:	e043      	b.n	800e9f2 <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e96a:	693b      	ldr	r3, [r7, #16]
 800e96c:	015a      	lsls	r2, r3, #5
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	4413      	add	r3, r2
 800e972:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e97c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e980:	d118      	bne.n	800e9b4 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 800e982:	693b      	ldr	r3, [r7, #16]
 800e984:	2b00      	cmp	r3, #0
 800e986:	d10a      	bne.n	800e99e <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e988:	693b      	ldr	r3, [r7, #16]
 800e98a:	015a      	lsls	r2, r3, #5
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	4413      	add	r3, r2
 800e990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e994:	461a      	mov	r2, r3
 800e996:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e99a:	6013      	str	r3, [r2, #0]
 800e99c:	e013      	b.n	800e9c6 <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800e99e:	693b      	ldr	r3, [r7, #16]
 800e9a0:	015a      	lsls	r2, r3, #5
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	4413      	add	r3, r2
 800e9a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e9aa:	461a      	mov	r2, r3
 800e9ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e9b0:	6013      	str	r3, [r2, #0]
 800e9b2:	e008      	b.n	800e9c6 <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800e9b4:	693b      	ldr	r3, [r7, #16]
 800e9b6:	015a      	lsls	r2, r3, #5
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	4413      	add	r3, r2
 800e9bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e9c0:	461a      	mov	r2, r3
 800e9c2:	2300      	movs	r3, #0
 800e9c4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800e9c6:	693b      	ldr	r3, [r7, #16]
 800e9c8:	015a      	lsls	r2, r3, #5
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	4413      	add	r3, r2
 800e9ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e9d2:	461a      	mov	r2, r3
 800e9d4:	2300      	movs	r3, #0
 800e9d6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e9d8:	693b      	ldr	r3, [r7, #16]
 800e9da:	015a      	lsls	r2, r3, #5
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	4413      	add	r3, r2
 800e9e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e9e4:	461a      	mov	r2, r3
 800e9e6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e9ea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e9ec:	693b      	ldr	r3, [r7, #16]
 800e9ee:	3301      	adds	r3, #1
 800e9f0:	613b      	str	r3, [r7, #16]
 800e9f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9f4:	693a      	ldr	r2, [r7, #16]
 800e9f6:	429a      	cmp	r2, r3
 800e9f8:	d3b7      	bcc.n	800e96a <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e9fa:	2300      	movs	r3, #0
 800e9fc:	613b      	str	r3, [r7, #16]
 800e9fe:	e043      	b.n	800ea88 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ea00:	693b      	ldr	r3, [r7, #16]
 800ea02:	015a      	lsls	r2, r3, #5
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	4413      	add	r3, r2
 800ea08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ea12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ea16:	d118      	bne.n	800ea4a <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 800ea18:	693b      	ldr	r3, [r7, #16]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d10a      	bne.n	800ea34 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ea1e:	693b      	ldr	r3, [r7, #16]
 800ea20:	015a      	lsls	r2, r3, #5
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	4413      	add	r3, r2
 800ea26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea2a:	461a      	mov	r2, r3
 800ea2c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ea30:	6013      	str	r3, [r2, #0]
 800ea32:	e013      	b.n	800ea5c <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ea34:	693b      	ldr	r3, [r7, #16]
 800ea36:	015a      	lsls	r2, r3, #5
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	4413      	add	r3, r2
 800ea3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea40:	461a      	mov	r2, r3
 800ea42:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ea46:	6013      	str	r3, [r2, #0]
 800ea48:	e008      	b.n	800ea5c <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ea4a:	693b      	ldr	r3, [r7, #16]
 800ea4c:	015a      	lsls	r2, r3, #5
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	4413      	add	r3, r2
 800ea52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea56:	461a      	mov	r2, r3
 800ea58:	2300      	movs	r3, #0
 800ea5a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ea5c:	693b      	ldr	r3, [r7, #16]
 800ea5e:	015a      	lsls	r2, r3, #5
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	4413      	add	r3, r2
 800ea64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea68:	461a      	mov	r2, r3
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ea6e:	693b      	ldr	r3, [r7, #16]
 800ea70:	015a      	lsls	r2, r3, #5
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	4413      	add	r3, r2
 800ea76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea7a:	461a      	mov	r2, r3
 800ea7c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ea80:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ea82:	693b      	ldr	r3, [r7, #16]
 800ea84:	3301      	adds	r3, #1
 800ea86:	613b      	str	r3, [r7, #16]
 800ea88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea8a:	693a      	ldr	r2, [r7, #16]
 800ea8c:	429a      	cmp	r2, r3
 800ea8e:	d3b7      	bcc.n	800ea00 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea96:	691b      	ldr	r3, [r3, #16]
 800ea98:	68fa      	ldr	r2, [r7, #12]
 800ea9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ea9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800eaa2:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 800eaa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaa6:	2b01      	cmp	r3, #1
 800eaa8:	d111      	bne.n	800eace <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eab0:	461a      	mov	r2, r3
 800eab2:	4b20      	ldr	r3, [pc, #128]	; (800eb34 <USB_DevInit+0x2dc>)
 800eab4:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eabc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eabe:	68fa      	ldr	r2, [r7, #12]
 800eac0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800eac4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800eac8:	f043 0303 	orr.w	r3, r3, #3
 800eacc:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	2200      	movs	r2, #0
 800ead2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800eada:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800eadc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d105      	bne.n	800eaee <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	699b      	ldr	r3, [r3, #24]
 800eae6:	f043 0210 	orr.w	r2, r3, #16
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	699a      	ldr	r2, [r3, #24]
 800eaf2:	4b11      	ldr	r3, [pc, #68]	; (800eb38 <USB_DevInit+0x2e0>)
 800eaf4:	4313      	orrs	r3, r2
 800eaf6:	687a      	ldr	r2, [r7, #4]
 800eaf8:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800eafa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d005      	beq.n	800eb0c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	699b      	ldr	r3, [r3, #24]
 800eb04:	f043 0208 	orr.w	r2, r3, #8
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800eb0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb0e:	2b01      	cmp	r3, #1
 800eb10:	d107      	bne.n	800eb22 <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	699b      	ldr	r3, [r3, #24]
 800eb16:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800eb1a:	f043 0304 	orr.w	r3, r3, #4
 800eb1e:	687a      	ldr	r2, [r7, #4]
 800eb20:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800eb22:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb24:	4618      	mov	r0, r3
 800eb26:	3718      	adds	r7, #24
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800eb2e:	b004      	add	sp, #16
 800eb30:	4770      	bx	lr
 800eb32:	bf00      	nop
 800eb34:	00800100 	.word	0x00800100
 800eb38:	803c3800 	.word	0x803c3800

0800eb3c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800eb3c:	b480      	push	{r7}
 800eb3e:	b085      	sub	sp, #20
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
 800eb44:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800eb46:	2300      	movs	r3, #0
 800eb48:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800eb4a:	683b      	ldr	r3, [r7, #0]
 800eb4c:	019b      	lsls	r3, r3, #6
 800eb4e:	f043 0220 	orr.w	r2, r3, #32
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	3301      	adds	r3, #1
 800eb5a:	60fb      	str	r3, [r7, #12]
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	4a09      	ldr	r2, [pc, #36]	; (800eb84 <USB_FlushTxFifo+0x48>)
 800eb60:	4293      	cmp	r3, r2
 800eb62:	d901      	bls.n	800eb68 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800eb64:	2303      	movs	r3, #3
 800eb66:	e006      	b.n	800eb76 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	691b      	ldr	r3, [r3, #16]
 800eb6c:	f003 0320 	and.w	r3, r3, #32
 800eb70:	2b20      	cmp	r3, #32
 800eb72:	d0f0      	beq.n	800eb56 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800eb74:	2300      	movs	r3, #0
}
 800eb76:	4618      	mov	r0, r3
 800eb78:	3714      	adds	r7, #20
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb80:	4770      	bx	lr
 800eb82:	bf00      	nop
 800eb84:	00030d40 	.word	0x00030d40

0800eb88 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800eb88:	b480      	push	{r7}
 800eb8a:	b085      	sub	sp, #20
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800eb90:	2300      	movs	r3, #0
 800eb92:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	2210      	movs	r2, #16
 800eb98:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	3301      	adds	r3, #1
 800eb9e:	60fb      	str	r3, [r7, #12]
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	4a09      	ldr	r2, [pc, #36]	; (800ebc8 <USB_FlushRxFifo+0x40>)
 800eba4:	4293      	cmp	r3, r2
 800eba6:	d901      	bls.n	800ebac <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800eba8:	2303      	movs	r3, #3
 800ebaa:	e006      	b.n	800ebba <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	691b      	ldr	r3, [r3, #16]
 800ebb0:	f003 0310 	and.w	r3, r3, #16
 800ebb4:	2b10      	cmp	r3, #16
 800ebb6:	d0f0      	beq.n	800eb9a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800ebb8:	2300      	movs	r3, #0
}
 800ebba:	4618      	mov	r0, r3
 800ebbc:	3714      	adds	r7, #20
 800ebbe:	46bd      	mov	sp, r7
 800ebc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc4:	4770      	bx	lr
 800ebc6:	bf00      	nop
 800ebc8:	00030d40 	.word	0x00030d40

0800ebcc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ebcc:	b480      	push	{r7}
 800ebce:	b085      	sub	sp, #20
 800ebd0:	af00      	add	r7, sp, #0
 800ebd2:	6078      	str	r0, [r7, #4]
 800ebd4:	460b      	mov	r3, r1
 800ebd6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ebe2:	681a      	ldr	r2, [r3, #0]
 800ebe4:	78fb      	ldrb	r3, [r7, #3]
 800ebe6:	68f9      	ldr	r1, [r7, #12]
 800ebe8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ebec:	4313      	orrs	r3, r2
 800ebee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ebf0:	2300      	movs	r3, #0
}
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	3714      	adds	r7, #20
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebfc:	4770      	bx	lr

0800ebfe <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ebfe:	b480      	push	{r7}
 800ec00:	b087      	sub	sp, #28
 800ec02:	af00      	add	r7, sp, #0
 800ec04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ec0a:	693b      	ldr	r3, [r7, #16]
 800ec0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec10:	689b      	ldr	r3, [r3, #8]
 800ec12:	f003 0306 	and.w	r3, r3, #6
 800ec16:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d102      	bne.n	800ec24 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ec1e:	2300      	movs	r3, #0
 800ec20:	75fb      	strb	r3, [r7, #23]
 800ec22:	e00a      	b.n	800ec3a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	2b02      	cmp	r3, #2
 800ec28:	d002      	beq.n	800ec30 <USB_GetDevSpeed+0x32>
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	2b06      	cmp	r3, #6
 800ec2e:	d102      	bne.n	800ec36 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ec30:	2302      	movs	r3, #2
 800ec32:	75fb      	strb	r3, [r7, #23]
 800ec34:	e001      	b.n	800ec3a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ec36:	230f      	movs	r3, #15
 800ec38:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ec3a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec3c:	4618      	mov	r0, r3
 800ec3e:	371c      	adds	r7, #28
 800ec40:	46bd      	mov	sp, r7
 800ec42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec46:	4770      	bx	lr

0800ec48 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ec48:	b480      	push	{r7}
 800ec4a:	b085      	sub	sp, #20
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	6078      	str	r0, [r7, #4]
 800ec50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ec56:	683b      	ldr	r3, [r7, #0]
 800ec58:	781b      	ldrb	r3, [r3, #0]
 800ec5a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ec5c:	683b      	ldr	r3, [r7, #0]
 800ec5e:	785b      	ldrb	r3, [r3, #1]
 800ec60:	2b01      	cmp	r3, #1
 800ec62:	d13a      	bne.n	800ecda <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec6a:	69da      	ldr	r2, [r3, #28]
 800ec6c:	683b      	ldr	r3, [r7, #0]
 800ec6e:	781b      	ldrb	r3, [r3, #0]
 800ec70:	f003 030f 	and.w	r3, r3, #15
 800ec74:	2101      	movs	r1, #1
 800ec76:	fa01 f303 	lsl.w	r3, r1, r3
 800ec7a:	b29b      	uxth	r3, r3
 800ec7c:	68f9      	ldr	r1, [r7, #12]
 800ec7e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ec82:	4313      	orrs	r3, r2
 800ec84:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ec86:	68bb      	ldr	r3, [r7, #8]
 800ec88:	015a      	lsls	r2, r3, #5
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	4413      	add	r3, r2
 800ec8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d155      	bne.n	800ed48 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ec9c:	68bb      	ldr	r3, [r7, #8]
 800ec9e:	015a      	lsls	r2, r3, #5
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	4413      	add	r3, r2
 800eca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eca8:	681a      	ldr	r2, [r3, #0]
 800ecaa:	683b      	ldr	r3, [r7, #0]
 800ecac:	689b      	ldr	r3, [r3, #8]
 800ecae:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ecb2:	683b      	ldr	r3, [r7, #0]
 800ecb4:	78db      	ldrb	r3, [r3, #3]
 800ecb6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ecb8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ecba:	68bb      	ldr	r3, [r7, #8]
 800ecbc:	059b      	lsls	r3, r3, #22
 800ecbe:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ecc0:	4313      	orrs	r3, r2
 800ecc2:	68ba      	ldr	r2, [r7, #8]
 800ecc4:	0151      	lsls	r1, r2, #5
 800ecc6:	68fa      	ldr	r2, [r7, #12]
 800ecc8:	440a      	add	r2, r1
 800ecca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ecce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ecd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ecd6:	6013      	str	r3, [r2, #0]
 800ecd8:	e036      	b.n	800ed48 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ece0:	69da      	ldr	r2, [r3, #28]
 800ece2:	683b      	ldr	r3, [r7, #0]
 800ece4:	781b      	ldrb	r3, [r3, #0]
 800ece6:	f003 030f 	and.w	r3, r3, #15
 800ecea:	2101      	movs	r1, #1
 800ecec:	fa01 f303 	lsl.w	r3, r1, r3
 800ecf0:	041b      	lsls	r3, r3, #16
 800ecf2:	68f9      	ldr	r1, [r7, #12]
 800ecf4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ecf8:	4313      	orrs	r3, r2
 800ecfa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800ecfc:	68bb      	ldr	r3, [r7, #8]
 800ecfe:	015a      	lsls	r2, r3, #5
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	4413      	add	r3, r2
 800ed04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d11a      	bne.n	800ed48 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ed12:	68bb      	ldr	r3, [r7, #8]
 800ed14:	015a      	lsls	r2, r3, #5
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	4413      	add	r3, r2
 800ed1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed1e:	681a      	ldr	r2, [r3, #0]
 800ed20:	683b      	ldr	r3, [r7, #0]
 800ed22:	689b      	ldr	r3, [r3, #8]
 800ed24:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800ed28:	683b      	ldr	r3, [r7, #0]
 800ed2a:	78db      	ldrb	r3, [r3, #3]
 800ed2c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ed2e:	430b      	orrs	r3, r1
 800ed30:	4313      	orrs	r3, r2
 800ed32:	68ba      	ldr	r2, [r7, #8]
 800ed34:	0151      	lsls	r1, r2, #5
 800ed36:	68fa      	ldr	r2, [r7, #12]
 800ed38:	440a      	add	r2, r1
 800ed3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ed3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ed42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ed46:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800ed48:	2300      	movs	r3, #0
}
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	3714      	adds	r7, #20
 800ed4e:	46bd      	mov	sp, r7
 800ed50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed54:	4770      	bx	lr
	...

0800ed58 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ed58:	b480      	push	{r7}
 800ed5a:	b085      	sub	sp, #20
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	6078      	str	r0, [r7, #4]
 800ed60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ed66:	683b      	ldr	r3, [r7, #0]
 800ed68:	781b      	ldrb	r3, [r3, #0]
 800ed6a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800ed6c:	683b      	ldr	r3, [r7, #0]
 800ed6e:	785b      	ldrb	r3, [r3, #1]
 800ed70:	2b01      	cmp	r3, #1
 800ed72:	d135      	bne.n	800ede0 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ed7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ed7c:	683b      	ldr	r3, [r7, #0]
 800ed7e:	781b      	ldrb	r3, [r3, #0]
 800ed80:	f003 030f 	and.w	r3, r3, #15
 800ed84:	2101      	movs	r1, #1
 800ed86:	fa01 f303 	lsl.w	r3, r1, r3
 800ed8a:	b29b      	uxth	r3, r3
 800ed8c:	43db      	mvns	r3, r3
 800ed8e:	68f9      	ldr	r1, [r7, #12]
 800ed90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ed94:	4013      	ands	r3, r2
 800ed96:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ed9e:	69da      	ldr	r2, [r3, #28]
 800eda0:	683b      	ldr	r3, [r7, #0]
 800eda2:	781b      	ldrb	r3, [r3, #0]
 800eda4:	f003 030f 	and.w	r3, r3, #15
 800eda8:	2101      	movs	r1, #1
 800edaa:	fa01 f303 	lsl.w	r3, r1, r3
 800edae:	b29b      	uxth	r3, r3
 800edb0:	43db      	mvns	r3, r3
 800edb2:	68f9      	ldr	r1, [r7, #12]
 800edb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800edb8:	4013      	ands	r3, r2
 800edba:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800edbc:	68bb      	ldr	r3, [r7, #8]
 800edbe:	015a      	lsls	r2, r3, #5
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	4413      	add	r3, r2
 800edc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800edc8:	681a      	ldr	r2, [r3, #0]
 800edca:	68bb      	ldr	r3, [r7, #8]
 800edcc:	0159      	lsls	r1, r3, #5
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	440b      	add	r3, r1
 800edd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800edd6:	4619      	mov	r1, r3
 800edd8:	4b1f      	ldr	r3, [pc, #124]	; (800ee58 <USB_DeactivateEndpoint+0x100>)
 800edda:	4013      	ands	r3, r2
 800eddc:	600b      	str	r3, [r1, #0]
 800edde:	e034      	b.n	800ee4a <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ede6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ede8:	683b      	ldr	r3, [r7, #0]
 800edea:	781b      	ldrb	r3, [r3, #0]
 800edec:	f003 030f 	and.w	r3, r3, #15
 800edf0:	2101      	movs	r1, #1
 800edf2:	fa01 f303 	lsl.w	r3, r1, r3
 800edf6:	041b      	lsls	r3, r3, #16
 800edf8:	43db      	mvns	r3, r3
 800edfa:	68f9      	ldr	r1, [r7, #12]
 800edfc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ee00:	4013      	ands	r3, r2
 800ee02:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee0a:	69da      	ldr	r2, [r3, #28]
 800ee0c:	683b      	ldr	r3, [r7, #0]
 800ee0e:	781b      	ldrb	r3, [r3, #0]
 800ee10:	f003 030f 	and.w	r3, r3, #15
 800ee14:	2101      	movs	r1, #1
 800ee16:	fa01 f303 	lsl.w	r3, r1, r3
 800ee1a:	041b      	lsls	r3, r3, #16
 800ee1c:	43db      	mvns	r3, r3
 800ee1e:	68f9      	ldr	r1, [r7, #12]
 800ee20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ee24:	4013      	ands	r3, r2
 800ee26:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ee28:	68bb      	ldr	r3, [r7, #8]
 800ee2a:	015a      	lsls	r2, r3, #5
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	4413      	add	r3, r2
 800ee30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ee34:	681a      	ldr	r2, [r3, #0]
 800ee36:	68bb      	ldr	r3, [r7, #8]
 800ee38:	0159      	lsls	r1, r3, #5
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	440b      	add	r3, r1
 800ee3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ee42:	4619      	mov	r1, r3
 800ee44:	4b05      	ldr	r3, [pc, #20]	; (800ee5c <USB_DeactivateEndpoint+0x104>)
 800ee46:	4013      	ands	r3, r2
 800ee48:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800ee4a:	2300      	movs	r3, #0
}
 800ee4c:	4618      	mov	r0, r3
 800ee4e:	3714      	adds	r7, #20
 800ee50:	46bd      	mov	sp, r7
 800ee52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee56:	4770      	bx	lr
 800ee58:	ec337800 	.word	0xec337800
 800ee5c:	eff37800 	.word	0xeff37800

0800ee60 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ee60:	b580      	push	{r7, lr}
 800ee62:	b08a      	sub	sp, #40	; 0x28
 800ee64:	af02      	add	r7, sp, #8
 800ee66:	60f8      	str	r0, [r7, #12]
 800ee68:	60b9      	str	r1, [r7, #8]
 800ee6a:	4613      	mov	r3, r2
 800ee6c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800ee72:	68bb      	ldr	r3, [r7, #8]
 800ee74:	781b      	ldrb	r3, [r3, #0]
 800ee76:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ee78:	68bb      	ldr	r3, [r7, #8]
 800ee7a:	785b      	ldrb	r3, [r3, #1]
 800ee7c:	2b01      	cmp	r3, #1
 800ee7e:	f040 815c 	bne.w	800f13a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ee82:	68bb      	ldr	r3, [r7, #8]
 800ee84:	695b      	ldr	r3, [r3, #20]
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d132      	bne.n	800eef0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ee8a:	69bb      	ldr	r3, [r7, #24]
 800ee8c:	015a      	lsls	r2, r3, #5
 800ee8e:	69fb      	ldr	r3, [r7, #28]
 800ee90:	4413      	add	r3, r2
 800ee92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee96:	691b      	ldr	r3, [r3, #16]
 800ee98:	69ba      	ldr	r2, [r7, #24]
 800ee9a:	0151      	lsls	r1, r2, #5
 800ee9c:	69fa      	ldr	r2, [r7, #28]
 800ee9e:	440a      	add	r2, r1
 800eea0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eea4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800eea8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800eeac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800eeae:	69bb      	ldr	r3, [r7, #24]
 800eeb0:	015a      	lsls	r2, r3, #5
 800eeb2:	69fb      	ldr	r3, [r7, #28]
 800eeb4:	4413      	add	r3, r2
 800eeb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eeba:	691b      	ldr	r3, [r3, #16]
 800eebc:	69ba      	ldr	r2, [r7, #24]
 800eebe:	0151      	lsls	r1, r2, #5
 800eec0:	69fa      	ldr	r2, [r7, #28]
 800eec2:	440a      	add	r2, r1
 800eec4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eec8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800eecc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800eece:	69bb      	ldr	r3, [r7, #24]
 800eed0:	015a      	lsls	r2, r3, #5
 800eed2:	69fb      	ldr	r3, [r7, #28]
 800eed4:	4413      	add	r3, r2
 800eed6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eeda:	691b      	ldr	r3, [r3, #16]
 800eedc:	69ba      	ldr	r2, [r7, #24]
 800eede:	0151      	lsls	r1, r2, #5
 800eee0:	69fa      	ldr	r2, [r7, #28]
 800eee2:	440a      	add	r2, r1
 800eee4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eee8:	0cdb      	lsrs	r3, r3, #19
 800eeea:	04db      	lsls	r3, r3, #19
 800eeec:	6113      	str	r3, [r2, #16]
 800eeee:	e074      	b.n	800efda <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800eef0:	69bb      	ldr	r3, [r7, #24]
 800eef2:	015a      	lsls	r2, r3, #5
 800eef4:	69fb      	ldr	r3, [r7, #28]
 800eef6:	4413      	add	r3, r2
 800eef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eefc:	691b      	ldr	r3, [r3, #16]
 800eefe:	69ba      	ldr	r2, [r7, #24]
 800ef00:	0151      	lsls	r1, r2, #5
 800ef02:	69fa      	ldr	r2, [r7, #28]
 800ef04:	440a      	add	r2, r1
 800ef06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ef0a:	0cdb      	lsrs	r3, r3, #19
 800ef0c:	04db      	lsls	r3, r3, #19
 800ef0e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ef10:	69bb      	ldr	r3, [r7, #24]
 800ef12:	015a      	lsls	r2, r3, #5
 800ef14:	69fb      	ldr	r3, [r7, #28]
 800ef16:	4413      	add	r3, r2
 800ef18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef1c:	691b      	ldr	r3, [r3, #16]
 800ef1e:	69ba      	ldr	r2, [r7, #24]
 800ef20:	0151      	lsls	r1, r2, #5
 800ef22:	69fa      	ldr	r2, [r7, #28]
 800ef24:	440a      	add	r2, r1
 800ef26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ef2a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ef2e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ef32:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800ef34:	69bb      	ldr	r3, [r7, #24]
 800ef36:	015a      	lsls	r2, r3, #5
 800ef38:	69fb      	ldr	r3, [r7, #28]
 800ef3a:	4413      	add	r3, r2
 800ef3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef40:	691a      	ldr	r2, [r3, #16]
 800ef42:	68bb      	ldr	r3, [r7, #8]
 800ef44:	6959      	ldr	r1, [r3, #20]
 800ef46:	68bb      	ldr	r3, [r7, #8]
 800ef48:	689b      	ldr	r3, [r3, #8]
 800ef4a:	440b      	add	r3, r1
 800ef4c:	1e59      	subs	r1, r3, #1
 800ef4e:	68bb      	ldr	r3, [r7, #8]
 800ef50:	689b      	ldr	r3, [r3, #8]
 800ef52:	fbb1 f3f3 	udiv	r3, r1, r3
 800ef56:	04d9      	lsls	r1, r3, #19
 800ef58:	4b9d      	ldr	r3, [pc, #628]	; (800f1d0 <USB_EPStartXfer+0x370>)
 800ef5a:	400b      	ands	r3, r1
 800ef5c:	69b9      	ldr	r1, [r7, #24]
 800ef5e:	0148      	lsls	r0, r1, #5
 800ef60:	69f9      	ldr	r1, [r7, #28]
 800ef62:	4401      	add	r1, r0
 800ef64:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ef68:	4313      	orrs	r3, r2
 800ef6a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ef6c:	69bb      	ldr	r3, [r7, #24]
 800ef6e:	015a      	lsls	r2, r3, #5
 800ef70:	69fb      	ldr	r3, [r7, #28]
 800ef72:	4413      	add	r3, r2
 800ef74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef78:	691a      	ldr	r2, [r3, #16]
 800ef7a:	68bb      	ldr	r3, [r7, #8]
 800ef7c:	695b      	ldr	r3, [r3, #20]
 800ef7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ef82:	69b9      	ldr	r1, [r7, #24]
 800ef84:	0148      	lsls	r0, r1, #5
 800ef86:	69f9      	ldr	r1, [r7, #28]
 800ef88:	4401      	add	r1, r0
 800ef8a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ef8e:	4313      	orrs	r3, r2
 800ef90:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800ef92:	68bb      	ldr	r3, [r7, #8]
 800ef94:	78db      	ldrb	r3, [r3, #3]
 800ef96:	2b01      	cmp	r3, #1
 800ef98:	d11f      	bne.n	800efda <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800ef9a:	69bb      	ldr	r3, [r7, #24]
 800ef9c:	015a      	lsls	r2, r3, #5
 800ef9e:	69fb      	ldr	r3, [r7, #28]
 800efa0:	4413      	add	r3, r2
 800efa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800efa6:	691b      	ldr	r3, [r3, #16]
 800efa8:	69ba      	ldr	r2, [r7, #24]
 800efaa:	0151      	lsls	r1, r2, #5
 800efac:	69fa      	ldr	r2, [r7, #28]
 800efae:	440a      	add	r2, r1
 800efb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800efb4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800efb8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800efba:	69bb      	ldr	r3, [r7, #24]
 800efbc:	015a      	lsls	r2, r3, #5
 800efbe:	69fb      	ldr	r3, [r7, #28]
 800efc0:	4413      	add	r3, r2
 800efc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800efc6:	691b      	ldr	r3, [r3, #16]
 800efc8:	69ba      	ldr	r2, [r7, #24]
 800efca:	0151      	lsls	r1, r2, #5
 800efcc:	69fa      	ldr	r2, [r7, #28]
 800efce:	440a      	add	r2, r1
 800efd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800efd4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800efd8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800efda:	79fb      	ldrb	r3, [r7, #7]
 800efdc:	2b01      	cmp	r3, #1
 800efde:	d14b      	bne.n	800f078 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800efe0:	68bb      	ldr	r3, [r7, #8]
 800efe2:	691b      	ldr	r3, [r3, #16]
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d009      	beq.n	800effc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800efe8:	69bb      	ldr	r3, [r7, #24]
 800efea:	015a      	lsls	r2, r3, #5
 800efec:	69fb      	ldr	r3, [r7, #28]
 800efee:	4413      	add	r3, r2
 800eff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eff4:	461a      	mov	r2, r3
 800eff6:	68bb      	ldr	r3, [r7, #8]
 800eff8:	691b      	ldr	r3, [r3, #16]
 800effa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800effc:	68bb      	ldr	r3, [r7, #8]
 800effe:	78db      	ldrb	r3, [r3, #3]
 800f000:	2b01      	cmp	r3, #1
 800f002:	d128      	bne.n	800f056 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f004:	69fb      	ldr	r3, [r7, #28]
 800f006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f00a:	689b      	ldr	r3, [r3, #8]
 800f00c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f010:	2b00      	cmp	r3, #0
 800f012:	d110      	bne.n	800f036 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f014:	69bb      	ldr	r3, [r7, #24]
 800f016:	015a      	lsls	r2, r3, #5
 800f018:	69fb      	ldr	r3, [r7, #28]
 800f01a:	4413      	add	r3, r2
 800f01c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	69ba      	ldr	r2, [r7, #24]
 800f024:	0151      	lsls	r1, r2, #5
 800f026:	69fa      	ldr	r2, [r7, #28]
 800f028:	440a      	add	r2, r1
 800f02a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f02e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f032:	6013      	str	r3, [r2, #0]
 800f034:	e00f      	b.n	800f056 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f036:	69bb      	ldr	r3, [r7, #24]
 800f038:	015a      	lsls	r2, r3, #5
 800f03a:	69fb      	ldr	r3, [r7, #28]
 800f03c:	4413      	add	r3, r2
 800f03e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	69ba      	ldr	r2, [r7, #24]
 800f046:	0151      	lsls	r1, r2, #5
 800f048:	69fa      	ldr	r2, [r7, #28]
 800f04a:	440a      	add	r2, r1
 800f04c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f050:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f054:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f056:	69bb      	ldr	r3, [r7, #24]
 800f058:	015a      	lsls	r2, r3, #5
 800f05a:	69fb      	ldr	r3, [r7, #28]
 800f05c:	4413      	add	r3, r2
 800f05e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	69ba      	ldr	r2, [r7, #24]
 800f066:	0151      	lsls	r1, r2, #5
 800f068:	69fa      	ldr	r2, [r7, #28]
 800f06a:	440a      	add	r2, r1
 800f06c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f070:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f074:	6013      	str	r3, [r2, #0]
 800f076:	e12f      	b.n	800f2d8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f078:	69bb      	ldr	r3, [r7, #24]
 800f07a:	015a      	lsls	r2, r3, #5
 800f07c:	69fb      	ldr	r3, [r7, #28]
 800f07e:	4413      	add	r3, r2
 800f080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	69ba      	ldr	r2, [r7, #24]
 800f088:	0151      	lsls	r1, r2, #5
 800f08a:	69fa      	ldr	r2, [r7, #28]
 800f08c:	440a      	add	r2, r1
 800f08e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f092:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f096:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f098:	68bb      	ldr	r3, [r7, #8]
 800f09a:	78db      	ldrb	r3, [r3, #3]
 800f09c:	2b01      	cmp	r3, #1
 800f09e:	d015      	beq.n	800f0cc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800f0a0:	68bb      	ldr	r3, [r7, #8]
 800f0a2:	695b      	ldr	r3, [r3, #20]
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	f000 8117 	beq.w	800f2d8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f0aa:	69fb      	ldr	r3, [r7, #28]
 800f0ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f0b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f0b2:	68bb      	ldr	r3, [r7, #8]
 800f0b4:	781b      	ldrb	r3, [r3, #0]
 800f0b6:	f003 030f 	and.w	r3, r3, #15
 800f0ba:	2101      	movs	r1, #1
 800f0bc:	fa01 f303 	lsl.w	r3, r1, r3
 800f0c0:	69f9      	ldr	r1, [r7, #28]
 800f0c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f0c6:	4313      	orrs	r3, r2
 800f0c8:	634b      	str	r3, [r1, #52]	; 0x34
 800f0ca:	e105      	b.n	800f2d8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f0cc:	69fb      	ldr	r3, [r7, #28]
 800f0ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f0d2:	689b      	ldr	r3, [r3, #8]
 800f0d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d110      	bne.n	800f0fe <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f0dc:	69bb      	ldr	r3, [r7, #24]
 800f0de:	015a      	lsls	r2, r3, #5
 800f0e0:	69fb      	ldr	r3, [r7, #28]
 800f0e2:	4413      	add	r3, r2
 800f0e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	69ba      	ldr	r2, [r7, #24]
 800f0ec:	0151      	lsls	r1, r2, #5
 800f0ee:	69fa      	ldr	r2, [r7, #28]
 800f0f0:	440a      	add	r2, r1
 800f0f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f0f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f0fa:	6013      	str	r3, [r2, #0]
 800f0fc:	e00f      	b.n	800f11e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f0fe:	69bb      	ldr	r3, [r7, #24]
 800f100:	015a      	lsls	r2, r3, #5
 800f102:	69fb      	ldr	r3, [r7, #28]
 800f104:	4413      	add	r3, r2
 800f106:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	69ba      	ldr	r2, [r7, #24]
 800f10e:	0151      	lsls	r1, r2, #5
 800f110:	69fa      	ldr	r2, [r7, #28]
 800f112:	440a      	add	r2, r1
 800f114:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f11c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800f11e:	68bb      	ldr	r3, [r7, #8]
 800f120:	68d9      	ldr	r1, [r3, #12]
 800f122:	68bb      	ldr	r3, [r7, #8]
 800f124:	781a      	ldrb	r2, [r3, #0]
 800f126:	68bb      	ldr	r3, [r7, #8]
 800f128:	695b      	ldr	r3, [r3, #20]
 800f12a:	b298      	uxth	r0, r3
 800f12c:	79fb      	ldrb	r3, [r7, #7]
 800f12e:	9300      	str	r3, [sp, #0]
 800f130:	4603      	mov	r3, r0
 800f132:	68f8      	ldr	r0, [r7, #12]
 800f134:	f000 fa2b 	bl	800f58e <USB_WritePacket>
 800f138:	e0ce      	b.n	800f2d8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f13a:	69bb      	ldr	r3, [r7, #24]
 800f13c:	015a      	lsls	r2, r3, #5
 800f13e:	69fb      	ldr	r3, [r7, #28]
 800f140:	4413      	add	r3, r2
 800f142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f146:	691b      	ldr	r3, [r3, #16]
 800f148:	69ba      	ldr	r2, [r7, #24]
 800f14a:	0151      	lsls	r1, r2, #5
 800f14c:	69fa      	ldr	r2, [r7, #28]
 800f14e:	440a      	add	r2, r1
 800f150:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f154:	0cdb      	lsrs	r3, r3, #19
 800f156:	04db      	lsls	r3, r3, #19
 800f158:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f15a:	69bb      	ldr	r3, [r7, #24]
 800f15c:	015a      	lsls	r2, r3, #5
 800f15e:	69fb      	ldr	r3, [r7, #28]
 800f160:	4413      	add	r3, r2
 800f162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f166:	691b      	ldr	r3, [r3, #16]
 800f168:	69ba      	ldr	r2, [r7, #24]
 800f16a:	0151      	lsls	r1, r2, #5
 800f16c:	69fa      	ldr	r2, [r7, #28]
 800f16e:	440a      	add	r2, r1
 800f170:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f174:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f178:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f17c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800f17e:	68bb      	ldr	r3, [r7, #8]
 800f180:	695b      	ldr	r3, [r3, #20]
 800f182:	2b00      	cmp	r3, #0
 800f184:	d126      	bne.n	800f1d4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800f186:	69bb      	ldr	r3, [r7, #24]
 800f188:	015a      	lsls	r2, r3, #5
 800f18a:	69fb      	ldr	r3, [r7, #28]
 800f18c:	4413      	add	r3, r2
 800f18e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f192:	691a      	ldr	r2, [r3, #16]
 800f194:	68bb      	ldr	r3, [r7, #8]
 800f196:	689b      	ldr	r3, [r3, #8]
 800f198:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f19c:	69b9      	ldr	r1, [r7, #24]
 800f19e:	0148      	lsls	r0, r1, #5
 800f1a0:	69f9      	ldr	r1, [r7, #28]
 800f1a2:	4401      	add	r1, r0
 800f1a4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f1a8:	4313      	orrs	r3, r2
 800f1aa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f1ac:	69bb      	ldr	r3, [r7, #24]
 800f1ae:	015a      	lsls	r2, r3, #5
 800f1b0:	69fb      	ldr	r3, [r7, #28]
 800f1b2:	4413      	add	r3, r2
 800f1b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f1b8:	691b      	ldr	r3, [r3, #16]
 800f1ba:	69ba      	ldr	r2, [r7, #24]
 800f1bc:	0151      	lsls	r1, r2, #5
 800f1be:	69fa      	ldr	r2, [r7, #28]
 800f1c0:	440a      	add	r2, r1
 800f1c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f1c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f1ca:	6113      	str	r3, [r2, #16]
 800f1cc:	e036      	b.n	800f23c <USB_EPStartXfer+0x3dc>
 800f1ce:	bf00      	nop
 800f1d0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800f1d4:	68bb      	ldr	r3, [r7, #8]
 800f1d6:	695a      	ldr	r2, [r3, #20]
 800f1d8:	68bb      	ldr	r3, [r7, #8]
 800f1da:	689b      	ldr	r3, [r3, #8]
 800f1dc:	4413      	add	r3, r2
 800f1de:	1e5a      	subs	r2, r3, #1
 800f1e0:	68bb      	ldr	r3, [r7, #8]
 800f1e2:	689b      	ldr	r3, [r3, #8]
 800f1e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800f1e8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800f1ea:	69bb      	ldr	r3, [r7, #24]
 800f1ec:	015a      	lsls	r2, r3, #5
 800f1ee:	69fb      	ldr	r3, [r7, #28]
 800f1f0:	4413      	add	r3, r2
 800f1f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f1f6:	691a      	ldr	r2, [r3, #16]
 800f1f8:	8afb      	ldrh	r3, [r7, #22]
 800f1fa:	04d9      	lsls	r1, r3, #19
 800f1fc:	4b39      	ldr	r3, [pc, #228]	; (800f2e4 <USB_EPStartXfer+0x484>)
 800f1fe:	400b      	ands	r3, r1
 800f200:	69b9      	ldr	r1, [r7, #24]
 800f202:	0148      	lsls	r0, r1, #5
 800f204:	69f9      	ldr	r1, [r7, #28]
 800f206:	4401      	add	r1, r0
 800f208:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f20c:	4313      	orrs	r3, r2
 800f20e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800f210:	69bb      	ldr	r3, [r7, #24]
 800f212:	015a      	lsls	r2, r3, #5
 800f214:	69fb      	ldr	r3, [r7, #28]
 800f216:	4413      	add	r3, r2
 800f218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f21c:	691a      	ldr	r2, [r3, #16]
 800f21e:	68bb      	ldr	r3, [r7, #8]
 800f220:	689b      	ldr	r3, [r3, #8]
 800f222:	8af9      	ldrh	r1, [r7, #22]
 800f224:	fb01 f303 	mul.w	r3, r1, r3
 800f228:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f22c:	69b9      	ldr	r1, [r7, #24]
 800f22e:	0148      	lsls	r0, r1, #5
 800f230:	69f9      	ldr	r1, [r7, #28]
 800f232:	4401      	add	r1, r0
 800f234:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f238:	4313      	orrs	r3, r2
 800f23a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800f23c:	79fb      	ldrb	r3, [r7, #7]
 800f23e:	2b01      	cmp	r3, #1
 800f240:	d10d      	bne.n	800f25e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800f242:	68bb      	ldr	r3, [r7, #8]
 800f244:	68db      	ldr	r3, [r3, #12]
 800f246:	2b00      	cmp	r3, #0
 800f248:	d009      	beq.n	800f25e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f24a:	68bb      	ldr	r3, [r7, #8]
 800f24c:	68d9      	ldr	r1, [r3, #12]
 800f24e:	69bb      	ldr	r3, [r7, #24]
 800f250:	015a      	lsls	r2, r3, #5
 800f252:	69fb      	ldr	r3, [r7, #28]
 800f254:	4413      	add	r3, r2
 800f256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f25a:	460a      	mov	r2, r1
 800f25c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800f25e:	68bb      	ldr	r3, [r7, #8]
 800f260:	78db      	ldrb	r3, [r3, #3]
 800f262:	2b01      	cmp	r3, #1
 800f264:	d128      	bne.n	800f2b8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f266:	69fb      	ldr	r3, [r7, #28]
 800f268:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f26c:	689b      	ldr	r3, [r3, #8]
 800f26e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f272:	2b00      	cmp	r3, #0
 800f274:	d110      	bne.n	800f298 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800f276:	69bb      	ldr	r3, [r7, #24]
 800f278:	015a      	lsls	r2, r3, #5
 800f27a:	69fb      	ldr	r3, [r7, #28]
 800f27c:	4413      	add	r3, r2
 800f27e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	69ba      	ldr	r2, [r7, #24]
 800f286:	0151      	lsls	r1, r2, #5
 800f288:	69fa      	ldr	r2, [r7, #28]
 800f28a:	440a      	add	r2, r1
 800f28c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f290:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f294:	6013      	str	r3, [r2, #0]
 800f296:	e00f      	b.n	800f2b8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800f298:	69bb      	ldr	r3, [r7, #24]
 800f29a:	015a      	lsls	r2, r3, #5
 800f29c:	69fb      	ldr	r3, [r7, #28]
 800f29e:	4413      	add	r3, r2
 800f2a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	69ba      	ldr	r2, [r7, #24]
 800f2a8:	0151      	lsls	r1, r2, #5
 800f2aa:	69fa      	ldr	r2, [r7, #28]
 800f2ac:	440a      	add	r2, r1
 800f2ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f2b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f2b6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f2b8:	69bb      	ldr	r3, [r7, #24]
 800f2ba:	015a      	lsls	r2, r3, #5
 800f2bc:	69fb      	ldr	r3, [r7, #28]
 800f2be:	4413      	add	r3, r2
 800f2c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	69ba      	ldr	r2, [r7, #24]
 800f2c8:	0151      	lsls	r1, r2, #5
 800f2ca:	69fa      	ldr	r2, [r7, #28]
 800f2cc:	440a      	add	r2, r1
 800f2ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f2d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f2d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f2d8:	2300      	movs	r3, #0
}
 800f2da:	4618      	mov	r0, r3
 800f2dc:	3720      	adds	r7, #32
 800f2de:	46bd      	mov	sp, r7
 800f2e0:	bd80      	pop	{r7, pc}
 800f2e2:	bf00      	nop
 800f2e4:	1ff80000 	.word	0x1ff80000

0800f2e8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800f2e8:	b480      	push	{r7}
 800f2ea:	b087      	sub	sp, #28
 800f2ec:	af00      	add	r7, sp, #0
 800f2ee:	60f8      	str	r0, [r7, #12]
 800f2f0:	60b9      	str	r1, [r7, #8]
 800f2f2:	4613      	mov	r3, r2
 800f2f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800f2fa:	68bb      	ldr	r3, [r7, #8]
 800f2fc:	781b      	ldrb	r3, [r3, #0]
 800f2fe:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f300:	68bb      	ldr	r3, [r7, #8]
 800f302:	785b      	ldrb	r3, [r3, #1]
 800f304:	2b01      	cmp	r3, #1
 800f306:	f040 80cd 	bne.w	800f4a4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800f30a:	68bb      	ldr	r3, [r7, #8]
 800f30c:	695b      	ldr	r3, [r3, #20]
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d132      	bne.n	800f378 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f312:	693b      	ldr	r3, [r7, #16]
 800f314:	015a      	lsls	r2, r3, #5
 800f316:	697b      	ldr	r3, [r7, #20]
 800f318:	4413      	add	r3, r2
 800f31a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f31e:	691b      	ldr	r3, [r3, #16]
 800f320:	693a      	ldr	r2, [r7, #16]
 800f322:	0151      	lsls	r1, r2, #5
 800f324:	697a      	ldr	r2, [r7, #20]
 800f326:	440a      	add	r2, r1
 800f328:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f32c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f330:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f334:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f336:	693b      	ldr	r3, [r7, #16]
 800f338:	015a      	lsls	r2, r3, #5
 800f33a:	697b      	ldr	r3, [r7, #20]
 800f33c:	4413      	add	r3, r2
 800f33e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f342:	691b      	ldr	r3, [r3, #16]
 800f344:	693a      	ldr	r2, [r7, #16]
 800f346:	0151      	lsls	r1, r2, #5
 800f348:	697a      	ldr	r2, [r7, #20]
 800f34a:	440a      	add	r2, r1
 800f34c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f350:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f354:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f356:	693b      	ldr	r3, [r7, #16]
 800f358:	015a      	lsls	r2, r3, #5
 800f35a:	697b      	ldr	r3, [r7, #20]
 800f35c:	4413      	add	r3, r2
 800f35e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f362:	691b      	ldr	r3, [r3, #16]
 800f364:	693a      	ldr	r2, [r7, #16]
 800f366:	0151      	lsls	r1, r2, #5
 800f368:	697a      	ldr	r2, [r7, #20]
 800f36a:	440a      	add	r2, r1
 800f36c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f370:	0cdb      	lsrs	r3, r3, #19
 800f372:	04db      	lsls	r3, r3, #19
 800f374:	6113      	str	r3, [r2, #16]
 800f376:	e04e      	b.n	800f416 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f378:	693b      	ldr	r3, [r7, #16]
 800f37a:	015a      	lsls	r2, r3, #5
 800f37c:	697b      	ldr	r3, [r7, #20]
 800f37e:	4413      	add	r3, r2
 800f380:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f384:	691b      	ldr	r3, [r3, #16]
 800f386:	693a      	ldr	r2, [r7, #16]
 800f388:	0151      	lsls	r1, r2, #5
 800f38a:	697a      	ldr	r2, [r7, #20]
 800f38c:	440a      	add	r2, r1
 800f38e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f392:	0cdb      	lsrs	r3, r3, #19
 800f394:	04db      	lsls	r3, r3, #19
 800f396:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f398:	693b      	ldr	r3, [r7, #16]
 800f39a:	015a      	lsls	r2, r3, #5
 800f39c:	697b      	ldr	r3, [r7, #20]
 800f39e:	4413      	add	r3, r2
 800f3a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f3a4:	691b      	ldr	r3, [r3, #16]
 800f3a6:	693a      	ldr	r2, [r7, #16]
 800f3a8:	0151      	lsls	r1, r2, #5
 800f3aa:	697a      	ldr	r2, [r7, #20]
 800f3ac:	440a      	add	r2, r1
 800f3ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f3b2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f3b6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f3ba:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800f3bc:	68bb      	ldr	r3, [r7, #8]
 800f3be:	695a      	ldr	r2, [r3, #20]
 800f3c0:	68bb      	ldr	r3, [r7, #8]
 800f3c2:	689b      	ldr	r3, [r3, #8]
 800f3c4:	429a      	cmp	r2, r3
 800f3c6:	d903      	bls.n	800f3d0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800f3c8:	68bb      	ldr	r3, [r7, #8]
 800f3ca:	689a      	ldr	r2, [r3, #8]
 800f3cc:	68bb      	ldr	r3, [r7, #8]
 800f3ce:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f3d0:	693b      	ldr	r3, [r7, #16]
 800f3d2:	015a      	lsls	r2, r3, #5
 800f3d4:	697b      	ldr	r3, [r7, #20]
 800f3d6:	4413      	add	r3, r2
 800f3d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f3dc:	691b      	ldr	r3, [r3, #16]
 800f3de:	693a      	ldr	r2, [r7, #16]
 800f3e0:	0151      	lsls	r1, r2, #5
 800f3e2:	697a      	ldr	r2, [r7, #20]
 800f3e4:	440a      	add	r2, r1
 800f3e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f3ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f3ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f3f0:	693b      	ldr	r3, [r7, #16]
 800f3f2:	015a      	lsls	r2, r3, #5
 800f3f4:	697b      	ldr	r3, [r7, #20]
 800f3f6:	4413      	add	r3, r2
 800f3f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f3fc:	691a      	ldr	r2, [r3, #16]
 800f3fe:	68bb      	ldr	r3, [r7, #8]
 800f400:	695b      	ldr	r3, [r3, #20]
 800f402:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f406:	6939      	ldr	r1, [r7, #16]
 800f408:	0148      	lsls	r0, r1, #5
 800f40a:	6979      	ldr	r1, [r7, #20]
 800f40c:	4401      	add	r1, r0
 800f40e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f412:	4313      	orrs	r3, r2
 800f414:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800f416:	79fb      	ldrb	r3, [r7, #7]
 800f418:	2b01      	cmp	r3, #1
 800f41a:	d11e      	bne.n	800f45a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800f41c:	68bb      	ldr	r3, [r7, #8]
 800f41e:	691b      	ldr	r3, [r3, #16]
 800f420:	2b00      	cmp	r3, #0
 800f422:	d009      	beq.n	800f438 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f424:	693b      	ldr	r3, [r7, #16]
 800f426:	015a      	lsls	r2, r3, #5
 800f428:	697b      	ldr	r3, [r7, #20]
 800f42a:	4413      	add	r3, r2
 800f42c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f430:	461a      	mov	r2, r3
 800f432:	68bb      	ldr	r3, [r7, #8]
 800f434:	691b      	ldr	r3, [r3, #16]
 800f436:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f438:	693b      	ldr	r3, [r7, #16]
 800f43a:	015a      	lsls	r2, r3, #5
 800f43c:	697b      	ldr	r3, [r7, #20]
 800f43e:	4413      	add	r3, r2
 800f440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	693a      	ldr	r2, [r7, #16]
 800f448:	0151      	lsls	r1, r2, #5
 800f44a:	697a      	ldr	r2, [r7, #20]
 800f44c:	440a      	add	r2, r1
 800f44e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f452:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f456:	6013      	str	r3, [r2, #0]
 800f458:	e092      	b.n	800f580 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f45a:	693b      	ldr	r3, [r7, #16]
 800f45c:	015a      	lsls	r2, r3, #5
 800f45e:	697b      	ldr	r3, [r7, #20]
 800f460:	4413      	add	r3, r2
 800f462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	693a      	ldr	r2, [r7, #16]
 800f46a:	0151      	lsls	r1, r2, #5
 800f46c:	697a      	ldr	r2, [r7, #20]
 800f46e:	440a      	add	r2, r1
 800f470:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f474:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f478:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800f47a:	68bb      	ldr	r3, [r7, #8]
 800f47c:	695b      	ldr	r3, [r3, #20]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d07e      	beq.n	800f580 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f482:	697b      	ldr	r3, [r7, #20]
 800f484:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f488:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f48a:	68bb      	ldr	r3, [r7, #8]
 800f48c:	781b      	ldrb	r3, [r3, #0]
 800f48e:	f003 030f 	and.w	r3, r3, #15
 800f492:	2101      	movs	r1, #1
 800f494:	fa01 f303 	lsl.w	r3, r1, r3
 800f498:	6979      	ldr	r1, [r7, #20]
 800f49a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f49e:	4313      	orrs	r3, r2
 800f4a0:	634b      	str	r3, [r1, #52]	; 0x34
 800f4a2:	e06d      	b.n	800f580 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f4a4:	693b      	ldr	r3, [r7, #16]
 800f4a6:	015a      	lsls	r2, r3, #5
 800f4a8:	697b      	ldr	r3, [r7, #20]
 800f4aa:	4413      	add	r3, r2
 800f4ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f4b0:	691b      	ldr	r3, [r3, #16]
 800f4b2:	693a      	ldr	r2, [r7, #16]
 800f4b4:	0151      	lsls	r1, r2, #5
 800f4b6:	697a      	ldr	r2, [r7, #20]
 800f4b8:	440a      	add	r2, r1
 800f4ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f4be:	0cdb      	lsrs	r3, r3, #19
 800f4c0:	04db      	lsls	r3, r3, #19
 800f4c2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f4c4:	693b      	ldr	r3, [r7, #16]
 800f4c6:	015a      	lsls	r2, r3, #5
 800f4c8:	697b      	ldr	r3, [r7, #20]
 800f4ca:	4413      	add	r3, r2
 800f4cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f4d0:	691b      	ldr	r3, [r3, #16]
 800f4d2:	693a      	ldr	r2, [r7, #16]
 800f4d4:	0151      	lsls	r1, r2, #5
 800f4d6:	697a      	ldr	r2, [r7, #20]
 800f4d8:	440a      	add	r2, r1
 800f4da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f4de:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f4e2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f4e6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800f4e8:	68bb      	ldr	r3, [r7, #8]
 800f4ea:	695b      	ldr	r3, [r3, #20]
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d003      	beq.n	800f4f8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800f4f0:	68bb      	ldr	r3, [r7, #8]
 800f4f2:	689a      	ldr	r2, [r3, #8]
 800f4f4:	68bb      	ldr	r3, [r7, #8]
 800f4f6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f4f8:	693b      	ldr	r3, [r7, #16]
 800f4fa:	015a      	lsls	r2, r3, #5
 800f4fc:	697b      	ldr	r3, [r7, #20]
 800f4fe:	4413      	add	r3, r2
 800f500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f504:	691b      	ldr	r3, [r3, #16]
 800f506:	693a      	ldr	r2, [r7, #16]
 800f508:	0151      	lsls	r1, r2, #5
 800f50a:	697a      	ldr	r2, [r7, #20]
 800f50c:	440a      	add	r2, r1
 800f50e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f512:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f516:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800f518:	693b      	ldr	r3, [r7, #16]
 800f51a:	015a      	lsls	r2, r3, #5
 800f51c:	697b      	ldr	r3, [r7, #20]
 800f51e:	4413      	add	r3, r2
 800f520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f524:	691a      	ldr	r2, [r3, #16]
 800f526:	68bb      	ldr	r3, [r7, #8]
 800f528:	689b      	ldr	r3, [r3, #8]
 800f52a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f52e:	6939      	ldr	r1, [r7, #16]
 800f530:	0148      	lsls	r0, r1, #5
 800f532:	6979      	ldr	r1, [r7, #20]
 800f534:	4401      	add	r1, r0
 800f536:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f53a:	4313      	orrs	r3, r2
 800f53c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800f53e:	79fb      	ldrb	r3, [r7, #7]
 800f540:	2b01      	cmp	r3, #1
 800f542:	d10d      	bne.n	800f560 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800f544:	68bb      	ldr	r3, [r7, #8]
 800f546:	68db      	ldr	r3, [r3, #12]
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d009      	beq.n	800f560 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f54c:	68bb      	ldr	r3, [r7, #8]
 800f54e:	68d9      	ldr	r1, [r3, #12]
 800f550:	693b      	ldr	r3, [r7, #16]
 800f552:	015a      	lsls	r2, r3, #5
 800f554:	697b      	ldr	r3, [r7, #20]
 800f556:	4413      	add	r3, r2
 800f558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f55c:	460a      	mov	r2, r1
 800f55e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f560:	693b      	ldr	r3, [r7, #16]
 800f562:	015a      	lsls	r2, r3, #5
 800f564:	697b      	ldr	r3, [r7, #20]
 800f566:	4413      	add	r3, r2
 800f568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	693a      	ldr	r2, [r7, #16]
 800f570:	0151      	lsls	r1, r2, #5
 800f572:	697a      	ldr	r2, [r7, #20]
 800f574:	440a      	add	r2, r1
 800f576:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f57a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f57e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f580:	2300      	movs	r3, #0
}
 800f582:	4618      	mov	r0, r3
 800f584:	371c      	adds	r7, #28
 800f586:	46bd      	mov	sp, r7
 800f588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f58c:	4770      	bx	lr

0800f58e <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800f58e:	b480      	push	{r7}
 800f590:	b089      	sub	sp, #36	; 0x24
 800f592:	af00      	add	r7, sp, #0
 800f594:	60f8      	str	r0, [r7, #12]
 800f596:	60b9      	str	r1, [r7, #8]
 800f598:	4611      	mov	r1, r2
 800f59a:	461a      	mov	r2, r3
 800f59c:	460b      	mov	r3, r1
 800f59e:	71fb      	strb	r3, [r7, #7]
 800f5a0:	4613      	mov	r3, r2
 800f5a2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800f5a8:	68bb      	ldr	r3, [r7, #8]
 800f5aa:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800f5ac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d11a      	bne.n	800f5ea <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800f5b4:	88bb      	ldrh	r3, [r7, #4]
 800f5b6:	3303      	adds	r3, #3
 800f5b8:	089b      	lsrs	r3, r3, #2
 800f5ba:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800f5bc:	2300      	movs	r3, #0
 800f5be:	61bb      	str	r3, [r7, #24]
 800f5c0:	e00f      	b.n	800f5e2 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f5c2:	79fb      	ldrb	r3, [r7, #7]
 800f5c4:	031a      	lsls	r2, r3, #12
 800f5c6:	697b      	ldr	r3, [r7, #20]
 800f5c8:	4413      	add	r3, r2
 800f5ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f5ce:	461a      	mov	r2, r3
 800f5d0:	69fb      	ldr	r3, [r7, #28]
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	6013      	str	r3, [r2, #0]
      pSrc++;
 800f5d6:	69fb      	ldr	r3, [r7, #28]
 800f5d8:	3304      	adds	r3, #4
 800f5da:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800f5dc:	69bb      	ldr	r3, [r7, #24]
 800f5de:	3301      	adds	r3, #1
 800f5e0:	61bb      	str	r3, [r7, #24]
 800f5e2:	69ba      	ldr	r2, [r7, #24]
 800f5e4:	693b      	ldr	r3, [r7, #16]
 800f5e6:	429a      	cmp	r2, r3
 800f5e8:	d3eb      	bcc.n	800f5c2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800f5ea:	2300      	movs	r3, #0
}
 800f5ec:	4618      	mov	r0, r3
 800f5ee:	3724      	adds	r7, #36	; 0x24
 800f5f0:	46bd      	mov	sp, r7
 800f5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f6:	4770      	bx	lr

0800f5f8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800f5f8:	b480      	push	{r7}
 800f5fa:	b089      	sub	sp, #36	; 0x24
 800f5fc:	af00      	add	r7, sp, #0
 800f5fe:	60f8      	str	r0, [r7, #12]
 800f600:	60b9      	str	r1, [r7, #8]
 800f602:	4613      	mov	r3, r2
 800f604:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800f60a:	68bb      	ldr	r3, [r7, #8]
 800f60c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800f60e:	88fb      	ldrh	r3, [r7, #6]
 800f610:	3303      	adds	r3, #3
 800f612:	089b      	lsrs	r3, r3, #2
 800f614:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800f616:	2300      	movs	r3, #0
 800f618:	61bb      	str	r3, [r7, #24]
 800f61a:	e00b      	b.n	800f634 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800f61c:	697b      	ldr	r3, [r7, #20]
 800f61e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f622:	681a      	ldr	r2, [r3, #0]
 800f624:	69fb      	ldr	r3, [r7, #28]
 800f626:	601a      	str	r2, [r3, #0]
    pDest++;
 800f628:	69fb      	ldr	r3, [r7, #28]
 800f62a:	3304      	adds	r3, #4
 800f62c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800f62e:	69bb      	ldr	r3, [r7, #24]
 800f630:	3301      	adds	r3, #1
 800f632:	61bb      	str	r3, [r7, #24]
 800f634:	69ba      	ldr	r2, [r7, #24]
 800f636:	693b      	ldr	r3, [r7, #16]
 800f638:	429a      	cmp	r2, r3
 800f63a:	d3ef      	bcc.n	800f61c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800f63c:	69fb      	ldr	r3, [r7, #28]
}
 800f63e:	4618      	mov	r0, r3
 800f640:	3724      	adds	r7, #36	; 0x24
 800f642:	46bd      	mov	sp, r7
 800f644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f648:	4770      	bx	lr

0800f64a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f64a:	b480      	push	{r7}
 800f64c:	b085      	sub	sp, #20
 800f64e:	af00      	add	r7, sp, #0
 800f650:	6078      	str	r0, [r7, #4]
 800f652:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f658:	683b      	ldr	r3, [r7, #0]
 800f65a:	781b      	ldrb	r3, [r3, #0]
 800f65c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f65e:	683b      	ldr	r3, [r7, #0]
 800f660:	785b      	ldrb	r3, [r3, #1]
 800f662:	2b01      	cmp	r3, #1
 800f664:	d12c      	bne.n	800f6c0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f666:	68bb      	ldr	r3, [r7, #8]
 800f668:	015a      	lsls	r2, r3, #5
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	4413      	add	r3, r2
 800f66e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	2b00      	cmp	r3, #0
 800f676:	db12      	blt.n	800f69e <USB_EPSetStall+0x54>
 800f678:	68bb      	ldr	r3, [r7, #8]
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d00f      	beq.n	800f69e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800f67e:	68bb      	ldr	r3, [r7, #8]
 800f680:	015a      	lsls	r2, r3, #5
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	4413      	add	r3, r2
 800f686:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	68ba      	ldr	r2, [r7, #8]
 800f68e:	0151      	lsls	r1, r2, #5
 800f690:	68fa      	ldr	r2, [r7, #12]
 800f692:	440a      	add	r2, r1
 800f694:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f698:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f69c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800f69e:	68bb      	ldr	r3, [r7, #8]
 800f6a0:	015a      	lsls	r2, r3, #5
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	4413      	add	r3, r2
 800f6a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	68ba      	ldr	r2, [r7, #8]
 800f6ae:	0151      	lsls	r1, r2, #5
 800f6b0:	68fa      	ldr	r2, [r7, #12]
 800f6b2:	440a      	add	r2, r1
 800f6b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f6b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f6bc:	6013      	str	r3, [r2, #0]
 800f6be:	e02b      	b.n	800f718 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f6c0:	68bb      	ldr	r3, [r7, #8]
 800f6c2:	015a      	lsls	r2, r3, #5
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	4413      	add	r3, r2
 800f6c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	db12      	blt.n	800f6f8 <USB_EPSetStall+0xae>
 800f6d2:	68bb      	ldr	r3, [r7, #8]
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d00f      	beq.n	800f6f8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800f6d8:	68bb      	ldr	r3, [r7, #8]
 800f6da:	015a      	lsls	r2, r3, #5
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	4413      	add	r3, r2
 800f6e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	68ba      	ldr	r2, [r7, #8]
 800f6e8:	0151      	lsls	r1, r2, #5
 800f6ea:	68fa      	ldr	r2, [r7, #12]
 800f6ec:	440a      	add	r2, r1
 800f6ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f6f2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f6f6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800f6f8:	68bb      	ldr	r3, [r7, #8]
 800f6fa:	015a      	lsls	r2, r3, #5
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	4413      	add	r3, r2
 800f700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	68ba      	ldr	r2, [r7, #8]
 800f708:	0151      	lsls	r1, r2, #5
 800f70a:	68fa      	ldr	r2, [r7, #12]
 800f70c:	440a      	add	r2, r1
 800f70e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f712:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f716:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f718:	2300      	movs	r3, #0
}
 800f71a:	4618      	mov	r0, r3
 800f71c:	3714      	adds	r7, #20
 800f71e:	46bd      	mov	sp, r7
 800f720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f724:	4770      	bx	lr

0800f726 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f726:	b480      	push	{r7}
 800f728:	b085      	sub	sp, #20
 800f72a:	af00      	add	r7, sp, #0
 800f72c:	6078      	str	r0, [r7, #4]
 800f72e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f734:	683b      	ldr	r3, [r7, #0]
 800f736:	781b      	ldrb	r3, [r3, #0]
 800f738:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f73a:	683b      	ldr	r3, [r7, #0]
 800f73c:	785b      	ldrb	r3, [r3, #1]
 800f73e:	2b01      	cmp	r3, #1
 800f740:	d128      	bne.n	800f794 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f742:	68bb      	ldr	r3, [r7, #8]
 800f744:	015a      	lsls	r2, r3, #5
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	4413      	add	r3, r2
 800f74a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	68ba      	ldr	r2, [r7, #8]
 800f752:	0151      	lsls	r1, r2, #5
 800f754:	68fa      	ldr	r2, [r7, #12]
 800f756:	440a      	add	r2, r1
 800f758:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f75c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f760:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f762:	683b      	ldr	r3, [r7, #0]
 800f764:	78db      	ldrb	r3, [r3, #3]
 800f766:	2b03      	cmp	r3, #3
 800f768:	d003      	beq.n	800f772 <USB_EPClearStall+0x4c>
 800f76a:	683b      	ldr	r3, [r7, #0]
 800f76c:	78db      	ldrb	r3, [r3, #3]
 800f76e:	2b02      	cmp	r3, #2
 800f770:	d138      	bne.n	800f7e4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f772:	68bb      	ldr	r3, [r7, #8]
 800f774:	015a      	lsls	r2, r3, #5
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	4413      	add	r3, r2
 800f77a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	68ba      	ldr	r2, [r7, #8]
 800f782:	0151      	lsls	r1, r2, #5
 800f784:	68fa      	ldr	r2, [r7, #12]
 800f786:	440a      	add	r2, r1
 800f788:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f78c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f790:	6013      	str	r3, [r2, #0]
 800f792:	e027      	b.n	800f7e4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800f794:	68bb      	ldr	r3, [r7, #8]
 800f796:	015a      	lsls	r2, r3, #5
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	4413      	add	r3, r2
 800f79c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	68ba      	ldr	r2, [r7, #8]
 800f7a4:	0151      	lsls	r1, r2, #5
 800f7a6:	68fa      	ldr	r2, [r7, #12]
 800f7a8:	440a      	add	r2, r1
 800f7aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f7ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f7b2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f7b4:	683b      	ldr	r3, [r7, #0]
 800f7b6:	78db      	ldrb	r3, [r3, #3]
 800f7b8:	2b03      	cmp	r3, #3
 800f7ba:	d003      	beq.n	800f7c4 <USB_EPClearStall+0x9e>
 800f7bc:	683b      	ldr	r3, [r7, #0]
 800f7be:	78db      	ldrb	r3, [r3, #3]
 800f7c0:	2b02      	cmp	r3, #2
 800f7c2:	d10f      	bne.n	800f7e4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f7c4:	68bb      	ldr	r3, [r7, #8]
 800f7c6:	015a      	lsls	r2, r3, #5
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	4413      	add	r3, r2
 800f7cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	68ba      	ldr	r2, [r7, #8]
 800f7d4:	0151      	lsls	r1, r2, #5
 800f7d6:	68fa      	ldr	r2, [r7, #12]
 800f7d8:	440a      	add	r2, r1
 800f7da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f7de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f7e2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800f7e4:	2300      	movs	r3, #0
}
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	3714      	adds	r7, #20
 800f7ea:	46bd      	mov	sp, r7
 800f7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f0:	4770      	bx	lr

0800f7f2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800f7f2:	b480      	push	{r7}
 800f7f4:	b085      	sub	sp, #20
 800f7f6:	af00      	add	r7, sp, #0
 800f7f8:	6078      	str	r0, [r7, #4]
 800f7fa:	460b      	mov	r3, r1
 800f7fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	68fa      	ldr	r2, [r7, #12]
 800f80c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f810:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800f814:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f81c:	681a      	ldr	r2, [r3, #0]
 800f81e:	78fb      	ldrb	r3, [r7, #3]
 800f820:	011b      	lsls	r3, r3, #4
 800f822:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800f826:	68f9      	ldr	r1, [r7, #12]
 800f828:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f82c:	4313      	orrs	r3, r2
 800f82e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800f830:	2300      	movs	r3, #0
}
 800f832:	4618      	mov	r0, r3
 800f834:	3714      	adds	r7, #20
 800f836:	46bd      	mov	sp, r7
 800f838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f83c:	4770      	bx	lr

0800f83e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800f83e:	b580      	push	{r7, lr}
 800f840:	b084      	sub	sp, #16
 800f842:	af00      	add	r7, sp, #0
 800f844:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f850:	685b      	ldr	r3, [r3, #4]
 800f852:	68fa      	ldr	r2, [r7, #12]
 800f854:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f858:	f023 0302 	bic.w	r3, r3, #2
 800f85c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800f85e:	2003      	movs	r0, #3
 800f860:	f7fa ff54 	bl	800a70c <HAL_Delay>

  return HAL_OK;
 800f864:	2300      	movs	r3, #0
}
 800f866:	4618      	mov	r0, r3
 800f868:	3710      	adds	r7, #16
 800f86a:	46bd      	mov	sp, r7
 800f86c:	bd80      	pop	{r7, pc}

0800f86e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800f86e:	b580      	push	{r7, lr}
 800f870:	b084      	sub	sp, #16
 800f872:	af00      	add	r7, sp, #0
 800f874:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f880:	685b      	ldr	r3, [r3, #4]
 800f882:	68fa      	ldr	r2, [r7, #12]
 800f884:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f888:	f043 0302 	orr.w	r3, r3, #2
 800f88c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800f88e:	2003      	movs	r0, #3
 800f890:	f7fa ff3c 	bl	800a70c <HAL_Delay>

  return HAL_OK;
 800f894:	2300      	movs	r3, #0
}
 800f896:	4618      	mov	r0, r3
 800f898:	3710      	adds	r7, #16
 800f89a:	46bd      	mov	sp, r7
 800f89c:	bd80      	pop	{r7, pc}

0800f89e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800f89e:	b480      	push	{r7}
 800f8a0:	b085      	sub	sp, #20
 800f8a2:	af00      	add	r7, sp, #0
 800f8a4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	695b      	ldr	r3, [r3, #20]
 800f8aa:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	699b      	ldr	r3, [r3, #24]
 800f8b0:	68fa      	ldr	r2, [r7, #12]
 800f8b2:	4013      	ands	r3, r2
 800f8b4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800f8b6:	68fb      	ldr	r3, [r7, #12]
}
 800f8b8:	4618      	mov	r0, r3
 800f8ba:	3714      	adds	r7, #20
 800f8bc:	46bd      	mov	sp, r7
 800f8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8c2:	4770      	bx	lr

0800f8c4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800f8c4:	b480      	push	{r7}
 800f8c6:	b085      	sub	sp, #20
 800f8c8:	af00      	add	r7, sp, #0
 800f8ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f8d6:	699b      	ldr	r3, [r3, #24]
 800f8d8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f8e0:	69db      	ldr	r3, [r3, #28]
 800f8e2:	68ba      	ldr	r2, [r7, #8]
 800f8e4:	4013      	ands	r3, r2
 800f8e6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800f8e8:	68bb      	ldr	r3, [r7, #8]
 800f8ea:	0c1b      	lsrs	r3, r3, #16
}
 800f8ec:	4618      	mov	r0, r3
 800f8ee:	3714      	adds	r7, #20
 800f8f0:	46bd      	mov	sp, r7
 800f8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f6:	4770      	bx	lr

0800f8f8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800f8f8:	b480      	push	{r7}
 800f8fa:	b085      	sub	sp, #20
 800f8fc:	af00      	add	r7, sp, #0
 800f8fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f90a:	699b      	ldr	r3, [r3, #24]
 800f90c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f914:	69db      	ldr	r3, [r3, #28]
 800f916:	68ba      	ldr	r2, [r7, #8]
 800f918:	4013      	ands	r3, r2
 800f91a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800f91c:	68bb      	ldr	r3, [r7, #8]
 800f91e:	b29b      	uxth	r3, r3
}
 800f920:	4618      	mov	r0, r3
 800f922:	3714      	adds	r7, #20
 800f924:	46bd      	mov	sp, r7
 800f926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f92a:	4770      	bx	lr

0800f92c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f92c:	b480      	push	{r7}
 800f92e:	b085      	sub	sp, #20
 800f930:	af00      	add	r7, sp, #0
 800f932:	6078      	str	r0, [r7, #4]
 800f934:	460b      	mov	r3, r1
 800f936:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800f93c:	78fb      	ldrb	r3, [r7, #3]
 800f93e:	015a      	lsls	r2, r3, #5
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	4413      	add	r3, r2
 800f944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f948:	689b      	ldr	r3, [r3, #8]
 800f94a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f952:	695b      	ldr	r3, [r3, #20]
 800f954:	68ba      	ldr	r2, [r7, #8]
 800f956:	4013      	ands	r3, r2
 800f958:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f95a:	68bb      	ldr	r3, [r7, #8]
}
 800f95c:	4618      	mov	r0, r3
 800f95e:	3714      	adds	r7, #20
 800f960:	46bd      	mov	sp, r7
 800f962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f966:	4770      	bx	lr

0800f968 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f968:	b480      	push	{r7}
 800f96a:	b087      	sub	sp, #28
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	6078      	str	r0, [r7, #4]
 800f970:	460b      	mov	r3, r1
 800f972:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800f978:	697b      	ldr	r3, [r7, #20]
 800f97a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f97e:	691b      	ldr	r3, [r3, #16]
 800f980:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800f982:	697b      	ldr	r3, [r7, #20]
 800f984:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f98a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800f98c:	78fb      	ldrb	r3, [r7, #3]
 800f98e:	f003 030f 	and.w	r3, r3, #15
 800f992:	68fa      	ldr	r2, [r7, #12]
 800f994:	fa22 f303 	lsr.w	r3, r2, r3
 800f998:	01db      	lsls	r3, r3, #7
 800f99a:	b2db      	uxtb	r3, r3
 800f99c:	693a      	ldr	r2, [r7, #16]
 800f99e:	4313      	orrs	r3, r2
 800f9a0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800f9a2:	78fb      	ldrb	r3, [r7, #3]
 800f9a4:	015a      	lsls	r2, r3, #5
 800f9a6:	697b      	ldr	r3, [r7, #20]
 800f9a8:	4413      	add	r3, r2
 800f9aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f9ae:	689b      	ldr	r3, [r3, #8]
 800f9b0:	693a      	ldr	r2, [r7, #16]
 800f9b2:	4013      	ands	r3, r2
 800f9b4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f9b6:	68bb      	ldr	r3, [r7, #8]
}
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	371c      	adds	r7, #28
 800f9bc:	46bd      	mov	sp, r7
 800f9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9c2:	4770      	bx	lr

0800f9c4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800f9c4:	b480      	push	{r7}
 800f9c6:	b083      	sub	sp, #12
 800f9c8:	af00      	add	r7, sp, #0
 800f9ca:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	695b      	ldr	r3, [r3, #20]
 800f9d0:	f003 0301 	and.w	r3, r3, #1
}
 800f9d4:	4618      	mov	r0, r3
 800f9d6:	370c      	adds	r7, #12
 800f9d8:	46bd      	mov	sp, r7
 800f9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9de:	4770      	bx	lr

0800f9e0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800f9e0:	b480      	push	{r7}
 800f9e2:	b085      	sub	sp, #20
 800f9e4:	af00      	add	r7, sp, #0
 800f9e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	68fa      	ldr	r2, [r7, #12]
 800f9f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f9fa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800f9fe:	f023 0307 	bic.w	r3, r3, #7
 800fa02:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa0a:	689b      	ldr	r3, [r3, #8]
 800fa0c:	f003 0306 	and.w	r3, r3, #6
 800fa10:	2b04      	cmp	r3, #4
 800fa12:	d109      	bne.n	800fa28 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	68fa      	ldr	r2, [r7, #12]
 800fa1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fa22:	f043 0303 	orr.w	r3, r3, #3
 800fa26:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa2e:	685b      	ldr	r3, [r3, #4]
 800fa30:	68fa      	ldr	r2, [r7, #12]
 800fa32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fa36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fa3a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800fa3c:	2300      	movs	r3, #0
}
 800fa3e:	4618      	mov	r0, r3
 800fa40:	3714      	adds	r7, #20
 800fa42:	46bd      	mov	sp, r7
 800fa44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa48:	4770      	bx	lr
	...

0800fa4c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800fa4c:	b480      	push	{r7}
 800fa4e:	b087      	sub	sp, #28
 800fa50:	af00      	add	r7, sp, #0
 800fa52:	60f8      	str	r0, [r7, #12]
 800fa54:	460b      	mov	r3, r1
 800fa56:	607a      	str	r2, [r7, #4]
 800fa58:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	333c      	adds	r3, #60	; 0x3c
 800fa62:	3304      	adds	r3, #4
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800fa68:	693b      	ldr	r3, [r7, #16]
 800fa6a:	4a26      	ldr	r2, [pc, #152]	; (800fb04 <USB_EP0_OutStart+0xb8>)
 800fa6c:	4293      	cmp	r3, r2
 800fa6e:	d90a      	bls.n	800fa86 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fa70:	697b      	ldr	r3, [r7, #20]
 800fa72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fa7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fa80:	d101      	bne.n	800fa86 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800fa82:	2300      	movs	r3, #0
 800fa84:	e037      	b.n	800faf6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800fa86:	697b      	ldr	r3, [r7, #20]
 800fa88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa8c:	461a      	mov	r2, r3
 800fa8e:	2300      	movs	r3, #0
 800fa90:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800fa92:	697b      	ldr	r3, [r7, #20]
 800fa94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa98:	691b      	ldr	r3, [r3, #16]
 800fa9a:	697a      	ldr	r2, [r7, #20]
 800fa9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800faa0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800faa4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800faa6:	697b      	ldr	r3, [r7, #20]
 800faa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800faac:	691b      	ldr	r3, [r3, #16]
 800faae:	697a      	ldr	r2, [r7, #20]
 800fab0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fab4:	f043 0318 	orr.w	r3, r3, #24
 800fab8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800faba:	697b      	ldr	r3, [r7, #20]
 800fabc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fac0:	691b      	ldr	r3, [r3, #16]
 800fac2:	697a      	ldr	r2, [r7, #20]
 800fac4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fac8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800facc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800face:	7afb      	ldrb	r3, [r7, #11]
 800fad0:	2b01      	cmp	r3, #1
 800fad2:	d10f      	bne.n	800faf4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800fad4:	697b      	ldr	r3, [r7, #20]
 800fad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fada:	461a      	mov	r2, r3
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800fae0:	697b      	ldr	r3, [r7, #20]
 800fae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	697a      	ldr	r2, [r7, #20]
 800faea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800faee:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800faf2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800faf4:	2300      	movs	r3, #0
}
 800faf6:	4618      	mov	r0, r3
 800faf8:	371c      	adds	r7, #28
 800fafa:	46bd      	mov	sp, r7
 800fafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb00:	4770      	bx	lr
 800fb02:	bf00      	nop
 800fb04:	4f54300a 	.word	0x4f54300a

0800fb08 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800fb08:	b480      	push	{r7}
 800fb0a:	b085      	sub	sp, #20
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800fb10:	2300      	movs	r3, #0
 800fb12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	3301      	adds	r3, #1
 800fb18:	60fb      	str	r3, [r7, #12]
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	4a13      	ldr	r2, [pc, #76]	; (800fb6c <USB_CoreReset+0x64>)
 800fb1e:	4293      	cmp	r3, r2
 800fb20:	d901      	bls.n	800fb26 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800fb22:	2303      	movs	r3, #3
 800fb24:	e01b      	b.n	800fb5e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	691b      	ldr	r3, [r3, #16]
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	daf2      	bge.n	800fb14 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800fb2e:	2300      	movs	r3, #0
 800fb30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	691b      	ldr	r3, [r3, #16]
 800fb36:	f043 0201 	orr.w	r2, r3, #1
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	3301      	adds	r3, #1
 800fb42:	60fb      	str	r3, [r7, #12]
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	4a09      	ldr	r2, [pc, #36]	; (800fb6c <USB_CoreReset+0x64>)
 800fb48:	4293      	cmp	r3, r2
 800fb4a:	d901      	bls.n	800fb50 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800fb4c:	2303      	movs	r3, #3
 800fb4e:	e006      	b.n	800fb5e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	691b      	ldr	r3, [r3, #16]
 800fb54:	f003 0301 	and.w	r3, r3, #1
 800fb58:	2b01      	cmp	r3, #1
 800fb5a:	d0f0      	beq.n	800fb3e <USB_CoreReset+0x36>

  return HAL_OK;
 800fb5c:	2300      	movs	r3, #0
}
 800fb5e:	4618      	mov	r0, r3
 800fb60:	3714      	adds	r7, #20
 800fb62:	46bd      	mov	sp, r7
 800fb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb68:	4770      	bx	lr
 800fb6a:	bf00      	nop
 800fb6c:	00030d40 	.word	0x00030d40

0800fb70 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fb70:	b580      	push	{r7, lr}
 800fb72:	b084      	sub	sp, #16
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	6078      	str	r0, [r7, #4]
 800fb78:	460b      	mov	r3, r1
 800fb7a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800fb7c:	2300      	movs	r3, #0
 800fb7e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	7c1b      	ldrb	r3, [r3, #16]
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d115      	bne.n	800fbb4 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800fb88:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fb8c:	2202      	movs	r2, #2
 800fb8e:	2181      	movs	r1, #129	; 0x81
 800fb90:	6878      	ldr	r0, [r7, #4]
 800fb92:	f005 f8a0 	bl	8014cd6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	2201      	movs	r2, #1
 800fb9a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800fb9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fba0:	2202      	movs	r2, #2
 800fba2:	2101      	movs	r1, #1
 800fba4:	6878      	ldr	r0, [r7, #4]
 800fba6:	f005 f896 	bl	8014cd6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	2201      	movs	r2, #1
 800fbae:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800fbb2:	e012      	b.n	800fbda <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800fbb4:	2340      	movs	r3, #64	; 0x40
 800fbb6:	2202      	movs	r2, #2
 800fbb8:	2181      	movs	r1, #129	; 0x81
 800fbba:	6878      	ldr	r0, [r7, #4]
 800fbbc:	f005 f88b 	bl	8014cd6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	2201      	movs	r2, #1
 800fbc4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800fbc6:	2340      	movs	r3, #64	; 0x40
 800fbc8:	2202      	movs	r2, #2
 800fbca:	2101      	movs	r1, #1
 800fbcc:	6878      	ldr	r0, [r7, #4]
 800fbce:	f005 f882 	bl	8014cd6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	2201      	movs	r2, #1
 800fbd6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800fbda:	2308      	movs	r3, #8
 800fbdc:	2203      	movs	r2, #3
 800fbde:	2182      	movs	r1, #130	; 0x82
 800fbe0:	6878      	ldr	r0, [r7, #4]
 800fbe2:	f005 f878 	bl	8014cd6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	2201      	movs	r2, #1
 800fbea:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800fbec:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800fbf0:	f005 f9ee 	bl	8014fd0 <malloc>
 800fbf4:	4603      	mov	r3, r0
 800fbf6:	461a      	mov	r2, r3
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d102      	bne.n	800fc0e <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 800fc08:	2301      	movs	r3, #1
 800fc0a:	73fb      	strb	r3, [r7, #15]
 800fc0c:	e026      	b.n	800fc5c <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800fc14:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800fc20:	68bb      	ldr	r3, [r7, #8]
 800fc22:	2200      	movs	r2, #0
 800fc24:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800fc28:	68bb      	ldr	r3, [r7, #8]
 800fc2a:	2200      	movs	r2, #0
 800fc2c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	7c1b      	ldrb	r3, [r3, #16]
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d109      	bne.n	800fc4c <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800fc38:	68bb      	ldr	r3, [r7, #8]
 800fc3a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800fc3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fc42:	2101      	movs	r1, #1
 800fc44:	6878      	ldr	r0, [r7, #4]
 800fc46:	f005 f937 	bl	8014eb8 <USBD_LL_PrepareReceive>
 800fc4a:	e007      	b.n	800fc5c <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800fc4c:	68bb      	ldr	r3, [r7, #8]
 800fc4e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800fc52:	2340      	movs	r3, #64	; 0x40
 800fc54:	2101      	movs	r1, #1
 800fc56:	6878      	ldr	r0, [r7, #4]
 800fc58:	f005 f92e 	bl	8014eb8 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800fc5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc5e:	4618      	mov	r0, r3
 800fc60:	3710      	adds	r7, #16
 800fc62:	46bd      	mov	sp, r7
 800fc64:	bd80      	pop	{r7, pc}

0800fc66 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fc66:	b580      	push	{r7, lr}
 800fc68:	b084      	sub	sp, #16
 800fc6a:	af00      	add	r7, sp, #0
 800fc6c:	6078      	str	r0, [r7, #4]
 800fc6e:	460b      	mov	r3, r1
 800fc70:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800fc72:	2300      	movs	r3, #0
 800fc74:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800fc76:	2181      	movs	r1, #129	; 0x81
 800fc78:	6878      	ldr	r0, [r7, #4]
 800fc7a:	f005 f852 	bl	8014d22 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	2200      	movs	r2, #0
 800fc82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800fc84:	2101      	movs	r1, #1
 800fc86:	6878      	ldr	r0, [r7, #4]
 800fc88:	f005 f84b 	bl	8014d22 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	2200      	movs	r2, #0
 800fc90:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800fc94:	2182      	movs	r1, #130	; 0x82
 800fc96:	6878      	ldr	r0, [r7, #4]
 800fc98:	f005 f843 	bl	8014d22 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	2200      	movs	r2, #0
 800fca0:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d00e      	beq.n	800fcca <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800fcb2:	685b      	ldr	r3, [r3, #4]
 800fcb4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800fcbc:	4618      	mov	r0, r3
 800fcbe:	f005 f98f 	bl	8014fe0 <free>
    pdev->pClassData = NULL;
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	2200      	movs	r2, #0
 800fcc6:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 800fcca:	7bfb      	ldrb	r3, [r7, #15]
}
 800fccc:	4618      	mov	r0, r3
 800fcce:	3710      	adds	r7, #16
 800fcd0:	46bd      	mov	sp, r7
 800fcd2:	bd80      	pop	{r7, pc}

0800fcd4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800fcd4:	b580      	push	{r7, lr}
 800fcd6:	b086      	sub	sp, #24
 800fcd8:	af00      	add	r7, sp, #0
 800fcda:	6078      	str	r0, [r7, #4]
 800fcdc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800fce4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800fce6:	2300      	movs	r3, #0
 800fce8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800fcea:	2300      	movs	r3, #0
 800fcec:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800fcee:	2300      	movs	r3, #0
 800fcf0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fcf2:	683b      	ldr	r3, [r7, #0]
 800fcf4:	781b      	ldrb	r3, [r3, #0]
 800fcf6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d039      	beq.n	800fd72 <USBD_CDC_Setup+0x9e>
 800fcfe:	2b20      	cmp	r3, #32
 800fd00:	d17c      	bne.n	800fdfc <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800fd02:	683b      	ldr	r3, [r7, #0]
 800fd04:	88db      	ldrh	r3, [r3, #6]
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d029      	beq.n	800fd5e <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 800fd0a:	683b      	ldr	r3, [r7, #0]
 800fd0c:	781b      	ldrb	r3, [r3, #0]
 800fd0e:	b25b      	sxtb	r3, r3
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	da11      	bge.n	800fd38 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800fd1a:	689b      	ldr	r3, [r3, #8]
 800fd1c:	683a      	ldr	r2, [r7, #0]
 800fd1e:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 800fd20:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800fd22:	683a      	ldr	r2, [r7, #0]
 800fd24:	88d2      	ldrh	r2, [r2, #6]
 800fd26:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800fd28:	6939      	ldr	r1, [r7, #16]
 800fd2a:	683b      	ldr	r3, [r7, #0]
 800fd2c:	88db      	ldrh	r3, [r3, #6]
 800fd2e:	461a      	mov	r2, r3
 800fd30:	6878      	ldr	r0, [r7, #4]
 800fd32:	f001 f9c9 	bl	80110c8 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800fd36:	e068      	b.n	800fe0a <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 800fd38:	683b      	ldr	r3, [r7, #0]
 800fd3a:	785a      	ldrb	r2, [r3, #1]
 800fd3c:	693b      	ldr	r3, [r7, #16]
 800fd3e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800fd42:	683b      	ldr	r3, [r7, #0]
 800fd44:	88db      	ldrh	r3, [r3, #6]
 800fd46:	b2da      	uxtb	r2, r3
 800fd48:	693b      	ldr	r3, [r7, #16]
 800fd4a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800fd4e:	6939      	ldr	r1, [r7, #16]
 800fd50:	683b      	ldr	r3, [r7, #0]
 800fd52:	88db      	ldrh	r3, [r3, #6]
 800fd54:	461a      	mov	r2, r3
 800fd56:	6878      	ldr	r0, [r7, #4]
 800fd58:	f001 f9e4 	bl	8011124 <USBD_CtlPrepareRx>
    break;
 800fd5c:	e055      	b.n	800fe0a <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800fd64:	689b      	ldr	r3, [r3, #8]
 800fd66:	683a      	ldr	r2, [r7, #0]
 800fd68:	7850      	ldrb	r0, [r2, #1]
 800fd6a:	2200      	movs	r2, #0
 800fd6c:	6839      	ldr	r1, [r7, #0]
 800fd6e:	4798      	blx	r3
    break;
 800fd70:	e04b      	b.n	800fe0a <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800fd72:	683b      	ldr	r3, [r7, #0]
 800fd74:	785b      	ldrb	r3, [r3, #1]
 800fd76:	2b0a      	cmp	r3, #10
 800fd78:	d017      	beq.n	800fdaa <USBD_CDC_Setup+0xd6>
 800fd7a:	2b0b      	cmp	r3, #11
 800fd7c:	d029      	beq.n	800fdd2 <USBD_CDC_Setup+0xfe>
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d133      	bne.n	800fdea <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800fd88:	2b03      	cmp	r3, #3
 800fd8a:	d107      	bne.n	800fd9c <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800fd8c:	f107 030c 	add.w	r3, r7, #12
 800fd90:	2202      	movs	r2, #2
 800fd92:	4619      	mov	r1, r3
 800fd94:	6878      	ldr	r0, [r7, #4]
 800fd96:	f001 f997 	bl	80110c8 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800fd9a:	e02e      	b.n	800fdfa <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800fd9c:	6839      	ldr	r1, [r7, #0]
 800fd9e:	6878      	ldr	r0, [r7, #4]
 800fda0:	f001 f927 	bl	8010ff2 <USBD_CtlError>
			  ret = USBD_FAIL;
 800fda4:	2302      	movs	r3, #2
 800fda6:	75fb      	strb	r3, [r7, #23]
      break;
 800fda8:	e027      	b.n	800fdfa <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800fdb0:	2b03      	cmp	r3, #3
 800fdb2:	d107      	bne.n	800fdc4 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800fdb4:	f107 030f 	add.w	r3, r7, #15
 800fdb8:	2201      	movs	r2, #1
 800fdba:	4619      	mov	r1, r3
 800fdbc:	6878      	ldr	r0, [r7, #4]
 800fdbe:	f001 f983 	bl	80110c8 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800fdc2:	e01a      	b.n	800fdfa <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800fdc4:	6839      	ldr	r1, [r7, #0]
 800fdc6:	6878      	ldr	r0, [r7, #4]
 800fdc8:	f001 f913 	bl	8010ff2 <USBD_CtlError>
			  ret = USBD_FAIL;
 800fdcc:	2302      	movs	r3, #2
 800fdce:	75fb      	strb	r3, [r7, #23]
      break;
 800fdd0:	e013      	b.n	800fdfa <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800fdd8:	2b03      	cmp	r3, #3
 800fdda:	d00d      	beq.n	800fdf8 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 800fddc:	6839      	ldr	r1, [r7, #0]
 800fdde:	6878      	ldr	r0, [r7, #4]
 800fde0:	f001 f907 	bl	8010ff2 <USBD_CtlError>
			  ret = USBD_FAIL;
 800fde4:	2302      	movs	r3, #2
 800fde6:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800fde8:	e006      	b.n	800fdf8 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 800fdea:	6839      	ldr	r1, [r7, #0]
 800fdec:	6878      	ldr	r0, [r7, #4]
 800fdee:	f001 f900 	bl	8010ff2 <USBD_CtlError>
      ret = USBD_FAIL;
 800fdf2:	2302      	movs	r3, #2
 800fdf4:	75fb      	strb	r3, [r7, #23]
      break;
 800fdf6:	e000      	b.n	800fdfa <USBD_CDC_Setup+0x126>
      break;
 800fdf8:	bf00      	nop
    }
    break;
 800fdfa:	e006      	b.n	800fe0a <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 800fdfc:	6839      	ldr	r1, [r7, #0]
 800fdfe:	6878      	ldr	r0, [r7, #4]
 800fe00:	f001 f8f7 	bl	8010ff2 <USBD_CtlError>
    ret = USBD_FAIL;
 800fe04:	2302      	movs	r3, #2
 800fe06:	75fb      	strb	r3, [r7, #23]
    break;
 800fe08:	bf00      	nop
  }

  return ret;
 800fe0a:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe0c:	4618      	mov	r0, r3
 800fe0e:	3718      	adds	r7, #24
 800fe10:	46bd      	mov	sp, r7
 800fe12:	bd80      	pop	{r7, pc}

0800fe14 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800fe14:	b580      	push	{r7, lr}
 800fe16:	b084      	sub	sp, #16
 800fe18:	af00      	add	r7, sp, #0
 800fe1a:	6078      	str	r0, [r7, #4]
 800fe1c:	460b      	mov	r3, r1
 800fe1e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800fe26:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800fe2e:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d03a      	beq.n	800feb0 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800fe3a:	78fa      	ldrb	r2, [r7, #3]
 800fe3c:	6879      	ldr	r1, [r7, #4]
 800fe3e:	4613      	mov	r3, r2
 800fe40:	009b      	lsls	r3, r3, #2
 800fe42:	4413      	add	r3, r2
 800fe44:	009b      	lsls	r3, r3, #2
 800fe46:	440b      	add	r3, r1
 800fe48:	331c      	adds	r3, #28
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d029      	beq.n	800fea4 <USBD_CDC_DataIn+0x90>
 800fe50:	78fa      	ldrb	r2, [r7, #3]
 800fe52:	6879      	ldr	r1, [r7, #4]
 800fe54:	4613      	mov	r3, r2
 800fe56:	009b      	lsls	r3, r3, #2
 800fe58:	4413      	add	r3, r2
 800fe5a:	009b      	lsls	r3, r3, #2
 800fe5c:	440b      	add	r3, r1
 800fe5e:	331c      	adds	r3, #28
 800fe60:	681a      	ldr	r2, [r3, #0]
 800fe62:	78f9      	ldrb	r1, [r7, #3]
 800fe64:	68b8      	ldr	r0, [r7, #8]
 800fe66:	460b      	mov	r3, r1
 800fe68:	00db      	lsls	r3, r3, #3
 800fe6a:	1a5b      	subs	r3, r3, r1
 800fe6c:	009b      	lsls	r3, r3, #2
 800fe6e:	4403      	add	r3, r0
 800fe70:	3344      	adds	r3, #68	; 0x44
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	fbb2 f1f3 	udiv	r1, r2, r3
 800fe78:	fb03 f301 	mul.w	r3, r3, r1
 800fe7c:	1ad3      	subs	r3, r2, r3
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d110      	bne.n	800fea4 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800fe82:	78fa      	ldrb	r2, [r7, #3]
 800fe84:	6879      	ldr	r1, [r7, #4]
 800fe86:	4613      	mov	r3, r2
 800fe88:	009b      	lsls	r3, r3, #2
 800fe8a:	4413      	add	r3, r2
 800fe8c:	009b      	lsls	r3, r3, #2
 800fe8e:	440b      	add	r3, r1
 800fe90:	331c      	adds	r3, #28
 800fe92:	2200      	movs	r2, #0
 800fe94:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800fe96:	78f9      	ldrb	r1, [r7, #3]
 800fe98:	2300      	movs	r3, #0
 800fe9a:	2200      	movs	r2, #0
 800fe9c:	6878      	ldr	r0, [r7, #4]
 800fe9e:	f004 ffe8 	bl	8014e72 <USBD_LL_Transmit>
 800fea2:	e003      	b.n	800feac <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	2200      	movs	r2, #0
 800fea8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800feac:	2300      	movs	r3, #0
 800feae:	e000      	b.n	800feb2 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800feb0:	2302      	movs	r3, #2
  }
}
 800feb2:	4618      	mov	r0, r3
 800feb4:	3710      	adds	r7, #16
 800feb6:	46bd      	mov	sp, r7
 800feb8:	bd80      	pop	{r7, pc}

0800feba <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800feba:	b580      	push	{r7, lr}
 800febc:	b084      	sub	sp, #16
 800febe:	af00      	add	r7, sp, #0
 800fec0:	6078      	str	r0, [r7, #4]
 800fec2:	460b      	mov	r3, r1
 800fec4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800fecc:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800fece:	78fb      	ldrb	r3, [r7, #3]
 800fed0:	4619      	mov	r1, r3
 800fed2:	6878      	ldr	r0, [r7, #4]
 800fed4:	f005 f813 	bl	8014efe <USBD_LL_GetRxDataSize>
 800fed8:	4602      	mov	r2, r0
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d00d      	beq.n	800ff06 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800fef0:	68db      	ldr	r3, [r3, #12]
 800fef2:	68fa      	ldr	r2, [r7, #12]
 800fef4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800fef8:	68fa      	ldr	r2, [r7, #12]
 800fefa:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800fefe:	4611      	mov	r1, r2
 800ff00:	4798      	blx	r3

    return USBD_OK;
 800ff02:	2300      	movs	r3, #0
 800ff04:	e000      	b.n	800ff08 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800ff06:	2302      	movs	r3, #2
  }
}
 800ff08:	4618      	mov	r0, r3
 800ff0a:	3710      	adds	r7, #16
 800ff0c:	46bd      	mov	sp, r7
 800ff0e:	bd80      	pop	{r7, pc}

0800ff10 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800ff10:	b580      	push	{r7, lr}
 800ff12:	b084      	sub	sp, #16
 800ff14:	af00      	add	r7, sp, #0
 800ff16:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ff1e:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d015      	beq.n	800ff56 <USBD_CDC_EP0_RxReady+0x46>
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ff30:	2bff      	cmp	r3, #255	; 0xff
 800ff32:	d010      	beq.n	800ff56 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ff3a:	689b      	ldr	r3, [r3, #8]
 800ff3c:	68fa      	ldr	r2, [r7, #12]
 800ff3e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800ff42:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800ff44:	68fa      	ldr	r2, [r7, #12]
 800ff46:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ff4a:	b292      	uxth	r2, r2
 800ff4c:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	22ff      	movs	r2, #255	; 0xff
 800ff52:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800ff56:	2300      	movs	r3, #0
}
 800ff58:	4618      	mov	r0, r3
 800ff5a:	3710      	adds	r7, #16
 800ff5c:	46bd      	mov	sp, r7
 800ff5e:	bd80      	pop	{r7, pc}

0800ff60 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800ff60:	b480      	push	{r7}
 800ff62:	b083      	sub	sp, #12
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	2243      	movs	r2, #67	; 0x43
 800ff6c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800ff6e:	4b03      	ldr	r3, [pc, #12]	; (800ff7c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800ff70:	4618      	mov	r0, r3
 800ff72:	370c      	adds	r7, #12
 800ff74:	46bd      	mov	sp, r7
 800ff76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff7a:	4770      	bx	lr
 800ff7c:	20000d70 	.word	0x20000d70

0800ff80 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800ff80:	b480      	push	{r7}
 800ff82:	b083      	sub	sp, #12
 800ff84:	af00      	add	r7, sp, #0
 800ff86:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	2243      	movs	r2, #67	; 0x43
 800ff8c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800ff8e:	4b03      	ldr	r3, [pc, #12]	; (800ff9c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800ff90:	4618      	mov	r0, r3
 800ff92:	370c      	adds	r7, #12
 800ff94:	46bd      	mov	sp, r7
 800ff96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff9a:	4770      	bx	lr
 800ff9c:	20000d2c 	.word	0x20000d2c

0800ffa0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800ffa0:	b480      	push	{r7}
 800ffa2:	b083      	sub	sp, #12
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	2243      	movs	r2, #67	; 0x43
 800ffac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800ffae:	4b03      	ldr	r3, [pc, #12]	; (800ffbc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800ffb0:	4618      	mov	r0, r3
 800ffb2:	370c      	adds	r7, #12
 800ffb4:	46bd      	mov	sp, r7
 800ffb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffba:	4770      	bx	lr
 800ffbc:	20000db4 	.word	0x20000db4

0800ffc0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800ffc0:	b480      	push	{r7}
 800ffc2:	b083      	sub	sp, #12
 800ffc4:	af00      	add	r7, sp, #0
 800ffc6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	220a      	movs	r2, #10
 800ffcc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800ffce:	4b03      	ldr	r3, [pc, #12]	; (800ffdc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	370c      	adds	r7, #12
 800ffd4:	46bd      	mov	sp, r7
 800ffd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffda:	4770      	bx	lr
 800ffdc:	20000ce8 	.word	0x20000ce8

0800ffe0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 800ffe0:	b480      	push	{r7}
 800ffe2:	b085      	sub	sp, #20
 800ffe4:	af00      	add	r7, sp, #0
 800ffe6:	6078      	str	r0, [r7, #4]
 800ffe8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800ffea:	2302      	movs	r3, #2
 800ffec:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800ffee:	683b      	ldr	r3, [r7, #0]
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d005      	beq.n	8010000 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	683a      	ldr	r2, [r7, #0]
 800fff8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 800fffc:	2300      	movs	r3, #0
 800fffe:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8010000:	7bfb      	ldrb	r3, [r7, #15]
}
 8010002:	4618      	mov	r0, r3
 8010004:	3714      	adds	r7, #20
 8010006:	46bd      	mov	sp, r7
 8010008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801000c:	4770      	bx	lr

0801000e <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 801000e:	b480      	push	{r7}
 8010010:	b087      	sub	sp, #28
 8010012:	af00      	add	r7, sp, #0
 8010014:	60f8      	str	r0, [r7, #12]
 8010016:	60b9      	str	r1, [r7, #8]
 8010018:	4613      	mov	r3, r2
 801001a:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010022:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8010024:	697b      	ldr	r3, [r7, #20]
 8010026:	68ba      	ldr	r2, [r7, #8]
 8010028:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 801002c:	88fa      	ldrh	r2, [r7, #6]
 801002e:	697b      	ldr	r3, [r7, #20]
 8010030:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8010034:	2300      	movs	r3, #0
}
 8010036:	4618      	mov	r0, r3
 8010038:	371c      	adds	r7, #28
 801003a:	46bd      	mov	sp, r7
 801003c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010040:	4770      	bx	lr

08010042 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8010042:	b480      	push	{r7}
 8010044:	b085      	sub	sp, #20
 8010046:	af00      	add	r7, sp, #0
 8010048:	6078      	str	r0, [r7, #4]
 801004a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010052:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	683a      	ldr	r2, [r7, #0]
 8010058:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 801005c:	2300      	movs	r3, #0
}
 801005e:	4618      	mov	r0, r3
 8010060:	3714      	adds	r7, #20
 8010062:	46bd      	mov	sp, r7
 8010064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010068:	4770      	bx	lr

0801006a <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801006a:	b580      	push	{r7, lr}
 801006c:	b084      	sub	sp, #16
 801006e:	af00      	add	r7, sp, #0
 8010070:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010078:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010080:	2b00      	cmp	r3, #0
 8010082:	d01c      	beq.n	80100be <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801008a:	2b00      	cmp	r3, #0
 801008c:	d115      	bne.n	80100ba <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	2201      	movs	r2, #1
 8010092:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80100ac:	b29b      	uxth	r3, r3
 80100ae:	2181      	movs	r1, #129	; 0x81
 80100b0:	6878      	ldr	r0, [r7, #4]
 80100b2:	f004 fede 	bl	8014e72 <USBD_LL_Transmit>

      return USBD_OK;
 80100b6:	2300      	movs	r3, #0
 80100b8:	e002      	b.n	80100c0 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80100ba:	2301      	movs	r3, #1
 80100bc:	e000      	b.n	80100c0 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80100be:	2302      	movs	r3, #2
  }
}
 80100c0:	4618      	mov	r0, r3
 80100c2:	3710      	adds	r7, #16
 80100c4:	46bd      	mov	sp, r7
 80100c6:	bd80      	pop	{r7, pc}

080100c8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80100c8:	b580      	push	{r7, lr}
 80100ca:	b084      	sub	sp, #16
 80100cc:	af00      	add	r7, sp, #0
 80100ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80100d6:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d017      	beq.n	8010112 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	7c1b      	ldrb	r3, [r3, #16]
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d109      	bne.n	80100fe <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80100f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80100f4:	2101      	movs	r1, #1
 80100f6:	6878      	ldr	r0, [r7, #4]
 80100f8:	f004 fede 	bl	8014eb8 <USBD_LL_PrepareReceive>
 80100fc:	e007      	b.n	801010e <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010104:	2340      	movs	r3, #64	; 0x40
 8010106:	2101      	movs	r1, #1
 8010108:	6878      	ldr	r0, [r7, #4]
 801010a:	f004 fed5 	bl	8014eb8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 801010e:	2300      	movs	r3, #0
 8010110:	e000      	b.n	8010114 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8010112:	2302      	movs	r3, #2
  }
}
 8010114:	4618      	mov	r0, r3
 8010116:	3710      	adds	r7, #16
 8010118:	46bd      	mov	sp, r7
 801011a:	bd80      	pop	{r7, pc}

0801011c <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801011c:	b580      	push	{r7, lr}
 801011e:	b084      	sub	sp, #16
 8010120:	af00      	add	r7, sp, #0
 8010122:	60f8      	str	r0, [r7, #12]
 8010124:	60b9      	str	r1, [r7, #8]
 8010126:	4613      	mov	r3, r2
 8010128:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	2b00      	cmp	r3, #0
 801012e:	d101      	bne.n	8010134 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8010130:	2302      	movs	r3, #2
 8010132:	e01a      	b.n	801016a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 801013a:	2b00      	cmp	r3, #0
 801013c:	d003      	beq.n	8010146 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 801013e:	68fb      	ldr	r3, [r7, #12]
 8010140:	2200      	movs	r2, #0
 8010142:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8010146:	68bb      	ldr	r3, [r7, #8]
 8010148:	2b00      	cmp	r3, #0
 801014a:	d003      	beq.n	8010154 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	68ba      	ldr	r2, [r7, #8]
 8010150:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	2201      	movs	r2, #1
 8010158:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	79fa      	ldrb	r2, [r7, #7]
 8010160:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8010162:	68f8      	ldr	r0, [r7, #12]
 8010164:	f004 fd50 	bl	8014c08 <USBD_LL_Init>

  return USBD_OK;
 8010168:	2300      	movs	r3, #0
}
 801016a:	4618      	mov	r0, r3
 801016c:	3710      	adds	r7, #16
 801016e:	46bd      	mov	sp, r7
 8010170:	bd80      	pop	{r7, pc}

08010172 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8010172:	b480      	push	{r7}
 8010174:	b085      	sub	sp, #20
 8010176:	af00      	add	r7, sp, #0
 8010178:	6078      	str	r0, [r7, #4]
 801017a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 801017c:	2300      	movs	r3, #0
 801017e:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8010180:	683b      	ldr	r3, [r7, #0]
 8010182:	2b00      	cmp	r3, #0
 8010184:	d006      	beq.n	8010194 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	683a      	ldr	r2, [r7, #0]
 801018a:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 801018e:	2300      	movs	r3, #0
 8010190:	73fb      	strb	r3, [r7, #15]
 8010192:	e001      	b.n	8010198 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8010194:	2302      	movs	r3, #2
 8010196:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8010198:	7bfb      	ldrb	r3, [r7, #15]
}
 801019a:	4618      	mov	r0, r3
 801019c:	3714      	adds	r7, #20
 801019e:	46bd      	mov	sp, r7
 80101a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a4:	4770      	bx	lr

080101a6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80101a6:	b580      	push	{r7, lr}
 80101a8:	b082      	sub	sp, #8
 80101aa:	af00      	add	r7, sp, #0
 80101ac:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80101ae:	6878      	ldr	r0, [r7, #4]
 80101b0:	f004 fd76 	bl	8014ca0 <USBD_LL_Start>

  return USBD_OK;
 80101b4:	2300      	movs	r3, #0
}
 80101b6:	4618      	mov	r0, r3
 80101b8:	3708      	adds	r7, #8
 80101ba:	46bd      	mov	sp, r7
 80101bc:	bd80      	pop	{r7, pc}

080101be <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 80101be:	b480      	push	{r7}
 80101c0:	b083      	sub	sp, #12
 80101c2:	af00      	add	r7, sp, #0
 80101c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80101c6:	2300      	movs	r3, #0
}
 80101c8:	4618      	mov	r0, r3
 80101ca:	370c      	adds	r7, #12
 80101cc:	46bd      	mov	sp, r7
 80101ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101d2:	4770      	bx	lr

080101d4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80101d4:	b580      	push	{r7, lr}
 80101d6:	b084      	sub	sp, #16
 80101d8:	af00      	add	r7, sp, #0
 80101da:	6078      	str	r0, [r7, #4]
 80101dc:	460b      	mov	r3, r1
 80101de:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80101e0:	2302      	movs	r3, #2
 80101e2:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d00c      	beq.n	8010208 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	78fa      	ldrb	r2, [r7, #3]
 80101f8:	4611      	mov	r1, r2
 80101fa:	6878      	ldr	r0, [r7, #4]
 80101fc:	4798      	blx	r3
 80101fe:	4603      	mov	r3, r0
 8010200:	2b00      	cmp	r3, #0
 8010202:	d101      	bne.n	8010208 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8010204:	2300      	movs	r3, #0
 8010206:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8010208:	7bfb      	ldrb	r3, [r7, #15]
}
 801020a:	4618      	mov	r0, r3
 801020c:	3710      	adds	r7, #16
 801020e:	46bd      	mov	sp, r7
 8010210:	bd80      	pop	{r7, pc}

08010212 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8010212:	b580      	push	{r7, lr}
 8010214:	b082      	sub	sp, #8
 8010216:	af00      	add	r7, sp, #0
 8010218:	6078      	str	r0, [r7, #4]
 801021a:	460b      	mov	r3, r1
 801021c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010224:	685b      	ldr	r3, [r3, #4]
 8010226:	78fa      	ldrb	r2, [r7, #3]
 8010228:	4611      	mov	r1, r2
 801022a:	6878      	ldr	r0, [r7, #4]
 801022c:	4798      	blx	r3
  return USBD_OK;
 801022e:	2300      	movs	r3, #0
}
 8010230:	4618      	mov	r0, r3
 8010232:	3708      	adds	r7, #8
 8010234:	46bd      	mov	sp, r7
 8010236:	bd80      	pop	{r7, pc}

08010238 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8010238:	b580      	push	{r7, lr}
 801023a:	b082      	sub	sp, #8
 801023c:	af00      	add	r7, sp, #0
 801023e:	6078      	str	r0, [r7, #4]
 8010240:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8010248:	6839      	ldr	r1, [r7, #0]
 801024a:	4618      	mov	r0, r3
 801024c:	f000 fe94 	bl	8010f78 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	2201      	movs	r2, #1
 8010254:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 801025e:	461a      	mov	r2, r3
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 801026c:	f003 031f 	and.w	r3, r3, #31
 8010270:	2b01      	cmp	r3, #1
 8010272:	d00c      	beq.n	801028e <USBD_LL_SetupStage+0x56>
 8010274:	2b01      	cmp	r3, #1
 8010276:	d302      	bcc.n	801027e <USBD_LL_SetupStage+0x46>
 8010278:	2b02      	cmp	r3, #2
 801027a:	d010      	beq.n	801029e <USBD_LL_SetupStage+0x66>
 801027c:	e017      	b.n	80102ae <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8010284:	4619      	mov	r1, r3
 8010286:	6878      	ldr	r0, [r7, #4]
 8010288:	f000 fa04 	bl	8010694 <USBD_StdDevReq>
    break;
 801028c:	e01a      	b.n	80102c4 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8010294:	4619      	mov	r1, r3
 8010296:	6878      	ldr	r0, [r7, #4]
 8010298:	f000 fa66 	bl	8010768 <USBD_StdItfReq>
    break;
 801029c:	e012      	b.n	80102c4 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80102a4:	4619      	mov	r1, r3
 80102a6:	6878      	ldr	r0, [r7, #4]
 80102a8:	f000 faa4 	bl	80107f4 <USBD_StdEPReq>
    break;
 80102ac:	e00a      	b.n	80102c4 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80102b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80102b8:	b2db      	uxtb	r3, r3
 80102ba:	4619      	mov	r1, r3
 80102bc:	6878      	ldr	r0, [r7, #4]
 80102be:	f004 fd4f 	bl	8014d60 <USBD_LL_StallEP>
    break;
 80102c2:	bf00      	nop
  }

  return USBD_OK;
 80102c4:	2300      	movs	r3, #0
}
 80102c6:	4618      	mov	r0, r3
 80102c8:	3708      	adds	r7, #8
 80102ca:	46bd      	mov	sp, r7
 80102cc:	bd80      	pop	{r7, pc}

080102ce <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80102ce:	b580      	push	{r7, lr}
 80102d0:	b086      	sub	sp, #24
 80102d2:	af00      	add	r7, sp, #0
 80102d4:	60f8      	str	r0, [r7, #12]
 80102d6:	460b      	mov	r3, r1
 80102d8:	607a      	str	r2, [r7, #4]
 80102da:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 80102dc:	7afb      	ldrb	r3, [r7, #11]
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d14b      	bne.n	801037a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80102e8:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80102f0:	2b03      	cmp	r3, #3
 80102f2:	d134      	bne.n	801035e <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 80102f4:	697b      	ldr	r3, [r7, #20]
 80102f6:	68da      	ldr	r2, [r3, #12]
 80102f8:	697b      	ldr	r3, [r7, #20]
 80102fa:	691b      	ldr	r3, [r3, #16]
 80102fc:	429a      	cmp	r2, r3
 80102fe:	d919      	bls.n	8010334 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8010300:	697b      	ldr	r3, [r7, #20]
 8010302:	68da      	ldr	r2, [r3, #12]
 8010304:	697b      	ldr	r3, [r7, #20]
 8010306:	691b      	ldr	r3, [r3, #16]
 8010308:	1ad2      	subs	r2, r2, r3
 801030a:	697b      	ldr	r3, [r7, #20]
 801030c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801030e:	697b      	ldr	r3, [r7, #20]
 8010310:	68da      	ldr	r2, [r3, #12]
 8010312:	697b      	ldr	r3, [r7, #20]
 8010314:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8010316:	429a      	cmp	r2, r3
 8010318:	d203      	bcs.n	8010322 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801031a:	697b      	ldr	r3, [r7, #20]
 801031c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 801031e:	b29b      	uxth	r3, r3
 8010320:	e002      	b.n	8010328 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8010322:	697b      	ldr	r3, [r7, #20]
 8010324:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8010326:	b29b      	uxth	r3, r3
 8010328:	461a      	mov	r2, r3
 801032a:	6879      	ldr	r1, [r7, #4]
 801032c:	68f8      	ldr	r0, [r7, #12]
 801032e:	f000 ff17 	bl	8011160 <USBD_CtlContinueRx>
 8010332:	e038      	b.n	80103a6 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 801033a:	691b      	ldr	r3, [r3, #16]
 801033c:	2b00      	cmp	r3, #0
 801033e:	d00a      	beq.n	8010356 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8010346:	2b03      	cmp	r3, #3
 8010348:	d105      	bne.n	8010356 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010350:	691b      	ldr	r3, [r3, #16]
 8010352:	68f8      	ldr	r0, [r7, #12]
 8010354:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8010356:	68f8      	ldr	r0, [r7, #12]
 8010358:	f000 ff14 	bl	8011184 <USBD_CtlSendStatus>
 801035c:	e023      	b.n	80103a6 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8010364:	2b05      	cmp	r3, #5
 8010366:	d11e      	bne.n	80103a6 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	2200      	movs	r2, #0
 801036c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8010370:	2100      	movs	r1, #0
 8010372:	68f8      	ldr	r0, [r7, #12]
 8010374:	f004 fcf4 	bl	8014d60 <USBD_LL_StallEP>
 8010378:	e015      	b.n	80103a6 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010380:	699b      	ldr	r3, [r3, #24]
 8010382:	2b00      	cmp	r3, #0
 8010384:	d00d      	beq.n	80103a2 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 801038c:	2b03      	cmp	r3, #3
 801038e:	d108      	bne.n	80103a2 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8010390:	68fb      	ldr	r3, [r7, #12]
 8010392:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010396:	699b      	ldr	r3, [r3, #24]
 8010398:	7afa      	ldrb	r2, [r7, #11]
 801039a:	4611      	mov	r1, r2
 801039c:	68f8      	ldr	r0, [r7, #12]
 801039e:	4798      	blx	r3
 80103a0:	e001      	b.n	80103a6 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80103a2:	2302      	movs	r3, #2
 80103a4:	e000      	b.n	80103a8 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80103a6:	2300      	movs	r3, #0
}
 80103a8:	4618      	mov	r0, r3
 80103aa:	3718      	adds	r7, #24
 80103ac:	46bd      	mov	sp, r7
 80103ae:	bd80      	pop	{r7, pc}

080103b0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 80103b0:	b580      	push	{r7, lr}
 80103b2:	b086      	sub	sp, #24
 80103b4:	af00      	add	r7, sp, #0
 80103b6:	60f8      	str	r0, [r7, #12]
 80103b8:	460b      	mov	r3, r1
 80103ba:	607a      	str	r2, [r7, #4]
 80103bc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 80103be:	7afb      	ldrb	r3, [r7, #11]
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d17f      	bne.n	80104c4 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80103c4:	68fb      	ldr	r3, [r7, #12]
 80103c6:	3314      	adds	r3, #20
 80103c8:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80103d0:	2b02      	cmp	r3, #2
 80103d2:	d15c      	bne.n	801048e <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 80103d4:	697b      	ldr	r3, [r7, #20]
 80103d6:	68da      	ldr	r2, [r3, #12]
 80103d8:	697b      	ldr	r3, [r7, #20]
 80103da:	691b      	ldr	r3, [r3, #16]
 80103dc:	429a      	cmp	r2, r3
 80103de:	d915      	bls.n	801040c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80103e0:	697b      	ldr	r3, [r7, #20]
 80103e2:	68da      	ldr	r2, [r3, #12]
 80103e4:	697b      	ldr	r3, [r7, #20]
 80103e6:	691b      	ldr	r3, [r3, #16]
 80103e8:	1ad2      	subs	r2, r2, r3
 80103ea:	697b      	ldr	r3, [r7, #20]
 80103ec:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 80103ee:	697b      	ldr	r3, [r7, #20]
 80103f0:	68db      	ldr	r3, [r3, #12]
 80103f2:	b29b      	uxth	r3, r3
 80103f4:	461a      	mov	r2, r3
 80103f6:	6879      	ldr	r1, [r7, #4]
 80103f8:	68f8      	ldr	r0, [r7, #12]
 80103fa:	f000 fe81 	bl	8011100 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80103fe:	2300      	movs	r3, #0
 8010400:	2200      	movs	r2, #0
 8010402:	2100      	movs	r1, #0
 8010404:	68f8      	ldr	r0, [r7, #12]
 8010406:	f004 fd57 	bl	8014eb8 <USBD_LL_PrepareReceive>
 801040a:	e04e      	b.n	80104aa <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 801040c:	697b      	ldr	r3, [r7, #20]
 801040e:	689b      	ldr	r3, [r3, #8]
 8010410:	697a      	ldr	r2, [r7, #20]
 8010412:	6912      	ldr	r2, [r2, #16]
 8010414:	fbb3 f1f2 	udiv	r1, r3, r2
 8010418:	fb02 f201 	mul.w	r2, r2, r1
 801041c:	1a9b      	subs	r3, r3, r2
 801041e:	2b00      	cmp	r3, #0
 8010420:	d11c      	bne.n	801045c <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8010422:	697b      	ldr	r3, [r7, #20]
 8010424:	689a      	ldr	r2, [r3, #8]
 8010426:	697b      	ldr	r3, [r7, #20]
 8010428:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 801042a:	429a      	cmp	r2, r3
 801042c:	d316      	bcc.n	801045c <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 801042e:	697b      	ldr	r3, [r7, #20]
 8010430:	689a      	ldr	r2, [r3, #8]
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8010438:	429a      	cmp	r2, r3
 801043a:	d20f      	bcs.n	801045c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 801043c:	2200      	movs	r2, #0
 801043e:	2100      	movs	r1, #0
 8010440:	68f8      	ldr	r0, [r7, #12]
 8010442:	f000 fe5d 	bl	8011100 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	2200      	movs	r2, #0
 801044a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 801044e:	2300      	movs	r3, #0
 8010450:	2200      	movs	r2, #0
 8010452:	2100      	movs	r1, #0
 8010454:	68f8      	ldr	r0, [r7, #12]
 8010456:	f004 fd2f 	bl	8014eb8 <USBD_LL_PrepareReceive>
 801045a:	e026      	b.n	80104aa <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010462:	68db      	ldr	r3, [r3, #12]
 8010464:	2b00      	cmp	r3, #0
 8010466:	d00a      	beq.n	801047e <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 801046e:	2b03      	cmp	r3, #3
 8010470:	d105      	bne.n	801047e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010478:	68db      	ldr	r3, [r3, #12]
 801047a:	68f8      	ldr	r0, [r7, #12]
 801047c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 801047e:	2180      	movs	r1, #128	; 0x80
 8010480:	68f8      	ldr	r0, [r7, #12]
 8010482:	f004 fc6d 	bl	8014d60 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8010486:	68f8      	ldr	r0, [r7, #12]
 8010488:	f000 fe8f 	bl	80111aa <USBD_CtlReceiveStatus>
 801048c:	e00d      	b.n	80104aa <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8010494:	2b04      	cmp	r3, #4
 8010496:	d004      	beq.n	80104a2 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d103      	bne.n	80104aa <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80104a2:	2180      	movs	r1, #128	; 0x80
 80104a4:	68f8      	ldr	r0, [r7, #12]
 80104a6:	f004 fc5b 	bl	8014d60 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 80104b0:	2b01      	cmp	r3, #1
 80104b2:	d11d      	bne.n	80104f0 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80104b4:	68f8      	ldr	r0, [r7, #12]
 80104b6:	f7ff fe82 	bl	80101be <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	2200      	movs	r2, #0
 80104be:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 80104c2:	e015      	b.n	80104f0 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80104ca:	695b      	ldr	r3, [r3, #20]
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d00d      	beq.n	80104ec <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 80104d6:	2b03      	cmp	r3, #3
 80104d8:	d108      	bne.n	80104ec <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80104e0:	695b      	ldr	r3, [r3, #20]
 80104e2:	7afa      	ldrb	r2, [r7, #11]
 80104e4:	4611      	mov	r1, r2
 80104e6:	68f8      	ldr	r0, [r7, #12]
 80104e8:	4798      	blx	r3
 80104ea:	e001      	b.n	80104f0 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80104ec:	2302      	movs	r3, #2
 80104ee:	e000      	b.n	80104f2 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80104f0:	2300      	movs	r3, #0
}
 80104f2:	4618      	mov	r0, r3
 80104f4:	3718      	adds	r7, #24
 80104f6:	46bd      	mov	sp, r7
 80104f8:	bd80      	pop	{r7, pc}

080104fa <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 80104fa:	b580      	push	{r7, lr}
 80104fc:	b082      	sub	sp, #8
 80104fe:	af00      	add	r7, sp, #0
 8010500:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010502:	2340      	movs	r3, #64	; 0x40
 8010504:	2200      	movs	r2, #0
 8010506:	2100      	movs	r1, #0
 8010508:	6878      	ldr	r0, [r7, #4]
 801050a:	f004 fbe4 	bl	8014cd6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	2201      	movs	r2, #1
 8010512:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	2240      	movs	r2, #64	; 0x40
 801051a:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801051e:	2340      	movs	r3, #64	; 0x40
 8010520:	2200      	movs	r2, #0
 8010522:	2180      	movs	r1, #128	; 0x80
 8010524:	6878      	ldr	r0, [r7, #4]
 8010526:	f004 fbd6 	bl	8014cd6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	2201      	movs	r2, #1
 801052e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	2240      	movs	r2, #64	; 0x40
 8010534:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	2201      	movs	r2, #1
 801053a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	2200      	movs	r2, #0
 8010542:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	2200      	movs	r2, #0
 801054a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	2200      	movs	r2, #0
 8010550:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 801055a:	2b00      	cmp	r3, #0
 801055c:	d009      	beq.n	8010572 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010564:	685b      	ldr	r3, [r3, #4]
 8010566:	687a      	ldr	r2, [r7, #4]
 8010568:	6852      	ldr	r2, [r2, #4]
 801056a:	b2d2      	uxtb	r2, r2
 801056c:	4611      	mov	r1, r2
 801056e:	6878      	ldr	r0, [r7, #4]
 8010570:	4798      	blx	r3
  }

  return USBD_OK;
 8010572:	2300      	movs	r3, #0
}
 8010574:	4618      	mov	r0, r3
 8010576:	3708      	adds	r7, #8
 8010578:	46bd      	mov	sp, r7
 801057a:	bd80      	pop	{r7, pc}

0801057c <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 801057c:	b480      	push	{r7}
 801057e:	b083      	sub	sp, #12
 8010580:	af00      	add	r7, sp, #0
 8010582:	6078      	str	r0, [r7, #4]
 8010584:	460b      	mov	r3, r1
 8010586:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	78fa      	ldrb	r2, [r7, #3]
 801058c:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 801058e:	2300      	movs	r3, #0
}
 8010590:	4618      	mov	r0, r3
 8010592:	370c      	adds	r7, #12
 8010594:	46bd      	mov	sp, r7
 8010596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801059a:	4770      	bx	lr

0801059c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 801059c:	b480      	push	{r7}
 801059e:	b083      	sub	sp, #12
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	2204      	movs	r2, #4
 80105b4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 80105b8:	2300      	movs	r3, #0
}
 80105ba:	4618      	mov	r0, r3
 80105bc:	370c      	adds	r7, #12
 80105be:	46bd      	mov	sp, r7
 80105c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105c4:	4770      	bx	lr

080105c6 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 80105c6:	b480      	push	{r7}
 80105c8:	b083      	sub	sp, #12
 80105ca:	af00      	add	r7, sp, #0
 80105cc:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 80105da:	2300      	movs	r3, #0
}
 80105dc:	4618      	mov	r0, r3
 80105de:	370c      	adds	r7, #12
 80105e0:	46bd      	mov	sp, r7
 80105e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105e6:	4770      	bx	lr

080105e8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 80105e8:	b580      	push	{r7, lr}
 80105ea:	b082      	sub	sp, #8
 80105ec:	af00      	add	r7, sp, #0
 80105ee:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80105f6:	2b03      	cmp	r3, #3
 80105f8:	d10b      	bne.n	8010612 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010600:	69db      	ldr	r3, [r3, #28]
 8010602:	2b00      	cmp	r3, #0
 8010604:	d005      	beq.n	8010612 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 801060c:	69db      	ldr	r3, [r3, #28]
 801060e:	6878      	ldr	r0, [r7, #4]
 8010610:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8010612:	2300      	movs	r3, #0
}
 8010614:	4618      	mov	r0, r3
 8010616:	3708      	adds	r7, #8
 8010618:	46bd      	mov	sp, r7
 801061a:	bd80      	pop	{r7, pc}

0801061c <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 801061c:	b480      	push	{r7}
 801061e:	b083      	sub	sp, #12
 8010620:	af00      	add	r7, sp, #0
 8010622:	6078      	str	r0, [r7, #4]
 8010624:	460b      	mov	r3, r1
 8010626:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8010628:	2300      	movs	r3, #0
}
 801062a:	4618      	mov	r0, r3
 801062c:	370c      	adds	r7, #12
 801062e:	46bd      	mov	sp, r7
 8010630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010634:	4770      	bx	lr

08010636 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8010636:	b480      	push	{r7}
 8010638:	b083      	sub	sp, #12
 801063a:	af00      	add	r7, sp, #0
 801063c:	6078      	str	r0, [r7, #4]
 801063e:	460b      	mov	r3, r1
 8010640:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8010642:	2300      	movs	r3, #0
}
 8010644:	4618      	mov	r0, r3
 8010646:	370c      	adds	r7, #12
 8010648:	46bd      	mov	sp, r7
 801064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801064e:	4770      	bx	lr

08010650 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 8010650:	b480      	push	{r7}
 8010652:	b083      	sub	sp, #12
 8010654:	af00      	add	r7, sp, #0
 8010656:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010658:	2300      	movs	r3, #0
}
 801065a:	4618      	mov	r0, r3
 801065c:	370c      	adds	r7, #12
 801065e:	46bd      	mov	sp, r7
 8010660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010664:	4770      	bx	lr

08010666 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8010666:	b580      	push	{r7, lr}
 8010668:	b082      	sub	sp, #8
 801066a:	af00      	add	r7, sp, #0
 801066c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	2201      	movs	r2, #1
 8010672:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 801067c:	685b      	ldr	r3, [r3, #4]
 801067e:	687a      	ldr	r2, [r7, #4]
 8010680:	6852      	ldr	r2, [r2, #4]
 8010682:	b2d2      	uxtb	r2, r2
 8010684:	4611      	mov	r1, r2
 8010686:	6878      	ldr	r0, [r7, #4]
 8010688:	4798      	blx	r3

  return USBD_OK;
 801068a:	2300      	movs	r3, #0
}
 801068c:	4618      	mov	r0, r3
 801068e:	3708      	adds	r7, #8
 8010690:	46bd      	mov	sp, r7
 8010692:	bd80      	pop	{r7, pc}

08010694 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8010694:	b580      	push	{r7, lr}
 8010696:	b084      	sub	sp, #16
 8010698:	af00      	add	r7, sp, #0
 801069a:	6078      	str	r0, [r7, #4]
 801069c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801069e:	2300      	movs	r3, #0
 80106a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80106a2:	683b      	ldr	r3, [r7, #0]
 80106a4:	781b      	ldrb	r3, [r3, #0]
 80106a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80106aa:	2b20      	cmp	r3, #32
 80106ac:	d004      	beq.n	80106b8 <USBD_StdDevReq+0x24>
 80106ae:	2b40      	cmp	r3, #64	; 0x40
 80106b0:	d002      	beq.n	80106b8 <USBD_StdDevReq+0x24>
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d008      	beq.n	80106c8 <USBD_StdDevReq+0x34>
 80106b6:	e04c      	b.n	8010752 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80106be:	689b      	ldr	r3, [r3, #8]
 80106c0:	6839      	ldr	r1, [r7, #0]
 80106c2:	6878      	ldr	r0, [r7, #4]
 80106c4:	4798      	blx	r3
    break;
 80106c6:	e049      	b.n	801075c <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 80106c8:	683b      	ldr	r3, [r7, #0]
 80106ca:	785b      	ldrb	r3, [r3, #1]
 80106cc:	2b09      	cmp	r3, #9
 80106ce:	d83a      	bhi.n	8010746 <USBD_StdDevReq+0xb2>
 80106d0:	a201      	add	r2, pc, #4	; (adr r2, 80106d8 <USBD_StdDevReq+0x44>)
 80106d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106d6:	bf00      	nop
 80106d8:	08010729 	.word	0x08010729
 80106dc:	0801073d 	.word	0x0801073d
 80106e0:	08010747 	.word	0x08010747
 80106e4:	08010733 	.word	0x08010733
 80106e8:	08010747 	.word	0x08010747
 80106ec:	0801070b 	.word	0x0801070b
 80106f0:	08010701 	.word	0x08010701
 80106f4:	08010747 	.word	0x08010747
 80106f8:	0801071f 	.word	0x0801071f
 80106fc:	08010715 	.word	0x08010715
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8010700:	6839      	ldr	r1, [r7, #0]
 8010702:	6878      	ldr	r0, [r7, #4]
 8010704:	f000 f9d2 	bl	8010aac <USBD_GetDescriptor>
      break;
 8010708:	e022      	b.n	8010750 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 801070a:	6839      	ldr	r1, [r7, #0]
 801070c:	6878      	ldr	r0, [r7, #4]
 801070e:	f000 fac7 	bl	8010ca0 <USBD_SetAddress>
      break;
 8010712:	e01d      	b.n	8010750 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8010714:	6839      	ldr	r1, [r7, #0]
 8010716:	6878      	ldr	r0, [r7, #4]
 8010718:	f000 fb04 	bl	8010d24 <USBD_SetConfig>
      break;
 801071c:	e018      	b.n	8010750 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 801071e:	6839      	ldr	r1, [r7, #0]
 8010720:	6878      	ldr	r0, [r7, #4]
 8010722:	f000 fb8d 	bl	8010e40 <USBD_GetConfig>
      break;
 8010726:	e013      	b.n	8010750 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8010728:	6839      	ldr	r1, [r7, #0]
 801072a:	6878      	ldr	r0, [r7, #4]
 801072c:	f000 fbbc 	bl	8010ea8 <USBD_GetStatus>
      break;
 8010730:	e00e      	b.n	8010750 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8010732:	6839      	ldr	r1, [r7, #0]
 8010734:	6878      	ldr	r0, [r7, #4]
 8010736:	f000 fbea 	bl	8010f0e <USBD_SetFeature>
      break;
 801073a:	e009      	b.n	8010750 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 801073c:	6839      	ldr	r1, [r7, #0]
 801073e:	6878      	ldr	r0, [r7, #4]
 8010740:	f000 fbf9 	bl	8010f36 <USBD_ClrFeature>
      break;
 8010744:	e004      	b.n	8010750 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8010746:	6839      	ldr	r1, [r7, #0]
 8010748:	6878      	ldr	r0, [r7, #4]
 801074a:	f000 fc52 	bl	8010ff2 <USBD_CtlError>
      break;
 801074e:	bf00      	nop
    }
    break;
 8010750:	e004      	b.n	801075c <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8010752:	6839      	ldr	r1, [r7, #0]
 8010754:	6878      	ldr	r0, [r7, #4]
 8010756:	f000 fc4c 	bl	8010ff2 <USBD_CtlError>
    break;
 801075a:	bf00      	nop
  }

  return ret;
 801075c:	7bfb      	ldrb	r3, [r7, #15]
}
 801075e:	4618      	mov	r0, r3
 8010760:	3710      	adds	r7, #16
 8010762:	46bd      	mov	sp, r7
 8010764:	bd80      	pop	{r7, pc}
 8010766:	bf00      	nop

08010768 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8010768:	b580      	push	{r7, lr}
 801076a:	b084      	sub	sp, #16
 801076c:	af00      	add	r7, sp, #0
 801076e:	6078      	str	r0, [r7, #4]
 8010770:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010772:	2300      	movs	r3, #0
 8010774:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010776:	683b      	ldr	r3, [r7, #0]
 8010778:	781b      	ldrb	r3, [r3, #0]
 801077a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801077e:	2b20      	cmp	r3, #32
 8010780:	d003      	beq.n	801078a <USBD_StdItfReq+0x22>
 8010782:	2b40      	cmp	r3, #64	; 0x40
 8010784:	d001      	beq.n	801078a <USBD_StdItfReq+0x22>
 8010786:	2b00      	cmp	r3, #0
 8010788:	d12a      	bne.n	80107e0 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010790:	3b01      	subs	r3, #1
 8010792:	2b02      	cmp	r3, #2
 8010794:	d81d      	bhi.n	80107d2 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8010796:	683b      	ldr	r3, [r7, #0]
 8010798:	889b      	ldrh	r3, [r3, #4]
 801079a:	b2db      	uxtb	r3, r3
 801079c:	2b01      	cmp	r3, #1
 801079e:	d813      	bhi.n	80107c8 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80107a6:	689b      	ldr	r3, [r3, #8]
 80107a8:	6839      	ldr	r1, [r7, #0]
 80107aa:	6878      	ldr	r0, [r7, #4]
 80107ac:	4798      	blx	r3
 80107ae:	4603      	mov	r3, r0
 80107b0:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80107b2:	683b      	ldr	r3, [r7, #0]
 80107b4:	88db      	ldrh	r3, [r3, #6]
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d110      	bne.n	80107dc <USBD_StdItfReq+0x74>
 80107ba:	7bfb      	ldrb	r3, [r7, #15]
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d10d      	bne.n	80107dc <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 80107c0:	6878      	ldr	r0, [r7, #4]
 80107c2:	f000 fcdf 	bl	8011184 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80107c6:	e009      	b.n	80107dc <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80107c8:	6839      	ldr	r1, [r7, #0]
 80107ca:	6878      	ldr	r0, [r7, #4]
 80107cc:	f000 fc11 	bl	8010ff2 <USBD_CtlError>
      break;
 80107d0:	e004      	b.n	80107dc <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80107d2:	6839      	ldr	r1, [r7, #0]
 80107d4:	6878      	ldr	r0, [r7, #4]
 80107d6:	f000 fc0c 	bl	8010ff2 <USBD_CtlError>
      break;
 80107da:	e000      	b.n	80107de <USBD_StdItfReq+0x76>
      break;
 80107dc:	bf00      	nop
    }
    break;
 80107de:	e004      	b.n	80107ea <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80107e0:	6839      	ldr	r1, [r7, #0]
 80107e2:	6878      	ldr	r0, [r7, #4]
 80107e4:	f000 fc05 	bl	8010ff2 <USBD_CtlError>
    break;
 80107e8:	bf00      	nop
  }

  return USBD_OK;
 80107ea:	2300      	movs	r3, #0
}
 80107ec:	4618      	mov	r0, r3
 80107ee:	3710      	adds	r7, #16
 80107f0:	46bd      	mov	sp, r7
 80107f2:	bd80      	pop	{r7, pc}

080107f4 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80107f4:	b580      	push	{r7, lr}
 80107f6:	b084      	sub	sp, #16
 80107f8:	af00      	add	r7, sp, #0
 80107fa:	6078      	str	r0, [r7, #4]
 80107fc:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80107fe:	2300      	movs	r3, #0
 8010800:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8010802:	683b      	ldr	r3, [r7, #0]
 8010804:	889b      	ldrh	r3, [r3, #4]
 8010806:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010808:	683b      	ldr	r3, [r7, #0]
 801080a:	781b      	ldrb	r3, [r3, #0]
 801080c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010810:	2b20      	cmp	r3, #32
 8010812:	d004      	beq.n	801081e <USBD_StdEPReq+0x2a>
 8010814:	2b40      	cmp	r3, #64	; 0x40
 8010816:	d002      	beq.n	801081e <USBD_StdEPReq+0x2a>
 8010818:	2b00      	cmp	r3, #0
 801081a:	d008      	beq.n	801082e <USBD_StdEPReq+0x3a>
 801081c:	e13b      	b.n	8010a96 <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010824:	689b      	ldr	r3, [r3, #8]
 8010826:	6839      	ldr	r1, [r7, #0]
 8010828:	6878      	ldr	r0, [r7, #4]
 801082a:	4798      	blx	r3
    break;
 801082c:	e138      	b.n	8010aa0 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 801082e:	683b      	ldr	r3, [r7, #0]
 8010830:	781b      	ldrb	r3, [r3, #0]
 8010832:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010836:	2b20      	cmp	r3, #32
 8010838:	d10a      	bne.n	8010850 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010840:	689b      	ldr	r3, [r3, #8]
 8010842:	6839      	ldr	r1, [r7, #0]
 8010844:	6878      	ldr	r0, [r7, #4]
 8010846:	4798      	blx	r3
 8010848:	4603      	mov	r3, r0
 801084a:	73fb      	strb	r3, [r7, #15]

      return ret;
 801084c:	7bfb      	ldrb	r3, [r7, #15]
 801084e:	e128      	b.n	8010aa2 <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 8010850:	683b      	ldr	r3, [r7, #0]
 8010852:	785b      	ldrb	r3, [r3, #1]
 8010854:	2b01      	cmp	r3, #1
 8010856:	d03e      	beq.n	80108d6 <USBD_StdEPReq+0xe2>
 8010858:	2b03      	cmp	r3, #3
 801085a:	d002      	beq.n	8010862 <USBD_StdEPReq+0x6e>
 801085c:	2b00      	cmp	r3, #0
 801085e:	d070      	beq.n	8010942 <USBD_StdEPReq+0x14e>
 8010860:	e113      	b.n	8010a8a <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010868:	2b02      	cmp	r3, #2
 801086a:	d002      	beq.n	8010872 <USBD_StdEPReq+0x7e>
 801086c:	2b03      	cmp	r3, #3
 801086e:	d015      	beq.n	801089c <USBD_StdEPReq+0xa8>
 8010870:	e02b      	b.n	80108ca <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010872:	7bbb      	ldrb	r3, [r7, #14]
 8010874:	2b00      	cmp	r3, #0
 8010876:	d00c      	beq.n	8010892 <USBD_StdEPReq+0x9e>
 8010878:	7bbb      	ldrb	r3, [r7, #14]
 801087a:	2b80      	cmp	r3, #128	; 0x80
 801087c:	d009      	beq.n	8010892 <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 801087e:	7bbb      	ldrb	r3, [r7, #14]
 8010880:	4619      	mov	r1, r3
 8010882:	6878      	ldr	r0, [r7, #4]
 8010884:	f004 fa6c 	bl	8014d60 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8010888:	2180      	movs	r1, #128	; 0x80
 801088a:	6878      	ldr	r0, [r7, #4]
 801088c:	f004 fa68 	bl	8014d60 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8010890:	e020      	b.n	80108d4 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 8010892:	6839      	ldr	r1, [r7, #0]
 8010894:	6878      	ldr	r0, [r7, #4]
 8010896:	f000 fbac 	bl	8010ff2 <USBD_CtlError>
        break;
 801089a:	e01b      	b.n	80108d4 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 801089c:	683b      	ldr	r3, [r7, #0]
 801089e:	885b      	ldrh	r3, [r3, #2]
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d10e      	bne.n	80108c2 <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80108a4:	7bbb      	ldrb	r3, [r7, #14]
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d00b      	beq.n	80108c2 <USBD_StdEPReq+0xce>
 80108aa:	7bbb      	ldrb	r3, [r7, #14]
 80108ac:	2b80      	cmp	r3, #128	; 0x80
 80108ae:	d008      	beq.n	80108c2 <USBD_StdEPReq+0xce>
 80108b0:	683b      	ldr	r3, [r7, #0]
 80108b2:	88db      	ldrh	r3, [r3, #6]
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d104      	bne.n	80108c2 <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 80108b8:	7bbb      	ldrb	r3, [r7, #14]
 80108ba:	4619      	mov	r1, r3
 80108bc:	6878      	ldr	r0, [r7, #4]
 80108be:	f004 fa4f 	bl	8014d60 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 80108c2:	6878      	ldr	r0, [r7, #4]
 80108c4:	f000 fc5e 	bl	8011184 <USBD_CtlSendStatus>

        break;
 80108c8:	e004      	b.n	80108d4 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 80108ca:	6839      	ldr	r1, [r7, #0]
 80108cc:	6878      	ldr	r0, [r7, #4]
 80108ce:	f000 fb90 	bl	8010ff2 <USBD_CtlError>
        break;
 80108d2:	bf00      	nop
      }
      break;
 80108d4:	e0de      	b.n	8010a94 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80108dc:	2b02      	cmp	r3, #2
 80108de:	d002      	beq.n	80108e6 <USBD_StdEPReq+0xf2>
 80108e0:	2b03      	cmp	r3, #3
 80108e2:	d015      	beq.n	8010910 <USBD_StdEPReq+0x11c>
 80108e4:	e026      	b.n	8010934 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80108e6:	7bbb      	ldrb	r3, [r7, #14]
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d00c      	beq.n	8010906 <USBD_StdEPReq+0x112>
 80108ec:	7bbb      	ldrb	r3, [r7, #14]
 80108ee:	2b80      	cmp	r3, #128	; 0x80
 80108f0:	d009      	beq.n	8010906 <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80108f2:	7bbb      	ldrb	r3, [r7, #14]
 80108f4:	4619      	mov	r1, r3
 80108f6:	6878      	ldr	r0, [r7, #4]
 80108f8:	f004 fa32 	bl	8014d60 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80108fc:	2180      	movs	r1, #128	; 0x80
 80108fe:	6878      	ldr	r0, [r7, #4]
 8010900:	f004 fa2e 	bl	8014d60 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8010904:	e01c      	b.n	8010940 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8010906:	6839      	ldr	r1, [r7, #0]
 8010908:	6878      	ldr	r0, [r7, #4]
 801090a:	f000 fb72 	bl	8010ff2 <USBD_CtlError>
        break;
 801090e:	e017      	b.n	8010940 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8010910:	683b      	ldr	r3, [r7, #0]
 8010912:	885b      	ldrh	r3, [r3, #2]
 8010914:	2b00      	cmp	r3, #0
 8010916:	d112      	bne.n	801093e <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8010918:	7bbb      	ldrb	r3, [r7, #14]
 801091a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801091e:	2b00      	cmp	r3, #0
 8010920:	d004      	beq.n	801092c <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8010922:	7bbb      	ldrb	r3, [r7, #14]
 8010924:	4619      	mov	r1, r3
 8010926:	6878      	ldr	r0, [r7, #4]
 8010928:	f004 fa39 	bl	8014d9e <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 801092c:	6878      	ldr	r0, [r7, #4]
 801092e:	f000 fc29 	bl	8011184 <USBD_CtlSendStatus>
        }
        break;
 8010932:	e004      	b.n	801093e <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8010934:	6839      	ldr	r1, [r7, #0]
 8010936:	6878      	ldr	r0, [r7, #4]
 8010938:	f000 fb5b 	bl	8010ff2 <USBD_CtlError>
        break;
 801093c:	e000      	b.n	8010940 <USBD_StdEPReq+0x14c>
        break;
 801093e:	bf00      	nop
      }
      break;
 8010940:	e0a8      	b.n	8010a94 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010948:	2b02      	cmp	r3, #2
 801094a:	d002      	beq.n	8010952 <USBD_StdEPReq+0x15e>
 801094c:	2b03      	cmp	r3, #3
 801094e:	d031      	beq.n	80109b4 <USBD_StdEPReq+0x1c0>
 8010950:	e095      	b.n	8010a7e <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010952:	7bbb      	ldrb	r3, [r7, #14]
 8010954:	2b00      	cmp	r3, #0
 8010956:	d007      	beq.n	8010968 <USBD_StdEPReq+0x174>
 8010958:	7bbb      	ldrb	r3, [r7, #14]
 801095a:	2b80      	cmp	r3, #128	; 0x80
 801095c:	d004      	beq.n	8010968 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 801095e:	6839      	ldr	r1, [r7, #0]
 8010960:	6878      	ldr	r0, [r7, #4]
 8010962:	f000 fb46 	bl	8010ff2 <USBD_CtlError>
          break;
 8010966:	e08f      	b.n	8010a88 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8010968:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801096c:	2b00      	cmp	r3, #0
 801096e:	da0b      	bge.n	8010988 <USBD_StdEPReq+0x194>
 8010970:	7bbb      	ldrb	r3, [r7, #14]
 8010972:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010976:	4613      	mov	r3, r2
 8010978:	009b      	lsls	r3, r3, #2
 801097a:	4413      	add	r3, r2
 801097c:	009b      	lsls	r3, r3, #2
 801097e:	3310      	adds	r3, #16
 8010980:	687a      	ldr	r2, [r7, #4]
 8010982:	4413      	add	r3, r2
 8010984:	3304      	adds	r3, #4
 8010986:	e00a      	b.n	801099e <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 8010988:	7bbb      	ldrb	r3, [r7, #14]
 801098a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 801098e:	4613      	mov	r3, r2
 8010990:	009b      	lsls	r3, r3, #2
 8010992:	4413      	add	r3, r2
 8010994:	009b      	lsls	r3, r3, #2
 8010996:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 801099a:	687a      	ldr	r2, [r7, #4]
 801099c:	4413      	add	r3, r2
 801099e:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 80109a0:	68bb      	ldr	r3, [r7, #8]
 80109a2:	2200      	movs	r2, #0
 80109a4:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80109a6:	68bb      	ldr	r3, [r7, #8]
 80109a8:	2202      	movs	r2, #2
 80109aa:	4619      	mov	r1, r3
 80109ac:	6878      	ldr	r0, [r7, #4]
 80109ae:	f000 fb8b 	bl	80110c8 <USBD_CtlSendData>
          break;
 80109b2:	e069      	b.n	8010a88 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 80109b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	da11      	bge.n	80109e0 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80109bc:	7bbb      	ldrb	r3, [r7, #14]
 80109be:	f003 020f 	and.w	r2, r3, #15
 80109c2:	6879      	ldr	r1, [r7, #4]
 80109c4:	4613      	mov	r3, r2
 80109c6:	009b      	lsls	r3, r3, #2
 80109c8:	4413      	add	r3, r2
 80109ca:	009b      	lsls	r3, r3, #2
 80109cc:	440b      	add	r3, r1
 80109ce:	3318      	adds	r3, #24
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d117      	bne.n	8010a06 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 80109d6:	6839      	ldr	r1, [r7, #0]
 80109d8:	6878      	ldr	r0, [r7, #4]
 80109da:	f000 fb0a 	bl	8010ff2 <USBD_CtlError>
            break;
 80109de:	e053      	b.n	8010a88 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80109e0:	7bbb      	ldrb	r3, [r7, #14]
 80109e2:	f003 020f 	and.w	r2, r3, #15
 80109e6:	6879      	ldr	r1, [r7, #4]
 80109e8:	4613      	mov	r3, r2
 80109ea:	009b      	lsls	r3, r3, #2
 80109ec:	4413      	add	r3, r2
 80109ee:	009b      	lsls	r3, r3, #2
 80109f0:	440b      	add	r3, r1
 80109f2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d104      	bne.n	8010a06 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 80109fc:	6839      	ldr	r1, [r7, #0]
 80109fe:	6878      	ldr	r0, [r7, #4]
 8010a00:	f000 faf7 	bl	8010ff2 <USBD_CtlError>
            break;
 8010a04:	e040      	b.n	8010a88 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8010a06:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	da0b      	bge.n	8010a26 <USBD_StdEPReq+0x232>
 8010a0e:	7bbb      	ldrb	r3, [r7, #14]
 8010a10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010a14:	4613      	mov	r3, r2
 8010a16:	009b      	lsls	r3, r3, #2
 8010a18:	4413      	add	r3, r2
 8010a1a:	009b      	lsls	r3, r3, #2
 8010a1c:	3310      	adds	r3, #16
 8010a1e:	687a      	ldr	r2, [r7, #4]
 8010a20:	4413      	add	r3, r2
 8010a22:	3304      	adds	r3, #4
 8010a24:	e00a      	b.n	8010a3c <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 8010a26:	7bbb      	ldrb	r3, [r7, #14]
 8010a28:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8010a2c:	4613      	mov	r3, r2
 8010a2e:	009b      	lsls	r3, r3, #2
 8010a30:	4413      	add	r3, r2
 8010a32:	009b      	lsls	r3, r3, #2
 8010a34:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8010a38:	687a      	ldr	r2, [r7, #4]
 8010a3a:	4413      	add	r3, r2
 8010a3c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8010a3e:	7bbb      	ldrb	r3, [r7, #14]
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d002      	beq.n	8010a4a <USBD_StdEPReq+0x256>
 8010a44:	7bbb      	ldrb	r3, [r7, #14]
 8010a46:	2b80      	cmp	r3, #128	; 0x80
 8010a48:	d103      	bne.n	8010a52 <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 8010a4a:	68bb      	ldr	r3, [r7, #8]
 8010a4c:	2200      	movs	r2, #0
 8010a4e:	601a      	str	r2, [r3, #0]
 8010a50:	e00e      	b.n	8010a70 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8010a52:	7bbb      	ldrb	r3, [r7, #14]
 8010a54:	4619      	mov	r1, r3
 8010a56:	6878      	ldr	r0, [r7, #4]
 8010a58:	f004 f9c0 	bl	8014ddc <USBD_LL_IsStallEP>
 8010a5c:	4603      	mov	r3, r0
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d003      	beq.n	8010a6a <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 8010a62:	68bb      	ldr	r3, [r7, #8]
 8010a64:	2201      	movs	r2, #1
 8010a66:	601a      	str	r2, [r3, #0]
 8010a68:	e002      	b.n	8010a70 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 8010a6a:	68bb      	ldr	r3, [r7, #8]
 8010a6c:	2200      	movs	r2, #0
 8010a6e:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8010a70:	68bb      	ldr	r3, [r7, #8]
 8010a72:	2202      	movs	r2, #2
 8010a74:	4619      	mov	r1, r3
 8010a76:	6878      	ldr	r0, [r7, #4]
 8010a78:	f000 fb26 	bl	80110c8 <USBD_CtlSendData>
          break;
 8010a7c:	e004      	b.n	8010a88 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 8010a7e:	6839      	ldr	r1, [r7, #0]
 8010a80:	6878      	ldr	r0, [r7, #4]
 8010a82:	f000 fab6 	bl	8010ff2 <USBD_CtlError>
        break;
 8010a86:	bf00      	nop
      }
      break;
 8010a88:	e004      	b.n	8010a94 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 8010a8a:	6839      	ldr	r1, [r7, #0]
 8010a8c:	6878      	ldr	r0, [r7, #4]
 8010a8e:	f000 fab0 	bl	8010ff2 <USBD_CtlError>
      break;
 8010a92:	bf00      	nop
    }
    break;
 8010a94:	e004      	b.n	8010aa0 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 8010a96:	6839      	ldr	r1, [r7, #0]
 8010a98:	6878      	ldr	r0, [r7, #4]
 8010a9a:	f000 faaa 	bl	8010ff2 <USBD_CtlError>
    break;
 8010a9e:	bf00      	nop
  }

  return ret;
 8010aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8010aa2:	4618      	mov	r0, r3
 8010aa4:	3710      	adds	r7, #16
 8010aa6:	46bd      	mov	sp, r7
 8010aa8:	bd80      	pop	{r7, pc}
	...

08010aac <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8010aac:	b580      	push	{r7, lr}
 8010aae:	b084      	sub	sp, #16
 8010ab0:	af00      	add	r7, sp, #0
 8010ab2:	6078      	str	r0, [r7, #4]
 8010ab4:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8010ab6:	683b      	ldr	r3, [r7, #0]
 8010ab8:	885b      	ldrh	r3, [r3, #2]
 8010aba:	0a1b      	lsrs	r3, r3, #8
 8010abc:	b29b      	uxth	r3, r3
 8010abe:	3b01      	subs	r3, #1
 8010ac0:	2b06      	cmp	r3, #6
 8010ac2:	f200 80c9 	bhi.w	8010c58 <USBD_GetDescriptor+0x1ac>
 8010ac6:	a201      	add	r2, pc, #4	; (adr r2, 8010acc <USBD_GetDescriptor+0x20>)
 8010ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010acc:	08010ae9 	.word	0x08010ae9
 8010ad0:	08010b01 	.word	0x08010b01
 8010ad4:	08010b41 	.word	0x08010b41
 8010ad8:	08010c59 	.word	0x08010c59
 8010adc:	08010c59 	.word	0x08010c59
 8010ae0:	08010c05 	.word	0x08010c05
 8010ae4:	08010c2b 	.word	0x08010c2b
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	687a      	ldr	r2, [r7, #4]
 8010af2:	7c12      	ldrb	r2, [r2, #16]
 8010af4:	f107 010a 	add.w	r1, r7, #10
 8010af8:	4610      	mov	r0, r2
 8010afa:	4798      	blx	r3
 8010afc:	60f8      	str	r0, [r7, #12]
    break;
 8010afe:	e0b0      	b.n	8010c62 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	7c1b      	ldrb	r3, [r3, #16]
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d10d      	bne.n	8010b24 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b10:	f107 020a 	add.w	r2, r7, #10
 8010b14:	4610      	mov	r0, r2
 8010b16:	4798      	blx	r3
 8010b18:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	3301      	adds	r3, #1
 8010b1e:	2202      	movs	r2, #2
 8010b20:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8010b22:	e09e      	b.n	8010c62 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b2c:	f107 020a 	add.w	r2, r7, #10
 8010b30:	4610      	mov	r0, r2
 8010b32:	4798      	blx	r3
 8010b34:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	3301      	adds	r3, #1
 8010b3a:	2202      	movs	r2, #2
 8010b3c:	701a      	strb	r2, [r3, #0]
    break;
 8010b3e:	e090      	b.n	8010c62 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8010b40:	683b      	ldr	r3, [r7, #0]
 8010b42:	885b      	ldrh	r3, [r3, #2]
 8010b44:	b2db      	uxtb	r3, r3
 8010b46:	2b05      	cmp	r3, #5
 8010b48:	d856      	bhi.n	8010bf8 <USBD_GetDescriptor+0x14c>
 8010b4a:	a201      	add	r2, pc, #4	; (adr r2, 8010b50 <USBD_GetDescriptor+0xa4>)
 8010b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b50:	08010b69 	.word	0x08010b69
 8010b54:	08010b81 	.word	0x08010b81
 8010b58:	08010b99 	.word	0x08010b99
 8010b5c:	08010bb1 	.word	0x08010bb1
 8010b60:	08010bc9 	.word	0x08010bc9
 8010b64:	08010be1 	.word	0x08010be1
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8010b6e:	685b      	ldr	r3, [r3, #4]
 8010b70:	687a      	ldr	r2, [r7, #4]
 8010b72:	7c12      	ldrb	r2, [r2, #16]
 8010b74:	f107 010a 	add.w	r1, r7, #10
 8010b78:	4610      	mov	r0, r2
 8010b7a:	4798      	blx	r3
 8010b7c:	60f8      	str	r0, [r7, #12]
      break;
 8010b7e:	e040      	b.n	8010c02 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8010b86:	689b      	ldr	r3, [r3, #8]
 8010b88:	687a      	ldr	r2, [r7, #4]
 8010b8a:	7c12      	ldrb	r2, [r2, #16]
 8010b8c:	f107 010a 	add.w	r1, r7, #10
 8010b90:	4610      	mov	r0, r2
 8010b92:	4798      	blx	r3
 8010b94:	60f8      	str	r0, [r7, #12]
      break;
 8010b96:	e034      	b.n	8010c02 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8010b9e:	68db      	ldr	r3, [r3, #12]
 8010ba0:	687a      	ldr	r2, [r7, #4]
 8010ba2:	7c12      	ldrb	r2, [r2, #16]
 8010ba4:	f107 010a 	add.w	r1, r7, #10
 8010ba8:	4610      	mov	r0, r2
 8010baa:	4798      	blx	r3
 8010bac:	60f8      	str	r0, [r7, #12]
      break;
 8010bae:	e028      	b.n	8010c02 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8010bb6:	691b      	ldr	r3, [r3, #16]
 8010bb8:	687a      	ldr	r2, [r7, #4]
 8010bba:	7c12      	ldrb	r2, [r2, #16]
 8010bbc:	f107 010a 	add.w	r1, r7, #10
 8010bc0:	4610      	mov	r0, r2
 8010bc2:	4798      	blx	r3
 8010bc4:	60f8      	str	r0, [r7, #12]
      break;
 8010bc6:	e01c      	b.n	8010c02 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8010bce:	695b      	ldr	r3, [r3, #20]
 8010bd0:	687a      	ldr	r2, [r7, #4]
 8010bd2:	7c12      	ldrb	r2, [r2, #16]
 8010bd4:	f107 010a 	add.w	r1, r7, #10
 8010bd8:	4610      	mov	r0, r2
 8010bda:	4798      	blx	r3
 8010bdc:	60f8      	str	r0, [r7, #12]
      break;
 8010bde:	e010      	b.n	8010c02 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8010be6:	699b      	ldr	r3, [r3, #24]
 8010be8:	687a      	ldr	r2, [r7, #4]
 8010bea:	7c12      	ldrb	r2, [r2, #16]
 8010bec:	f107 010a 	add.w	r1, r7, #10
 8010bf0:	4610      	mov	r0, r2
 8010bf2:	4798      	blx	r3
 8010bf4:	60f8      	str	r0, [r7, #12]
      break;
 8010bf6:	e004      	b.n	8010c02 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8010bf8:	6839      	ldr	r1, [r7, #0]
 8010bfa:	6878      	ldr	r0, [r7, #4]
 8010bfc:	f000 f9f9 	bl	8010ff2 <USBD_CtlError>
      return;
 8010c00:	e04b      	b.n	8010c9a <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 8010c02:	e02e      	b.n	8010c62 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	7c1b      	ldrb	r3, [r3, #16]
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d109      	bne.n	8010c20 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c14:	f107 020a 	add.w	r2, r7, #10
 8010c18:	4610      	mov	r0, r2
 8010c1a:	4798      	blx	r3
 8010c1c:	60f8      	str	r0, [r7, #12]
      break;
 8010c1e:	e020      	b.n	8010c62 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8010c20:	6839      	ldr	r1, [r7, #0]
 8010c22:	6878      	ldr	r0, [r7, #4]
 8010c24:	f000 f9e5 	bl	8010ff2 <USBD_CtlError>
      return;
 8010c28:	e037      	b.n	8010c9a <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	7c1b      	ldrb	r3, [r3, #16]
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d10d      	bne.n	8010c4e <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c3a:	f107 020a 	add.w	r2, r7, #10
 8010c3e:	4610      	mov	r0, r2
 8010c40:	4798      	blx	r3
 8010c42:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8010c44:	68fb      	ldr	r3, [r7, #12]
 8010c46:	3301      	adds	r3, #1
 8010c48:	2207      	movs	r2, #7
 8010c4a:	701a      	strb	r2, [r3, #0]
      break;
 8010c4c:	e009      	b.n	8010c62 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8010c4e:	6839      	ldr	r1, [r7, #0]
 8010c50:	6878      	ldr	r0, [r7, #4]
 8010c52:	f000 f9ce 	bl	8010ff2 <USBD_CtlError>
      return;
 8010c56:	e020      	b.n	8010c9a <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8010c58:	6839      	ldr	r1, [r7, #0]
 8010c5a:	6878      	ldr	r0, [r7, #4]
 8010c5c:	f000 f9c9 	bl	8010ff2 <USBD_CtlError>
    return;
 8010c60:	e01b      	b.n	8010c9a <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 8010c62:	897b      	ldrh	r3, [r7, #10]
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d011      	beq.n	8010c8c <USBD_GetDescriptor+0x1e0>
 8010c68:	683b      	ldr	r3, [r7, #0]
 8010c6a:	88db      	ldrh	r3, [r3, #6]
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d00d      	beq.n	8010c8c <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8010c70:	683b      	ldr	r3, [r7, #0]
 8010c72:	88da      	ldrh	r2, [r3, #6]
 8010c74:	897b      	ldrh	r3, [r7, #10]
 8010c76:	4293      	cmp	r3, r2
 8010c78:	bf28      	it	cs
 8010c7a:	4613      	movcs	r3, r2
 8010c7c:	b29b      	uxth	r3, r3
 8010c7e:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8010c80:	897b      	ldrh	r3, [r7, #10]
 8010c82:	461a      	mov	r2, r3
 8010c84:	68f9      	ldr	r1, [r7, #12]
 8010c86:	6878      	ldr	r0, [r7, #4]
 8010c88:	f000 fa1e 	bl	80110c8 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8010c8c:	683b      	ldr	r3, [r7, #0]
 8010c8e:	88db      	ldrh	r3, [r3, #6]
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d102      	bne.n	8010c9a <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8010c94:	6878      	ldr	r0, [r7, #4]
 8010c96:	f000 fa75 	bl	8011184 <USBD_CtlSendStatus>
  }
}
 8010c9a:	3710      	adds	r7, #16
 8010c9c:	46bd      	mov	sp, r7
 8010c9e:	bd80      	pop	{r7, pc}

08010ca0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8010ca0:	b580      	push	{r7, lr}
 8010ca2:	b084      	sub	sp, #16
 8010ca4:	af00      	add	r7, sp, #0
 8010ca6:	6078      	str	r0, [r7, #4]
 8010ca8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8010caa:	683b      	ldr	r3, [r7, #0]
 8010cac:	889b      	ldrh	r3, [r3, #4]
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d130      	bne.n	8010d14 <USBD_SetAddress+0x74>
 8010cb2:	683b      	ldr	r3, [r7, #0]
 8010cb4:	88db      	ldrh	r3, [r3, #6]
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d12c      	bne.n	8010d14 <USBD_SetAddress+0x74>
 8010cba:	683b      	ldr	r3, [r7, #0]
 8010cbc:	885b      	ldrh	r3, [r3, #2]
 8010cbe:	2b7f      	cmp	r3, #127	; 0x7f
 8010cc0:	d828      	bhi.n	8010d14 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8010cc2:	683b      	ldr	r3, [r7, #0]
 8010cc4:	885b      	ldrh	r3, [r3, #2]
 8010cc6:	b2db      	uxtb	r3, r3
 8010cc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010ccc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010cd4:	2b03      	cmp	r3, #3
 8010cd6:	d104      	bne.n	8010ce2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8010cd8:	6839      	ldr	r1, [r7, #0]
 8010cda:	6878      	ldr	r0, [r7, #4]
 8010cdc:	f000 f989 	bl	8010ff2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010ce0:	e01c      	b.n	8010d1c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	7bfa      	ldrb	r2, [r7, #15]
 8010ce6:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8010cea:	7bfb      	ldrb	r3, [r7, #15]
 8010cec:	4619      	mov	r1, r3
 8010cee:	6878      	ldr	r0, [r7, #4]
 8010cf0:	f004 f8a0 	bl	8014e34 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8010cf4:	6878      	ldr	r0, [r7, #4]
 8010cf6:	f000 fa45 	bl	8011184 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8010cfa:	7bfb      	ldrb	r3, [r7, #15]
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d004      	beq.n	8010d0a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	2202      	movs	r2, #2
 8010d04:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010d08:	e008      	b.n	8010d1c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	2201      	movs	r2, #1
 8010d0e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010d12:	e003      	b.n	8010d1c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8010d14:	6839      	ldr	r1, [r7, #0]
 8010d16:	6878      	ldr	r0, [r7, #4]
 8010d18:	f000 f96b 	bl	8010ff2 <USBD_CtlError>
  }
}
 8010d1c:	bf00      	nop
 8010d1e:	3710      	adds	r7, #16
 8010d20:	46bd      	mov	sp, r7
 8010d22:	bd80      	pop	{r7, pc}

08010d24 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010d24:	b580      	push	{r7, lr}
 8010d26:	b082      	sub	sp, #8
 8010d28:	af00      	add	r7, sp, #0
 8010d2a:	6078      	str	r0, [r7, #4]
 8010d2c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8010d2e:	683b      	ldr	r3, [r7, #0]
 8010d30:	885b      	ldrh	r3, [r3, #2]
 8010d32:	b2da      	uxtb	r2, r3
 8010d34:	4b41      	ldr	r3, [pc, #260]	; (8010e3c <USBD_SetConfig+0x118>)
 8010d36:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8010d38:	4b40      	ldr	r3, [pc, #256]	; (8010e3c <USBD_SetConfig+0x118>)
 8010d3a:	781b      	ldrb	r3, [r3, #0]
 8010d3c:	2b01      	cmp	r3, #1
 8010d3e:	d904      	bls.n	8010d4a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8010d40:	6839      	ldr	r1, [r7, #0]
 8010d42:	6878      	ldr	r0, [r7, #4]
 8010d44:	f000 f955 	bl	8010ff2 <USBD_CtlError>
 8010d48:	e075      	b.n	8010e36 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010d50:	2b02      	cmp	r3, #2
 8010d52:	d002      	beq.n	8010d5a <USBD_SetConfig+0x36>
 8010d54:	2b03      	cmp	r3, #3
 8010d56:	d023      	beq.n	8010da0 <USBD_SetConfig+0x7c>
 8010d58:	e062      	b.n	8010e20 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8010d5a:	4b38      	ldr	r3, [pc, #224]	; (8010e3c <USBD_SetConfig+0x118>)
 8010d5c:	781b      	ldrb	r3, [r3, #0]
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d01a      	beq.n	8010d98 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8010d62:	4b36      	ldr	r3, [pc, #216]	; (8010e3c <USBD_SetConfig+0x118>)
 8010d64:	781b      	ldrb	r3, [r3, #0]
 8010d66:	461a      	mov	r2, r3
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	2203      	movs	r2, #3
 8010d70:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8010d74:	4b31      	ldr	r3, [pc, #196]	; (8010e3c <USBD_SetConfig+0x118>)
 8010d76:	781b      	ldrb	r3, [r3, #0]
 8010d78:	4619      	mov	r1, r3
 8010d7a:	6878      	ldr	r0, [r7, #4]
 8010d7c:	f7ff fa2a 	bl	80101d4 <USBD_SetClassConfig>
 8010d80:	4603      	mov	r3, r0
 8010d82:	2b02      	cmp	r3, #2
 8010d84:	d104      	bne.n	8010d90 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8010d86:	6839      	ldr	r1, [r7, #0]
 8010d88:	6878      	ldr	r0, [r7, #4]
 8010d8a:	f000 f932 	bl	8010ff2 <USBD_CtlError>
          return;
 8010d8e:	e052      	b.n	8010e36 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8010d90:	6878      	ldr	r0, [r7, #4]
 8010d92:	f000 f9f7 	bl	8011184 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8010d96:	e04e      	b.n	8010e36 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8010d98:	6878      	ldr	r0, [r7, #4]
 8010d9a:	f000 f9f3 	bl	8011184 <USBD_CtlSendStatus>
      break;
 8010d9e:	e04a      	b.n	8010e36 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8010da0:	4b26      	ldr	r3, [pc, #152]	; (8010e3c <USBD_SetConfig+0x118>)
 8010da2:	781b      	ldrb	r3, [r3, #0]
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d112      	bne.n	8010dce <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	2202      	movs	r2, #2
 8010dac:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8010db0:	4b22      	ldr	r3, [pc, #136]	; (8010e3c <USBD_SetConfig+0x118>)
 8010db2:	781b      	ldrb	r3, [r3, #0]
 8010db4:	461a      	mov	r2, r3
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8010dba:	4b20      	ldr	r3, [pc, #128]	; (8010e3c <USBD_SetConfig+0x118>)
 8010dbc:	781b      	ldrb	r3, [r3, #0]
 8010dbe:	4619      	mov	r1, r3
 8010dc0:	6878      	ldr	r0, [r7, #4]
 8010dc2:	f7ff fa26 	bl	8010212 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8010dc6:	6878      	ldr	r0, [r7, #4]
 8010dc8:	f000 f9dc 	bl	8011184 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8010dcc:	e033      	b.n	8010e36 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8010dce:	4b1b      	ldr	r3, [pc, #108]	; (8010e3c <USBD_SetConfig+0x118>)
 8010dd0:	781b      	ldrb	r3, [r3, #0]
 8010dd2:	461a      	mov	r2, r3
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	685b      	ldr	r3, [r3, #4]
 8010dd8:	429a      	cmp	r2, r3
 8010dda:	d01d      	beq.n	8010e18 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	685b      	ldr	r3, [r3, #4]
 8010de0:	b2db      	uxtb	r3, r3
 8010de2:	4619      	mov	r1, r3
 8010de4:	6878      	ldr	r0, [r7, #4]
 8010de6:	f7ff fa14 	bl	8010212 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8010dea:	4b14      	ldr	r3, [pc, #80]	; (8010e3c <USBD_SetConfig+0x118>)
 8010dec:	781b      	ldrb	r3, [r3, #0]
 8010dee:	461a      	mov	r2, r3
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8010df4:	4b11      	ldr	r3, [pc, #68]	; (8010e3c <USBD_SetConfig+0x118>)
 8010df6:	781b      	ldrb	r3, [r3, #0]
 8010df8:	4619      	mov	r1, r3
 8010dfa:	6878      	ldr	r0, [r7, #4]
 8010dfc:	f7ff f9ea 	bl	80101d4 <USBD_SetClassConfig>
 8010e00:	4603      	mov	r3, r0
 8010e02:	2b02      	cmp	r3, #2
 8010e04:	d104      	bne.n	8010e10 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8010e06:	6839      	ldr	r1, [r7, #0]
 8010e08:	6878      	ldr	r0, [r7, #4]
 8010e0a:	f000 f8f2 	bl	8010ff2 <USBD_CtlError>
          return;
 8010e0e:	e012      	b.n	8010e36 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8010e10:	6878      	ldr	r0, [r7, #4]
 8010e12:	f000 f9b7 	bl	8011184 <USBD_CtlSendStatus>
      break;
 8010e16:	e00e      	b.n	8010e36 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8010e18:	6878      	ldr	r0, [r7, #4]
 8010e1a:	f000 f9b3 	bl	8011184 <USBD_CtlSendStatus>
      break;
 8010e1e:	e00a      	b.n	8010e36 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8010e20:	6839      	ldr	r1, [r7, #0]
 8010e22:	6878      	ldr	r0, [r7, #4]
 8010e24:	f000 f8e5 	bl	8010ff2 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8010e28:	4b04      	ldr	r3, [pc, #16]	; (8010e3c <USBD_SetConfig+0x118>)
 8010e2a:	781b      	ldrb	r3, [r3, #0]
 8010e2c:	4619      	mov	r1, r3
 8010e2e:	6878      	ldr	r0, [r7, #4]
 8010e30:	f7ff f9ef 	bl	8010212 <USBD_ClrClassConfig>
      break;
 8010e34:	bf00      	nop
    }
  }
}
 8010e36:	3708      	adds	r7, #8
 8010e38:	46bd      	mov	sp, r7
 8010e3a:	bd80      	pop	{r7, pc}
 8010e3c:	200014ac 	.word	0x200014ac

08010e40 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010e40:	b580      	push	{r7, lr}
 8010e42:	b082      	sub	sp, #8
 8010e44:	af00      	add	r7, sp, #0
 8010e46:	6078      	str	r0, [r7, #4]
 8010e48:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8010e4a:	683b      	ldr	r3, [r7, #0]
 8010e4c:	88db      	ldrh	r3, [r3, #6]
 8010e4e:	2b01      	cmp	r3, #1
 8010e50:	d004      	beq.n	8010e5c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8010e52:	6839      	ldr	r1, [r7, #0]
 8010e54:	6878      	ldr	r0, [r7, #4]
 8010e56:	f000 f8cc 	bl	8010ff2 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8010e5a:	e021      	b.n	8010ea0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010e62:	2b01      	cmp	r3, #1
 8010e64:	db17      	blt.n	8010e96 <USBD_GetConfig+0x56>
 8010e66:	2b02      	cmp	r3, #2
 8010e68:	dd02      	ble.n	8010e70 <USBD_GetConfig+0x30>
 8010e6a:	2b03      	cmp	r3, #3
 8010e6c:	d00b      	beq.n	8010e86 <USBD_GetConfig+0x46>
 8010e6e:	e012      	b.n	8010e96 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	2200      	movs	r2, #0
 8010e74:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	3308      	adds	r3, #8
 8010e7a:	2201      	movs	r2, #1
 8010e7c:	4619      	mov	r1, r3
 8010e7e:	6878      	ldr	r0, [r7, #4]
 8010e80:	f000 f922 	bl	80110c8 <USBD_CtlSendData>
      break;
 8010e84:	e00c      	b.n	8010ea0 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	3304      	adds	r3, #4
 8010e8a:	2201      	movs	r2, #1
 8010e8c:	4619      	mov	r1, r3
 8010e8e:	6878      	ldr	r0, [r7, #4]
 8010e90:	f000 f91a 	bl	80110c8 <USBD_CtlSendData>
      break;
 8010e94:	e004      	b.n	8010ea0 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 8010e96:	6839      	ldr	r1, [r7, #0]
 8010e98:	6878      	ldr	r0, [r7, #4]
 8010e9a:	f000 f8aa 	bl	8010ff2 <USBD_CtlError>
      break;
 8010e9e:	bf00      	nop
}
 8010ea0:	bf00      	nop
 8010ea2:	3708      	adds	r7, #8
 8010ea4:	46bd      	mov	sp, r7
 8010ea6:	bd80      	pop	{r7, pc}

08010ea8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010ea8:	b580      	push	{r7, lr}
 8010eaa:	b082      	sub	sp, #8
 8010eac:	af00      	add	r7, sp, #0
 8010eae:	6078      	str	r0, [r7, #4]
 8010eb0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010eb8:	3b01      	subs	r3, #1
 8010eba:	2b02      	cmp	r3, #2
 8010ebc:	d81e      	bhi.n	8010efc <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8010ebe:	683b      	ldr	r3, [r7, #0]
 8010ec0:	88db      	ldrh	r3, [r3, #6]
 8010ec2:	2b02      	cmp	r3, #2
 8010ec4:	d004      	beq.n	8010ed0 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8010ec6:	6839      	ldr	r1, [r7, #0]
 8010ec8:	6878      	ldr	r0, [r7, #4]
 8010eca:	f000 f892 	bl	8010ff2 <USBD_CtlError>
      break;
 8010ece:	e01a      	b.n	8010f06 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	2201      	movs	r2, #1
 8010ed4:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d005      	beq.n	8010eec <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	68db      	ldr	r3, [r3, #12]
 8010ee4:	f043 0202 	orr.w	r2, r3, #2
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	330c      	adds	r3, #12
 8010ef0:	2202      	movs	r2, #2
 8010ef2:	4619      	mov	r1, r3
 8010ef4:	6878      	ldr	r0, [r7, #4]
 8010ef6:	f000 f8e7 	bl	80110c8 <USBD_CtlSendData>
    break;
 8010efa:	e004      	b.n	8010f06 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8010efc:	6839      	ldr	r1, [r7, #0]
 8010efe:	6878      	ldr	r0, [r7, #4]
 8010f00:	f000 f877 	bl	8010ff2 <USBD_CtlError>
    break;
 8010f04:	bf00      	nop
  }
}
 8010f06:	bf00      	nop
 8010f08:	3708      	adds	r7, #8
 8010f0a:	46bd      	mov	sp, r7
 8010f0c:	bd80      	pop	{r7, pc}

08010f0e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8010f0e:	b580      	push	{r7, lr}
 8010f10:	b082      	sub	sp, #8
 8010f12:	af00      	add	r7, sp, #0
 8010f14:	6078      	str	r0, [r7, #4]
 8010f16:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010f18:	683b      	ldr	r3, [r7, #0]
 8010f1a:	885b      	ldrh	r3, [r3, #2]
 8010f1c:	2b01      	cmp	r3, #1
 8010f1e:	d106      	bne.n	8010f2e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	2201      	movs	r2, #1
 8010f24:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8010f28:	6878      	ldr	r0, [r7, #4]
 8010f2a:	f000 f92b 	bl	8011184 <USBD_CtlSendStatus>
  }

}
 8010f2e:	bf00      	nop
 8010f30:	3708      	adds	r7, #8
 8010f32:	46bd      	mov	sp, r7
 8010f34:	bd80      	pop	{r7, pc}

08010f36 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8010f36:	b580      	push	{r7, lr}
 8010f38:	b082      	sub	sp, #8
 8010f3a:	af00      	add	r7, sp, #0
 8010f3c:	6078      	str	r0, [r7, #4]
 8010f3e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010f46:	3b01      	subs	r3, #1
 8010f48:	2b02      	cmp	r3, #2
 8010f4a:	d80b      	bhi.n	8010f64 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010f4c:	683b      	ldr	r3, [r7, #0]
 8010f4e:	885b      	ldrh	r3, [r3, #2]
 8010f50:	2b01      	cmp	r3, #1
 8010f52:	d10c      	bne.n	8010f6e <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	2200      	movs	r2, #0
 8010f58:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8010f5c:	6878      	ldr	r0, [r7, #4]
 8010f5e:	f000 f911 	bl	8011184 <USBD_CtlSendStatus>
    }
    break;
 8010f62:	e004      	b.n	8010f6e <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8010f64:	6839      	ldr	r1, [r7, #0]
 8010f66:	6878      	ldr	r0, [r7, #4]
 8010f68:	f000 f843 	bl	8010ff2 <USBD_CtlError>
    break;
 8010f6c:	e000      	b.n	8010f70 <USBD_ClrFeature+0x3a>
    break;
 8010f6e:	bf00      	nop
  }
}
 8010f70:	bf00      	nop
 8010f72:	3708      	adds	r7, #8
 8010f74:	46bd      	mov	sp, r7
 8010f76:	bd80      	pop	{r7, pc}

08010f78 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8010f78:	b480      	push	{r7}
 8010f7a:	b083      	sub	sp, #12
 8010f7c:	af00      	add	r7, sp, #0
 8010f7e:	6078      	str	r0, [r7, #4]
 8010f80:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8010f82:	683b      	ldr	r3, [r7, #0]
 8010f84:	781a      	ldrb	r2, [r3, #0]
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8010f8a:	683b      	ldr	r3, [r7, #0]
 8010f8c:	785a      	ldrb	r2, [r3, #1]
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8010f92:	683b      	ldr	r3, [r7, #0]
 8010f94:	3302      	adds	r3, #2
 8010f96:	781b      	ldrb	r3, [r3, #0]
 8010f98:	b29a      	uxth	r2, r3
 8010f9a:	683b      	ldr	r3, [r7, #0]
 8010f9c:	3303      	adds	r3, #3
 8010f9e:	781b      	ldrb	r3, [r3, #0]
 8010fa0:	b29b      	uxth	r3, r3
 8010fa2:	021b      	lsls	r3, r3, #8
 8010fa4:	b29b      	uxth	r3, r3
 8010fa6:	4413      	add	r3, r2
 8010fa8:	b29a      	uxth	r2, r3
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8010fae:	683b      	ldr	r3, [r7, #0]
 8010fb0:	3304      	adds	r3, #4
 8010fb2:	781b      	ldrb	r3, [r3, #0]
 8010fb4:	b29a      	uxth	r2, r3
 8010fb6:	683b      	ldr	r3, [r7, #0]
 8010fb8:	3305      	adds	r3, #5
 8010fba:	781b      	ldrb	r3, [r3, #0]
 8010fbc:	b29b      	uxth	r3, r3
 8010fbe:	021b      	lsls	r3, r3, #8
 8010fc0:	b29b      	uxth	r3, r3
 8010fc2:	4413      	add	r3, r2
 8010fc4:	b29a      	uxth	r2, r3
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8010fca:	683b      	ldr	r3, [r7, #0]
 8010fcc:	3306      	adds	r3, #6
 8010fce:	781b      	ldrb	r3, [r3, #0]
 8010fd0:	b29a      	uxth	r2, r3
 8010fd2:	683b      	ldr	r3, [r7, #0]
 8010fd4:	3307      	adds	r3, #7
 8010fd6:	781b      	ldrb	r3, [r3, #0]
 8010fd8:	b29b      	uxth	r3, r3
 8010fda:	021b      	lsls	r3, r3, #8
 8010fdc:	b29b      	uxth	r3, r3
 8010fde:	4413      	add	r3, r2
 8010fe0:	b29a      	uxth	r2, r3
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	80da      	strh	r2, [r3, #6]

}
 8010fe6:	bf00      	nop
 8010fe8:	370c      	adds	r7, #12
 8010fea:	46bd      	mov	sp, r7
 8010fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff0:	4770      	bx	lr

08010ff2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8010ff2:	b580      	push	{r7, lr}
 8010ff4:	b082      	sub	sp, #8
 8010ff6:	af00      	add	r7, sp, #0
 8010ff8:	6078      	str	r0, [r7, #4]
 8010ffa:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8010ffc:	2180      	movs	r1, #128	; 0x80
 8010ffe:	6878      	ldr	r0, [r7, #4]
 8011000:	f003 feae 	bl	8014d60 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8011004:	2100      	movs	r1, #0
 8011006:	6878      	ldr	r0, [r7, #4]
 8011008:	f003 feaa 	bl	8014d60 <USBD_LL_StallEP>
}
 801100c:	bf00      	nop
 801100e:	3708      	adds	r7, #8
 8011010:	46bd      	mov	sp, r7
 8011012:	bd80      	pop	{r7, pc}

08011014 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8011014:	b580      	push	{r7, lr}
 8011016:	b086      	sub	sp, #24
 8011018:	af00      	add	r7, sp, #0
 801101a:	60f8      	str	r0, [r7, #12]
 801101c:	60b9      	str	r1, [r7, #8]
 801101e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8011020:	2300      	movs	r3, #0
 8011022:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8011024:	68fb      	ldr	r3, [r7, #12]
 8011026:	2b00      	cmp	r3, #0
 8011028:	d032      	beq.n	8011090 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 801102a:	68f8      	ldr	r0, [r7, #12]
 801102c:	f000 f834 	bl	8011098 <USBD_GetLen>
 8011030:	4603      	mov	r3, r0
 8011032:	3301      	adds	r3, #1
 8011034:	b29b      	uxth	r3, r3
 8011036:	005b      	lsls	r3, r3, #1
 8011038:	b29a      	uxth	r2, r3
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 801103e:	7dfb      	ldrb	r3, [r7, #23]
 8011040:	1c5a      	adds	r2, r3, #1
 8011042:	75fa      	strb	r2, [r7, #23]
 8011044:	461a      	mov	r2, r3
 8011046:	68bb      	ldr	r3, [r7, #8]
 8011048:	4413      	add	r3, r2
 801104a:	687a      	ldr	r2, [r7, #4]
 801104c:	7812      	ldrb	r2, [r2, #0]
 801104e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8011050:	7dfb      	ldrb	r3, [r7, #23]
 8011052:	1c5a      	adds	r2, r3, #1
 8011054:	75fa      	strb	r2, [r7, #23]
 8011056:	461a      	mov	r2, r3
 8011058:	68bb      	ldr	r3, [r7, #8]
 801105a:	4413      	add	r3, r2
 801105c:	2203      	movs	r2, #3
 801105e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8011060:	e012      	b.n	8011088 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8011062:	68fb      	ldr	r3, [r7, #12]
 8011064:	1c5a      	adds	r2, r3, #1
 8011066:	60fa      	str	r2, [r7, #12]
 8011068:	7dfa      	ldrb	r2, [r7, #23]
 801106a:	1c51      	adds	r1, r2, #1
 801106c:	75f9      	strb	r1, [r7, #23]
 801106e:	4611      	mov	r1, r2
 8011070:	68ba      	ldr	r2, [r7, #8]
 8011072:	440a      	add	r2, r1
 8011074:	781b      	ldrb	r3, [r3, #0]
 8011076:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8011078:	7dfb      	ldrb	r3, [r7, #23]
 801107a:	1c5a      	adds	r2, r3, #1
 801107c:	75fa      	strb	r2, [r7, #23]
 801107e:	461a      	mov	r2, r3
 8011080:	68bb      	ldr	r3, [r7, #8]
 8011082:	4413      	add	r3, r2
 8011084:	2200      	movs	r2, #0
 8011086:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	781b      	ldrb	r3, [r3, #0]
 801108c:	2b00      	cmp	r3, #0
 801108e:	d1e8      	bne.n	8011062 <USBD_GetString+0x4e>
    }
  }
}
 8011090:	bf00      	nop
 8011092:	3718      	adds	r7, #24
 8011094:	46bd      	mov	sp, r7
 8011096:	bd80      	pop	{r7, pc}

08011098 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8011098:	b480      	push	{r7}
 801109a:	b085      	sub	sp, #20
 801109c:	af00      	add	r7, sp, #0
 801109e:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 80110a0:	2300      	movs	r3, #0
 80110a2:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 80110a4:	e005      	b.n	80110b2 <USBD_GetLen+0x1a>
    {
        len++;
 80110a6:	7bfb      	ldrb	r3, [r7, #15]
 80110a8:	3301      	adds	r3, #1
 80110aa:	73fb      	strb	r3, [r7, #15]
        buf++;
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	3301      	adds	r3, #1
 80110b0:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	781b      	ldrb	r3, [r3, #0]
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d1f5      	bne.n	80110a6 <USBD_GetLen+0xe>
    }

    return len;
 80110ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80110bc:	4618      	mov	r0, r3
 80110be:	3714      	adds	r7, #20
 80110c0:	46bd      	mov	sp, r7
 80110c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110c6:	4770      	bx	lr

080110c8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 80110c8:	b580      	push	{r7, lr}
 80110ca:	b084      	sub	sp, #16
 80110cc:	af00      	add	r7, sp, #0
 80110ce:	60f8      	str	r0, [r7, #12]
 80110d0:	60b9      	str	r1, [r7, #8]
 80110d2:	4613      	mov	r3, r2
 80110d4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80110d6:	68fb      	ldr	r3, [r7, #12]
 80110d8:	2202      	movs	r2, #2
 80110da:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 80110de:	88fa      	ldrh	r2, [r7, #6]
 80110e0:	68fb      	ldr	r3, [r7, #12]
 80110e2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80110e4:	88fa      	ldrh	r2, [r7, #6]
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80110ea:	88fb      	ldrh	r3, [r7, #6]
 80110ec:	68ba      	ldr	r2, [r7, #8]
 80110ee:	2100      	movs	r1, #0
 80110f0:	68f8      	ldr	r0, [r7, #12]
 80110f2:	f003 febe 	bl	8014e72 <USBD_LL_Transmit>

  return USBD_OK;
 80110f6:	2300      	movs	r3, #0
}
 80110f8:	4618      	mov	r0, r3
 80110fa:	3710      	adds	r7, #16
 80110fc:	46bd      	mov	sp, r7
 80110fe:	bd80      	pop	{r7, pc}

08011100 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8011100:	b580      	push	{r7, lr}
 8011102:	b084      	sub	sp, #16
 8011104:	af00      	add	r7, sp, #0
 8011106:	60f8      	str	r0, [r7, #12]
 8011108:	60b9      	str	r1, [r7, #8]
 801110a:	4613      	mov	r3, r2
 801110c:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 801110e:	88fb      	ldrh	r3, [r7, #6]
 8011110:	68ba      	ldr	r2, [r7, #8]
 8011112:	2100      	movs	r1, #0
 8011114:	68f8      	ldr	r0, [r7, #12]
 8011116:	f003 feac 	bl	8014e72 <USBD_LL_Transmit>

  return USBD_OK;
 801111a:	2300      	movs	r3, #0
}
 801111c:	4618      	mov	r0, r3
 801111e:	3710      	adds	r7, #16
 8011120:	46bd      	mov	sp, r7
 8011122:	bd80      	pop	{r7, pc}

08011124 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8011124:	b580      	push	{r7, lr}
 8011126:	b084      	sub	sp, #16
 8011128:	af00      	add	r7, sp, #0
 801112a:	60f8      	str	r0, [r7, #12]
 801112c:	60b9      	str	r1, [r7, #8]
 801112e:	4613      	mov	r3, r2
 8011130:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8011132:	68fb      	ldr	r3, [r7, #12]
 8011134:	2203      	movs	r2, #3
 8011136:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 801113a:	88fa      	ldrh	r2, [r7, #6]
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8011142:	88fa      	ldrh	r2, [r7, #6]
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 801114a:	88fb      	ldrh	r3, [r7, #6]
 801114c:	68ba      	ldr	r2, [r7, #8]
 801114e:	2100      	movs	r1, #0
 8011150:	68f8      	ldr	r0, [r7, #12]
 8011152:	f003 feb1 	bl	8014eb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011156:	2300      	movs	r3, #0
}
 8011158:	4618      	mov	r0, r3
 801115a:	3710      	adds	r7, #16
 801115c:	46bd      	mov	sp, r7
 801115e:	bd80      	pop	{r7, pc}

08011160 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8011160:	b580      	push	{r7, lr}
 8011162:	b084      	sub	sp, #16
 8011164:	af00      	add	r7, sp, #0
 8011166:	60f8      	str	r0, [r7, #12]
 8011168:	60b9      	str	r1, [r7, #8]
 801116a:	4613      	mov	r3, r2
 801116c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801116e:	88fb      	ldrh	r3, [r7, #6]
 8011170:	68ba      	ldr	r2, [r7, #8]
 8011172:	2100      	movs	r1, #0
 8011174:	68f8      	ldr	r0, [r7, #12]
 8011176:	f003 fe9f 	bl	8014eb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801117a:	2300      	movs	r3, #0
}
 801117c:	4618      	mov	r0, r3
 801117e:	3710      	adds	r7, #16
 8011180:	46bd      	mov	sp, r7
 8011182:	bd80      	pop	{r7, pc}

08011184 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8011184:	b580      	push	{r7, lr}
 8011186:	b082      	sub	sp, #8
 8011188:	af00      	add	r7, sp, #0
 801118a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	2204      	movs	r2, #4
 8011190:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8011194:	2300      	movs	r3, #0
 8011196:	2200      	movs	r2, #0
 8011198:	2100      	movs	r1, #0
 801119a:	6878      	ldr	r0, [r7, #4]
 801119c:	f003 fe69 	bl	8014e72 <USBD_LL_Transmit>

  return USBD_OK;
 80111a0:	2300      	movs	r3, #0
}
 80111a2:	4618      	mov	r0, r3
 80111a4:	3708      	adds	r7, #8
 80111a6:	46bd      	mov	sp, r7
 80111a8:	bd80      	pop	{r7, pc}

080111aa <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 80111aa:	b580      	push	{r7, lr}
 80111ac:	b082      	sub	sp, #8
 80111ae:	af00      	add	r7, sp, #0
 80111b0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	2205      	movs	r2, #5
 80111b6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80111ba:	2300      	movs	r3, #0
 80111bc:	2200      	movs	r2, #0
 80111be:	2100      	movs	r1, #0
 80111c0:	6878      	ldr	r0, [r7, #4]
 80111c2:	f003 fe79 	bl	8014eb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80111c6:	2300      	movs	r3, #0
}
 80111c8:	4618      	mov	r0, r3
 80111ca:	3708      	adds	r7, #8
 80111cc:	46bd      	mov	sp, r7
 80111ce:	bd80      	pop	{r7, pc}

080111d0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80111d0:	b480      	push	{r7}
 80111d2:	b085      	sub	sp, #20
 80111d4:	af00      	add	r7, sp, #0
 80111d6:	4603      	mov	r3, r0
 80111d8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80111da:	2300      	movs	r3, #0
 80111dc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80111de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80111e2:	2b84      	cmp	r3, #132	; 0x84
 80111e4:	d005      	beq.n	80111f2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80111e6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	4413      	add	r3, r2
 80111ee:	3303      	adds	r3, #3
 80111f0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80111f2:	68fb      	ldr	r3, [r7, #12]
}
 80111f4:	4618      	mov	r0, r3
 80111f6:	3714      	adds	r7, #20
 80111f8:	46bd      	mov	sp, r7
 80111fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111fe:	4770      	bx	lr

08011200 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8011200:	b480      	push	{r7}
 8011202:	b083      	sub	sp, #12
 8011204:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011206:	f3ef 8305 	mrs	r3, IPSR
 801120a:	607b      	str	r3, [r7, #4]
  return(result);
 801120c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 801120e:	2b00      	cmp	r3, #0
 8011210:	bf14      	ite	ne
 8011212:	2301      	movne	r3, #1
 8011214:	2300      	moveq	r3, #0
 8011216:	b2db      	uxtb	r3, r3
}
 8011218:	4618      	mov	r0, r3
 801121a:	370c      	adds	r7, #12
 801121c:	46bd      	mov	sp, r7
 801121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011222:	4770      	bx	lr

08011224 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8011224:	b580      	push	{r7, lr}
 8011226:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8011228:	f001 fd56 	bl	8012cd8 <vTaskStartScheduler>
  
  return osOK;
 801122c:	2300      	movs	r3, #0
}
 801122e:	4618      	mov	r0, r3
 8011230:	bd80      	pop	{r7, pc}

08011232 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8011232:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011234:	b089      	sub	sp, #36	; 0x24
 8011236:	af04      	add	r7, sp, #16
 8011238:	6078      	str	r0, [r7, #4]
 801123a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	695b      	ldr	r3, [r3, #20]
 8011240:	2b00      	cmp	r3, #0
 8011242:	d020      	beq.n	8011286 <osThreadCreate+0x54>
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	699b      	ldr	r3, [r3, #24]
 8011248:	2b00      	cmp	r3, #0
 801124a:	d01c      	beq.n	8011286 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	685c      	ldr	r4, [r3, #4]
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	681d      	ldr	r5, [r3, #0]
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	691e      	ldr	r6, [r3, #16]
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801125e:	4618      	mov	r0, r3
 8011260:	f7ff ffb6 	bl	80111d0 <makeFreeRtosPriority>
 8011264:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	695b      	ldr	r3, [r3, #20]
 801126a:	687a      	ldr	r2, [r7, #4]
 801126c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801126e:	9202      	str	r2, [sp, #8]
 8011270:	9301      	str	r3, [sp, #4]
 8011272:	9100      	str	r1, [sp, #0]
 8011274:	683b      	ldr	r3, [r7, #0]
 8011276:	4632      	mov	r2, r6
 8011278:	4629      	mov	r1, r5
 801127a:	4620      	mov	r0, r4
 801127c:	f001 fb71 	bl	8012962 <xTaskCreateStatic>
 8011280:	4603      	mov	r3, r0
 8011282:	60fb      	str	r3, [r7, #12]
 8011284:	e01c      	b.n	80112c0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	685c      	ldr	r4, [r3, #4]
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011292:	b29e      	uxth	r6, r3
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801129a:	4618      	mov	r0, r3
 801129c:	f7ff ff98 	bl	80111d0 <makeFreeRtosPriority>
 80112a0:	4602      	mov	r2, r0
 80112a2:	f107 030c 	add.w	r3, r7, #12
 80112a6:	9301      	str	r3, [sp, #4]
 80112a8:	9200      	str	r2, [sp, #0]
 80112aa:	683b      	ldr	r3, [r7, #0]
 80112ac:	4632      	mov	r2, r6
 80112ae:	4629      	mov	r1, r5
 80112b0:	4620      	mov	r0, r4
 80112b2:	f001 fbaf 	bl	8012a14 <xTaskCreate>
 80112b6:	4603      	mov	r3, r0
 80112b8:	2b01      	cmp	r3, #1
 80112ba:	d001      	beq.n	80112c0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80112bc:	2300      	movs	r3, #0
 80112be:	e000      	b.n	80112c2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80112c0:	68fb      	ldr	r3, [r7, #12]
}
 80112c2:	4618      	mov	r0, r3
 80112c4:	3714      	adds	r7, #20
 80112c6:	46bd      	mov	sp, r7
 80112c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080112ca <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80112ca:	b580      	push	{r7, lr}
 80112cc:	b084      	sub	sp, #16
 80112ce:	af00      	add	r7, sp, #0
 80112d0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d001      	beq.n	80112e0 <osDelay+0x16>
 80112dc:	68fb      	ldr	r3, [r7, #12]
 80112de:	e000      	b.n	80112e2 <osDelay+0x18>
 80112e0:	2301      	movs	r3, #1
 80112e2:	4618      	mov	r0, r3
 80112e4:	f001 fcc4 	bl	8012c70 <vTaskDelay>
  
  return osOK;
 80112e8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80112ea:	4618      	mov	r0, r3
 80112ec:	3710      	adds	r7, #16
 80112ee:	46bd      	mov	sp, r7
 80112f0:	bd80      	pop	{r7, pc}
	...

080112f4 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 80112f4:	b580      	push	{r7, lr}
 80112f6:	b086      	sub	sp, #24
 80112f8:	af02      	add	r7, sp, #8
 80112fa:	6078      	str	r0, [r7, #4]
 80112fc:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80112fe:	2300      	movs	r3, #0
 8011300:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 8011302:	2300      	movs	r3, #0
 8011304:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 8011306:	f7ff ff7b 	bl	8011200 <inHandlerMode>
 801130a:	4603      	mov	r3, r0
 801130c:	2b00      	cmp	r3, #0
 801130e:	d01c      	beq.n	801134a <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8011310:	6839      	ldr	r1, [r7, #0]
 8011312:	f107 0208 	add.w	r2, r7, #8
 8011316:	f107 030c 	add.w	r3, r7, #12
 801131a:	9300      	str	r3, [sp, #0]
 801131c:	4613      	mov	r3, r2
 801131e:	2201      	movs	r2, #1
 8011320:	6878      	ldr	r0, [r7, #4]
 8011322:	f002 fbab 	bl	8013a7c <xTaskGenericNotifyFromISR>
 8011326:	4603      	mov	r3, r0
 8011328:	2b01      	cmp	r3, #1
 801132a:	d002      	beq.n	8011332 <osSignalSet+0x3e>
      return 0x80000000;
 801132c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011330:	e019      	b.n	8011366 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	2b00      	cmp	r3, #0
 8011336:	d015      	beq.n	8011364 <osSignalSet+0x70>
 8011338:	4b0d      	ldr	r3, [pc, #52]	; (8011370 <osSignalSet+0x7c>)
 801133a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801133e:	601a      	str	r2, [r3, #0]
 8011340:	f3bf 8f4f 	dsb	sy
 8011344:	f3bf 8f6f 	isb	sy
 8011348:	e00c      	b.n	8011364 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 801134a:	6839      	ldr	r1, [r7, #0]
 801134c:	f107 0308 	add.w	r3, r7, #8
 8011350:	2201      	movs	r2, #1
 8011352:	6878      	ldr	r0, [r7, #4]
 8011354:	f002 faf2 	bl	801393c <xTaskGenericNotify>
 8011358:	4603      	mov	r3, r0
 801135a:	2b01      	cmp	r3, #1
 801135c:	d002      	beq.n	8011364 <osSignalSet+0x70>
    return 0x80000000;
 801135e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011362:	e000      	b.n	8011366 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8011364:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8011366:	4618      	mov	r0, r3
 8011368:	3710      	adds	r7, #16
 801136a:	46bd      	mov	sp, r7
 801136c:	bd80      	pop	{r7, pc}
 801136e:	bf00      	nop
 8011370:	e000ed04 	.word	0xe000ed04

08011374 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8011374:	b590      	push	{r4, r7, lr}
 8011376:	b089      	sub	sp, #36	; 0x24
 8011378:	af00      	add	r7, sp, #0
 801137a:	60f8      	str	r0, [r7, #12]
 801137c:	60b9      	str	r1, [r7, #8]
 801137e:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8011380:	2300      	movs	r3, #0
 8011382:	617b      	str	r3, [r7, #20]
  ticks = 0;
 8011384:	2300      	movs	r3, #0
 8011386:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801138e:	d103      	bne.n	8011398 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 8011390:	f04f 33ff 	mov.w	r3, #4294967295
 8011394:	61fb      	str	r3, [r7, #28]
 8011396:	e009      	b.n	80113ac <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	2b00      	cmp	r3, #0
 801139c:	d006      	beq.n	80113ac <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 80113a2:	69fb      	ldr	r3, [r7, #28]
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d101      	bne.n	80113ac <osSignalWait+0x38>
      ticks = 1;
 80113a8:	2301      	movs	r3, #1
 80113aa:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 80113ac:	f7ff ff28 	bl	8011200 <inHandlerMode>
 80113b0:	4603      	mov	r3, r0
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d002      	beq.n	80113bc <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 80113b6:	2382      	movs	r3, #130	; 0x82
 80113b8:	613b      	str	r3, [r7, #16]
 80113ba:	e01b      	b.n	80113f4 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 80113bc:	68b9      	ldr	r1, [r7, #8]
 80113be:	f107 0310 	add.w	r3, r7, #16
 80113c2:	1d1a      	adds	r2, r3, #4
 80113c4:	69fb      	ldr	r3, [r7, #28]
 80113c6:	2000      	movs	r0, #0
 80113c8:	f002 fa5e 	bl	8013888 <xTaskNotifyWait>
 80113cc:	4603      	mov	r3, r0
 80113ce:	2b01      	cmp	r3, #1
 80113d0:	d008      	beq.n	80113e4 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 80113d2:	69fb      	ldr	r3, [r7, #28]
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d102      	bne.n	80113de <osSignalWait+0x6a>
 80113d8:	2300      	movs	r3, #0
 80113da:	613b      	str	r3, [r7, #16]
 80113dc:	e00a      	b.n	80113f4 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 80113de:	2340      	movs	r3, #64	; 0x40
 80113e0:	613b      	str	r3, [r7, #16]
 80113e2:	e007      	b.n	80113f4 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 80113e4:	697b      	ldr	r3, [r7, #20]
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	da02      	bge.n	80113f0 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 80113ea:	2386      	movs	r3, #134	; 0x86
 80113ec:	613b      	str	r3, [r7, #16]
 80113ee:	e001      	b.n	80113f4 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 80113f0:	2308      	movs	r3, #8
 80113f2:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 80113f4:	68fb      	ldr	r3, [r7, #12]
 80113f6:	461c      	mov	r4, r3
 80113f8:	f107 0310 	add.w	r3, r7, #16
 80113fc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011400:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8011404:	68f8      	ldr	r0, [r7, #12]
 8011406:	3724      	adds	r7, #36	; 0x24
 8011408:	46bd      	mov	sp, r7
 801140a:	bd90      	pop	{r4, r7, pc}

0801140c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 801140c:	b580      	push	{r7, lr}
 801140e:	b082      	sub	sp, #8
 8011410:	af00      	add	r7, sp, #0
 8011412:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	685b      	ldr	r3, [r3, #4]
 8011418:	2b00      	cmp	r3, #0
 801141a:	d007      	beq.n	801142c <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	685b      	ldr	r3, [r3, #4]
 8011420:	4619      	mov	r1, r3
 8011422:	2001      	movs	r0, #1
 8011424:	f000 fce0 	bl	8011de8 <xQueueCreateMutexStatic>
 8011428:	4603      	mov	r3, r0
 801142a:	e003      	b.n	8011434 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 801142c:	2001      	movs	r0, #1
 801142e:	f000 fcc3 	bl	8011db8 <xQueueCreateMutex>
 8011432:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8011434:	4618      	mov	r0, r3
 8011436:	3708      	adds	r7, #8
 8011438:	46bd      	mov	sp, r7
 801143a:	bd80      	pop	{r7, pc}

0801143c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 801143c:	b580      	push	{r7, lr}
 801143e:	b084      	sub	sp, #16
 8011440:	af00      	add	r7, sp, #0
 8011442:	6078      	str	r0, [r7, #4]
 8011444:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8011446:	2300      	movs	r3, #0
 8011448:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	2b00      	cmp	r3, #0
 801144e:	d101      	bne.n	8011454 <osMutexWait+0x18>
    return osErrorParameter;
 8011450:	2380      	movs	r3, #128	; 0x80
 8011452:	e03a      	b.n	80114ca <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8011454:	2300      	movs	r3, #0
 8011456:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8011458:	683b      	ldr	r3, [r7, #0]
 801145a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801145e:	d103      	bne.n	8011468 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8011460:	f04f 33ff 	mov.w	r3, #4294967295
 8011464:	60fb      	str	r3, [r7, #12]
 8011466:	e009      	b.n	801147c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8011468:	683b      	ldr	r3, [r7, #0]
 801146a:	2b00      	cmp	r3, #0
 801146c:	d006      	beq.n	801147c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 801146e:	683b      	ldr	r3, [r7, #0]
 8011470:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	2b00      	cmp	r3, #0
 8011476:	d101      	bne.n	801147c <osMutexWait+0x40>
      ticks = 1;
 8011478:	2301      	movs	r3, #1
 801147a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 801147c:	f7ff fec0 	bl	8011200 <inHandlerMode>
 8011480:	4603      	mov	r3, r0
 8011482:	2b00      	cmp	r3, #0
 8011484:	d017      	beq.n	80114b6 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8011486:	f107 0308 	add.w	r3, r7, #8
 801148a:	461a      	mov	r2, r3
 801148c:	2100      	movs	r1, #0
 801148e:	6878      	ldr	r0, [r7, #4]
 8011490:	f001 f8c2 	bl	8012618 <xQueueReceiveFromISR>
 8011494:	4603      	mov	r3, r0
 8011496:	2b01      	cmp	r3, #1
 8011498:	d001      	beq.n	801149e <osMutexWait+0x62>
      return osErrorOS;
 801149a:	23ff      	movs	r3, #255	; 0xff
 801149c:	e015      	b.n	80114ca <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 801149e:	68bb      	ldr	r3, [r7, #8]
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d011      	beq.n	80114c8 <osMutexWait+0x8c>
 80114a4:	4b0b      	ldr	r3, [pc, #44]	; (80114d4 <osMutexWait+0x98>)
 80114a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80114aa:	601a      	str	r2, [r3, #0]
 80114ac:	f3bf 8f4f 	dsb	sy
 80114b0:	f3bf 8f6f 	isb	sy
 80114b4:	e008      	b.n	80114c8 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80114b6:	68f9      	ldr	r1, [r7, #12]
 80114b8:	6878      	ldr	r0, [r7, #4]
 80114ba:	f000 ffa5 	bl	8012408 <xQueueSemaphoreTake>
 80114be:	4603      	mov	r3, r0
 80114c0:	2b01      	cmp	r3, #1
 80114c2:	d001      	beq.n	80114c8 <osMutexWait+0x8c>
    return osErrorOS;
 80114c4:	23ff      	movs	r3, #255	; 0xff
 80114c6:	e000      	b.n	80114ca <osMutexWait+0x8e>
  }
  
  return osOK;
 80114c8:	2300      	movs	r3, #0
}
 80114ca:	4618      	mov	r0, r3
 80114cc:	3710      	adds	r7, #16
 80114ce:	46bd      	mov	sp, r7
 80114d0:	bd80      	pop	{r7, pc}
 80114d2:	bf00      	nop
 80114d4:	e000ed04 	.word	0xe000ed04

080114d8 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80114d8:	b580      	push	{r7, lr}
 80114da:	b084      	sub	sp, #16
 80114dc:	af00      	add	r7, sp, #0
 80114de:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80114e0:	2300      	movs	r3, #0
 80114e2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80114e4:	2300      	movs	r3, #0
 80114e6:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80114e8:	f7ff fe8a 	bl	8011200 <inHandlerMode>
 80114ec:	4603      	mov	r3, r0
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	d016      	beq.n	8011520 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80114f2:	f107 0308 	add.w	r3, r7, #8
 80114f6:	4619      	mov	r1, r3
 80114f8:	6878      	ldr	r0, [r7, #4]
 80114fa:	f000 fe1f 	bl	801213c <xQueueGiveFromISR>
 80114fe:	4603      	mov	r3, r0
 8011500:	2b01      	cmp	r3, #1
 8011502:	d001      	beq.n	8011508 <osMutexRelease+0x30>
      return osErrorOS;
 8011504:	23ff      	movs	r3, #255	; 0xff
 8011506:	e017      	b.n	8011538 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011508:	68bb      	ldr	r3, [r7, #8]
 801150a:	2b00      	cmp	r3, #0
 801150c:	d013      	beq.n	8011536 <osMutexRelease+0x5e>
 801150e:	4b0c      	ldr	r3, [pc, #48]	; (8011540 <osMutexRelease+0x68>)
 8011510:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011514:	601a      	str	r2, [r3, #0]
 8011516:	f3bf 8f4f 	dsb	sy
 801151a:	f3bf 8f6f 	isb	sy
 801151e:	e00a      	b.n	8011536 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8011520:	2300      	movs	r3, #0
 8011522:	2200      	movs	r2, #0
 8011524:	2100      	movs	r1, #0
 8011526:	6878      	ldr	r0, [r7, #4]
 8011528:	f000 fc7a 	bl	8011e20 <xQueueGenericSend>
 801152c:	4603      	mov	r3, r0
 801152e:	2b01      	cmp	r3, #1
 8011530:	d001      	beq.n	8011536 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8011532:	23ff      	movs	r3, #255	; 0xff
 8011534:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8011536:	68fb      	ldr	r3, [r7, #12]
}
 8011538:	4618      	mov	r0, r3
 801153a:	3710      	adds	r7, #16
 801153c:	46bd      	mov	sp, r7
 801153e:	bd80      	pop	{r7, pc}
 8011540:	e000ed04 	.word	0xe000ed04

08011544 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8011544:	b580      	push	{r7, lr}
 8011546:	b086      	sub	sp, #24
 8011548:	af00      	add	r7, sp, #0
 801154a:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	685b      	ldr	r3, [r3, #4]
 8011550:	3303      	adds	r3, #3
 8011552:	f023 0303 	bic.w	r3, r3, #3
 8011556:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8011558:	2014      	movs	r0, #20
 801155a:	f002 fdf9 	bl	8014150 <pvPortMalloc>
 801155e:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 8011560:	697b      	ldr	r3, [r7, #20]
 8011562:	2b00      	cmp	r3, #0
 8011564:	d046      	beq.n	80115f4 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	681a      	ldr	r2, [r3, #0]
 801156a:	697b      	ldr	r3, [r7, #20]
 801156c:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 801156e:	68fa      	ldr	r2, [r7, #12]
 8011570:	697b      	ldr	r3, [r7, #20]
 8011572:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 8011574:	697b      	ldr	r3, [r7, #20]
 8011576:	2200      	movs	r2, #0
 8011578:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	681b      	ldr	r3, [r3, #0]
 801157e:	4618      	mov	r0, r3
 8011580:	f002 fde6 	bl	8014150 <pvPortMalloc>
 8011584:	4602      	mov	r2, r0
 8011586:	697b      	ldr	r3, [r7, #20]
 8011588:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 801158a:	697b      	ldr	r3, [r7, #20]
 801158c:	685b      	ldr	r3, [r3, #4]
 801158e:	2b00      	cmp	r3, #0
 8011590:	d02b      	beq.n	80115ea <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	681b      	ldr	r3, [r3, #0]
 8011596:	68fa      	ldr	r2, [r7, #12]
 8011598:	fb02 f303 	mul.w	r3, r2, r3
 801159c:	4618      	mov	r0, r3
 801159e:	f002 fdd7 	bl	8014150 <pvPortMalloc>
 80115a2:	4602      	mov	r2, r0
 80115a4:	697b      	ldr	r3, [r7, #20]
 80115a6:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 80115a8:	697b      	ldr	r3, [r7, #20]
 80115aa:	681b      	ldr	r3, [r3, #0]
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d011      	beq.n	80115d4 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 80115b0:	2300      	movs	r3, #0
 80115b2:	613b      	str	r3, [r7, #16]
 80115b4:	e008      	b.n	80115c8 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 80115b6:	697b      	ldr	r3, [r7, #20]
 80115b8:	685a      	ldr	r2, [r3, #4]
 80115ba:	693b      	ldr	r3, [r7, #16]
 80115bc:	4413      	add	r3, r2
 80115be:	2200      	movs	r2, #0
 80115c0:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 80115c2:	693b      	ldr	r3, [r7, #16]
 80115c4:	3301      	adds	r3, #1
 80115c6:	613b      	str	r3, [r7, #16]
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	681b      	ldr	r3, [r3, #0]
 80115cc:	693a      	ldr	r2, [r7, #16]
 80115ce:	429a      	cmp	r2, r3
 80115d0:	d3f1      	bcc.n	80115b6 <osPoolCreate+0x72>
 80115d2:	e00f      	b.n	80115f4 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 80115d4:	697b      	ldr	r3, [r7, #20]
 80115d6:	685b      	ldr	r3, [r3, #4]
 80115d8:	4618      	mov	r0, r3
 80115da:	f002 fe7b 	bl	80142d4 <vPortFree>
        vPortFree(thePool);
 80115de:	6978      	ldr	r0, [r7, #20]
 80115e0:	f002 fe78 	bl	80142d4 <vPortFree>
        thePool = NULL;
 80115e4:	2300      	movs	r3, #0
 80115e6:	617b      	str	r3, [r7, #20]
 80115e8:	e004      	b.n	80115f4 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 80115ea:	6978      	ldr	r0, [r7, #20]
 80115ec:	f002 fe72 	bl	80142d4 <vPortFree>
      thePool = NULL;
 80115f0:	2300      	movs	r3, #0
 80115f2:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 80115f4:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 80115f6:	4618      	mov	r0, r3
 80115f8:	3718      	adds	r7, #24
 80115fa:	46bd      	mov	sp, r7
 80115fc:	bd80      	pop	{r7, pc}

080115fe <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 80115fe:	b580      	push	{r7, lr}
 8011600:	b08a      	sub	sp, #40	; 0x28
 8011602:	af00      	add	r7, sp, #0
 8011604:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 8011606:	2300      	movs	r3, #0
 8011608:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 801160a:	2300      	movs	r3, #0
 801160c:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 801160e:	f7ff fdf7 	bl	8011200 <inHandlerMode>
 8011612:	4603      	mov	r3, r0
 8011614:	2b00      	cmp	r3, #0
 8011616:	d00e      	beq.n	8011636 <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8011618:	f3ef 8211 	mrs	r2, BASEPRI
 801161c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011620:	f383 8811 	msr	BASEPRI, r3
 8011624:	f3bf 8f6f 	isb	sy
 8011628:	f3bf 8f4f 	dsb	sy
 801162c:	617a      	str	r2, [r7, #20]
 801162e:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8011630:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8011632:	627b      	str	r3, [r7, #36]	; 0x24
 8011634:	e001      	b.n	801163a <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 8011636:	f002 fc71 	bl	8013f1c <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 801163a:	2300      	movs	r3, #0
 801163c:	61fb      	str	r3, [r7, #28]
 801163e:	e029      	b.n	8011694 <osPoolAlloc+0x96>
    index = pool_id->currentIndex + i;
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	691b      	ldr	r3, [r3, #16]
 8011644:	69fa      	ldr	r2, [r7, #28]
 8011646:	4413      	add	r3, r2
 8011648:	61bb      	str	r3, [r7, #24]
    if (index >= pool_id->pool_sz) {
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	689b      	ldr	r3, [r3, #8]
 801164e:	69ba      	ldr	r2, [r7, #24]
 8011650:	429a      	cmp	r2, r3
 8011652:	d301      	bcc.n	8011658 <osPoolAlloc+0x5a>
      index = 0;
 8011654:	2300      	movs	r3, #0
 8011656:	61bb      	str	r3, [r7, #24]
    }
    
    if (pool_id->markers[index] == 0) {
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	685a      	ldr	r2, [r3, #4]
 801165c:	69bb      	ldr	r3, [r7, #24]
 801165e:	4413      	add	r3, r2
 8011660:	781b      	ldrb	r3, [r3, #0]
 8011662:	2b00      	cmp	r3, #0
 8011664:	d113      	bne.n	801168e <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	685a      	ldr	r2, [r3, #4]
 801166a:	69bb      	ldr	r3, [r7, #24]
 801166c:	4413      	add	r3, r2
 801166e:	2201      	movs	r2, #1
 8011670:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	4619      	mov	r1, r3
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	68db      	ldr	r3, [r3, #12]
 801167c:	69ba      	ldr	r2, [r7, #24]
 801167e:	fb02 f303 	mul.w	r3, r2, r3
 8011682:	440b      	add	r3, r1
 8011684:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	69ba      	ldr	r2, [r7, #24]
 801168a:	611a      	str	r2, [r3, #16]
      break;
 801168c:	e007      	b.n	801169e <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 801168e:	69fb      	ldr	r3, [r7, #28]
 8011690:	3301      	adds	r3, #1
 8011692:	61fb      	str	r3, [r7, #28]
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	689b      	ldr	r3, [r3, #8]
 8011698:	69fa      	ldr	r2, [r7, #28]
 801169a:	429a      	cmp	r2, r3
 801169c:	d3d0      	bcc.n	8011640 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 801169e:	f7ff fdaf 	bl	8011200 <inHandlerMode>
 80116a2:	4603      	mov	r3, r0
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d005      	beq.n	80116b4 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 80116a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116aa:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80116ac:	68fb      	ldr	r3, [r7, #12]
 80116ae:	f383 8811 	msr	BASEPRI, r3
 80116b2:	e001      	b.n	80116b8 <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 80116b4:	f002 fc60 	bl	8013f78 <vPortExitCritical>
  }
  
  return p;
 80116b8:	6a3b      	ldr	r3, [r7, #32]
}
 80116ba:	4618      	mov	r0, r3
 80116bc:	3728      	adds	r7, #40	; 0x28
 80116be:	46bd      	mov	sp, r7
 80116c0:	bd80      	pop	{r7, pc}

080116c2 <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 80116c2:	b480      	push	{r7}
 80116c4:	b085      	sub	sp, #20
 80116c6:	af00      	add	r7, sp, #0
 80116c8:	6078      	str	r0, [r7, #4]
 80116ca:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d101      	bne.n	80116d6 <osPoolFree+0x14>
    return osErrorParameter;
 80116d2:	2380      	movs	r3, #128	; 0x80
 80116d4:	e030      	b.n	8011738 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 80116d6:	683b      	ldr	r3, [r7, #0]
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d101      	bne.n	80116e0 <osPoolFree+0x1e>
    return osErrorParameter;
 80116dc:	2380      	movs	r3, #128	; 0x80
 80116de:	e02b      	b.n	8011738 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	681b      	ldr	r3, [r3, #0]
 80116e4:	683a      	ldr	r2, [r7, #0]
 80116e6:	429a      	cmp	r2, r3
 80116e8:	d201      	bcs.n	80116ee <osPoolFree+0x2c>
    return osErrorParameter;
 80116ea:	2380      	movs	r3, #128	; 0x80
 80116ec:	e024      	b.n	8011738 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 80116ee:	683b      	ldr	r3, [r7, #0]
 80116f0:	687a      	ldr	r2, [r7, #4]
 80116f2:	6812      	ldr	r2, [r2, #0]
 80116f4:	1a9b      	subs	r3, r3, r2
 80116f6:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	68da      	ldr	r2, [r3, #12]
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	fbb3 f1f2 	udiv	r1, r3, r2
 8011702:	fb02 f201 	mul.w	r2, r2, r1
 8011706:	1a9b      	subs	r3, r3, r2
 8011708:	2b00      	cmp	r3, #0
 801170a:	d001      	beq.n	8011710 <osPoolFree+0x4e>
    return osErrorParameter;
 801170c:	2380      	movs	r3, #128	; 0x80
 801170e:	e013      	b.n	8011738 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	68db      	ldr	r3, [r3, #12]
 8011714:	68fa      	ldr	r2, [r7, #12]
 8011716:	fbb2 f3f3 	udiv	r3, r2, r3
 801171a:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	689b      	ldr	r3, [r3, #8]
 8011720:	68fa      	ldr	r2, [r7, #12]
 8011722:	429a      	cmp	r2, r3
 8011724:	d301      	bcc.n	801172a <osPoolFree+0x68>
    return osErrorParameter;
 8011726:	2380      	movs	r3, #128	; 0x80
 8011728:	e006      	b.n	8011738 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	685a      	ldr	r2, [r3, #4]
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	4413      	add	r3, r2
 8011732:	2200      	movs	r2, #0
 8011734:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 8011736:	2300      	movs	r3, #0
}
 8011738:	4618      	mov	r0, r3
 801173a:	3714      	adds	r7, #20
 801173c:	46bd      	mov	sp, r7
 801173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011742:	4770      	bx	lr

08011744 <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 8011744:	b590      	push	{r4, r7, lr}
 8011746:	b087      	sub	sp, #28
 8011748:	af00      	add	r7, sp, #0
 801174a:	6078      	str	r0, [r7, #4]
 801174c:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	681b      	ldr	r3, [r3, #0]
 8011752:	60fb      	str	r3, [r7, #12]
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	685b      	ldr	r3, [r3, #4]
 8011758:	613b      	str	r3, [r7, #16]
 801175a:	2300      	movs	r3, #0
 801175c:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	689c      	ldr	r4, [r3, #8]
 8011762:	200c      	movs	r0, #12
 8011764:	f002 fcf4 	bl	8014150 <pvPortMalloc>
 8011768:	4603      	mov	r3, r0
 801176a:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	689b      	ldr	r3, [r3, #8]
 8011770:	681b      	ldr	r3, [r3, #0]
 8011772:	2b00      	cmp	r3, #0
 8011774:	d101      	bne.n	801177a <osMailCreate+0x36>
    return NULL;
 8011776:	2300      	movs	r3, #0
 8011778:	e038      	b.n	80117ec <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	689b      	ldr	r3, [r3, #8]
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	687a      	ldr	r2, [r7, #4]
 8011782:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	6818      	ldr	r0, [r3, #0]
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	689b      	ldr	r3, [r3, #8]
 801178c:	681c      	ldr	r4, [r3, #0]
 801178e:	2200      	movs	r2, #0
 8011790:	2104      	movs	r1, #4
 8011792:	f000 fa9b 	bl	8011ccc <xQueueGenericCreate>
 8011796:	4603      	mov	r3, r0
 8011798:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	689b      	ldr	r3, [r3, #8]
 801179e:	681b      	ldr	r3, [r3, #0]
 80117a0:	685b      	ldr	r3, [r3, #4]
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d107      	bne.n	80117b6 <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	689b      	ldr	r3, [r3, #8]
 80117aa:	681b      	ldr	r3, [r3, #0]
 80117ac:	4618      	mov	r0, r3
 80117ae:	f002 fd91 	bl	80142d4 <vPortFree>
    return NULL;
 80117b2:	2300      	movs	r3, #0
 80117b4:	e01a      	b.n	80117ec <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	689b      	ldr	r3, [r3, #8]
 80117ba:	681c      	ldr	r4, [r3, #0]
 80117bc:	f107 030c 	add.w	r3, r7, #12
 80117c0:	4618      	mov	r0, r3
 80117c2:	f7ff febf 	bl	8011544 <osPoolCreate>
 80117c6:	4603      	mov	r3, r0
 80117c8:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	689b      	ldr	r3, [r3, #8]
 80117ce:	681b      	ldr	r3, [r3, #0]
 80117d0:	689b      	ldr	r3, [r3, #8]
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d107      	bne.n	80117e6 <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	689b      	ldr	r3, [r3, #8]
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	4618      	mov	r0, r3
 80117de:	f002 fd79 	bl	80142d4 <vPortFree>
    return NULL;
 80117e2:	2300      	movs	r3, #0
 80117e4:	e002      	b.n	80117ec <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	689b      	ldr	r3, [r3, #8]
 80117ea:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 80117ec:	4618      	mov	r0, r3
 80117ee:	371c      	adds	r7, #28
 80117f0:	46bd      	mov	sp, r7
 80117f2:	bd90      	pop	{r4, r7, pc}

080117f4 <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 80117f4:	b580      	push	{r7, lr}
 80117f6:	b084      	sub	sp, #16
 80117f8:	af00      	add	r7, sp, #0
 80117fa:	6078      	str	r0, [r7, #4]
 80117fc:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	2b00      	cmp	r3, #0
 8011802:	d101      	bne.n	8011808 <osMailAlloc+0x14>
    return NULL;
 8011804:	2300      	movs	r3, #0
 8011806:	e006      	b.n	8011816 <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	689b      	ldr	r3, [r3, #8]
 801180c:	4618      	mov	r0, r3
 801180e:	f7ff fef6 	bl	80115fe <osPoolAlloc>
 8011812:	60f8      	str	r0, [r7, #12]
  
  return p;
 8011814:	68fb      	ldr	r3, [r7, #12]
}
 8011816:	4618      	mov	r0, r3
 8011818:	3710      	adds	r7, #16
 801181a:	46bd      	mov	sp, r7
 801181c:	bd80      	pop	{r7, pc}
	...

08011820 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 8011820:	b580      	push	{r7, lr}
 8011822:	b084      	sub	sp, #16
 8011824:	af00      	add	r7, sp, #0
 8011826:	6078      	str	r0, [r7, #4]
 8011828:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	2b00      	cmp	r3, #0
 801182e:	d101      	bne.n	8011834 <osMailPut+0x14>
    return osErrorParameter;
 8011830:	2380      	movs	r3, #128	; 0x80
 8011832:	e02c      	b.n	801188e <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 8011834:	2300      	movs	r3, #0
 8011836:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 8011838:	f7ff fce2 	bl	8011200 <inHandlerMode>
 801183c:	4603      	mov	r3, r0
 801183e:	2b00      	cmp	r3, #0
 8011840:	d018      	beq.n	8011874 <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	6858      	ldr	r0, [r3, #4]
 8011846:	f107 020c 	add.w	r2, r7, #12
 801184a:	4639      	mov	r1, r7
 801184c:	2300      	movs	r3, #0
 801184e:	f000 fbe1 	bl	8012014 <xQueueGenericSendFromISR>
 8011852:	4603      	mov	r3, r0
 8011854:	2b01      	cmp	r3, #1
 8011856:	d001      	beq.n	801185c <osMailPut+0x3c>
      return osErrorOS;
 8011858:	23ff      	movs	r3, #255	; 0xff
 801185a:	e018      	b.n	801188e <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 801185c:	68fb      	ldr	r3, [r7, #12]
 801185e:	2b00      	cmp	r3, #0
 8011860:	d014      	beq.n	801188c <osMailPut+0x6c>
 8011862:	4b0d      	ldr	r3, [pc, #52]	; (8011898 <osMailPut+0x78>)
 8011864:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011868:	601a      	str	r2, [r3, #0]
 801186a:	f3bf 8f4f 	dsb	sy
 801186e:	f3bf 8f6f 	isb	sy
 8011872:	e00b      	b.n	801188c <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	6858      	ldr	r0, [r3, #4]
 8011878:	4639      	mov	r1, r7
 801187a:	2300      	movs	r3, #0
 801187c:	2200      	movs	r2, #0
 801187e:	f000 facf 	bl	8011e20 <xQueueGenericSend>
 8011882:	4603      	mov	r3, r0
 8011884:	2b01      	cmp	r3, #1
 8011886:	d001      	beq.n	801188c <osMailPut+0x6c>
      return osErrorOS;
 8011888:	23ff      	movs	r3, #255	; 0xff
 801188a:	e000      	b.n	801188e <osMailPut+0x6e>
    }
  }
  
  return osOK;
 801188c:	2300      	movs	r3, #0
}
 801188e:	4618      	mov	r0, r3
 8011890:	3710      	adds	r7, #16
 8011892:	46bd      	mov	sp, r7
 8011894:	bd80      	pop	{r7, pc}
 8011896:	bf00      	nop
 8011898:	e000ed04 	.word	0xe000ed04

0801189c <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 801189c:	b590      	push	{r4, r7, lr}
 801189e:	b08b      	sub	sp, #44	; 0x2c
 80118a0:	af00      	add	r7, sp, #0
 80118a2:	60f8      	str	r0, [r7, #12]
 80118a4:	60b9      	str	r1, [r7, #8]
 80118a6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 80118a8:	68bb      	ldr	r3, [r7, #8]
 80118aa:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 80118ac:	68bb      	ldr	r3, [r7, #8]
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d10a      	bne.n	80118c8 <osMailGet+0x2c>
    event.status = osErrorParameter;
 80118b2:	2380      	movs	r3, #128	; 0x80
 80118b4:	617b      	str	r3, [r7, #20]
    return event;
 80118b6:	68fb      	ldr	r3, [r7, #12]
 80118b8:	461c      	mov	r4, r3
 80118ba:	f107 0314 	add.w	r3, r7, #20
 80118be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80118c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80118c6:	e056      	b.n	8011976 <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80118c8:	2300      	movs	r3, #0
 80118ca:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80118cc:	2300      	movs	r3, #0
 80118ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80118d6:	d103      	bne.n	80118e0 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 80118d8:	f04f 33ff 	mov.w	r3, #4294967295
 80118dc:	627b      	str	r3, [r7, #36]	; 0x24
 80118de:	e009      	b.n	80118f4 <osMailGet+0x58>
  }
  else if (millisec != 0) {
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d006      	beq.n	80118f4 <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80118ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d101      	bne.n	80118f4 <osMailGet+0x58>
      ticks = 1;
 80118f0:	2301      	movs	r3, #1
 80118f2:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80118f4:	f7ff fc84 	bl	8011200 <inHandlerMode>
 80118f8:	4603      	mov	r3, r0
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d01d      	beq.n	801193a <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 80118fe:	68bb      	ldr	r3, [r7, #8]
 8011900:	6858      	ldr	r0, [r3, #4]
 8011902:	f107 0220 	add.w	r2, r7, #32
 8011906:	f107 0314 	add.w	r3, r7, #20
 801190a:	3304      	adds	r3, #4
 801190c:	4619      	mov	r1, r3
 801190e:	f000 fe83 	bl	8012618 <xQueueReceiveFromISR>
 8011912:	4603      	mov	r3, r0
 8011914:	2b01      	cmp	r3, #1
 8011916:	d102      	bne.n	801191e <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 8011918:	2320      	movs	r3, #32
 801191a:	617b      	str	r3, [r7, #20]
 801191c:	e001      	b.n	8011922 <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 801191e:	2300      	movs	r3, #0
 8011920:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011922:	6a3b      	ldr	r3, [r7, #32]
 8011924:	2b00      	cmp	r3, #0
 8011926:	d01e      	beq.n	8011966 <osMailGet+0xca>
 8011928:	4b15      	ldr	r3, [pc, #84]	; (8011980 <osMailGet+0xe4>)
 801192a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801192e:	601a      	str	r2, [r3, #0]
 8011930:	f3bf 8f4f 	dsb	sy
 8011934:	f3bf 8f6f 	isb	sy
 8011938:	e015      	b.n	8011966 <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 801193a:	68bb      	ldr	r3, [r7, #8]
 801193c:	6858      	ldr	r0, [r3, #4]
 801193e:	f107 0314 	add.w	r3, r7, #20
 8011942:	3304      	adds	r3, #4
 8011944:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011946:	4619      	mov	r1, r3
 8011948:	f000 fc82 	bl	8012250 <xQueueReceive>
 801194c:	4603      	mov	r3, r0
 801194e:	2b01      	cmp	r3, #1
 8011950:	d102      	bne.n	8011958 <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 8011952:	2320      	movs	r3, #32
 8011954:	617b      	str	r3, [r7, #20]
 8011956:	e006      	b.n	8011966 <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8011958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801195a:	2b00      	cmp	r3, #0
 801195c:	d101      	bne.n	8011962 <osMailGet+0xc6>
 801195e:	2300      	movs	r3, #0
 8011960:	e000      	b.n	8011964 <osMailGet+0xc8>
 8011962:	2340      	movs	r3, #64	; 0x40
 8011964:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8011966:	68fb      	ldr	r3, [r7, #12]
 8011968:	461c      	mov	r4, r3
 801196a:	f107 0314 	add.w	r3, r7, #20
 801196e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011972:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8011976:	68f8      	ldr	r0, [r7, #12]
 8011978:	372c      	adds	r7, #44	; 0x2c
 801197a:	46bd      	mov	sp, r7
 801197c:	bd90      	pop	{r4, r7, pc}
 801197e:	bf00      	nop
 8011980:	e000ed04 	.word	0xe000ed04

08011984 <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 8011984:	b580      	push	{r7, lr}
 8011986:	b082      	sub	sp, #8
 8011988:	af00      	add	r7, sp, #0
 801198a:	6078      	str	r0, [r7, #4]
 801198c:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	2b00      	cmp	r3, #0
 8011992:	d101      	bne.n	8011998 <osMailFree+0x14>
    return osErrorParameter;
 8011994:	2380      	movs	r3, #128	; 0x80
 8011996:	e006      	b.n	80119a6 <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	689b      	ldr	r3, [r3, #8]
 801199c:	6839      	ldr	r1, [r7, #0]
 801199e:	4618      	mov	r0, r3
 80119a0:	f7ff fe8f 	bl	80116c2 <osPoolFree>
 80119a4:	4603      	mov	r3, r0
}
 80119a6:	4618      	mov	r0, r3
 80119a8:	3708      	adds	r7, #8
 80119aa:	46bd      	mov	sp, r7
 80119ac:	bd80      	pop	{r7, pc}

080119ae <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80119ae:	b480      	push	{r7}
 80119b0:	b083      	sub	sp, #12
 80119b2:	af00      	add	r7, sp, #0
 80119b4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	f103 0208 	add.w	r2, r3, #8
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	f04f 32ff 	mov.w	r2, #4294967295
 80119c6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	f103 0208 	add.w	r2, r3, #8
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	f103 0208 	add.w	r2, r3, #8
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	2200      	movs	r2, #0
 80119e0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80119e2:	bf00      	nop
 80119e4:	370c      	adds	r7, #12
 80119e6:	46bd      	mov	sp, r7
 80119e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ec:	4770      	bx	lr

080119ee <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80119ee:	b480      	push	{r7}
 80119f0:	b083      	sub	sp, #12
 80119f2:	af00      	add	r7, sp, #0
 80119f4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	2200      	movs	r2, #0
 80119fa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80119fc:	bf00      	nop
 80119fe:	370c      	adds	r7, #12
 8011a00:	46bd      	mov	sp, r7
 8011a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a06:	4770      	bx	lr

08011a08 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011a08:	b480      	push	{r7}
 8011a0a:	b085      	sub	sp, #20
 8011a0c:	af00      	add	r7, sp, #0
 8011a0e:	6078      	str	r0, [r7, #4]
 8011a10:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	685b      	ldr	r3, [r3, #4]
 8011a16:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8011a18:	683b      	ldr	r3, [r7, #0]
 8011a1a:	68fa      	ldr	r2, [r7, #12]
 8011a1c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8011a1e:	68fb      	ldr	r3, [r7, #12]
 8011a20:	689a      	ldr	r2, [r3, #8]
 8011a22:	683b      	ldr	r3, [r7, #0]
 8011a24:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011a26:	68fb      	ldr	r3, [r7, #12]
 8011a28:	689b      	ldr	r3, [r3, #8]
 8011a2a:	683a      	ldr	r2, [r7, #0]
 8011a2c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8011a2e:	68fb      	ldr	r3, [r7, #12]
 8011a30:	683a      	ldr	r2, [r7, #0]
 8011a32:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8011a34:	683b      	ldr	r3, [r7, #0]
 8011a36:	687a      	ldr	r2, [r7, #4]
 8011a38:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	1c5a      	adds	r2, r3, #1
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	601a      	str	r2, [r3, #0]
}
 8011a44:	bf00      	nop
 8011a46:	3714      	adds	r7, #20
 8011a48:	46bd      	mov	sp, r7
 8011a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a4e:	4770      	bx	lr

08011a50 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011a50:	b480      	push	{r7}
 8011a52:	b085      	sub	sp, #20
 8011a54:	af00      	add	r7, sp, #0
 8011a56:	6078      	str	r0, [r7, #4]
 8011a58:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8011a5a:	683b      	ldr	r3, [r7, #0]
 8011a5c:	681b      	ldr	r3, [r3, #0]
 8011a5e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8011a60:	68bb      	ldr	r3, [r7, #8]
 8011a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a66:	d103      	bne.n	8011a70 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	691b      	ldr	r3, [r3, #16]
 8011a6c:	60fb      	str	r3, [r7, #12]
 8011a6e:	e00c      	b.n	8011a8a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	3308      	adds	r3, #8
 8011a74:	60fb      	str	r3, [r7, #12]
 8011a76:	e002      	b.n	8011a7e <vListInsert+0x2e>
 8011a78:	68fb      	ldr	r3, [r7, #12]
 8011a7a:	685b      	ldr	r3, [r3, #4]
 8011a7c:	60fb      	str	r3, [r7, #12]
 8011a7e:	68fb      	ldr	r3, [r7, #12]
 8011a80:	685b      	ldr	r3, [r3, #4]
 8011a82:	681b      	ldr	r3, [r3, #0]
 8011a84:	68ba      	ldr	r2, [r7, #8]
 8011a86:	429a      	cmp	r2, r3
 8011a88:	d2f6      	bcs.n	8011a78 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8011a8a:	68fb      	ldr	r3, [r7, #12]
 8011a8c:	685a      	ldr	r2, [r3, #4]
 8011a8e:	683b      	ldr	r3, [r7, #0]
 8011a90:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8011a92:	683b      	ldr	r3, [r7, #0]
 8011a94:	685b      	ldr	r3, [r3, #4]
 8011a96:	683a      	ldr	r2, [r7, #0]
 8011a98:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8011a9a:	683b      	ldr	r3, [r7, #0]
 8011a9c:	68fa      	ldr	r2, [r7, #12]
 8011a9e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8011aa0:	68fb      	ldr	r3, [r7, #12]
 8011aa2:	683a      	ldr	r2, [r7, #0]
 8011aa4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8011aa6:	683b      	ldr	r3, [r7, #0]
 8011aa8:	687a      	ldr	r2, [r7, #4]
 8011aaa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	681b      	ldr	r3, [r3, #0]
 8011ab0:	1c5a      	adds	r2, r3, #1
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	601a      	str	r2, [r3, #0]
}
 8011ab6:	bf00      	nop
 8011ab8:	3714      	adds	r7, #20
 8011aba:	46bd      	mov	sp, r7
 8011abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ac0:	4770      	bx	lr

08011ac2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8011ac2:	b480      	push	{r7}
 8011ac4:	b085      	sub	sp, #20
 8011ac6:	af00      	add	r7, sp, #0
 8011ac8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	691b      	ldr	r3, [r3, #16]
 8011ace:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	685b      	ldr	r3, [r3, #4]
 8011ad4:	687a      	ldr	r2, [r7, #4]
 8011ad6:	6892      	ldr	r2, [r2, #8]
 8011ad8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	689b      	ldr	r3, [r3, #8]
 8011ade:	687a      	ldr	r2, [r7, #4]
 8011ae0:	6852      	ldr	r2, [r2, #4]
 8011ae2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8011ae4:	68fb      	ldr	r3, [r7, #12]
 8011ae6:	685b      	ldr	r3, [r3, #4]
 8011ae8:	687a      	ldr	r2, [r7, #4]
 8011aea:	429a      	cmp	r2, r3
 8011aec:	d103      	bne.n	8011af6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	689a      	ldr	r2, [r3, #8]
 8011af2:	68fb      	ldr	r3, [r7, #12]
 8011af4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	2200      	movs	r2, #0
 8011afa:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8011afc:	68fb      	ldr	r3, [r7, #12]
 8011afe:	681b      	ldr	r3, [r3, #0]
 8011b00:	1e5a      	subs	r2, r3, #1
 8011b02:	68fb      	ldr	r3, [r7, #12]
 8011b04:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8011b06:	68fb      	ldr	r3, [r7, #12]
 8011b08:	681b      	ldr	r3, [r3, #0]
}
 8011b0a:	4618      	mov	r0, r3
 8011b0c:	3714      	adds	r7, #20
 8011b0e:	46bd      	mov	sp, r7
 8011b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b14:	4770      	bx	lr
	...

08011b18 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011b18:	b580      	push	{r7, lr}
 8011b1a:	b084      	sub	sp, #16
 8011b1c:	af00      	add	r7, sp, #0
 8011b1e:	6078      	str	r0, [r7, #4]
 8011b20:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011b26:	68fb      	ldr	r3, [r7, #12]
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	d109      	bne.n	8011b40 <xQueueGenericReset+0x28>
	__asm volatile
 8011b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b30:	f383 8811 	msr	BASEPRI, r3
 8011b34:	f3bf 8f6f 	isb	sy
 8011b38:	f3bf 8f4f 	dsb	sy
 8011b3c:	60bb      	str	r3, [r7, #8]
 8011b3e:	e7fe      	b.n	8011b3e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8011b40:	f002 f9ec 	bl	8013f1c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8011b44:	68fb      	ldr	r3, [r7, #12]
 8011b46:	681a      	ldr	r2, [r3, #0]
 8011b48:	68fb      	ldr	r3, [r7, #12]
 8011b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011b4c:	68f9      	ldr	r1, [r7, #12]
 8011b4e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011b50:	fb01 f303 	mul.w	r3, r1, r3
 8011b54:	441a      	add	r2, r3
 8011b56:	68fb      	ldr	r3, [r7, #12]
 8011b58:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	2200      	movs	r2, #0
 8011b5e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8011b60:	68fb      	ldr	r3, [r7, #12]
 8011b62:	681a      	ldr	r2, [r3, #0]
 8011b64:	68fb      	ldr	r3, [r7, #12]
 8011b66:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8011b68:	68fb      	ldr	r3, [r7, #12]
 8011b6a:	681a      	ldr	r2, [r3, #0]
 8011b6c:	68fb      	ldr	r3, [r7, #12]
 8011b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011b70:	3b01      	subs	r3, #1
 8011b72:	68f9      	ldr	r1, [r7, #12]
 8011b74:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011b76:	fb01 f303 	mul.w	r3, r1, r3
 8011b7a:	441a      	add	r2, r3
 8011b7c:	68fb      	ldr	r3, [r7, #12]
 8011b7e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8011b80:	68fb      	ldr	r3, [r7, #12]
 8011b82:	22ff      	movs	r2, #255	; 0xff
 8011b84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8011b88:	68fb      	ldr	r3, [r7, #12]
 8011b8a:	22ff      	movs	r2, #255	; 0xff
 8011b8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8011b90:	683b      	ldr	r3, [r7, #0]
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d114      	bne.n	8011bc0 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011b96:	68fb      	ldr	r3, [r7, #12]
 8011b98:	691b      	ldr	r3, [r3, #16]
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d01a      	beq.n	8011bd4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011b9e:	68fb      	ldr	r3, [r7, #12]
 8011ba0:	3310      	adds	r3, #16
 8011ba2:	4618      	mov	r0, r3
 8011ba4:	f001 fada 	bl	801315c <xTaskRemoveFromEventList>
 8011ba8:	4603      	mov	r3, r0
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d012      	beq.n	8011bd4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8011bae:	4b0d      	ldr	r3, [pc, #52]	; (8011be4 <xQueueGenericReset+0xcc>)
 8011bb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011bb4:	601a      	str	r2, [r3, #0]
 8011bb6:	f3bf 8f4f 	dsb	sy
 8011bba:	f3bf 8f6f 	isb	sy
 8011bbe:	e009      	b.n	8011bd4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8011bc0:	68fb      	ldr	r3, [r7, #12]
 8011bc2:	3310      	adds	r3, #16
 8011bc4:	4618      	mov	r0, r3
 8011bc6:	f7ff fef2 	bl	80119ae <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8011bca:	68fb      	ldr	r3, [r7, #12]
 8011bcc:	3324      	adds	r3, #36	; 0x24
 8011bce:	4618      	mov	r0, r3
 8011bd0:	f7ff feed 	bl	80119ae <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8011bd4:	f002 f9d0 	bl	8013f78 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8011bd8:	2301      	movs	r3, #1
}
 8011bda:	4618      	mov	r0, r3
 8011bdc:	3710      	adds	r7, #16
 8011bde:	46bd      	mov	sp, r7
 8011be0:	bd80      	pop	{r7, pc}
 8011be2:	bf00      	nop
 8011be4:	e000ed04 	.word	0xe000ed04

08011be8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8011be8:	b580      	push	{r7, lr}
 8011bea:	b08e      	sub	sp, #56	; 0x38
 8011bec:	af02      	add	r7, sp, #8
 8011bee:	60f8      	str	r0, [r7, #12]
 8011bf0:	60b9      	str	r1, [r7, #8]
 8011bf2:	607a      	str	r2, [r7, #4]
 8011bf4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011bf6:	68fb      	ldr	r3, [r7, #12]
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d109      	bne.n	8011c10 <xQueueGenericCreateStatic+0x28>
 8011bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c00:	f383 8811 	msr	BASEPRI, r3
 8011c04:	f3bf 8f6f 	isb	sy
 8011c08:	f3bf 8f4f 	dsb	sy
 8011c0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8011c0e:	e7fe      	b.n	8011c0e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8011c10:	683b      	ldr	r3, [r7, #0]
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d109      	bne.n	8011c2a <xQueueGenericCreateStatic+0x42>
 8011c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c1a:	f383 8811 	msr	BASEPRI, r3
 8011c1e:	f3bf 8f6f 	isb	sy
 8011c22:	f3bf 8f4f 	dsb	sy
 8011c26:	627b      	str	r3, [r7, #36]	; 0x24
 8011c28:	e7fe      	b.n	8011c28 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	d002      	beq.n	8011c36 <xQueueGenericCreateStatic+0x4e>
 8011c30:	68bb      	ldr	r3, [r7, #8]
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d001      	beq.n	8011c3a <xQueueGenericCreateStatic+0x52>
 8011c36:	2301      	movs	r3, #1
 8011c38:	e000      	b.n	8011c3c <xQueueGenericCreateStatic+0x54>
 8011c3a:	2300      	movs	r3, #0
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d109      	bne.n	8011c54 <xQueueGenericCreateStatic+0x6c>
 8011c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c44:	f383 8811 	msr	BASEPRI, r3
 8011c48:	f3bf 8f6f 	isb	sy
 8011c4c:	f3bf 8f4f 	dsb	sy
 8011c50:	623b      	str	r3, [r7, #32]
 8011c52:	e7fe      	b.n	8011c52 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d102      	bne.n	8011c60 <xQueueGenericCreateStatic+0x78>
 8011c5a:	68bb      	ldr	r3, [r7, #8]
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d101      	bne.n	8011c64 <xQueueGenericCreateStatic+0x7c>
 8011c60:	2301      	movs	r3, #1
 8011c62:	e000      	b.n	8011c66 <xQueueGenericCreateStatic+0x7e>
 8011c64:	2300      	movs	r3, #0
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d109      	bne.n	8011c7e <xQueueGenericCreateStatic+0x96>
 8011c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c6e:	f383 8811 	msr	BASEPRI, r3
 8011c72:	f3bf 8f6f 	isb	sy
 8011c76:	f3bf 8f4f 	dsb	sy
 8011c7a:	61fb      	str	r3, [r7, #28]
 8011c7c:	e7fe      	b.n	8011c7c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8011c7e:	2348      	movs	r3, #72	; 0x48
 8011c80:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8011c82:	697b      	ldr	r3, [r7, #20]
 8011c84:	2b48      	cmp	r3, #72	; 0x48
 8011c86:	d009      	beq.n	8011c9c <xQueueGenericCreateStatic+0xb4>
 8011c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c8c:	f383 8811 	msr	BASEPRI, r3
 8011c90:	f3bf 8f6f 	isb	sy
 8011c94:	f3bf 8f4f 	dsb	sy
 8011c98:	61bb      	str	r3, [r7, #24]
 8011c9a:	e7fe      	b.n	8011c9a <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011c9c:	683b      	ldr	r3, [r7, #0]
 8011c9e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8011ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d00d      	beq.n	8011cc2 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8011ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ca8:	2201      	movs	r2, #1
 8011caa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011cae:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8011cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cb4:	9300      	str	r3, [sp, #0]
 8011cb6:	4613      	mov	r3, r2
 8011cb8:	687a      	ldr	r2, [r7, #4]
 8011cba:	68b9      	ldr	r1, [r7, #8]
 8011cbc:	68f8      	ldr	r0, [r7, #12]
 8011cbe:	f000 f842 	bl	8011d46 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8011cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8011cc4:	4618      	mov	r0, r3
 8011cc6:	3730      	adds	r7, #48	; 0x30
 8011cc8:	46bd      	mov	sp, r7
 8011cca:	bd80      	pop	{r7, pc}

08011ccc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8011ccc:	b580      	push	{r7, lr}
 8011cce:	b08a      	sub	sp, #40	; 0x28
 8011cd0:	af02      	add	r7, sp, #8
 8011cd2:	60f8      	str	r0, [r7, #12]
 8011cd4:	60b9      	str	r1, [r7, #8]
 8011cd6:	4613      	mov	r3, r2
 8011cd8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d109      	bne.n	8011cf4 <xQueueGenericCreate+0x28>
 8011ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ce4:	f383 8811 	msr	BASEPRI, r3
 8011ce8:	f3bf 8f6f 	isb	sy
 8011cec:	f3bf 8f4f 	dsb	sy
 8011cf0:	613b      	str	r3, [r7, #16]
 8011cf2:	e7fe      	b.n	8011cf2 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8011cf4:	68bb      	ldr	r3, [r7, #8]
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	d102      	bne.n	8011d00 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8011cfa:	2300      	movs	r3, #0
 8011cfc:	61fb      	str	r3, [r7, #28]
 8011cfe:	e004      	b.n	8011d0a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011d00:	68fb      	ldr	r3, [r7, #12]
 8011d02:	68ba      	ldr	r2, [r7, #8]
 8011d04:	fb02 f303 	mul.w	r3, r2, r3
 8011d08:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8011d0a:	69fb      	ldr	r3, [r7, #28]
 8011d0c:	3348      	adds	r3, #72	; 0x48
 8011d0e:	4618      	mov	r0, r3
 8011d10:	f002 fa1e 	bl	8014150 <pvPortMalloc>
 8011d14:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8011d16:	69bb      	ldr	r3, [r7, #24]
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	d00f      	beq.n	8011d3c <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8011d1c:	69bb      	ldr	r3, [r7, #24]
 8011d1e:	3348      	adds	r3, #72	; 0x48
 8011d20:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8011d22:	69bb      	ldr	r3, [r7, #24]
 8011d24:	2200      	movs	r2, #0
 8011d26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011d2a:	79fa      	ldrb	r2, [r7, #7]
 8011d2c:	69bb      	ldr	r3, [r7, #24]
 8011d2e:	9300      	str	r3, [sp, #0]
 8011d30:	4613      	mov	r3, r2
 8011d32:	697a      	ldr	r2, [r7, #20]
 8011d34:	68b9      	ldr	r1, [r7, #8]
 8011d36:	68f8      	ldr	r0, [r7, #12]
 8011d38:	f000 f805 	bl	8011d46 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8011d3c:	69bb      	ldr	r3, [r7, #24]
	}
 8011d3e:	4618      	mov	r0, r3
 8011d40:	3720      	adds	r7, #32
 8011d42:	46bd      	mov	sp, r7
 8011d44:	bd80      	pop	{r7, pc}

08011d46 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8011d46:	b580      	push	{r7, lr}
 8011d48:	b084      	sub	sp, #16
 8011d4a:	af00      	add	r7, sp, #0
 8011d4c:	60f8      	str	r0, [r7, #12]
 8011d4e:	60b9      	str	r1, [r7, #8]
 8011d50:	607a      	str	r2, [r7, #4]
 8011d52:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8011d54:	68bb      	ldr	r3, [r7, #8]
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d103      	bne.n	8011d62 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8011d5a:	69bb      	ldr	r3, [r7, #24]
 8011d5c:	69ba      	ldr	r2, [r7, #24]
 8011d5e:	601a      	str	r2, [r3, #0]
 8011d60:	e002      	b.n	8011d68 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8011d62:	69bb      	ldr	r3, [r7, #24]
 8011d64:	687a      	ldr	r2, [r7, #4]
 8011d66:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8011d68:	69bb      	ldr	r3, [r7, #24]
 8011d6a:	68fa      	ldr	r2, [r7, #12]
 8011d6c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8011d6e:	69bb      	ldr	r3, [r7, #24]
 8011d70:	68ba      	ldr	r2, [r7, #8]
 8011d72:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8011d74:	2101      	movs	r1, #1
 8011d76:	69b8      	ldr	r0, [r7, #24]
 8011d78:	f7ff fece 	bl	8011b18 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8011d7c:	bf00      	nop
 8011d7e:	3710      	adds	r7, #16
 8011d80:	46bd      	mov	sp, r7
 8011d82:	bd80      	pop	{r7, pc}

08011d84 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8011d84:	b580      	push	{r7, lr}
 8011d86:	b082      	sub	sp, #8
 8011d88:	af00      	add	r7, sp, #0
 8011d8a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d00e      	beq.n	8011db0 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	2200      	movs	r2, #0
 8011d96:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	2200      	movs	r2, #0
 8011d9c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	2200      	movs	r2, #0
 8011da2:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8011da4:	2300      	movs	r3, #0
 8011da6:	2200      	movs	r2, #0
 8011da8:	2100      	movs	r1, #0
 8011daa:	6878      	ldr	r0, [r7, #4]
 8011dac:	f000 f838 	bl	8011e20 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8011db0:	bf00      	nop
 8011db2:	3708      	adds	r7, #8
 8011db4:	46bd      	mov	sp, r7
 8011db6:	bd80      	pop	{r7, pc}

08011db8 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8011db8:	b580      	push	{r7, lr}
 8011dba:	b086      	sub	sp, #24
 8011dbc:	af00      	add	r7, sp, #0
 8011dbe:	4603      	mov	r3, r0
 8011dc0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8011dc2:	2301      	movs	r3, #1
 8011dc4:	617b      	str	r3, [r7, #20]
 8011dc6:	2300      	movs	r3, #0
 8011dc8:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8011dca:	79fb      	ldrb	r3, [r7, #7]
 8011dcc:	461a      	mov	r2, r3
 8011dce:	6939      	ldr	r1, [r7, #16]
 8011dd0:	6978      	ldr	r0, [r7, #20]
 8011dd2:	f7ff ff7b 	bl	8011ccc <xQueueGenericCreate>
 8011dd6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8011dd8:	68f8      	ldr	r0, [r7, #12]
 8011dda:	f7ff ffd3 	bl	8011d84 <prvInitialiseMutex>

		return pxNewQueue;
 8011dde:	68fb      	ldr	r3, [r7, #12]
	}
 8011de0:	4618      	mov	r0, r3
 8011de2:	3718      	adds	r7, #24
 8011de4:	46bd      	mov	sp, r7
 8011de6:	bd80      	pop	{r7, pc}

08011de8 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8011de8:	b580      	push	{r7, lr}
 8011dea:	b088      	sub	sp, #32
 8011dec:	af02      	add	r7, sp, #8
 8011dee:	4603      	mov	r3, r0
 8011df0:	6039      	str	r1, [r7, #0]
 8011df2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8011df4:	2301      	movs	r3, #1
 8011df6:	617b      	str	r3, [r7, #20]
 8011df8:	2300      	movs	r3, #0
 8011dfa:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8011dfc:	79fb      	ldrb	r3, [r7, #7]
 8011dfe:	9300      	str	r3, [sp, #0]
 8011e00:	683b      	ldr	r3, [r7, #0]
 8011e02:	2200      	movs	r2, #0
 8011e04:	6939      	ldr	r1, [r7, #16]
 8011e06:	6978      	ldr	r0, [r7, #20]
 8011e08:	f7ff feee 	bl	8011be8 <xQueueGenericCreateStatic>
 8011e0c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8011e0e:	68f8      	ldr	r0, [r7, #12]
 8011e10:	f7ff ffb8 	bl	8011d84 <prvInitialiseMutex>

		return pxNewQueue;
 8011e14:	68fb      	ldr	r3, [r7, #12]
	}
 8011e16:	4618      	mov	r0, r3
 8011e18:	3718      	adds	r7, #24
 8011e1a:	46bd      	mov	sp, r7
 8011e1c:	bd80      	pop	{r7, pc}
	...

08011e20 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8011e20:	b580      	push	{r7, lr}
 8011e22:	b08e      	sub	sp, #56	; 0x38
 8011e24:	af00      	add	r7, sp, #0
 8011e26:	60f8      	str	r0, [r7, #12]
 8011e28:	60b9      	str	r1, [r7, #8]
 8011e2a:	607a      	str	r2, [r7, #4]
 8011e2c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8011e2e:	2300      	movs	r3, #0
 8011e30:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d109      	bne.n	8011e50 <xQueueGenericSend+0x30>
 8011e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e40:	f383 8811 	msr	BASEPRI, r3
 8011e44:	f3bf 8f6f 	isb	sy
 8011e48:	f3bf 8f4f 	dsb	sy
 8011e4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8011e4e:	e7fe      	b.n	8011e4e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011e50:	68bb      	ldr	r3, [r7, #8]
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d103      	bne.n	8011e5e <xQueueGenericSend+0x3e>
 8011e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d101      	bne.n	8011e62 <xQueueGenericSend+0x42>
 8011e5e:	2301      	movs	r3, #1
 8011e60:	e000      	b.n	8011e64 <xQueueGenericSend+0x44>
 8011e62:	2300      	movs	r3, #0
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d109      	bne.n	8011e7c <xQueueGenericSend+0x5c>
 8011e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e6c:	f383 8811 	msr	BASEPRI, r3
 8011e70:	f3bf 8f6f 	isb	sy
 8011e74:	f3bf 8f4f 	dsb	sy
 8011e78:	627b      	str	r3, [r7, #36]	; 0x24
 8011e7a:	e7fe      	b.n	8011e7a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011e7c:	683b      	ldr	r3, [r7, #0]
 8011e7e:	2b02      	cmp	r3, #2
 8011e80:	d103      	bne.n	8011e8a <xQueueGenericSend+0x6a>
 8011e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011e86:	2b01      	cmp	r3, #1
 8011e88:	d101      	bne.n	8011e8e <xQueueGenericSend+0x6e>
 8011e8a:	2301      	movs	r3, #1
 8011e8c:	e000      	b.n	8011e90 <xQueueGenericSend+0x70>
 8011e8e:	2300      	movs	r3, #0
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d109      	bne.n	8011ea8 <xQueueGenericSend+0x88>
 8011e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e98:	f383 8811 	msr	BASEPRI, r3
 8011e9c:	f3bf 8f6f 	isb	sy
 8011ea0:	f3bf 8f4f 	dsb	sy
 8011ea4:	623b      	str	r3, [r7, #32]
 8011ea6:	e7fe      	b.n	8011ea6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011ea8:	f001 fb14 	bl	80134d4 <xTaskGetSchedulerState>
 8011eac:	4603      	mov	r3, r0
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d102      	bne.n	8011eb8 <xQueueGenericSend+0x98>
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d101      	bne.n	8011ebc <xQueueGenericSend+0x9c>
 8011eb8:	2301      	movs	r3, #1
 8011eba:	e000      	b.n	8011ebe <xQueueGenericSend+0x9e>
 8011ebc:	2300      	movs	r3, #0
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d109      	bne.n	8011ed6 <xQueueGenericSend+0xb6>
 8011ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ec6:	f383 8811 	msr	BASEPRI, r3
 8011eca:	f3bf 8f6f 	isb	sy
 8011ece:	f3bf 8f4f 	dsb	sy
 8011ed2:	61fb      	str	r3, [r7, #28]
 8011ed4:	e7fe      	b.n	8011ed4 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011ed6:	f002 f821 	bl	8013f1c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011edc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011ee2:	429a      	cmp	r2, r3
 8011ee4:	d302      	bcc.n	8011eec <xQueueGenericSend+0xcc>
 8011ee6:	683b      	ldr	r3, [r7, #0]
 8011ee8:	2b02      	cmp	r3, #2
 8011eea:	d129      	bne.n	8011f40 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011eec:	683a      	ldr	r2, [r7, #0]
 8011eee:	68b9      	ldr	r1, [r7, #8]
 8011ef0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011ef2:	f000 fc26 	bl	8012742 <prvCopyDataToQueue>
 8011ef6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d010      	beq.n	8011f22 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f02:	3324      	adds	r3, #36	; 0x24
 8011f04:	4618      	mov	r0, r3
 8011f06:	f001 f929 	bl	801315c <xTaskRemoveFromEventList>
 8011f0a:	4603      	mov	r3, r0
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d013      	beq.n	8011f38 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8011f10:	4b3f      	ldr	r3, [pc, #252]	; (8012010 <xQueueGenericSend+0x1f0>)
 8011f12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011f16:	601a      	str	r2, [r3, #0]
 8011f18:	f3bf 8f4f 	dsb	sy
 8011f1c:	f3bf 8f6f 	isb	sy
 8011f20:	e00a      	b.n	8011f38 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8011f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d007      	beq.n	8011f38 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011f28:	4b39      	ldr	r3, [pc, #228]	; (8012010 <xQueueGenericSend+0x1f0>)
 8011f2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011f2e:	601a      	str	r2, [r3, #0]
 8011f30:	f3bf 8f4f 	dsb	sy
 8011f34:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011f38:	f002 f81e 	bl	8013f78 <vPortExitCritical>
				return pdPASS;
 8011f3c:	2301      	movs	r3, #1
 8011f3e:	e063      	b.n	8012008 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	d103      	bne.n	8011f4e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011f46:	f002 f817 	bl	8013f78 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8011f4a:	2300      	movs	r3, #0
 8011f4c:	e05c      	b.n	8012008 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d106      	bne.n	8011f62 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011f54:	f107 0314 	add.w	r3, r7, #20
 8011f58:	4618      	mov	r0, r3
 8011f5a:	f001 f961 	bl	8013220 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011f5e:	2301      	movs	r3, #1
 8011f60:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011f62:	f002 f809 	bl	8013f78 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011f66:	f000 ff15 	bl	8012d94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011f6a:	f001 ffd7 	bl	8013f1c <vPortEnterCritical>
 8011f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011f74:	b25b      	sxtb	r3, r3
 8011f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f7a:	d103      	bne.n	8011f84 <xQueueGenericSend+0x164>
 8011f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f7e:	2200      	movs	r2, #0
 8011f80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011f8a:	b25b      	sxtb	r3, r3
 8011f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f90:	d103      	bne.n	8011f9a <xQueueGenericSend+0x17a>
 8011f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f94:	2200      	movs	r2, #0
 8011f96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011f9a:	f001 ffed 	bl	8013f78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011f9e:	1d3a      	adds	r2, r7, #4
 8011fa0:	f107 0314 	add.w	r3, r7, #20
 8011fa4:	4611      	mov	r1, r2
 8011fa6:	4618      	mov	r0, r3
 8011fa8:	f001 f950 	bl	801324c <xTaskCheckForTimeOut>
 8011fac:	4603      	mov	r3, r0
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d124      	bne.n	8011ffc <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8011fb2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011fb4:	f000 fcbd 	bl	8012932 <prvIsQueueFull>
 8011fb8:	4603      	mov	r3, r0
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d018      	beq.n	8011ff0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8011fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fc0:	3310      	adds	r3, #16
 8011fc2:	687a      	ldr	r2, [r7, #4]
 8011fc4:	4611      	mov	r1, r2
 8011fc6:	4618      	mov	r0, r3
 8011fc8:	f001 f8a4 	bl	8013114 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8011fcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011fce:	f000 fc48 	bl	8012862 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8011fd2:	f000 feed 	bl	8012db0 <xTaskResumeAll>
 8011fd6:	4603      	mov	r3, r0
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	f47f af7c 	bne.w	8011ed6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8011fde:	4b0c      	ldr	r3, [pc, #48]	; (8012010 <xQueueGenericSend+0x1f0>)
 8011fe0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011fe4:	601a      	str	r2, [r3, #0]
 8011fe6:	f3bf 8f4f 	dsb	sy
 8011fea:	f3bf 8f6f 	isb	sy
 8011fee:	e772      	b.n	8011ed6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8011ff0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011ff2:	f000 fc36 	bl	8012862 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011ff6:	f000 fedb 	bl	8012db0 <xTaskResumeAll>
 8011ffa:	e76c      	b.n	8011ed6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8011ffc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011ffe:	f000 fc30 	bl	8012862 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012002:	f000 fed5 	bl	8012db0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8012006:	2300      	movs	r3, #0
		}
	}
}
 8012008:	4618      	mov	r0, r3
 801200a:	3738      	adds	r7, #56	; 0x38
 801200c:	46bd      	mov	sp, r7
 801200e:	bd80      	pop	{r7, pc}
 8012010:	e000ed04 	.word	0xe000ed04

08012014 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8012014:	b580      	push	{r7, lr}
 8012016:	b08e      	sub	sp, #56	; 0x38
 8012018:	af00      	add	r7, sp, #0
 801201a:	60f8      	str	r0, [r7, #12]
 801201c:	60b9      	str	r1, [r7, #8]
 801201e:	607a      	str	r2, [r7, #4]
 8012020:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8012022:	68fb      	ldr	r3, [r7, #12]
 8012024:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012028:	2b00      	cmp	r3, #0
 801202a:	d109      	bne.n	8012040 <xQueueGenericSendFromISR+0x2c>
 801202c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012030:	f383 8811 	msr	BASEPRI, r3
 8012034:	f3bf 8f6f 	isb	sy
 8012038:	f3bf 8f4f 	dsb	sy
 801203c:	627b      	str	r3, [r7, #36]	; 0x24
 801203e:	e7fe      	b.n	801203e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012040:	68bb      	ldr	r3, [r7, #8]
 8012042:	2b00      	cmp	r3, #0
 8012044:	d103      	bne.n	801204e <xQueueGenericSendFromISR+0x3a>
 8012046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801204a:	2b00      	cmp	r3, #0
 801204c:	d101      	bne.n	8012052 <xQueueGenericSendFromISR+0x3e>
 801204e:	2301      	movs	r3, #1
 8012050:	e000      	b.n	8012054 <xQueueGenericSendFromISR+0x40>
 8012052:	2300      	movs	r3, #0
 8012054:	2b00      	cmp	r3, #0
 8012056:	d109      	bne.n	801206c <xQueueGenericSendFromISR+0x58>
 8012058:	f04f 0350 	mov.w	r3, #80	; 0x50
 801205c:	f383 8811 	msr	BASEPRI, r3
 8012060:	f3bf 8f6f 	isb	sy
 8012064:	f3bf 8f4f 	dsb	sy
 8012068:	623b      	str	r3, [r7, #32]
 801206a:	e7fe      	b.n	801206a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801206c:	683b      	ldr	r3, [r7, #0]
 801206e:	2b02      	cmp	r3, #2
 8012070:	d103      	bne.n	801207a <xQueueGenericSendFromISR+0x66>
 8012072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012076:	2b01      	cmp	r3, #1
 8012078:	d101      	bne.n	801207e <xQueueGenericSendFromISR+0x6a>
 801207a:	2301      	movs	r3, #1
 801207c:	e000      	b.n	8012080 <xQueueGenericSendFromISR+0x6c>
 801207e:	2300      	movs	r3, #0
 8012080:	2b00      	cmp	r3, #0
 8012082:	d109      	bne.n	8012098 <xQueueGenericSendFromISR+0x84>
 8012084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012088:	f383 8811 	msr	BASEPRI, r3
 801208c:	f3bf 8f6f 	isb	sy
 8012090:	f3bf 8f4f 	dsb	sy
 8012094:	61fb      	str	r3, [r7, #28]
 8012096:	e7fe      	b.n	8012096 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012098:	f002 f81c 	bl	80140d4 <vPortValidateInterruptPriority>
	__asm volatile
 801209c:	f3ef 8211 	mrs	r2, BASEPRI
 80120a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120a4:	f383 8811 	msr	BASEPRI, r3
 80120a8:	f3bf 8f6f 	isb	sy
 80120ac:	f3bf 8f4f 	dsb	sy
 80120b0:	61ba      	str	r2, [r7, #24]
 80120b2:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80120b4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80120b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80120b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80120bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80120c0:	429a      	cmp	r2, r3
 80120c2:	d302      	bcc.n	80120ca <xQueueGenericSendFromISR+0xb6>
 80120c4:	683b      	ldr	r3, [r7, #0]
 80120c6:	2b02      	cmp	r3, #2
 80120c8:	d12c      	bne.n	8012124 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80120ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80120d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80120d4:	683a      	ldr	r2, [r7, #0]
 80120d6:	68b9      	ldr	r1, [r7, #8]
 80120d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80120da:	f000 fb32 	bl	8012742 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80120de:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80120e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120e6:	d112      	bne.n	801210e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80120e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d016      	beq.n	801211e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80120f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120f2:	3324      	adds	r3, #36	; 0x24
 80120f4:	4618      	mov	r0, r3
 80120f6:	f001 f831 	bl	801315c <xTaskRemoveFromEventList>
 80120fa:	4603      	mov	r3, r0
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d00e      	beq.n	801211e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	2b00      	cmp	r3, #0
 8012104:	d00b      	beq.n	801211e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	2201      	movs	r2, #1
 801210a:	601a      	str	r2, [r3, #0]
 801210c:	e007      	b.n	801211e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801210e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012112:	3301      	adds	r3, #1
 8012114:	b2db      	uxtb	r3, r3
 8012116:	b25a      	sxtb	r2, r3
 8012118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801211a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801211e:	2301      	movs	r3, #1
 8012120:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8012122:	e001      	b.n	8012128 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012124:	2300      	movs	r3, #0
 8012126:	637b      	str	r3, [r7, #52]	; 0x34
 8012128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801212a:	613b      	str	r3, [r7, #16]
	__asm volatile
 801212c:	693b      	ldr	r3, [r7, #16]
 801212e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012134:	4618      	mov	r0, r3
 8012136:	3738      	adds	r7, #56	; 0x38
 8012138:	46bd      	mov	sp, r7
 801213a:	bd80      	pop	{r7, pc}

0801213c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801213c:	b580      	push	{r7, lr}
 801213e:	b08e      	sub	sp, #56	; 0x38
 8012140:	af00      	add	r7, sp, #0
 8012142:	6078      	str	r0, [r7, #4]
 8012144:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801214a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801214c:	2b00      	cmp	r3, #0
 801214e:	d109      	bne.n	8012164 <xQueueGiveFromISR+0x28>
	__asm volatile
 8012150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012154:	f383 8811 	msr	BASEPRI, r3
 8012158:	f3bf 8f6f 	isb	sy
 801215c:	f3bf 8f4f 	dsb	sy
 8012160:	623b      	str	r3, [r7, #32]
 8012162:	e7fe      	b.n	8012162 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012168:	2b00      	cmp	r3, #0
 801216a:	d009      	beq.n	8012180 <xQueueGiveFromISR+0x44>
 801216c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012170:	f383 8811 	msr	BASEPRI, r3
 8012174:	f3bf 8f6f 	isb	sy
 8012178:	f3bf 8f4f 	dsb	sy
 801217c:	61fb      	str	r3, [r7, #28]
 801217e:	e7fe      	b.n	801217e <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8012180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012182:	681b      	ldr	r3, [r3, #0]
 8012184:	2b00      	cmp	r3, #0
 8012186:	d103      	bne.n	8012190 <xQueueGiveFromISR+0x54>
 8012188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801218a:	685b      	ldr	r3, [r3, #4]
 801218c:	2b00      	cmp	r3, #0
 801218e:	d101      	bne.n	8012194 <xQueueGiveFromISR+0x58>
 8012190:	2301      	movs	r3, #1
 8012192:	e000      	b.n	8012196 <xQueueGiveFromISR+0x5a>
 8012194:	2300      	movs	r3, #0
 8012196:	2b00      	cmp	r3, #0
 8012198:	d109      	bne.n	80121ae <xQueueGiveFromISR+0x72>
 801219a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801219e:	f383 8811 	msr	BASEPRI, r3
 80121a2:	f3bf 8f6f 	isb	sy
 80121a6:	f3bf 8f4f 	dsb	sy
 80121aa:	61bb      	str	r3, [r7, #24]
 80121ac:	e7fe      	b.n	80121ac <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80121ae:	f001 ff91 	bl	80140d4 <vPortValidateInterruptPriority>
	__asm volatile
 80121b2:	f3ef 8211 	mrs	r2, BASEPRI
 80121b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121ba:	f383 8811 	msr	BASEPRI, r3
 80121be:	f3bf 8f6f 	isb	sy
 80121c2:	f3bf 8f4f 	dsb	sy
 80121c6:	617a      	str	r2, [r7, #20]
 80121c8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80121ca:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80121cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80121ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80121d2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80121d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80121d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80121da:	429a      	cmp	r2, r3
 80121dc:	d22b      	bcs.n	8012236 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80121de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80121e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80121e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121ea:	1c5a      	adds	r2, r3, #1
 80121ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121ee:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80121f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80121f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80121f8:	d112      	bne.n	8012220 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80121fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d016      	beq.n	8012230 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012204:	3324      	adds	r3, #36	; 0x24
 8012206:	4618      	mov	r0, r3
 8012208:	f000 ffa8 	bl	801315c <xTaskRemoveFromEventList>
 801220c:	4603      	mov	r3, r0
 801220e:	2b00      	cmp	r3, #0
 8012210:	d00e      	beq.n	8012230 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012212:	683b      	ldr	r3, [r7, #0]
 8012214:	2b00      	cmp	r3, #0
 8012216:	d00b      	beq.n	8012230 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012218:	683b      	ldr	r3, [r7, #0]
 801221a:	2201      	movs	r2, #1
 801221c:	601a      	str	r2, [r3, #0]
 801221e:	e007      	b.n	8012230 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012220:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012224:	3301      	adds	r3, #1
 8012226:	b2db      	uxtb	r3, r3
 8012228:	b25a      	sxtb	r2, r3
 801222a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801222c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012230:	2301      	movs	r3, #1
 8012232:	637b      	str	r3, [r7, #52]	; 0x34
 8012234:	e001      	b.n	801223a <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012236:	2300      	movs	r3, #0
 8012238:	637b      	str	r3, [r7, #52]	; 0x34
 801223a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801223c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 801223e:	68fb      	ldr	r3, [r7, #12]
 8012240:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012246:	4618      	mov	r0, r3
 8012248:	3738      	adds	r7, #56	; 0x38
 801224a:	46bd      	mov	sp, r7
 801224c:	bd80      	pop	{r7, pc}
	...

08012250 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8012250:	b580      	push	{r7, lr}
 8012252:	b08c      	sub	sp, #48	; 0x30
 8012254:	af00      	add	r7, sp, #0
 8012256:	60f8      	str	r0, [r7, #12]
 8012258:	60b9      	str	r1, [r7, #8]
 801225a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801225c:	2300      	movs	r3, #0
 801225e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8012260:	68fb      	ldr	r3, [r7, #12]
 8012262:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012266:	2b00      	cmp	r3, #0
 8012268:	d109      	bne.n	801227e <xQueueReceive+0x2e>
	__asm volatile
 801226a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801226e:	f383 8811 	msr	BASEPRI, r3
 8012272:	f3bf 8f6f 	isb	sy
 8012276:	f3bf 8f4f 	dsb	sy
 801227a:	623b      	str	r3, [r7, #32]
 801227c:	e7fe      	b.n	801227c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801227e:	68bb      	ldr	r3, [r7, #8]
 8012280:	2b00      	cmp	r3, #0
 8012282:	d103      	bne.n	801228c <xQueueReceive+0x3c>
 8012284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012288:	2b00      	cmp	r3, #0
 801228a:	d101      	bne.n	8012290 <xQueueReceive+0x40>
 801228c:	2301      	movs	r3, #1
 801228e:	e000      	b.n	8012292 <xQueueReceive+0x42>
 8012290:	2300      	movs	r3, #0
 8012292:	2b00      	cmp	r3, #0
 8012294:	d109      	bne.n	80122aa <xQueueReceive+0x5a>
 8012296:	f04f 0350 	mov.w	r3, #80	; 0x50
 801229a:	f383 8811 	msr	BASEPRI, r3
 801229e:	f3bf 8f6f 	isb	sy
 80122a2:	f3bf 8f4f 	dsb	sy
 80122a6:	61fb      	str	r3, [r7, #28]
 80122a8:	e7fe      	b.n	80122a8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80122aa:	f001 f913 	bl	80134d4 <xTaskGetSchedulerState>
 80122ae:	4603      	mov	r3, r0
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d102      	bne.n	80122ba <xQueueReceive+0x6a>
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d101      	bne.n	80122be <xQueueReceive+0x6e>
 80122ba:	2301      	movs	r3, #1
 80122bc:	e000      	b.n	80122c0 <xQueueReceive+0x70>
 80122be:	2300      	movs	r3, #0
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d109      	bne.n	80122d8 <xQueueReceive+0x88>
 80122c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122c8:	f383 8811 	msr	BASEPRI, r3
 80122cc:	f3bf 8f6f 	isb	sy
 80122d0:	f3bf 8f4f 	dsb	sy
 80122d4:	61bb      	str	r3, [r7, #24]
 80122d6:	e7fe      	b.n	80122d6 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80122d8:	f001 fe20 	bl	8013f1c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80122dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80122e0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80122e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d01f      	beq.n	8012328 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80122e8:	68b9      	ldr	r1, [r7, #8]
 80122ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80122ec:	f000 fa93 	bl	8012816 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80122f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122f2:	1e5a      	subs	r2, r3, #1
 80122f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122f6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80122f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122fa:	691b      	ldr	r3, [r3, #16]
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d00f      	beq.n	8012320 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012302:	3310      	adds	r3, #16
 8012304:	4618      	mov	r0, r3
 8012306:	f000 ff29 	bl	801315c <xTaskRemoveFromEventList>
 801230a:	4603      	mov	r3, r0
 801230c:	2b00      	cmp	r3, #0
 801230e:	d007      	beq.n	8012320 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012310:	4b3c      	ldr	r3, [pc, #240]	; (8012404 <xQueueReceive+0x1b4>)
 8012312:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012316:	601a      	str	r2, [r3, #0]
 8012318:	f3bf 8f4f 	dsb	sy
 801231c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012320:	f001 fe2a 	bl	8013f78 <vPortExitCritical>
				return pdPASS;
 8012324:	2301      	movs	r3, #1
 8012326:	e069      	b.n	80123fc <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	2b00      	cmp	r3, #0
 801232c:	d103      	bne.n	8012336 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801232e:	f001 fe23 	bl	8013f78 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012332:	2300      	movs	r3, #0
 8012334:	e062      	b.n	80123fc <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012338:	2b00      	cmp	r3, #0
 801233a:	d106      	bne.n	801234a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801233c:	f107 0310 	add.w	r3, r7, #16
 8012340:	4618      	mov	r0, r3
 8012342:	f000 ff6d 	bl	8013220 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012346:	2301      	movs	r3, #1
 8012348:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801234a:	f001 fe15 	bl	8013f78 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801234e:	f000 fd21 	bl	8012d94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012352:	f001 fde3 	bl	8013f1c <vPortEnterCritical>
 8012356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012358:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801235c:	b25b      	sxtb	r3, r3
 801235e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012362:	d103      	bne.n	801236c <xQueueReceive+0x11c>
 8012364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012366:	2200      	movs	r2, #0
 8012368:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801236c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801236e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012372:	b25b      	sxtb	r3, r3
 8012374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012378:	d103      	bne.n	8012382 <xQueueReceive+0x132>
 801237a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801237c:	2200      	movs	r2, #0
 801237e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012382:	f001 fdf9 	bl	8013f78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012386:	1d3a      	adds	r2, r7, #4
 8012388:	f107 0310 	add.w	r3, r7, #16
 801238c:	4611      	mov	r1, r2
 801238e:	4618      	mov	r0, r3
 8012390:	f000 ff5c 	bl	801324c <xTaskCheckForTimeOut>
 8012394:	4603      	mov	r3, r0
 8012396:	2b00      	cmp	r3, #0
 8012398:	d123      	bne.n	80123e2 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801239a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801239c:	f000 fab3 	bl	8012906 <prvIsQueueEmpty>
 80123a0:	4603      	mov	r3, r0
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d017      	beq.n	80123d6 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80123a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123a8:	3324      	adds	r3, #36	; 0x24
 80123aa:	687a      	ldr	r2, [r7, #4]
 80123ac:	4611      	mov	r1, r2
 80123ae:	4618      	mov	r0, r3
 80123b0:	f000 feb0 	bl	8013114 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80123b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80123b6:	f000 fa54 	bl	8012862 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80123ba:	f000 fcf9 	bl	8012db0 <xTaskResumeAll>
 80123be:	4603      	mov	r3, r0
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	d189      	bne.n	80122d8 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80123c4:	4b0f      	ldr	r3, [pc, #60]	; (8012404 <xQueueReceive+0x1b4>)
 80123c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80123ca:	601a      	str	r2, [r3, #0]
 80123cc:	f3bf 8f4f 	dsb	sy
 80123d0:	f3bf 8f6f 	isb	sy
 80123d4:	e780      	b.n	80122d8 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80123d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80123d8:	f000 fa43 	bl	8012862 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80123dc:	f000 fce8 	bl	8012db0 <xTaskResumeAll>
 80123e0:	e77a      	b.n	80122d8 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80123e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80123e4:	f000 fa3d 	bl	8012862 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80123e8:	f000 fce2 	bl	8012db0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80123ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80123ee:	f000 fa8a 	bl	8012906 <prvIsQueueEmpty>
 80123f2:	4603      	mov	r3, r0
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	f43f af6f 	beq.w	80122d8 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80123fa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80123fc:	4618      	mov	r0, r3
 80123fe:	3730      	adds	r7, #48	; 0x30
 8012400:	46bd      	mov	sp, r7
 8012402:	bd80      	pop	{r7, pc}
 8012404:	e000ed04 	.word	0xe000ed04

08012408 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8012408:	b580      	push	{r7, lr}
 801240a:	b08e      	sub	sp, #56	; 0x38
 801240c:	af00      	add	r7, sp, #0
 801240e:	6078      	str	r0, [r7, #4]
 8012410:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8012412:	2300      	movs	r3, #0
 8012414:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801241a:	2300      	movs	r3, #0
 801241c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801241e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012420:	2b00      	cmp	r3, #0
 8012422:	d109      	bne.n	8012438 <xQueueSemaphoreTake+0x30>
 8012424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012428:	f383 8811 	msr	BASEPRI, r3
 801242c:	f3bf 8f6f 	isb	sy
 8012430:	f3bf 8f4f 	dsb	sy
 8012434:	623b      	str	r3, [r7, #32]
 8012436:	e7fe      	b.n	8012436 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801243a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801243c:	2b00      	cmp	r3, #0
 801243e:	d009      	beq.n	8012454 <xQueueSemaphoreTake+0x4c>
 8012440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012444:	f383 8811 	msr	BASEPRI, r3
 8012448:	f3bf 8f6f 	isb	sy
 801244c:	f3bf 8f4f 	dsb	sy
 8012450:	61fb      	str	r3, [r7, #28]
 8012452:	e7fe      	b.n	8012452 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012454:	f001 f83e 	bl	80134d4 <xTaskGetSchedulerState>
 8012458:	4603      	mov	r3, r0
 801245a:	2b00      	cmp	r3, #0
 801245c:	d102      	bne.n	8012464 <xQueueSemaphoreTake+0x5c>
 801245e:	683b      	ldr	r3, [r7, #0]
 8012460:	2b00      	cmp	r3, #0
 8012462:	d101      	bne.n	8012468 <xQueueSemaphoreTake+0x60>
 8012464:	2301      	movs	r3, #1
 8012466:	e000      	b.n	801246a <xQueueSemaphoreTake+0x62>
 8012468:	2300      	movs	r3, #0
 801246a:	2b00      	cmp	r3, #0
 801246c:	d109      	bne.n	8012482 <xQueueSemaphoreTake+0x7a>
 801246e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012472:	f383 8811 	msr	BASEPRI, r3
 8012476:	f3bf 8f6f 	isb	sy
 801247a:	f3bf 8f4f 	dsb	sy
 801247e:	61bb      	str	r3, [r7, #24]
 8012480:	e7fe      	b.n	8012480 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8012482:	f001 fd4b 	bl	8013f1c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8012486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801248a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801248c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801248e:	2b00      	cmp	r3, #0
 8012490:	d024      	beq.n	80124dc <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8012492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012494:	1e5a      	subs	r2, r3, #1
 8012496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012498:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801249a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801249c:	681b      	ldr	r3, [r3, #0]
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d104      	bne.n	80124ac <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80124a2:	f001 f9dd 	bl	8013860 <pvTaskIncrementMutexHeldCount>
 80124a6:	4602      	mov	r2, r0
 80124a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124aa:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80124ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124ae:	691b      	ldr	r3, [r3, #16]
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d00f      	beq.n	80124d4 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80124b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124b6:	3310      	adds	r3, #16
 80124b8:	4618      	mov	r0, r3
 80124ba:	f000 fe4f 	bl	801315c <xTaskRemoveFromEventList>
 80124be:	4603      	mov	r3, r0
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d007      	beq.n	80124d4 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80124c4:	4b53      	ldr	r3, [pc, #332]	; (8012614 <xQueueSemaphoreTake+0x20c>)
 80124c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80124ca:	601a      	str	r2, [r3, #0]
 80124cc:	f3bf 8f4f 	dsb	sy
 80124d0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80124d4:	f001 fd50 	bl	8013f78 <vPortExitCritical>
				return pdPASS;
 80124d8:	2301      	movs	r3, #1
 80124da:	e096      	b.n	801260a <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80124dc:	683b      	ldr	r3, [r7, #0]
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d110      	bne.n	8012504 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80124e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	d009      	beq.n	80124fc <xQueueSemaphoreTake+0xf4>
 80124e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124ec:	f383 8811 	msr	BASEPRI, r3
 80124f0:	f3bf 8f6f 	isb	sy
 80124f4:	f3bf 8f4f 	dsb	sy
 80124f8:	617b      	str	r3, [r7, #20]
 80124fa:	e7fe      	b.n	80124fa <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80124fc:	f001 fd3c 	bl	8013f78 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012500:	2300      	movs	r3, #0
 8012502:	e082      	b.n	801260a <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012506:	2b00      	cmp	r3, #0
 8012508:	d106      	bne.n	8012518 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801250a:	f107 030c 	add.w	r3, r7, #12
 801250e:	4618      	mov	r0, r3
 8012510:	f000 fe86 	bl	8013220 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012514:	2301      	movs	r3, #1
 8012516:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012518:	f001 fd2e 	bl	8013f78 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801251c:	f000 fc3a 	bl	8012d94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012520:	f001 fcfc 	bl	8013f1c <vPortEnterCritical>
 8012524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012526:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801252a:	b25b      	sxtb	r3, r3
 801252c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012530:	d103      	bne.n	801253a <xQueueSemaphoreTake+0x132>
 8012532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012534:	2200      	movs	r2, #0
 8012536:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801253a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801253c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012540:	b25b      	sxtb	r3, r3
 8012542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012546:	d103      	bne.n	8012550 <xQueueSemaphoreTake+0x148>
 8012548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801254a:	2200      	movs	r2, #0
 801254c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012550:	f001 fd12 	bl	8013f78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012554:	463a      	mov	r2, r7
 8012556:	f107 030c 	add.w	r3, r7, #12
 801255a:	4611      	mov	r1, r2
 801255c:	4618      	mov	r0, r3
 801255e:	f000 fe75 	bl	801324c <xTaskCheckForTimeOut>
 8012562:	4603      	mov	r3, r0
 8012564:	2b00      	cmp	r3, #0
 8012566:	d132      	bne.n	80125ce <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012568:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801256a:	f000 f9cc 	bl	8012906 <prvIsQueueEmpty>
 801256e:	4603      	mov	r3, r0
 8012570:	2b00      	cmp	r3, #0
 8012572:	d026      	beq.n	80125c2 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012576:	681b      	ldr	r3, [r3, #0]
 8012578:	2b00      	cmp	r3, #0
 801257a:	d109      	bne.n	8012590 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 801257c:	f001 fcce 	bl	8013f1c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8012580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012582:	685b      	ldr	r3, [r3, #4]
 8012584:	4618      	mov	r0, r3
 8012586:	f000 ffc3 	bl	8013510 <xTaskPriorityInherit>
 801258a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 801258c:	f001 fcf4 	bl	8013f78 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012592:	3324      	adds	r3, #36	; 0x24
 8012594:	683a      	ldr	r2, [r7, #0]
 8012596:	4611      	mov	r1, r2
 8012598:	4618      	mov	r0, r3
 801259a:	f000 fdbb 	bl	8013114 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801259e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80125a0:	f000 f95f 	bl	8012862 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80125a4:	f000 fc04 	bl	8012db0 <xTaskResumeAll>
 80125a8:	4603      	mov	r3, r0
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	f47f af69 	bne.w	8012482 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 80125b0:	4b18      	ldr	r3, [pc, #96]	; (8012614 <xQueueSemaphoreTake+0x20c>)
 80125b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80125b6:	601a      	str	r2, [r3, #0]
 80125b8:	f3bf 8f4f 	dsb	sy
 80125bc:	f3bf 8f6f 	isb	sy
 80125c0:	e75f      	b.n	8012482 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80125c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80125c4:	f000 f94d 	bl	8012862 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80125c8:	f000 fbf2 	bl	8012db0 <xTaskResumeAll>
 80125cc:	e759      	b.n	8012482 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80125ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80125d0:	f000 f947 	bl	8012862 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80125d4:	f000 fbec 	bl	8012db0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80125d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80125da:	f000 f994 	bl	8012906 <prvIsQueueEmpty>
 80125de:	4603      	mov	r3, r0
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	f43f af4e 	beq.w	8012482 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80125e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d00d      	beq.n	8012608 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 80125ec:	f001 fc96 	bl	8013f1c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80125f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80125f2:	f000 f88e 	bl	8012712 <prvGetDisinheritPriorityAfterTimeout>
 80125f6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80125f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125fa:	685b      	ldr	r3, [r3, #4]
 80125fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80125fe:	4618      	mov	r0, r3
 8012600:	f001 f890 	bl	8013724 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8012604:	f001 fcb8 	bl	8013f78 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012608:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 801260a:	4618      	mov	r0, r3
 801260c:	3738      	adds	r7, #56	; 0x38
 801260e:	46bd      	mov	sp, r7
 8012610:	bd80      	pop	{r7, pc}
 8012612:	bf00      	nop
 8012614:	e000ed04 	.word	0xe000ed04

08012618 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012618:	b580      	push	{r7, lr}
 801261a:	b08e      	sub	sp, #56	; 0x38
 801261c:	af00      	add	r7, sp, #0
 801261e:	60f8      	str	r0, [r7, #12]
 8012620:	60b9      	str	r1, [r7, #8]
 8012622:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8012624:	68fb      	ldr	r3, [r7, #12]
 8012626:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801262a:	2b00      	cmp	r3, #0
 801262c:	d109      	bne.n	8012642 <xQueueReceiveFromISR+0x2a>
 801262e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012632:	f383 8811 	msr	BASEPRI, r3
 8012636:	f3bf 8f6f 	isb	sy
 801263a:	f3bf 8f4f 	dsb	sy
 801263e:	623b      	str	r3, [r7, #32]
 8012640:	e7fe      	b.n	8012640 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012642:	68bb      	ldr	r3, [r7, #8]
 8012644:	2b00      	cmp	r3, #0
 8012646:	d103      	bne.n	8012650 <xQueueReceiveFromISR+0x38>
 8012648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801264a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801264c:	2b00      	cmp	r3, #0
 801264e:	d101      	bne.n	8012654 <xQueueReceiveFromISR+0x3c>
 8012650:	2301      	movs	r3, #1
 8012652:	e000      	b.n	8012656 <xQueueReceiveFromISR+0x3e>
 8012654:	2300      	movs	r3, #0
 8012656:	2b00      	cmp	r3, #0
 8012658:	d109      	bne.n	801266e <xQueueReceiveFromISR+0x56>
 801265a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801265e:	f383 8811 	msr	BASEPRI, r3
 8012662:	f3bf 8f6f 	isb	sy
 8012666:	f3bf 8f4f 	dsb	sy
 801266a:	61fb      	str	r3, [r7, #28]
 801266c:	e7fe      	b.n	801266c <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801266e:	f001 fd31 	bl	80140d4 <vPortValidateInterruptPriority>
	__asm volatile
 8012672:	f3ef 8211 	mrs	r2, BASEPRI
 8012676:	f04f 0350 	mov.w	r3, #80	; 0x50
 801267a:	f383 8811 	msr	BASEPRI, r3
 801267e:	f3bf 8f6f 	isb	sy
 8012682:	f3bf 8f4f 	dsb	sy
 8012686:	61ba      	str	r2, [r7, #24]
 8012688:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801268a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801268c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801268e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012692:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012696:	2b00      	cmp	r3, #0
 8012698:	d02f      	beq.n	80126fa <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801269a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801269c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80126a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80126a4:	68b9      	ldr	r1, [r7, #8]
 80126a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80126a8:	f000 f8b5 	bl	8012816 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80126ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126ae:	1e5a      	subs	r2, r3, #1
 80126b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126b2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80126b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80126b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80126bc:	d112      	bne.n	80126e4 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80126be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126c0:	691b      	ldr	r3, [r3, #16]
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d016      	beq.n	80126f4 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80126c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126c8:	3310      	adds	r3, #16
 80126ca:	4618      	mov	r0, r3
 80126cc:	f000 fd46 	bl	801315c <xTaskRemoveFromEventList>
 80126d0:	4603      	mov	r3, r0
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	d00e      	beq.n	80126f4 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d00b      	beq.n	80126f4 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	2201      	movs	r2, #1
 80126e0:	601a      	str	r2, [r3, #0]
 80126e2:	e007      	b.n	80126f4 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80126e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80126e8:	3301      	adds	r3, #1
 80126ea:	b2db      	uxtb	r3, r3
 80126ec:	b25a      	sxtb	r2, r3
 80126ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80126f4:	2301      	movs	r3, #1
 80126f6:	637b      	str	r3, [r7, #52]	; 0x34
 80126f8:	e001      	b.n	80126fe <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80126fa:	2300      	movs	r3, #0
 80126fc:	637b      	str	r3, [r7, #52]	; 0x34
 80126fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012700:	613b      	str	r3, [r7, #16]
	__asm volatile
 8012702:	693b      	ldr	r3, [r7, #16]
 8012704:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801270a:	4618      	mov	r0, r3
 801270c:	3738      	adds	r7, #56	; 0x38
 801270e:	46bd      	mov	sp, r7
 8012710:	bd80      	pop	{r7, pc}

08012712 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8012712:	b480      	push	{r7}
 8012714:	b085      	sub	sp, #20
 8012716:	af00      	add	r7, sp, #0
 8012718:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801271e:	2b00      	cmp	r3, #0
 8012720:	d006      	beq.n	8012730 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012726:	681b      	ldr	r3, [r3, #0]
 8012728:	f1c3 0307 	rsb	r3, r3, #7
 801272c:	60fb      	str	r3, [r7, #12]
 801272e:	e001      	b.n	8012734 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8012730:	2300      	movs	r3, #0
 8012732:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8012734:	68fb      	ldr	r3, [r7, #12]
	}
 8012736:	4618      	mov	r0, r3
 8012738:	3714      	adds	r7, #20
 801273a:	46bd      	mov	sp, r7
 801273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012740:	4770      	bx	lr

08012742 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8012742:	b580      	push	{r7, lr}
 8012744:	b086      	sub	sp, #24
 8012746:	af00      	add	r7, sp, #0
 8012748:	60f8      	str	r0, [r7, #12]
 801274a:	60b9      	str	r1, [r7, #8]
 801274c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801274e:	2300      	movs	r3, #0
 8012750:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012752:	68fb      	ldr	r3, [r7, #12]
 8012754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012756:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012758:	68fb      	ldr	r3, [r7, #12]
 801275a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801275c:	2b00      	cmp	r3, #0
 801275e:	d10d      	bne.n	801277c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012760:	68fb      	ldr	r3, [r7, #12]
 8012762:	681b      	ldr	r3, [r3, #0]
 8012764:	2b00      	cmp	r3, #0
 8012766:	d14d      	bne.n	8012804 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8012768:	68fb      	ldr	r3, [r7, #12]
 801276a:	685b      	ldr	r3, [r3, #4]
 801276c:	4618      	mov	r0, r3
 801276e:	f000 ff55 	bl	801361c <xTaskPriorityDisinherit>
 8012772:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8012774:	68fb      	ldr	r3, [r7, #12]
 8012776:	2200      	movs	r2, #0
 8012778:	605a      	str	r2, [r3, #4]
 801277a:	e043      	b.n	8012804 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	2b00      	cmp	r3, #0
 8012780:	d119      	bne.n	80127b6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8012782:	68fb      	ldr	r3, [r7, #12]
 8012784:	6898      	ldr	r0, [r3, #8]
 8012786:	68fb      	ldr	r3, [r7, #12]
 8012788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801278a:	461a      	mov	r2, r3
 801278c:	68b9      	ldr	r1, [r7, #8]
 801278e:	f002 fc2f 	bl	8014ff0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8012792:	68fb      	ldr	r3, [r7, #12]
 8012794:	689a      	ldr	r2, [r3, #8]
 8012796:	68fb      	ldr	r3, [r7, #12]
 8012798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801279a:	441a      	add	r2, r3
 801279c:	68fb      	ldr	r3, [r7, #12]
 801279e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80127a0:	68fb      	ldr	r3, [r7, #12]
 80127a2:	689a      	ldr	r2, [r3, #8]
 80127a4:	68fb      	ldr	r3, [r7, #12]
 80127a6:	685b      	ldr	r3, [r3, #4]
 80127a8:	429a      	cmp	r2, r3
 80127aa:	d32b      	bcc.n	8012804 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80127ac:	68fb      	ldr	r3, [r7, #12]
 80127ae:	681a      	ldr	r2, [r3, #0]
 80127b0:	68fb      	ldr	r3, [r7, #12]
 80127b2:	609a      	str	r2, [r3, #8]
 80127b4:	e026      	b.n	8012804 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80127b6:	68fb      	ldr	r3, [r7, #12]
 80127b8:	68d8      	ldr	r0, [r3, #12]
 80127ba:	68fb      	ldr	r3, [r7, #12]
 80127bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80127be:	461a      	mov	r2, r3
 80127c0:	68b9      	ldr	r1, [r7, #8]
 80127c2:	f002 fc15 	bl	8014ff0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80127c6:	68fb      	ldr	r3, [r7, #12]
 80127c8:	68da      	ldr	r2, [r3, #12]
 80127ca:	68fb      	ldr	r3, [r7, #12]
 80127cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80127ce:	425b      	negs	r3, r3
 80127d0:	441a      	add	r2, r3
 80127d2:	68fb      	ldr	r3, [r7, #12]
 80127d4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80127d6:	68fb      	ldr	r3, [r7, #12]
 80127d8:	68da      	ldr	r2, [r3, #12]
 80127da:	68fb      	ldr	r3, [r7, #12]
 80127dc:	681b      	ldr	r3, [r3, #0]
 80127de:	429a      	cmp	r2, r3
 80127e0:	d207      	bcs.n	80127f2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80127e2:	68fb      	ldr	r3, [r7, #12]
 80127e4:	685a      	ldr	r2, [r3, #4]
 80127e6:	68fb      	ldr	r3, [r7, #12]
 80127e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80127ea:	425b      	negs	r3, r3
 80127ec:	441a      	add	r2, r3
 80127ee:	68fb      	ldr	r3, [r7, #12]
 80127f0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	2b02      	cmp	r3, #2
 80127f6:	d105      	bne.n	8012804 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80127f8:	693b      	ldr	r3, [r7, #16]
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d002      	beq.n	8012804 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80127fe:	693b      	ldr	r3, [r7, #16]
 8012800:	3b01      	subs	r3, #1
 8012802:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012804:	693b      	ldr	r3, [r7, #16]
 8012806:	1c5a      	adds	r2, r3, #1
 8012808:	68fb      	ldr	r3, [r7, #12]
 801280a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801280c:	697b      	ldr	r3, [r7, #20]
}
 801280e:	4618      	mov	r0, r3
 8012810:	3718      	adds	r7, #24
 8012812:	46bd      	mov	sp, r7
 8012814:	bd80      	pop	{r7, pc}

08012816 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8012816:	b580      	push	{r7, lr}
 8012818:	b082      	sub	sp, #8
 801281a:	af00      	add	r7, sp, #0
 801281c:	6078      	str	r0, [r7, #4]
 801281e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012824:	2b00      	cmp	r3, #0
 8012826:	d018      	beq.n	801285a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	68da      	ldr	r2, [r3, #12]
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012830:	441a      	add	r2, r3
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	68da      	ldr	r2, [r3, #12]
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	685b      	ldr	r3, [r3, #4]
 801283e:	429a      	cmp	r2, r3
 8012840:	d303      	bcc.n	801284a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	681a      	ldr	r2, [r3, #0]
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	68d9      	ldr	r1, [r3, #12]
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012852:	461a      	mov	r2, r3
 8012854:	6838      	ldr	r0, [r7, #0]
 8012856:	f002 fbcb 	bl	8014ff0 <memcpy>
	}
}
 801285a:	bf00      	nop
 801285c:	3708      	adds	r7, #8
 801285e:	46bd      	mov	sp, r7
 8012860:	bd80      	pop	{r7, pc}

08012862 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012862:	b580      	push	{r7, lr}
 8012864:	b084      	sub	sp, #16
 8012866:	af00      	add	r7, sp, #0
 8012868:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801286a:	f001 fb57 	bl	8013f1c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012874:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012876:	e011      	b.n	801289c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801287c:	2b00      	cmp	r3, #0
 801287e:	d012      	beq.n	80128a6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	3324      	adds	r3, #36	; 0x24
 8012884:	4618      	mov	r0, r3
 8012886:	f000 fc69 	bl	801315c <xTaskRemoveFromEventList>
 801288a:	4603      	mov	r3, r0
 801288c:	2b00      	cmp	r3, #0
 801288e:	d001      	beq.n	8012894 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8012890:	f000 fd3c 	bl	801330c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8012894:	7bfb      	ldrb	r3, [r7, #15]
 8012896:	3b01      	subs	r3, #1
 8012898:	b2db      	uxtb	r3, r3
 801289a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801289c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	dce9      	bgt.n	8012878 <prvUnlockQueue+0x16>
 80128a4:	e000      	b.n	80128a8 <prvUnlockQueue+0x46>
					break;
 80128a6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	22ff      	movs	r2, #255	; 0xff
 80128ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80128b0:	f001 fb62 	bl	8013f78 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80128b4:	f001 fb32 	bl	8013f1c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80128be:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80128c0:	e011      	b.n	80128e6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	691b      	ldr	r3, [r3, #16]
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d012      	beq.n	80128f0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	3310      	adds	r3, #16
 80128ce:	4618      	mov	r0, r3
 80128d0:	f000 fc44 	bl	801315c <xTaskRemoveFromEventList>
 80128d4:	4603      	mov	r3, r0
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	d001      	beq.n	80128de <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80128da:	f000 fd17 	bl	801330c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80128de:	7bbb      	ldrb	r3, [r7, #14]
 80128e0:	3b01      	subs	r3, #1
 80128e2:	b2db      	uxtb	r3, r3
 80128e4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80128e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	dce9      	bgt.n	80128c2 <prvUnlockQueue+0x60>
 80128ee:	e000      	b.n	80128f2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80128f0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	22ff      	movs	r2, #255	; 0xff
 80128f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80128fa:	f001 fb3d 	bl	8013f78 <vPortExitCritical>
}
 80128fe:	bf00      	nop
 8012900:	3710      	adds	r7, #16
 8012902:	46bd      	mov	sp, r7
 8012904:	bd80      	pop	{r7, pc}

08012906 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8012906:	b580      	push	{r7, lr}
 8012908:	b084      	sub	sp, #16
 801290a:	af00      	add	r7, sp, #0
 801290c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801290e:	f001 fb05 	bl	8013f1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012916:	2b00      	cmp	r3, #0
 8012918:	d102      	bne.n	8012920 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801291a:	2301      	movs	r3, #1
 801291c:	60fb      	str	r3, [r7, #12]
 801291e:	e001      	b.n	8012924 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8012920:	2300      	movs	r3, #0
 8012922:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012924:	f001 fb28 	bl	8013f78 <vPortExitCritical>

	return xReturn;
 8012928:	68fb      	ldr	r3, [r7, #12]
}
 801292a:	4618      	mov	r0, r3
 801292c:	3710      	adds	r7, #16
 801292e:	46bd      	mov	sp, r7
 8012930:	bd80      	pop	{r7, pc}

08012932 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8012932:	b580      	push	{r7, lr}
 8012934:	b084      	sub	sp, #16
 8012936:	af00      	add	r7, sp, #0
 8012938:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801293a:	f001 faef 	bl	8013f1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012946:	429a      	cmp	r2, r3
 8012948:	d102      	bne.n	8012950 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801294a:	2301      	movs	r3, #1
 801294c:	60fb      	str	r3, [r7, #12]
 801294e:	e001      	b.n	8012954 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8012950:	2300      	movs	r3, #0
 8012952:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012954:	f001 fb10 	bl	8013f78 <vPortExitCritical>

	return xReturn;
 8012958:	68fb      	ldr	r3, [r7, #12]
}
 801295a:	4618      	mov	r0, r3
 801295c:	3710      	adds	r7, #16
 801295e:	46bd      	mov	sp, r7
 8012960:	bd80      	pop	{r7, pc}

08012962 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8012962:	b580      	push	{r7, lr}
 8012964:	b08e      	sub	sp, #56	; 0x38
 8012966:	af04      	add	r7, sp, #16
 8012968:	60f8      	str	r0, [r7, #12]
 801296a:	60b9      	str	r1, [r7, #8]
 801296c:	607a      	str	r2, [r7, #4]
 801296e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8012970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012972:	2b00      	cmp	r3, #0
 8012974:	d109      	bne.n	801298a <xTaskCreateStatic+0x28>
	__asm volatile
 8012976:	f04f 0350 	mov.w	r3, #80	; 0x50
 801297a:	f383 8811 	msr	BASEPRI, r3
 801297e:	f3bf 8f6f 	isb	sy
 8012982:	f3bf 8f4f 	dsb	sy
 8012986:	623b      	str	r3, [r7, #32]
 8012988:	e7fe      	b.n	8012988 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 801298a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801298c:	2b00      	cmp	r3, #0
 801298e:	d109      	bne.n	80129a4 <xTaskCreateStatic+0x42>
 8012990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012994:	f383 8811 	msr	BASEPRI, r3
 8012998:	f3bf 8f6f 	isb	sy
 801299c:	f3bf 8f4f 	dsb	sy
 80129a0:	61fb      	str	r3, [r7, #28]
 80129a2:	e7fe      	b.n	80129a2 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80129a4:	2354      	movs	r3, #84	; 0x54
 80129a6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80129a8:	693b      	ldr	r3, [r7, #16]
 80129aa:	2b54      	cmp	r3, #84	; 0x54
 80129ac:	d009      	beq.n	80129c2 <xTaskCreateStatic+0x60>
 80129ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129b2:	f383 8811 	msr	BASEPRI, r3
 80129b6:	f3bf 8f6f 	isb	sy
 80129ba:	f3bf 8f4f 	dsb	sy
 80129be:	61bb      	str	r3, [r7, #24]
 80129c0:	e7fe      	b.n	80129c0 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80129c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d01e      	beq.n	8012a06 <xTaskCreateStatic+0xa4>
 80129c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d01b      	beq.n	8012a06 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80129ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129d0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80129d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80129d6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80129d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129da:	2202      	movs	r2, #2
 80129dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80129e0:	2300      	movs	r3, #0
 80129e2:	9303      	str	r3, [sp, #12]
 80129e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129e6:	9302      	str	r3, [sp, #8]
 80129e8:	f107 0314 	add.w	r3, r7, #20
 80129ec:	9301      	str	r3, [sp, #4]
 80129ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129f0:	9300      	str	r3, [sp, #0]
 80129f2:	683b      	ldr	r3, [r7, #0]
 80129f4:	687a      	ldr	r2, [r7, #4]
 80129f6:	68b9      	ldr	r1, [r7, #8]
 80129f8:	68f8      	ldr	r0, [r7, #12]
 80129fa:	f000 f850 	bl	8012a9e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80129fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012a00:	f000 f8cc 	bl	8012b9c <prvAddNewTaskToReadyList>
 8012a04:	e001      	b.n	8012a0a <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8012a06:	2300      	movs	r3, #0
 8012a08:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8012a0a:	697b      	ldr	r3, [r7, #20]
	}
 8012a0c:	4618      	mov	r0, r3
 8012a0e:	3728      	adds	r7, #40	; 0x28
 8012a10:	46bd      	mov	sp, r7
 8012a12:	bd80      	pop	{r7, pc}

08012a14 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8012a14:	b580      	push	{r7, lr}
 8012a16:	b08c      	sub	sp, #48	; 0x30
 8012a18:	af04      	add	r7, sp, #16
 8012a1a:	60f8      	str	r0, [r7, #12]
 8012a1c:	60b9      	str	r1, [r7, #8]
 8012a1e:	603b      	str	r3, [r7, #0]
 8012a20:	4613      	mov	r3, r2
 8012a22:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012a24:	88fb      	ldrh	r3, [r7, #6]
 8012a26:	009b      	lsls	r3, r3, #2
 8012a28:	4618      	mov	r0, r3
 8012a2a:	f001 fb91 	bl	8014150 <pvPortMalloc>
 8012a2e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8012a30:	697b      	ldr	r3, [r7, #20]
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d00e      	beq.n	8012a54 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8012a36:	2054      	movs	r0, #84	; 0x54
 8012a38:	f001 fb8a 	bl	8014150 <pvPortMalloc>
 8012a3c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8012a3e:	69fb      	ldr	r3, [r7, #28]
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	d003      	beq.n	8012a4c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8012a44:	69fb      	ldr	r3, [r7, #28]
 8012a46:	697a      	ldr	r2, [r7, #20]
 8012a48:	631a      	str	r2, [r3, #48]	; 0x30
 8012a4a:	e005      	b.n	8012a58 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8012a4c:	6978      	ldr	r0, [r7, #20]
 8012a4e:	f001 fc41 	bl	80142d4 <vPortFree>
 8012a52:	e001      	b.n	8012a58 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8012a54:	2300      	movs	r3, #0
 8012a56:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8012a58:	69fb      	ldr	r3, [r7, #28]
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d017      	beq.n	8012a8e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8012a5e:	69fb      	ldr	r3, [r7, #28]
 8012a60:	2200      	movs	r2, #0
 8012a62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8012a66:	88fa      	ldrh	r2, [r7, #6]
 8012a68:	2300      	movs	r3, #0
 8012a6a:	9303      	str	r3, [sp, #12]
 8012a6c:	69fb      	ldr	r3, [r7, #28]
 8012a6e:	9302      	str	r3, [sp, #8]
 8012a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a72:	9301      	str	r3, [sp, #4]
 8012a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a76:	9300      	str	r3, [sp, #0]
 8012a78:	683b      	ldr	r3, [r7, #0]
 8012a7a:	68b9      	ldr	r1, [r7, #8]
 8012a7c:	68f8      	ldr	r0, [r7, #12]
 8012a7e:	f000 f80e 	bl	8012a9e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012a82:	69f8      	ldr	r0, [r7, #28]
 8012a84:	f000 f88a 	bl	8012b9c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8012a88:	2301      	movs	r3, #1
 8012a8a:	61bb      	str	r3, [r7, #24]
 8012a8c:	e002      	b.n	8012a94 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8012a92:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8012a94:	69bb      	ldr	r3, [r7, #24]
	}
 8012a96:	4618      	mov	r0, r3
 8012a98:	3720      	adds	r7, #32
 8012a9a:	46bd      	mov	sp, r7
 8012a9c:	bd80      	pop	{r7, pc}

08012a9e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8012a9e:	b580      	push	{r7, lr}
 8012aa0:	b088      	sub	sp, #32
 8012aa2:	af00      	add	r7, sp, #0
 8012aa4:	60f8      	str	r0, [r7, #12]
 8012aa6:	60b9      	str	r1, [r7, #8]
 8012aa8:	607a      	str	r2, [r7, #4]
 8012aaa:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8012aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012aae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8012ab6:	3b01      	subs	r3, #1
 8012ab8:	009b      	lsls	r3, r3, #2
 8012aba:	4413      	add	r3, r2
 8012abc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8012abe:	69bb      	ldr	r3, [r7, #24]
 8012ac0:	f023 0307 	bic.w	r3, r3, #7
 8012ac4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8012ac6:	69bb      	ldr	r3, [r7, #24]
 8012ac8:	f003 0307 	and.w	r3, r3, #7
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	d009      	beq.n	8012ae4 <prvInitialiseNewTask+0x46>
 8012ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ad4:	f383 8811 	msr	BASEPRI, r3
 8012ad8:	f3bf 8f6f 	isb	sy
 8012adc:	f3bf 8f4f 	dsb	sy
 8012ae0:	617b      	str	r3, [r7, #20]
 8012ae2:	e7fe      	b.n	8012ae2 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012ae4:	2300      	movs	r3, #0
 8012ae6:	61fb      	str	r3, [r7, #28]
 8012ae8:	e012      	b.n	8012b10 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8012aea:	68ba      	ldr	r2, [r7, #8]
 8012aec:	69fb      	ldr	r3, [r7, #28]
 8012aee:	4413      	add	r3, r2
 8012af0:	7819      	ldrb	r1, [r3, #0]
 8012af2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012af4:	69fb      	ldr	r3, [r7, #28]
 8012af6:	4413      	add	r3, r2
 8012af8:	3334      	adds	r3, #52	; 0x34
 8012afa:	460a      	mov	r2, r1
 8012afc:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8012afe:	68ba      	ldr	r2, [r7, #8]
 8012b00:	69fb      	ldr	r3, [r7, #28]
 8012b02:	4413      	add	r3, r2
 8012b04:	781b      	ldrb	r3, [r3, #0]
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	d006      	beq.n	8012b18 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012b0a:	69fb      	ldr	r3, [r7, #28]
 8012b0c:	3301      	adds	r3, #1
 8012b0e:	61fb      	str	r3, [r7, #28]
 8012b10:	69fb      	ldr	r3, [r7, #28]
 8012b12:	2b0f      	cmp	r3, #15
 8012b14:	d9e9      	bls.n	8012aea <prvInitialiseNewTask+0x4c>
 8012b16:	e000      	b.n	8012b1a <prvInitialiseNewTask+0x7c>
		{
			break;
 8012b18:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8012b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b1c:	2200      	movs	r2, #0
 8012b1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8012b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b24:	2b06      	cmp	r3, #6
 8012b26:	d901      	bls.n	8012b2c <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8012b28:	2306      	movs	r3, #6
 8012b2a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8012b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012b30:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8012b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012b36:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8012b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b3a:	2200      	movs	r2, #0
 8012b3c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8012b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b40:	3304      	adds	r3, #4
 8012b42:	4618      	mov	r0, r3
 8012b44:	f7fe ff53 	bl	80119ee <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8012b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b4a:	3318      	adds	r3, #24
 8012b4c:	4618      	mov	r0, r3
 8012b4e:	f7fe ff4e 	bl	80119ee <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8012b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012b56:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b5a:	f1c3 0207 	rsb	r2, r3, #7
 8012b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b60:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8012b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012b66:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8012b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b6a:	2200      	movs	r2, #0
 8012b6c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b70:	2200      	movs	r2, #0
 8012b72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8012b76:	683a      	ldr	r2, [r7, #0]
 8012b78:	68f9      	ldr	r1, [r7, #12]
 8012b7a:	69b8      	ldr	r0, [r7, #24]
 8012b7c:	f001 f8aa 	bl	8013cd4 <pxPortInitialiseStack>
 8012b80:	4602      	mov	r2, r0
 8012b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b84:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8012b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d002      	beq.n	8012b92 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8012b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012b90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012b92:	bf00      	nop
 8012b94:	3720      	adds	r7, #32
 8012b96:	46bd      	mov	sp, r7
 8012b98:	bd80      	pop	{r7, pc}
	...

08012b9c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8012b9c:	b580      	push	{r7, lr}
 8012b9e:	b082      	sub	sp, #8
 8012ba0:	af00      	add	r7, sp, #0
 8012ba2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8012ba4:	f001 f9ba 	bl	8013f1c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8012ba8:	4b2a      	ldr	r3, [pc, #168]	; (8012c54 <prvAddNewTaskToReadyList+0xb8>)
 8012baa:	681b      	ldr	r3, [r3, #0]
 8012bac:	3301      	adds	r3, #1
 8012bae:	4a29      	ldr	r2, [pc, #164]	; (8012c54 <prvAddNewTaskToReadyList+0xb8>)
 8012bb0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8012bb2:	4b29      	ldr	r3, [pc, #164]	; (8012c58 <prvAddNewTaskToReadyList+0xbc>)
 8012bb4:	681b      	ldr	r3, [r3, #0]
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d109      	bne.n	8012bce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8012bba:	4a27      	ldr	r2, [pc, #156]	; (8012c58 <prvAddNewTaskToReadyList+0xbc>)
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012bc0:	4b24      	ldr	r3, [pc, #144]	; (8012c54 <prvAddNewTaskToReadyList+0xb8>)
 8012bc2:	681b      	ldr	r3, [r3, #0]
 8012bc4:	2b01      	cmp	r3, #1
 8012bc6:	d110      	bne.n	8012bea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8012bc8:	f000 fbc4 	bl	8013354 <prvInitialiseTaskLists>
 8012bcc:	e00d      	b.n	8012bea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8012bce:	4b23      	ldr	r3, [pc, #140]	; (8012c5c <prvAddNewTaskToReadyList+0xc0>)
 8012bd0:	681b      	ldr	r3, [r3, #0]
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	d109      	bne.n	8012bea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8012bd6:	4b20      	ldr	r3, [pc, #128]	; (8012c58 <prvAddNewTaskToReadyList+0xbc>)
 8012bd8:	681b      	ldr	r3, [r3, #0]
 8012bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012be0:	429a      	cmp	r2, r3
 8012be2:	d802      	bhi.n	8012bea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8012be4:	4a1c      	ldr	r2, [pc, #112]	; (8012c58 <prvAddNewTaskToReadyList+0xbc>)
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8012bea:	4b1d      	ldr	r3, [pc, #116]	; (8012c60 <prvAddNewTaskToReadyList+0xc4>)
 8012bec:	681b      	ldr	r3, [r3, #0]
 8012bee:	3301      	adds	r3, #1
 8012bf0:	4a1b      	ldr	r2, [pc, #108]	; (8012c60 <prvAddNewTaskToReadyList+0xc4>)
 8012bf2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012bf8:	2201      	movs	r2, #1
 8012bfa:	409a      	lsls	r2, r3
 8012bfc:	4b19      	ldr	r3, [pc, #100]	; (8012c64 <prvAddNewTaskToReadyList+0xc8>)
 8012bfe:	681b      	ldr	r3, [r3, #0]
 8012c00:	4313      	orrs	r3, r2
 8012c02:	4a18      	ldr	r2, [pc, #96]	; (8012c64 <prvAddNewTaskToReadyList+0xc8>)
 8012c04:	6013      	str	r3, [r2, #0]
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c0a:	4613      	mov	r3, r2
 8012c0c:	009b      	lsls	r3, r3, #2
 8012c0e:	4413      	add	r3, r2
 8012c10:	009b      	lsls	r3, r3, #2
 8012c12:	4a15      	ldr	r2, [pc, #84]	; (8012c68 <prvAddNewTaskToReadyList+0xcc>)
 8012c14:	441a      	add	r2, r3
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	3304      	adds	r3, #4
 8012c1a:	4619      	mov	r1, r3
 8012c1c:	4610      	mov	r0, r2
 8012c1e:	f7fe fef3 	bl	8011a08 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8012c22:	f001 f9a9 	bl	8013f78 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8012c26:	4b0d      	ldr	r3, [pc, #52]	; (8012c5c <prvAddNewTaskToReadyList+0xc0>)
 8012c28:	681b      	ldr	r3, [r3, #0]
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	d00e      	beq.n	8012c4c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8012c2e:	4b0a      	ldr	r3, [pc, #40]	; (8012c58 <prvAddNewTaskToReadyList+0xbc>)
 8012c30:	681b      	ldr	r3, [r3, #0]
 8012c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c38:	429a      	cmp	r2, r3
 8012c3a:	d207      	bcs.n	8012c4c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8012c3c:	4b0b      	ldr	r3, [pc, #44]	; (8012c6c <prvAddNewTaskToReadyList+0xd0>)
 8012c3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012c42:	601a      	str	r2, [r3, #0]
 8012c44:	f3bf 8f4f 	dsb	sy
 8012c48:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012c4c:	bf00      	nop
 8012c4e:	3708      	adds	r7, #8
 8012c50:	46bd      	mov	sp, r7
 8012c52:	bd80      	pop	{r7, pc}
 8012c54:	200015b0 	.word	0x200015b0
 8012c58:	200014b0 	.word	0x200014b0
 8012c5c:	200015bc 	.word	0x200015bc
 8012c60:	200015cc 	.word	0x200015cc
 8012c64:	200015b8 	.word	0x200015b8
 8012c68:	200014b4 	.word	0x200014b4
 8012c6c:	e000ed04 	.word	0xe000ed04

08012c70 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8012c70:	b580      	push	{r7, lr}
 8012c72:	b084      	sub	sp, #16
 8012c74:	af00      	add	r7, sp, #0
 8012c76:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8012c78:	2300      	movs	r3, #0
 8012c7a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d016      	beq.n	8012cb0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8012c82:	4b13      	ldr	r3, [pc, #76]	; (8012cd0 <vTaskDelay+0x60>)
 8012c84:	681b      	ldr	r3, [r3, #0]
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d009      	beq.n	8012c9e <vTaskDelay+0x2e>
 8012c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c8e:	f383 8811 	msr	BASEPRI, r3
 8012c92:	f3bf 8f6f 	isb	sy
 8012c96:	f3bf 8f4f 	dsb	sy
 8012c9a:	60bb      	str	r3, [r7, #8]
 8012c9c:	e7fe      	b.n	8012c9c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8012c9e:	f000 f879 	bl	8012d94 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8012ca2:	2100      	movs	r1, #0
 8012ca4:	6878      	ldr	r0, [r7, #4]
 8012ca6:	f000 ffaf 	bl	8013c08 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8012caa:	f000 f881 	bl	8012db0 <xTaskResumeAll>
 8012cae:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012cb0:	68fb      	ldr	r3, [r7, #12]
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	d107      	bne.n	8012cc6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8012cb6:	4b07      	ldr	r3, [pc, #28]	; (8012cd4 <vTaskDelay+0x64>)
 8012cb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012cbc:	601a      	str	r2, [r3, #0]
 8012cbe:	f3bf 8f4f 	dsb	sy
 8012cc2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012cc6:	bf00      	nop
 8012cc8:	3710      	adds	r7, #16
 8012cca:	46bd      	mov	sp, r7
 8012ccc:	bd80      	pop	{r7, pc}
 8012cce:	bf00      	nop
 8012cd0:	200015d8 	.word	0x200015d8
 8012cd4:	e000ed04 	.word	0xe000ed04

08012cd8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012cd8:	b580      	push	{r7, lr}
 8012cda:	b08a      	sub	sp, #40	; 0x28
 8012cdc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8012cde:	2300      	movs	r3, #0
 8012ce0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8012ce2:	2300      	movs	r3, #0
 8012ce4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8012ce6:	463a      	mov	r2, r7
 8012ce8:	1d39      	adds	r1, r7, #4
 8012cea:	f107 0308 	add.w	r3, r7, #8
 8012cee:	4618      	mov	r0, r3
 8012cf0:	f7ef faa6 	bl	8002240 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8012cf4:	6839      	ldr	r1, [r7, #0]
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	68ba      	ldr	r2, [r7, #8]
 8012cfa:	9202      	str	r2, [sp, #8]
 8012cfc:	9301      	str	r3, [sp, #4]
 8012cfe:	2300      	movs	r3, #0
 8012d00:	9300      	str	r3, [sp, #0]
 8012d02:	2300      	movs	r3, #0
 8012d04:	460a      	mov	r2, r1
 8012d06:	491d      	ldr	r1, [pc, #116]	; (8012d7c <vTaskStartScheduler+0xa4>)
 8012d08:	481d      	ldr	r0, [pc, #116]	; (8012d80 <vTaskStartScheduler+0xa8>)
 8012d0a:	f7ff fe2a 	bl	8012962 <xTaskCreateStatic>
 8012d0e:	4602      	mov	r2, r0
 8012d10:	4b1c      	ldr	r3, [pc, #112]	; (8012d84 <vTaskStartScheduler+0xac>)
 8012d12:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8012d14:	4b1b      	ldr	r3, [pc, #108]	; (8012d84 <vTaskStartScheduler+0xac>)
 8012d16:	681b      	ldr	r3, [r3, #0]
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	d002      	beq.n	8012d22 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8012d1c:	2301      	movs	r3, #1
 8012d1e:	617b      	str	r3, [r7, #20]
 8012d20:	e001      	b.n	8012d26 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8012d22:	2300      	movs	r3, #0
 8012d24:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8012d26:	697b      	ldr	r3, [r7, #20]
 8012d28:	2b01      	cmp	r3, #1
 8012d2a:	d115      	bne.n	8012d58 <vTaskStartScheduler+0x80>
 8012d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d30:	f383 8811 	msr	BASEPRI, r3
 8012d34:	f3bf 8f6f 	isb	sy
 8012d38:	f3bf 8f4f 	dsb	sy
 8012d3c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8012d3e:	4b12      	ldr	r3, [pc, #72]	; (8012d88 <vTaskStartScheduler+0xb0>)
 8012d40:	f04f 32ff 	mov.w	r2, #4294967295
 8012d44:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8012d46:	4b11      	ldr	r3, [pc, #68]	; (8012d8c <vTaskStartScheduler+0xb4>)
 8012d48:	2201      	movs	r2, #1
 8012d4a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8012d4c:	4b10      	ldr	r3, [pc, #64]	; (8012d90 <vTaskStartScheduler+0xb8>)
 8012d4e:	2200      	movs	r2, #0
 8012d50:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8012d52:	f001 f845 	bl	8013de0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8012d56:	e00d      	b.n	8012d74 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8012d58:	697b      	ldr	r3, [r7, #20]
 8012d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d5e:	d109      	bne.n	8012d74 <vTaskStartScheduler+0x9c>
 8012d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d64:	f383 8811 	msr	BASEPRI, r3
 8012d68:	f3bf 8f6f 	isb	sy
 8012d6c:	f3bf 8f4f 	dsb	sy
 8012d70:	60fb      	str	r3, [r7, #12]
 8012d72:	e7fe      	b.n	8012d72 <vTaskStartScheduler+0x9a>
}
 8012d74:	bf00      	nop
 8012d76:	3718      	adds	r7, #24
 8012d78:	46bd      	mov	sp, r7
 8012d7a:	bd80      	pop	{r7, pc}
 8012d7c:	0801b2b0 	.word	0x0801b2b0
 8012d80:	08013325 	.word	0x08013325
 8012d84:	200015d4 	.word	0x200015d4
 8012d88:	200015d0 	.word	0x200015d0
 8012d8c:	200015bc 	.word	0x200015bc
 8012d90:	200015b4 	.word	0x200015b4

08012d94 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012d94:	b480      	push	{r7}
 8012d96:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8012d98:	4b04      	ldr	r3, [pc, #16]	; (8012dac <vTaskSuspendAll+0x18>)
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	3301      	adds	r3, #1
 8012d9e:	4a03      	ldr	r2, [pc, #12]	; (8012dac <vTaskSuspendAll+0x18>)
 8012da0:	6013      	str	r3, [r2, #0]
}
 8012da2:	bf00      	nop
 8012da4:	46bd      	mov	sp, r7
 8012da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012daa:	4770      	bx	lr
 8012dac:	200015d8 	.word	0x200015d8

08012db0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8012db0:	b580      	push	{r7, lr}
 8012db2:	b084      	sub	sp, #16
 8012db4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8012db6:	2300      	movs	r3, #0
 8012db8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8012dba:	2300      	movs	r3, #0
 8012dbc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8012dbe:	4b41      	ldr	r3, [pc, #260]	; (8012ec4 <xTaskResumeAll+0x114>)
 8012dc0:	681b      	ldr	r3, [r3, #0]
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	d109      	bne.n	8012dda <xTaskResumeAll+0x2a>
 8012dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dca:	f383 8811 	msr	BASEPRI, r3
 8012dce:	f3bf 8f6f 	isb	sy
 8012dd2:	f3bf 8f4f 	dsb	sy
 8012dd6:	603b      	str	r3, [r7, #0]
 8012dd8:	e7fe      	b.n	8012dd8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8012dda:	f001 f89f 	bl	8013f1c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8012dde:	4b39      	ldr	r3, [pc, #228]	; (8012ec4 <xTaskResumeAll+0x114>)
 8012de0:	681b      	ldr	r3, [r3, #0]
 8012de2:	3b01      	subs	r3, #1
 8012de4:	4a37      	ldr	r2, [pc, #220]	; (8012ec4 <xTaskResumeAll+0x114>)
 8012de6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012de8:	4b36      	ldr	r3, [pc, #216]	; (8012ec4 <xTaskResumeAll+0x114>)
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d161      	bne.n	8012eb4 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8012df0:	4b35      	ldr	r3, [pc, #212]	; (8012ec8 <xTaskResumeAll+0x118>)
 8012df2:	681b      	ldr	r3, [r3, #0]
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d05d      	beq.n	8012eb4 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012df8:	e02e      	b.n	8012e58 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8012dfa:	4b34      	ldr	r3, [pc, #208]	; (8012ecc <xTaskResumeAll+0x11c>)
 8012dfc:	68db      	ldr	r3, [r3, #12]
 8012dfe:	68db      	ldr	r3, [r3, #12]
 8012e00:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012e02:	68fb      	ldr	r3, [r7, #12]
 8012e04:	3318      	adds	r3, #24
 8012e06:	4618      	mov	r0, r3
 8012e08:	f7fe fe5b 	bl	8011ac2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012e0c:	68fb      	ldr	r3, [r7, #12]
 8012e0e:	3304      	adds	r3, #4
 8012e10:	4618      	mov	r0, r3
 8012e12:	f7fe fe56 	bl	8011ac2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e1a:	2201      	movs	r2, #1
 8012e1c:	409a      	lsls	r2, r3
 8012e1e:	4b2c      	ldr	r3, [pc, #176]	; (8012ed0 <xTaskResumeAll+0x120>)
 8012e20:	681b      	ldr	r3, [r3, #0]
 8012e22:	4313      	orrs	r3, r2
 8012e24:	4a2a      	ldr	r2, [pc, #168]	; (8012ed0 <xTaskResumeAll+0x120>)
 8012e26:	6013      	str	r3, [r2, #0]
 8012e28:	68fb      	ldr	r3, [r7, #12]
 8012e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e2c:	4613      	mov	r3, r2
 8012e2e:	009b      	lsls	r3, r3, #2
 8012e30:	4413      	add	r3, r2
 8012e32:	009b      	lsls	r3, r3, #2
 8012e34:	4a27      	ldr	r2, [pc, #156]	; (8012ed4 <xTaskResumeAll+0x124>)
 8012e36:	441a      	add	r2, r3
 8012e38:	68fb      	ldr	r3, [r7, #12]
 8012e3a:	3304      	adds	r3, #4
 8012e3c:	4619      	mov	r1, r3
 8012e3e:	4610      	mov	r0, r2
 8012e40:	f7fe fde2 	bl	8011a08 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012e44:	68fb      	ldr	r3, [r7, #12]
 8012e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e48:	4b23      	ldr	r3, [pc, #140]	; (8012ed8 <xTaskResumeAll+0x128>)
 8012e4a:	681b      	ldr	r3, [r3, #0]
 8012e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e4e:	429a      	cmp	r2, r3
 8012e50:	d302      	bcc.n	8012e58 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8012e52:	4b22      	ldr	r3, [pc, #136]	; (8012edc <xTaskResumeAll+0x12c>)
 8012e54:	2201      	movs	r2, #1
 8012e56:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012e58:	4b1c      	ldr	r3, [pc, #112]	; (8012ecc <xTaskResumeAll+0x11c>)
 8012e5a:	681b      	ldr	r3, [r3, #0]
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d1cc      	bne.n	8012dfa <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8012e60:	68fb      	ldr	r3, [r7, #12]
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	d001      	beq.n	8012e6a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8012e66:	f000 fb0f 	bl	8013488 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8012e6a:	4b1d      	ldr	r3, [pc, #116]	; (8012ee0 <xTaskResumeAll+0x130>)
 8012e6c:	681b      	ldr	r3, [r3, #0]
 8012e6e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	d010      	beq.n	8012e98 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8012e76:	f000 f837 	bl	8012ee8 <xTaskIncrementTick>
 8012e7a:	4603      	mov	r3, r0
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	d002      	beq.n	8012e86 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8012e80:	4b16      	ldr	r3, [pc, #88]	; (8012edc <xTaskResumeAll+0x12c>)
 8012e82:	2201      	movs	r2, #1
 8012e84:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	3b01      	subs	r3, #1
 8012e8a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d1f1      	bne.n	8012e76 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8012e92:	4b13      	ldr	r3, [pc, #76]	; (8012ee0 <xTaskResumeAll+0x130>)
 8012e94:	2200      	movs	r2, #0
 8012e96:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8012e98:	4b10      	ldr	r3, [pc, #64]	; (8012edc <xTaskResumeAll+0x12c>)
 8012e9a:	681b      	ldr	r3, [r3, #0]
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	d009      	beq.n	8012eb4 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8012ea0:	2301      	movs	r3, #1
 8012ea2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8012ea4:	4b0f      	ldr	r3, [pc, #60]	; (8012ee4 <xTaskResumeAll+0x134>)
 8012ea6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012eaa:	601a      	str	r2, [r3, #0]
 8012eac:	f3bf 8f4f 	dsb	sy
 8012eb0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012eb4:	f001 f860 	bl	8013f78 <vPortExitCritical>

	return xAlreadyYielded;
 8012eb8:	68bb      	ldr	r3, [r7, #8]
}
 8012eba:	4618      	mov	r0, r3
 8012ebc:	3710      	adds	r7, #16
 8012ebe:	46bd      	mov	sp, r7
 8012ec0:	bd80      	pop	{r7, pc}
 8012ec2:	bf00      	nop
 8012ec4:	200015d8 	.word	0x200015d8
 8012ec8:	200015b0 	.word	0x200015b0
 8012ecc:	20001570 	.word	0x20001570
 8012ed0:	200015b8 	.word	0x200015b8
 8012ed4:	200014b4 	.word	0x200014b4
 8012ed8:	200014b0 	.word	0x200014b0
 8012edc:	200015c4 	.word	0x200015c4
 8012ee0:	200015c0 	.word	0x200015c0
 8012ee4:	e000ed04 	.word	0xe000ed04

08012ee8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8012ee8:	b580      	push	{r7, lr}
 8012eea:	b086      	sub	sp, #24
 8012eec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8012eee:	2300      	movs	r3, #0
 8012ef0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012ef2:	4b50      	ldr	r3, [pc, #320]	; (8013034 <xTaskIncrementTick+0x14c>)
 8012ef4:	681b      	ldr	r3, [r3, #0]
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	f040 808c 	bne.w	8013014 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012efc:	4b4e      	ldr	r3, [pc, #312]	; (8013038 <xTaskIncrementTick+0x150>)
 8012efe:	681b      	ldr	r3, [r3, #0]
 8012f00:	3301      	adds	r3, #1
 8012f02:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8012f04:	4a4c      	ldr	r2, [pc, #304]	; (8013038 <xTaskIncrementTick+0x150>)
 8012f06:	693b      	ldr	r3, [r7, #16]
 8012f08:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8012f0a:	693b      	ldr	r3, [r7, #16]
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d11f      	bne.n	8012f50 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8012f10:	4b4a      	ldr	r3, [pc, #296]	; (801303c <xTaskIncrementTick+0x154>)
 8012f12:	681b      	ldr	r3, [r3, #0]
 8012f14:	681b      	ldr	r3, [r3, #0]
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	d009      	beq.n	8012f2e <xTaskIncrementTick+0x46>
 8012f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f1e:	f383 8811 	msr	BASEPRI, r3
 8012f22:	f3bf 8f6f 	isb	sy
 8012f26:	f3bf 8f4f 	dsb	sy
 8012f2a:	603b      	str	r3, [r7, #0]
 8012f2c:	e7fe      	b.n	8012f2c <xTaskIncrementTick+0x44>
 8012f2e:	4b43      	ldr	r3, [pc, #268]	; (801303c <xTaskIncrementTick+0x154>)
 8012f30:	681b      	ldr	r3, [r3, #0]
 8012f32:	60fb      	str	r3, [r7, #12]
 8012f34:	4b42      	ldr	r3, [pc, #264]	; (8013040 <xTaskIncrementTick+0x158>)
 8012f36:	681b      	ldr	r3, [r3, #0]
 8012f38:	4a40      	ldr	r2, [pc, #256]	; (801303c <xTaskIncrementTick+0x154>)
 8012f3a:	6013      	str	r3, [r2, #0]
 8012f3c:	4a40      	ldr	r2, [pc, #256]	; (8013040 <xTaskIncrementTick+0x158>)
 8012f3e:	68fb      	ldr	r3, [r7, #12]
 8012f40:	6013      	str	r3, [r2, #0]
 8012f42:	4b40      	ldr	r3, [pc, #256]	; (8013044 <xTaskIncrementTick+0x15c>)
 8012f44:	681b      	ldr	r3, [r3, #0]
 8012f46:	3301      	adds	r3, #1
 8012f48:	4a3e      	ldr	r2, [pc, #248]	; (8013044 <xTaskIncrementTick+0x15c>)
 8012f4a:	6013      	str	r3, [r2, #0]
 8012f4c:	f000 fa9c 	bl	8013488 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8012f50:	4b3d      	ldr	r3, [pc, #244]	; (8013048 <xTaskIncrementTick+0x160>)
 8012f52:	681b      	ldr	r3, [r3, #0]
 8012f54:	693a      	ldr	r2, [r7, #16]
 8012f56:	429a      	cmp	r2, r3
 8012f58:	d34d      	bcc.n	8012ff6 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012f5a:	4b38      	ldr	r3, [pc, #224]	; (801303c <xTaskIncrementTick+0x154>)
 8012f5c:	681b      	ldr	r3, [r3, #0]
 8012f5e:	681b      	ldr	r3, [r3, #0]
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	d101      	bne.n	8012f68 <xTaskIncrementTick+0x80>
 8012f64:	2301      	movs	r3, #1
 8012f66:	e000      	b.n	8012f6a <xTaskIncrementTick+0x82>
 8012f68:	2300      	movs	r3, #0
 8012f6a:	2b00      	cmp	r3, #0
 8012f6c:	d004      	beq.n	8012f78 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012f6e:	4b36      	ldr	r3, [pc, #216]	; (8013048 <xTaskIncrementTick+0x160>)
 8012f70:	f04f 32ff 	mov.w	r2, #4294967295
 8012f74:	601a      	str	r2, [r3, #0]
					break;
 8012f76:	e03e      	b.n	8012ff6 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8012f78:	4b30      	ldr	r3, [pc, #192]	; (801303c <xTaskIncrementTick+0x154>)
 8012f7a:	681b      	ldr	r3, [r3, #0]
 8012f7c:	68db      	ldr	r3, [r3, #12]
 8012f7e:	68db      	ldr	r3, [r3, #12]
 8012f80:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8012f82:	68bb      	ldr	r3, [r7, #8]
 8012f84:	685b      	ldr	r3, [r3, #4]
 8012f86:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8012f88:	693a      	ldr	r2, [r7, #16]
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	429a      	cmp	r2, r3
 8012f8e:	d203      	bcs.n	8012f98 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8012f90:	4a2d      	ldr	r2, [pc, #180]	; (8013048 <xTaskIncrementTick+0x160>)
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	6013      	str	r3, [r2, #0]
						break;
 8012f96:	e02e      	b.n	8012ff6 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012f98:	68bb      	ldr	r3, [r7, #8]
 8012f9a:	3304      	adds	r3, #4
 8012f9c:	4618      	mov	r0, r3
 8012f9e:	f7fe fd90 	bl	8011ac2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012fa2:	68bb      	ldr	r3, [r7, #8]
 8012fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012fa6:	2b00      	cmp	r3, #0
 8012fa8:	d004      	beq.n	8012fb4 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012faa:	68bb      	ldr	r3, [r7, #8]
 8012fac:	3318      	adds	r3, #24
 8012fae:	4618      	mov	r0, r3
 8012fb0:	f7fe fd87 	bl	8011ac2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8012fb4:	68bb      	ldr	r3, [r7, #8]
 8012fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012fb8:	2201      	movs	r2, #1
 8012fba:	409a      	lsls	r2, r3
 8012fbc:	4b23      	ldr	r3, [pc, #140]	; (801304c <xTaskIncrementTick+0x164>)
 8012fbe:	681b      	ldr	r3, [r3, #0]
 8012fc0:	4313      	orrs	r3, r2
 8012fc2:	4a22      	ldr	r2, [pc, #136]	; (801304c <xTaskIncrementTick+0x164>)
 8012fc4:	6013      	str	r3, [r2, #0]
 8012fc6:	68bb      	ldr	r3, [r7, #8]
 8012fc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012fca:	4613      	mov	r3, r2
 8012fcc:	009b      	lsls	r3, r3, #2
 8012fce:	4413      	add	r3, r2
 8012fd0:	009b      	lsls	r3, r3, #2
 8012fd2:	4a1f      	ldr	r2, [pc, #124]	; (8013050 <xTaskIncrementTick+0x168>)
 8012fd4:	441a      	add	r2, r3
 8012fd6:	68bb      	ldr	r3, [r7, #8]
 8012fd8:	3304      	adds	r3, #4
 8012fda:	4619      	mov	r1, r3
 8012fdc:	4610      	mov	r0, r2
 8012fde:	f7fe fd13 	bl	8011a08 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012fe2:	68bb      	ldr	r3, [r7, #8]
 8012fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012fe6:	4b1b      	ldr	r3, [pc, #108]	; (8013054 <xTaskIncrementTick+0x16c>)
 8012fe8:	681b      	ldr	r3, [r3, #0]
 8012fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012fec:	429a      	cmp	r2, r3
 8012fee:	d3b4      	bcc.n	8012f5a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8012ff0:	2301      	movs	r3, #1
 8012ff2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012ff4:	e7b1      	b.n	8012f5a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8012ff6:	4b17      	ldr	r3, [pc, #92]	; (8013054 <xTaskIncrementTick+0x16c>)
 8012ff8:	681b      	ldr	r3, [r3, #0]
 8012ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ffc:	4914      	ldr	r1, [pc, #80]	; (8013050 <xTaskIncrementTick+0x168>)
 8012ffe:	4613      	mov	r3, r2
 8013000:	009b      	lsls	r3, r3, #2
 8013002:	4413      	add	r3, r2
 8013004:	009b      	lsls	r3, r3, #2
 8013006:	440b      	add	r3, r1
 8013008:	681b      	ldr	r3, [r3, #0]
 801300a:	2b01      	cmp	r3, #1
 801300c:	d907      	bls.n	801301e <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 801300e:	2301      	movs	r3, #1
 8013010:	617b      	str	r3, [r7, #20]
 8013012:	e004      	b.n	801301e <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8013014:	4b10      	ldr	r3, [pc, #64]	; (8013058 <xTaskIncrementTick+0x170>)
 8013016:	681b      	ldr	r3, [r3, #0]
 8013018:	3301      	adds	r3, #1
 801301a:	4a0f      	ldr	r2, [pc, #60]	; (8013058 <xTaskIncrementTick+0x170>)
 801301c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 801301e:	4b0f      	ldr	r3, [pc, #60]	; (801305c <xTaskIncrementTick+0x174>)
 8013020:	681b      	ldr	r3, [r3, #0]
 8013022:	2b00      	cmp	r3, #0
 8013024:	d001      	beq.n	801302a <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8013026:	2301      	movs	r3, #1
 8013028:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 801302a:	697b      	ldr	r3, [r7, #20]
}
 801302c:	4618      	mov	r0, r3
 801302e:	3718      	adds	r7, #24
 8013030:	46bd      	mov	sp, r7
 8013032:	bd80      	pop	{r7, pc}
 8013034:	200015d8 	.word	0x200015d8
 8013038:	200015b4 	.word	0x200015b4
 801303c:	20001568 	.word	0x20001568
 8013040:	2000156c 	.word	0x2000156c
 8013044:	200015c8 	.word	0x200015c8
 8013048:	200015d0 	.word	0x200015d0
 801304c:	200015b8 	.word	0x200015b8
 8013050:	200014b4 	.word	0x200014b4
 8013054:	200014b0 	.word	0x200014b0
 8013058:	200015c0 	.word	0x200015c0
 801305c:	200015c4 	.word	0x200015c4

08013060 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013060:	b480      	push	{r7}
 8013062:	b087      	sub	sp, #28
 8013064:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8013066:	4b26      	ldr	r3, [pc, #152]	; (8013100 <vTaskSwitchContext+0xa0>)
 8013068:	681b      	ldr	r3, [r3, #0]
 801306a:	2b00      	cmp	r3, #0
 801306c:	d003      	beq.n	8013076 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801306e:	4b25      	ldr	r3, [pc, #148]	; (8013104 <vTaskSwitchContext+0xa4>)
 8013070:	2201      	movs	r2, #1
 8013072:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013074:	e03e      	b.n	80130f4 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8013076:	4b23      	ldr	r3, [pc, #140]	; (8013104 <vTaskSwitchContext+0xa4>)
 8013078:	2200      	movs	r2, #0
 801307a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 801307c:	4b22      	ldr	r3, [pc, #136]	; (8013108 <vTaskSwitchContext+0xa8>)
 801307e:	681b      	ldr	r3, [r3, #0]
 8013080:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8013082:	68fb      	ldr	r3, [r7, #12]
 8013084:	fab3 f383 	clz	r3, r3
 8013088:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801308a:	7afb      	ldrb	r3, [r7, #11]
 801308c:	f1c3 031f 	rsb	r3, r3, #31
 8013090:	617b      	str	r3, [r7, #20]
 8013092:	491e      	ldr	r1, [pc, #120]	; (801310c <vTaskSwitchContext+0xac>)
 8013094:	697a      	ldr	r2, [r7, #20]
 8013096:	4613      	mov	r3, r2
 8013098:	009b      	lsls	r3, r3, #2
 801309a:	4413      	add	r3, r2
 801309c:	009b      	lsls	r3, r3, #2
 801309e:	440b      	add	r3, r1
 80130a0:	681b      	ldr	r3, [r3, #0]
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	d109      	bne.n	80130ba <vTaskSwitchContext+0x5a>
	__asm volatile
 80130a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130aa:	f383 8811 	msr	BASEPRI, r3
 80130ae:	f3bf 8f6f 	isb	sy
 80130b2:	f3bf 8f4f 	dsb	sy
 80130b6:	607b      	str	r3, [r7, #4]
 80130b8:	e7fe      	b.n	80130b8 <vTaskSwitchContext+0x58>
 80130ba:	697a      	ldr	r2, [r7, #20]
 80130bc:	4613      	mov	r3, r2
 80130be:	009b      	lsls	r3, r3, #2
 80130c0:	4413      	add	r3, r2
 80130c2:	009b      	lsls	r3, r3, #2
 80130c4:	4a11      	ldr	r2, [pc, #68]	; (801310c <vTaskSwitchContext+0xac>)
 80130c6:	4413      	add	r3, r2
 80130c8:	613b      	str	r3, [r7, #16]
 80130ca:	693b      	ldr	r3, [r7, #16]
 80130cc:	685b      	ldr	r3, [r3, #4]
 80130ce:	685a      	ldr	r2, [r3, #4]
 80130d0:	693b      	ldr	r3, [r7, #16]
 80130d2:	605a      	str	r2, [r3, #4]
 80130d4:	693b      	ldr	r3, [r7, #16]
 80130d6:	685a      	ldr	r2, [r3, #4]
 80130d8:	693b      	ldr	r3, [r7, #16]
 80130da:	3308      	adds	r3, #8
 80130dc:	429a      	cmp	r2, r3
 80130de:	d104      	bne.n	80130ea <vTaskSwitchContext+0x8a>
 80130e0:	693b      	ldr	r3, [r7, #16]
 80130e2:	685b      	ldr	r3, [r3, #4]
 80130e4:	685a      	ldr	r2, [r3, #4]
 80130e6:	693b      	ldr	r3, [r7, #16]
 80130e8:	605a      	str	r2, [r3, #4]
 80130ea:	693b      	ldr	r3, [r7, #16]
 80130ec:	685b      	ldr	r3, [r3, #4]
 80130ee:	68db      	ldr	r3, [r3, #12]
 80130f0:	4a07      	ldr	r2, [pc, #28]	; (8013110 <vTaskSwitchContext+0xb0>)
 80130f2:	6013      	str	r3, [r2, #0]
}
 80130f4:	bf00      	nop
 80130f6:	371c      	adds	r7, #28
 80130f8:	46bd      	mov	sp, r7
 80130fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130fe:	4770      	bx	lr
 8013100:	200015d8 	.word	0x200015d8
 8013104:	200015c4 	.word	0x200015c4
 8013108:	200015b8 	.word	0x200015b8
 801310c:	200014b4 	.word	0x200014b4
 8013110:	200014b0 	.word	0x200014b0

08013114 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8013114:	b580      	push	{r7, lr}
 8013116:	b084      	sub	sp, #16
 8013118:	af00      	add	r7, sp, #0
 801311a:	6078      	str	r0, [r7, #4]
 801311c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	2b00      	cmp	r3, #0
 8013122:	d109      	bne.n	8013138 <vTaskPlaceOnEventList+0x24>
 8013124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013128:	f383 8811 	msr	BASEPRI, r3
 801312c:	f3bf 8f6f 	isb	sy
 8013130:	f3bf 8f4f 	dsb	sy
 8013134:	60fb      	str	r3, [r7, #12]
 8013136:	e7fe      	b.n	8013136 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013138:	4b07      	ldr	r3, [pc, #28]	; (8013158 <vTaskPlaceOnEventList+0x44>)
 801313a:	681b      	ldr	r3, [r3, #0]
 801313c:	3318      	adds	r3, #24
 801313e:	4619      	mov	r1, r3
 8013140:	6878      	ldr	r0, [r7, #4]
 8013142:	f7fe fc85 	bl	8011a50 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013146:	2101      	movs	r1, #1
 8013148:	6838      	ldr	r0, [r7, #0]
 801314a:	f000 fd5d 	bl	8013c08 <prvAddCurrentTaskToDelayedList>
}
 801314e:	bf00      	nop
 8013150:	3710      	adds	r7, #16
 8013152:	46bd      	mov	sp, r7
 8013154:	bd80      	pop	{r7, pc}
 8013156:	bf00      	nop
 8013158:	200014b0 	.word	0x200014b0

0801315c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801315c:	b580      	push	{r7, lr}
 801315e:	b086      	sub	sp, #24
 8013160:	af00      	add	r7, sp, #0
 8013162:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	68db      	ldr	r3, [r3, #12]
 8013168:	68db      	ldr	r3, [r3, #12]
 801316a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801316c:	693b      	ldr	r3, [r7, #16]
 801316e:	2b00      	cmp	r3, #0
 8013170:	d109      	bne.n	8013186 <xTaskRemoveFromEventList+0x2a>
 8013172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013176:	f383 8811 	msr	BASEPRI, r3
 801317a:	f3bf 8f6f 	isb	sy
 801317e:	f3bf 8f4f 	dsb	sy
 8013182:	60fb      	str	r3, [r7, #12]
 8013184:	e7fe      	b.n	8013184 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8013186:	693b      	ldr	r3, [r7, #16]
 8013188:	3318      	adds	r3, #24
 801318a:	4618      	mov	r0, r3
 801318c:	f7fe fc99 	bl	8011ac2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013190:	4b1d      	ldr	r3, [pc, #116]	; (8013208 <xTaskRemoveFromEventList+0xac>)
 8013192:	681b      	ldr	r3, [r3, #0]
 8013194:	2b00      	cmp	r3, #0
 8013196:	d11c      	bne.n	80131d2 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013198:	693b      	ldr	r3, [r7, #16]
 801319a:	3304      	adds	r3, #4
 801319c:	4618      	mov	r0, r3
 801319e:	f7fe fc90 	bl	8011ac2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80131a2:	693b      	ldr	r3, [r7, #16]
 80131a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80131a6:	2201      	movs	r2, #1
 80131a8:	409a      	lsls	r2, r3
 80131aa:	4b18      	ldr	r3, [pc, #96]	; (801320c <xTaskRemoveFromEventList+0xb0>)
 80131ac:	681b      	ldr	r3, [r3, #0]
 80131ae:	4313      	orrs	r3, r2
 80131b0:	4a16      	ldr	r2, [pc, #88]	; (801320c <xTaskRemoveFromEventList+0xb0>)
 80131b2:	6013      	str	r3, [r2, #0]
 80131b4:	693b      	ldr	r3, [r7, #16]
 80131b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80131b8:	4613      	mov	r3, r2
 80131ba:	009b      	lsls	r3, r3, #2
 80131bc:	4413      	add	r3, r2
 80131be:	009b      	lsls	r3, r3, #2
 80131c0:	4a13      	ldr	r2, [pc, #76]	; (8013210 <xTaskRemoveFromEventList+0xb4>)
 80131c2:	441a      	add	r2, r3
 80131c4:	693b      	ldr	r3, [r7, #16]
 80131c6:	3304      	adds	r3, #4
 80131c8:	4619      	mov	r1, r3
 80131ca:	4610      	mov	r0, r2
 80131cc:	f7fe fc1c 	bl	8011a08 <vListInsertEnd>
 80131d0:	e005      	b.n	80131de <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80131d2:	693b      	ldr	r3, [r7, #16]
 80131d4:	3318      	adds	r3, #24
 80131d6:	4619      	mov	r1, r3
 80131d8:	480e      	ldr	r0, [pc, #56]	; (8013214 <xTaskRemoveFromEventList+0xb8>)
 80131da:	f7fe fc15 	bl	8011a08 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80131de:	693b      	ldr	r3, [r7, #16]
 80131e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80131e2:	4b0d      	ldr	r3, [pc, #52]	; (8013218 <xTaskRemoveFromEventList+0xbc>)
 80131e4:	681b      	ldr	r3, [r3, #0]
 80131e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80131e8:	429a      	cmp	r2, r3
 80131ea:	d905      	bls.n	80131f8 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80131ec:	2301      	movs	r3, #1
 80131ee:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80131f0:	4b0a      	ldr	r3, [pc, #40]	; (801321c <xTaskRemoveFromEventList+0xc0>)
 80131f2:	2201      	movs	r2, #1
 80131f4:	601a      	str	r2, [r3, #0]
 80131f6:	e001      	b.n	80131fc <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 80131f8:	2300      	movs	r3, #0
 80131fa:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80131fc:	697b      	ldr	r3, [r7, #20]
}
 80131fe:	4618      	mov	r0, r3
 8013200:	3718      	adds	r7, #24
 8013202:	46bd      	mov	sp, r7
 8013204:	bd80      	pop	{r7, pc}
 8013206:	bf00      	nop
 8013208:	200015d8 	.word	0x200015d8
 801320c:	200015b8 	.word	0x200015b8
 8013210:	200014b4 	.word	0x200014b4
 8013214:	20001570 	.word	0x20001570
 8013218:	200014b0 	.word	0x200014b0
 801321c:	200015c4 	.word	0x200015c4

08013220 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8013220:	b480      	push	{r7}
 8013222:	b083      	sub	sp, #12
 8013224:	af00      	add	r7, sp, #0
 8013226:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8013228:	4b06      	ldr	r3, [pc, #24]	; (8013244 <vTaskInternalSetTimeOutState+0x24>)
 801322a:	681a      	ldr	r2, [r3, #0]
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8013230:	4b05      	ldr	r3, [pc, #20]	; (8013248 <vTaskInternalSetTimeOutState+0x28>)
 8013232:	681a      	ldr	r2, [r3, #0]
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	605a      	str	r2, [r3, #4]
}
 8013238:	bf00      	nop
 801323a:	370c      	adds	r7, #12
 801323c:	46bd      	mov	sp, r7
 801323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013242:	4770      	bx	lr
 8013244:	200015c8 	.word	0x200015c8
 8013248:	200015b4 	.word	0x200015b4

0801324c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801324c:	b580      	push	{r7, lr}
 801324e:	b088      	sub	sp, #32
 8013250:	af00      	add	r7, sp, #0
 8013252:	6078      	str	r0, [r7, #4]
 8013254:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	2b00      	cmp	r3, #0
 801325a:	d109      	bne.n	8013270 <xTaskCheckForTimeOut+0x24>
 801325c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013260:	f383 8811 	msr	BASEPRI, r3
 8013264:	f3bf 8f6f 	isb	sy
 8013268:	f3bf 8f4f 	dsb	sy
 801326c:	613b      	str	r3, [r7, #16]
 801326e:	e7fe      	b.n	801326e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8013270:	683b      	ldr	r3, [r7, #0]
 8013272:	2b00      	cmp	r3, #0
 8013274:	d109      	bne.n	801328a <xTaskCheckForTimeOut+0x3e>
 8013276:	f04f 0350 	mov.w	r3, #80	; 0x50
 801327a:	f383 8811 	msr	BASEPRI, r3
 801327e:	f3bf 8f6f 	isb	sy
 8013282:	f3bf 8f4f 	dsb	sy
 8013286:	60fb      	str	r3, [r7, #12]
 8013288:	e7fe      	b.n	8013288 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 801328a:	f000 fe47 	bl	8013f1c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801328e:	4b1d      	ldr	r3, [pc, #116]	; (8013304 <xTaskCheckForTimeOut+0xb8>)
 8013290:	681b      	ldr	r3, [r3, #0]
 8013292:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	685b      	ldr	r3, [r3, #4]
 8013298:	69ba      	ldr	r2, [r7, #24]
 801329a:	1ad3      	subs	r3, r2, r3
 801329c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801329e:	683b      	ldr	r3, [r7, #0]
 80132a0:	681b      	ldr	r3, [r3, #0]
 80132a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80132a6:	d102      	bne.n	80132ae <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80132a8:	2300      	movs	r3, #0
 80132aa:	61fb      	str	r3, [r7, #28]
 80132ac:	e023      	b.n	80132f6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	681a      	ldr	r2, [r3, #0]
 80132b2:	4b15      	ldr	r3, [pc, #84]	; (8013308 <xTaskCheckForTimeOut+0xbc>)
 80132b4:	681b      	ldr	r3, [r3, #0]
 80132b6:	429a      	cmp	r2, r3
 80132b8:	d007      	beq.n	80132ca <xTaskCheckForTimeOut+0x7e>
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	685b      	ldr	r3, [r3, #4]
 80132be:	69ba      	ldr	r2, [r7, #24]
 80132c0:	429a      	cmp	r2, r3
 80132c2:	d302      	bcc.n	80132ca <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80132c4:	2301      	movs	r3, #1
 80132c6:	61fb      	str	r3, [r7, #28]
 80132c8:	e015      	b.n	80132f6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80132ca:	683b      	ldr	r3, [r7, #0]
 80132cc:	681b      	ldr	r3, [r3, #0]
 80132ce:	697a      	ldr	r2, [r7, #20]
 80132d0:	429a      	cmp	r2, r3
 80132d2:	d20b      	bcs.n	80132ec <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80132d4:	683b      	ldr	r3, [r7, #0]
 80132d6:	681a      	ldr	r2, [r3, #0]
 80132d8:	697b      	ldr	r3, [r7, #20]
 80132da:	1ad2      	subs	r2, r2, r3
 80132dc:	683b      	ldr	r3, [r7, #0]
 80132de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80132e0:	6878      	ldr	r0, [r7, #4]
 80132e2:	f7ff ff9d 	bl	8013220 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80132e6:	2300      	movs	r3, #0
 80132e8:	61fb      	str	r3, [r7, #28]
 80132ea:	e004      	b.n	80132f6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80132ec:	683b      	ldr	r3, [r7, #0]
 80132ee:	2200      	movs	r2, #0
 80132f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80132f2:	2301      	movs	r3, #1
 80132f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80132f6:	f000 fe3f 	bl	8013f78 <vPortExitCritical>

	return xReturn;
 80132fa:	69fb      	ldr	r3, [r7, #28]
}
 80132fc:	4618      	mov	r0, r3
 80132fe:	3720      	adds	r7, #32
 8013300:	46bd      	mov	sp, r7
 8013302:	bd80      	pop	{r7, pc}
 8013304:	200015b4 	.word	0x200015b4
 8013308:	200015c8 	.word	0x200015c8

0801330c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801330c:	b480      	push	{r7}
 801330e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8013310:	4b03      	ldr	r3, [pc, #12]	; (8013320 <vTaskMissedYield+0x14>)
 8013312:	2201      	movs	r2, #1
 8013314:	601a      	str	r2, [r3, #0]
}
 8013316:	bf00      	nop
 8013318:	46bd      	mov	sp, r7
 801331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801331e:	4770      	bx	lr
 8013320:	200015c4 	.word	0x200015c4

08013324 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8013324:	b580      	push	{r7, lr}
 8013326:	b082      	sub	sp, #8
 8013328:	af00      	add	r7, sp, #0
 801332a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801332c:	f000 f852 	bl	80133d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8013330:	4b06      	ldr	r3, [pc, #24]	; (801334c <prvIdleTask+0x28>)
 8013332:	681b      	ldr	r3, [r3, #0]
 8013334:	2b01      	cmp	r3, #1
 8013336:	d9f9      	bls.n	801332c <prvIdleTask+0x8>
			{
				taskYIELD();
 8013338:	4b05      	ldr	r3, [pc, #20]	; (8013350 <prvIdleTask+0x2c>)
 801333a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801333e:	601a      	str	r2, [r3, #0]
 8013340:	f3bf 8f4f 	dsb	sy
 8013344:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8013348:	e7f0      	b.n	801332c <prvIdleTask+0x8>
 801334a:	bf00      	nop
 801334c:	200014b4 	.word	0x200014b4
 8013350:	e000ed04 	.word	0xe000ed04

08013354 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8013354:	b580      	push	{r7, lr}
 8013356:	b082      	sub	sp, #8
 8013358:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801335a:	2300      	movs	r3, #0
 801335c:	607b      	str	r3, [r7, #4]
 801335e:	e00c      	b.n	801337a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8013360:	687a      	ldr	r2, [r7, #4]
 8013362:	4613      	mov	r3, r2
 8013364:	009b      	lsls	r3, r3, #2
 8013366:	4413      	add	r3, r2
 8013368:	009b      	lsls	r3, r3, #2
 801336a:	4a12      	ldr	r2, [pc, #72]	; (80133b4 <prvInitialiseTaskLists+0x60>)
 801336c:	4413      	add	r3, r2
 801336e:	4618      	mov	r0, r3
 8013370:	f7fe fb1d 	bl	80119ae <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	3301      	adds	r3, #1
 8013378:	607b      	str	r3, [r7, #4]
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	2b06      	cmp	r3, #6
 801337e:	d9ef      	bls.n	8013360 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8013380:	480d      	ldr	r0, [pc, #52]	; (80133b8 <prvInitialiseTaskLists+0x64>)
 8013382:	f7fe fb14 	bl	80119ae <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8013386:	480d      	ldr	r0, [pc, #52]	; (80133bc <prvInitialiseTaskLists+0x68>)
 8013388:	f7fe fb11 	bl	80119ae <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801338c:	480c      	ldr	r0, [pc, #48]	; (80133c0 <prvInitialiseTaskLists+0x6c>)
 801338e:	f7fe fb0e 	bl	80119ae <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8013392:	480c      	ldr	r0, [pc, #48]	; (80133c4 <prvInitialiseTaskLists+0x70>)
 8013394:	f7fe fb0b 	bl	80119ae <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8013398:	480b      	ldr	r0, [pc, #44]	; (80133c8 <prvInitialiseTaskLists+0x74>)
 801339a:	f7fe fb08 	bl	80119ae <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801339e:	4b0b      	ldr	r3, [pc, #44]	; (80133cc <prvInitialiseTaskLists+0x78>)
 80133a0:	4a05      	ldr	r2, [pc, #20]	; (80133b8 <prvInitialiseTaskLists+0x64>)
 80133a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80133a4:	4b0a      	ldr	r3, [pc, #40]	; (80133d0 <prvInitialiseTaskLists+0x7c>)
 80133a6:	4a05      	ldr	r2, [pc, #20]	; (80133bc <prvInitialiseTaskLists+0x68>)
 80133a8:	601a      	str	r2, [r3, #0]
}
 80133aa:	bf00      	nop
 80133ac:	3708      	adds	r7, #8
 80133ae:	46bd      	mov	sp, r7
 80133b0:	bd80      	pop	{r7, pc}
 80133b2:	bf00      	nop
 80133b4:	200014b4 	.word	0x200014b4
 80133b8:	20001540 	.word	0x20001540
 80133bc:	20001554 	.word	0x20001554
 80133c0:	20001570 	.word	0x20001570
 80133c4:	20001584 	.word	0x20001584
 80133c8:	2000159c 	.word	0x2000159c
 80133cc:	20001568 	.word	0x20001568
 80133d0:	2000156c 	.word	0x2000156c

080133d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80133d4:	b580      	push	{r7, lr}
 80133d6:	b082      	sub	sp, #8
 80133d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80133da:	e019      	b.n	8013410 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80133dc:	f000 fd9e 	bl	8013f1c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80133e0:	4b0f      	ldr	r3, [pc, #60]	; (8013420 <prvCheckTasksWaitingTermination+0x4c>)
 80133e2:	68db      	ldr	r3, [r3, #12]
 80133e4:	68db      	ldr	r3, [r3, #12]
 80133e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	3304      	adds	r3, #4
 80133ec:	4618      	mov	r0, r3
 80133ee:	f7fe fb68 	bl	8011ac2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80133f2:	4b0c      	ldr	r3, [pc, #48]	; (8013424 <prvCheckTasksWaitingTermination+0x50>)
 80133f4:	681b      	ldr	r3, [r3, #0]
 80133f6:	3b01      	subs	r3, #1
 80133f8:	4a0a      	ldr	r2, [pc, #40]	; (8013424 <prvCheckTasksWaitingTermination+0x50>)
 80133fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80133fc:	4b0a      	ldr	r3, [pc, #40]	; (8013428 <prvCheckTasksWaitingTermination+0x54>)
 80133fe:	681b      	ldr	r3, [r3, #0]
 8013400:	3b01      	subs	r3, #1
 8013402:	4a09      	ldr	r2, [pc, #36]	; (8013428 <prvCheckTasksWaitingTermination+0x54>)
 8013404:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8013406:	f000 fdb7 	bl	8013f78 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801340a:	6878      	ldr	r0, [r7, #4]
 801340c:	f000 f80e 	bl	801342c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013410:	4b05      	ldr	r3, [pc, #20]	; (8013428 <prvCheckTasksWaitingTermination+0x54>)
 8013412:	681b      	ldr	r3, [r3, #0]
 8013414:	2b00      	cmp	r3, #0
 8013416:	d1e1      	bne.n	80133dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8013418:	bf00      	nop
 801341a:	3708      	adds	r7, #8
 801341c:	46bd      	mov	sp, r7
 801341e:	bd80      	pop	{r7, pc}
 8013420:	20001584 	.word	0x20001584
 8013424:	200015b0 	.word	0x200015b0
 8013428:	20001598 	.word	0x20001598

0801342c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801342c:	b580      	push	{r7, lr}
 801342e:	b084      	sub	sp, #16
 8013430:	af00      	add	r7, sp, #0
 8013432:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801343a:	2b00      	cmp	r3, #0
 801343c:	d108      	bne.n	8013450 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013442:	4618      	mov	r0, r3
 8013444:	f000 ff46 	bl	80142d4 <vPortFree>
				vPortFree( pxTCB );
 8013448:	6878      	ldr	r0, [r7, #4]
 801344a:	f000 ff43 	bl	80142d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801344e:	e017      	b.n	8013480 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013456:	2b01      	cmp	r3, #1
 8013458:	d103      	bne.n	8013462 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801345a:	6878      	ldr	r0, [r7, #4]
 801345c:	f000 ff3a 	bl	80142d4 <vPortFree>
	}
 8013460:	e00e      	b.n	8013480 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013468:	2b02      	cmp	r3, #2
 801346a:	d009      	beq.n	8013480 <prvDeleteTCB+0x54>
 801346c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013470:	f383 8811 	msr	BASEPRI, r3
 8013474:	f3bf 8f6f 	isb	sy
 8013478:	f3bf 8f4f 	dsb	sy
 801347c:	60fb      	str	r3, [r7, #12]
 801347e:	e7fe      	b.n	801347e <prvDeleteTCB+0x52>
	}
 8013480:	bf00      	nop
 8013482:	3710      	adds	r7, #16
 8013484:	46bd      	mov	sp, r7
 8013486:	bd80      	pop	{r7, pc}

08013488 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8013488:	b480      	push	{r7}
 801348a:	b083      	sub	sp, #12
 801348c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801348e:	4b0f      	ldr	r3, [pc, #60]	; (80134cc <prvResetNextTaskUnblockTime+0x44>)
 8013490:	681b      	ldr	r3, [r3, #0]
 8013492:	681b      	ldr	r3, [r3, #0]
 8013494:	2b00      	cmp	r3, #0
 8013496:	d101      	bne.n	801349c <prvResetNextTaskUnblockTime+0x14>
 8013498:	2301      	movs	r3, #1
 801349a:	e000      	b.n	801349e <prvResetNextTaskUnblockTime+0x16>
 801349c:	2300      	movs	r3, #0
 801349e:	2b00      	cmp	r3, #0
 80134a0:	d004      	beq.n	80134ac <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80134a2:	4b0b      	ldr	r3, [pc, #44]	; (80134d0 <prvResetNextTaskUnblockTime+0x48>)
 80134a4:	f04f 32ff 	mov.w	r2, #4294967295
 80134a8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80134aa:	e008      	b.n	80134be <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80134ac:	4b07      	ldr	r3, [pc, #28]	; (80134cc <prvResetNextTaskUnblockTime+0x44>)
 80134ae:	681b      	ldr	r3, [r3, #0]
 80134b0:	68db      	ldr	r3, [r3, #12]
 80134b2:	68db      	ldr	r3, [r3, #12]
 80134b4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	685b      	ldr	r3, [r3, #4]
 80134ba:	4a05      	ldr	r2, [pc, #20]	; (80134d0 <prvResetNextTaskUnblockTime+0x48>)
 80134bc:	6013      	str	r3, [r2, #0]
}
 80134be:	bf00      	nop
 80134c0:	370c      	adds	r7, #12
 80134c2:	46bd      	mov	sp, r7
 80134c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134c8:	4770      	bx	lr
 80134ca:	bf00      	nop
 80134cc:	20001568 	.word	0x20001568
 80134d0:	200015d0 	.word	0x200015d0

080134d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80134d4:	b480      	push	{r7}
 80134d6:	b083      	sub	sp, #12
 80134d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80134da:	4b0b      	ldr	r3, [pc, #44]	; (8013508 <xTaskGetSchedulerState+0x34>)
 80134dc:	681b      	ldr	r3, [r3, #0]
 80134de:	2b00      	cmp	r3, #0
 80134e0:	d102      	bne.n	80134e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80134e2:	2301      	movs	r3, #1
 80134e4:	607b      	str	r3, [r7, #4]
 80134e6:	e008      	b.n	80134fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80134e8:	4b08      	ldr	r3, [pc, #32]	; (801350c <xTaskGetSchedulerState+0x38>)
 80134ea:	681b      	ldr	r3, [r3, #0]
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d102      	bne.n	80134f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80134f0:	2302      	movs	r3, #2
 80134f2:	607b      	str	r3, [r7, #4]
 80134f4:	e001      	b.n	80134fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80134f6:	2300      	movs	r3, #0
 80134f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80134fa:	687b      	ldr	r3, [r7, #4]
	}
 80134fc:	4618      	mov	r0, r3
 80134fe:	370c      	adds	r7, #12
 8013500:	46bd      	mov	sp, r7
 8013502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013506:	4770      	bx	lr
 8013508:	200015bc 	.word	0x200015bc
 801350c:	200015d8 	.word	0x200015d8

08013510 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8013510:	b580      	push	{r7, lr}
 8013512:	b084      	sub	sp, #16
 8013514:	af00      	add	r7, sp, #0
 8013516:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801351c:	2300      	movs	r3, #0
 801351e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	2b00      	cmp	r3, #0
 8013524:	d06e      	beq.n	8013604 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8013526:	68bb      	ldr	r3, [r7, #8]
 8013528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801352a:	4b39      	ldr	r3, [pc, #228]	; (8013610 <xTaskPriorityInherit+0x100>)
 801352c:	681b      	ldr	r3, [r3, #0]
 801352e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013530:	429a      	cmp	r2, r3
 8013532:	d25e      	bcs.n	80135f2 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013534:	68bb      	ldr	r3, [r7, #8]
 8013536:	699b      	ldr	r3, [r3, #24]
 8013538:	2b00      	cmp	r3, #0
 801353a:	db06      	blt.n	801354a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801353c:	4b34      	ldr	r3, [pc, #208]	; (8013610 <xTaskPriorityInherit+0x100>)
 801353e:	681b      	ldr	r3, [r3, #0]
 8013540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013542:	f1c3 0207 	rsb	r2, r3, #7
 8013546:	68bb      	ldr	r3, [r7, #8]
 8013548:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801354a:	68bb      	ldr	r3, [r7, #8]
 801354c:	6959      	ldr	r1, [r3, #20]
 801354e:	68bb      	ldr	r3, [r7, #8]
 8013550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013552:	4613      	mov	r3, r2
 8013554:	009b      	lsls	r3, r3, #2
 8013556:	4413      	add	r3, r2
 8013558:	009b      	lsls	r3, r3, #2
 801355a:	4a2e      	ldr	r2, [pc, #184]	; (8013614 <xTaskPriorityInherit+0x104>)
 801355c:	4413      	add	r3, r2
 801355e:	4299      	cmp	r1, r3
 8013560:	d101      	bne.n	8013566 <xTaskPriorityInherit+0x56>
 8013562:	2301      	movs	r3, #1
 8013564:	e000      	b.n	8013568 <xTaskPriorityInherit+0x58>
 8013566:	2300      	movs	r3, #0
 8013568:	2b00      	cmp	r3, #0
 801356a:	d03a      	beq.n	80135e2 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801356c:	68bb      	ldr	r3, [r7, #8]
 801356e:	3304      	adds	r3, #4
 8013570:	4618      	mov	r0, r3
 8013572:	f7fe faa6 	bl	8011ac2 <uxListRemove>
 8013576:	4603      	mov	r3, r0
 8013578:	2b00      	cmp	r3, #0
 801357a:	d115      	bne.n	80135a8 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 801357c:	68bb      	ldr	r3, [r7, #8]
 801357e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013580:	4924      	ldr	r1, [pc, #144]	; (8013614 <xTaskPriorityInherit+0x104>)
 8013582:	4613      	mov	r3, r2
 8013584:	009b      	lsls	r3, r3, #2
 8013586:	4413      	add	r3, r2
 8013588:	009b      	lsls	r3, r3, #2
 801358a:	440b      	add	r3, r1
 801358c:	681b      	ldr	r3, [r3, #0]
 801358e:	2b00      	cmp	r3, #0
 8013590:	d10a      	bne.n	80135a8 <xTaskPriorityInherit+0x98>
 8013592:	68bb      	ldr	r3, [r7, #8]
 8013594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013596:	2201      	movs	r2, #1
 8013598:	fa02 f303 	lsl.w	r3, r2, r3
 801359c:	43da      	mvns	r2, r3
 801359e:	4b1e      	ldr	r3, [pc, #120]	; (8013618 <xTaskPriorityInherit+0x108>)
 80135a0:	681b      	ldr	r3, [r3, #0]
 80135a2:	4013      	ands	r3, r2
 80135a4:	4a1c      	ldr	r2, [pc, #112]	; (8013618 <xTaskPriorityInherit+0x108>)
 80135a6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80135a8:	4b19      	ldr	r3, [pc, #100]	; (8013610 <xTaskPriorityInherit+0x100>)
 80135aa:	681b      	ldr	r3, [r3, #0]
 80135ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80135ae:	68bb      	ldr	r3, [r7, #8]
 80135b0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80135b2:	68bb      	ldr	r3, [r7, #8]
 80135b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135b6:	2201      	movs	r2, #1
 80135b8:	409a      	lsls	r2, r3
 80135ba:	4b17      	ldr	r3, [pc, #92]	; (8013618 <xTaskPriorityInherit+0x108>)
 80135bc:	681b      	ldr	r3, [r3, #0]
 80135be:	4313      	orrs	r3, r2
 80135c0:	4a15      	ldr	r2, [pc, #84]	; (8013618 <xTaskPriorityInherit+0x108>)
 80135c2:	6013      	str	r3, [r2, #0]
 80135c4:	68bb      	ldr	r3, [r7, #8]
 80135c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80135c8:	4613      	mov	r3, r2
 80135ca:	009b      	lsls	r3, r3, #2
 80135cc:	4413      	add	r3, r2
 80135ce:	009b      	lsls	r3, r3, #2
 80135d0:	4a10      	ldr	r2, [pc, #64]	; (8013614 <xTaskPriorityInherit+0x104>)
 80135d2:	441a      	add	r2, r3
 80135d4:	68bb      	ldr	r3, [r7, #8]
 80135d6:	3304      	adds	r3, #4
 80135d8:	4619      	mov	r1, r3
 80135da:	4610      	mov	r0, r2
 80135dc:	f7fe fa14 	bl	8011a08 <vListInsertEnd>
 80135e0:	e004      	b.n	80135ec <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80135e2:	4b0b      	ldr	r3, [pc, #44]	; (8013610 <xTaskPriorityInherit+0x100>)
 80135e4:	681b      	ldr	r3, [r3, #0]
 80135e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80135e8:	68bb      	ldr	r3, [r7, #8]
 80135ea:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80135ec:	2301      	movs	r3, #1
 80135ee:	60fb      	str	r3, [r7, #12]
 80135f0:	e008      	b.n	8013604 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80135f2:	68bb      	ldr	r3, [r7, #8]
 80135f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80135f6:	4b06      	ldr	r3, [pc, #24]	; (8013610 <xTaskPriorityInherit+0x100>)
 80135f8:	681b      	ldr	r3, [r3, #0]
 80135fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135fc:	429a      	cmp	r2, r3
 80135fe:	d201      	bcs.n	8013604 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8013600:	2301      	movs	r3, #1
 8013602:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013604:	68fb      	ldr	r3, [r7, #12]
	}
 8013606:	4618      	mov	r0, r3
 8013608:	3710      	adds	r7, #16
 801360a:	46bd      	mov	sp, r7
 801360c:	bd80      	pop	{r7, pc}
 801360e:	bf00      	nop
 8013610:	200014b0 	.word	0x200014b0
 8013614:	200014b4 	.word	0x200014b4
 8013618:	200015b8 	.word	0x200015b8

0801361c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801361c:	b580      	push	{r7, lr}
 801361e:	b086      	sub	sp, #24
 8013620:	af00      	add	r7, sp, #0
 8013622:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8013628:	2300      	movs	r3, #0
 801362a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	2b00      	cmp	r3, #0
 8013630:	d06c      	beq.n	801370c <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8013632:	4b39      	ldr	r3, [pc, #228]	; (8013718 <xTaskPriorityDisinherit+0xfc>)
 8013634:	681b      	ldr	r3, [r3, #0]
 8013636:	693a      	ldr	r2, [r7, #16]
 8013638:	429a      	cmp	r2, r3
 801363a:	d009      	beq.n	8013650 <xTaskPriorityDisinherit+0x34>
 801363c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013640:	f383 8811 	msr	BASEPRI, r3
 8013644:	f3bf 8f6f 	isb	sy
 8013648:	f3bf 8f4f 	dsb	sy
 801364c:	60fb      	str	r3, [r7, #12]
 801364e:	e7fe      	b.n	801364e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8013650:	693b      	ldr	r3, [r7, #16]
 8013652:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013654:	2b00      	cmp	r3, #0
 8013656:	d109      	bne.n	801366c <xTaskPriorityDisinherit+0x50>
 8013658:	f04f 0350 	mov.w	r3, #80	; 0x50
 801365c:	f383 8811 	msr	BASEPRI, r3
 8013660:	f3bf 8f6f 	isb	sy
 8013664:	f3bf 8f4f 	dsb	sy
 8013668:	60bb      	str	r3, [r7, #8]
 801366a:	e7fe      	b.n	801366a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 801366c:	693b      	ldr	r3, [r7, #16]
 801366e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013670:	1e5a      	subs	r2, r3, #1
 8013672:	693b      	ldr	r3, [r7, #16]
 8013674:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8013676:	693b      	ldr	r3, [r7, #16]
 8013678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801367a:	693b      	ldr	r3, [r7, #16]
 801367c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801367e:	429a      	cmp	r2, r3
 8013680:	d044      	beq.n	801370c <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8013682:	693b      	ldr	r3, [r7, #16]
 8013684:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013686:	2b00      	cmp	r3, #0
 8013688:	d140      	bne.n	801370c <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801368a:	693b      	ldr	r3, [r7, #16]
 801368c:	3304      	adds	r3, #4
 801368e:	4618      	mov	r0, r3
 8013690:	f7fe fa17 	bl	8011ac2 <uxListRemove>
 8013694:	4603      	mov	r3, r0
 8013696:	2b00      	cmp	r3, #0
 8013698:	d115      	bne.n	80136c6 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801369a:	693b      	ldr	r3, [r7, #16]
 801369c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801369e:	491f      	ldr	r1, [pc, #124]	; (801371c <xTaskPriorityDisinherit+0x100>)
 80136a0:	4613      	mov	r3, r2
 80136a2:	009b      	lsls	r3, r3, #2
 80136a4:	4413      	add	r3, r2
 80136a6:	009b      	lsls	r3, r3, #2
 80136a8:	440b      	add	r3, r1
 80136aa:	681b      	ldr	r3, [r3, #0]
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	d10a      	bne.n	80136c6 <xTaskPriorityDisinherit+0xaa>
 80136b0:	693b      	ldr	r3, [r7, #16]
 80136b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80136b4:	2201      	movs	r2, #1
 80136b6:	fa02 f303 	lsl.w	r3, r2, r3
 80136ba:	43da      	mvns	r2, r3
 80136bc:	4b18      	ldr	r3, [pc, #96]	; (8013720 <xTaskPriorityDisinherit+0x104>)
 80136be:	681b      	ldr	r3, [r3, #0]
 80136c0:	4013      	ands	r3, r2
 80136c2:	4a17      	ldr	r2, [pc, #92]	; (8013720 <xTaskPriorityDisinherit+0x104>)
 80136c4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80136c6:	693b      	ldr	r3, [r7, #16]
 80136c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80136ca:	693b      	ldr	r3, [r7, #16]
 80136cc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80136ce:	693b      	ldr	r3, [r7, #16]
 80136d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80136d2:	f1c3 0207 	rsb	r2, r3, #7
 80136d6:	693b      	ldr	r3, [r7, #16]
 80136d8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80136da:	693b      	ldr	r3, [r7, #16]
 80136dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80136de:	2201      	movs	r2, #1
 80136e0:	409a      	lsls	r2, r3
 80136e2:	4b0f      	ldr	r3, [pc, #60]	; (8013720 <xTaskPriorityDisinherit+0x104>)
 80136e4:	681b      	ldr	r3, [r3, #0]
 80136e6:	4313      	orrs	r3, r2
 80136e8:	4a0d      	ldr	r2, [pc, #52]	; (8013720 <xTaskPriorityDisinherit+0x104>)
 80136ea:	6013      	str	r3, [r2, #0]
 80136ec:	693b      	ldr	r3, [r7, #16]
 80136ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80136f0:	4613      	mov	r3, r2
 80136f2:	009b      	lsls	r3, r3, #2
 80136f4:	4413      	add	r3, r2
 80136f6:	009b      	lsls	r3, r3, #2
 80136f8:	4a08      	ldr	r2, [pc, #32]	; (801371c <xTaskPriorityDisinherit+0x100>)
 80136fa:	441a      	add	r2, r3
 80136fc:	693b      	ldr	r3, [r7, #16]
 80136fe:	3304      	adds	r3, #4
 8013700:	4619      	mov	r1, r3
 8013702:	4610      	mov	r0, r2
 8013704:	f7fe f980 	bl	8011a08 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8013708:	2301      	movs	r3, #1
 801370a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801370c:	697b      	ldr	r3, [r7, #20]
	}
 801370e:	4618      	mov	r0, r3
 8013710:	3718      	adds	r7, #24
 8013712:	46bd      	mov	sp, r7
 8013714:	bd80      	pop	{r7, pc}
 8013716:	bf00      	nop
 8013718:	200014b0 	.word	0x200014b0
 801371c:	200014b4 	.word	0x200014b4
 8013720:	200015b8 	.word	0x200015b8

08013724 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8013724:	b580      	push	{r7, lr}
 8013726:	b088      	sub	sp, #32
 8013728:	af00      	add	r7, sp, #0
 801372a:	6078      	str	r0, [r7, #4]
 801372c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8013732:	2301      	movs	r3, #1
 8013734:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	2b00      	cmp	r3, #0
 801373a:	f000 8086 	beq.w	801384a <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801373e:	69bb      	ldr	r3, [r7, #24]
 8013740:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013742:	2b00      	cmp	r3, #0
 8013744:	d109      	bne.n	801375a <vTaskPriorityDisinheritAfterTimeout+0x36>
 8013746:	f04f 0350 	mov.w	r3, #80	; 0x50
 801374a:	f383 8811 	msr	BASEPRI, r3
 801374e:	f3bf 8f6f 	isb	sy
 8013752:	f3bf 8f4f 	dsb	sy
 8013756:	60fb      	str	r3, [r7, #12]
 8013758:	e7fe      	b.n	8013758 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801375a:	69bb      	ldr	r3, [r7, #24]
 801375c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801375e:	683a      	ldr	r2, [r7, #0]
 8013760:	429a      	cmp	r2, r3
 8013762:	d902      	bls.n	801376a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8013764:	683b      	ldr	r3, [r7, #0]
 8013766:	61fb      	str	r3, [r7, #28]
 8013768:	e002      	b.n	8013770 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801376a:	69bb      	ldr	r3, [r7, #24]
 801376c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801376e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8013770:	69bb      	ldr	r3, [r7, #24]
 8013772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013774:	69fa      	ldr	r2, [r7, #28]
 8013776:	429a      	cmp	r2, r3
 8013778:	d067      	beq.n	801384a <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801377a:	69bb      	ldr	r3, [r7, #24]
 801377c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801377e:	697a      	ldr	r2, [r7, #20]
 8013780:	429a      	cmp	r2, r3
 8013782:	d162      	bne.n	801384a <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8013784:	4b33      	ldr	r3, [pc, #204]	; (8013854 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8013786:	681b      	ldr	r3, [r3, #0]
 8013788:	69ba      	ldr	r2, [r7, #24]
 801378a:	429a      	cmp	r2, r3
 801378c:	d109      	bne.n	80137a2 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 801378e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013792:	f383 8811 	msr	BASEPRI, r3
 8013796:	f3bf 8f6f 	isb	sy
 801379a:	f3bf 8f4f 	dsb	sy
 801379e:	60bb      	str	r3, [r7, #8]
 80137a0:	e7fe      	b.n	80137a0 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80137a2:	69bb      	ldr	r3, [r7, #24]
 80137a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80137a6:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80137a8:	69bb      	ldr	r3, [r7, #24]
 80137aa:	69fa      	ldr	r2, [r7, #28]
 80137ac:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80137ae:	69bb      	ldr	r3, [r7, #24]
 80137b0:	699b      	ldr	r3, [r3, #24]
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	db04      	blt.n	80137c0 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80137b6:	69fb      	ldr	r3, [r7, #28]
 80137b8:	f1c3 0207 	rsb	r2, r3, #7
 80137bc:	69bb      	ldr	r3, [r7, #24]
 80137be:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80137c0:	69bb      	ldr	r3, [r7, #24]
 80137c2:	6959      	ldr	r1, [r3, #20]
 80137c4:	693a      	ldr	r2, [r7, #16]
 80137c6:	4613      	mov	r3, r2
 80137c8:	009b      	lsls	r3, r3, #2
 80137ca:	4413      	add	r3, r2
 80137cc:	009b      	lsls	r3, r3, #2
 80137ce:	4a22      	ldr	r2, [pc, #136]	; (8013858 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80137d0:	4413      	add	r3, r2
 80137d2:	4299      	cmp	r1, r3
 80137d4:	d101      	bne.n	80137da <vTaskPriorityDisinheritAfterTimeout+0xb6>
 80137d6:	2301      	movs	r3, #1
 80137d8:	e000      	b.n	80137dc <vTaskPriorityDisinheritAfterTimeout+0xb8>
 80137da:	2300      	movs	r3, #0
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d034      	beq.n	801384a <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80137e0:	69bb      	ldr	r3, [r7, #24]
 80137e2:	3304      	adds	r3, #4
 80137e4:	4618      	mov	r0, r3
 80137e6:	f7fe f96c 	bl	8011ac2 <uxListRemove>
 80137ea:	4603      	mov	r3, r0
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	d115      	bne.n	801381c <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80137f0:	69bb      	ldr	r3, [r7, #24]
 80137f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80137f4:	4918      	ldr	r1, [pc, #96]	; (8013858 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80137f6:	4613      	mov	r3, r2
 80137f8:	009b      	lsls	r3, r3, #2
 80137fa:	4413      	add	r3, r2
 80137fc:	009b      	lsls	r3, r3, #2
 80137fe:	440b      	add	r3, r1
 8013800:	681b      	ldr	r3, [r3, #0]
 8013802:	2b00      	cmp	r3, #0
 8013804:	d10a      	bne.n	801381c <vTaskPriorityDisinheritAfterTimeout+0xf8>
 8013806:	69bb      	ldr	r3, [r7, #24]
 8013808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801380a:	2201      	movs	r2, #1
 801380c:	fa02 f303 	lsl.w	r3, r2, r3
 8013810:	43da      	mvns	r2, r3
 8013812:	4b12      	ldr	r3, [pc, #72]	; (801385c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8013814:	681b      	ldr	r3, [r3, #0]
 8013816:	4013      	ands	r3, r2
 8013818:	4a10      	ldr	r2, [pc, #64]	; (801385c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801381a:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801381c:	69bb      	ldr	r3, [r7, #24]
 801381e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013820:	2201      	movs	r2, #1
 8013822:	409a      	lsls	r2, r3
 8013824:	4b0d      	ldr	r3, [pc, #52]	; (801385c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8013826:	681b      	ldr	r3, [r3, #0]
 8013828:	4313      	orrs	r3, r2
 801382a:	4a0c      	ldr	r2, [pc, #48]	; (801385c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801382c:	6013      	str	r3, [r2, #0]
 801382e:	69bb      	ldr	r3, [r7, #24]
 8013830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013832:	4613      	mov	r3, r2
 8013834:	009b      	lsls	r3, r3, #2
 8013836:	4413      	add	r3, r2
 8013838:	009b      	lsls	r3, r3, #2
 801383a:	4a07      	ldr	r2, [pc, #28]	; (8013858 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 801383c:	441a      	add	r2, r3
 801383e:	69bb      	ldr	r3, [r7, #24]
 8013840:	3304      	adds	r3, #4
 8013842:	4619      	mov	r1, r3
 8013844:	4610      	mov	r0, r2
 8013846:	f7fe f8df 	bl	8011a08 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801384a:	bf00      	nop
 801384c:	3720      	adds	r7, #32
 801384e:	46bd      	mov	sp, r7
 8013850:	bd80      	pop	{r7, pc}
 8013852:	bf00      	nop
 8013854:	200014b0 	.word	0x200014b0
 8013858:	200014b4 	.word	0x200014b4
 801385c:	200015b8 	.word	0x200015b8

08013860 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8013860:	b480      	push	{r7}
 8013862:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8013864:	4b07      	ldr	r3, [pc, #28]	; (8013884 <pvTaskIncrementMutexHeldCount+0x24>)
 8013866:	681b      	ldr	r3, [r3, #0]
 8013868:	2b00      	cmp	r3, #0
 801386a:	d004      	beq.n	8013876 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801386c:	4b05      	ldr	r3, [pc, #20]	; (8013884 <pvTaskIncrementMutexHeldCount+0x24>)
 801386e:	681b      	ldr	r3, [r3, #0]
 8013870:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8013872:	3201      	adds	r2, #1
 8013874:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8013876:	4b03      	ldr	r3, [pc, #12]	; (8013884 <pvTaskIncrementMutexHeldCount+0x24>)
 8013878:	681b      	ldr	r3, [r3, #0]
	}
 801387a:	4618      	mov	r0, r3
 801387c:	46bd      	mov	sp, r7
 801387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013882:	4770      	bx	lr
 8013884:	200014b0 	.word	0x200014b0

08013888 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8013888:	b580      	push	{r7, lr}
 801388a:	b086      	sub	sp, #24
 801388c:	af00      	add	r7, sp, #0
 801388e:	60f8      	str	r0, [r7, #12]
 8013890:	60b9      	str	r1, [r7, #8]
 8013892:	607a      	str	r2, [r7, #4]
 8013894:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8013896:	f000 fb41 	bl	8013f1c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801389a:	4b26      	ldr	r3, [pc, #152]	; (8013934 <xTaskNotifyWait+0xac>)
 801389c:	681b      	ldr	r3, [r3, #0]
 801389e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80138a2:	b2db      	uxtb	r3, r3
 80138a4:	2b02      	cmp	r3, #2
 80138a6:	d01a      	beq.n	80138de <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80138a8:	4b22      	ldr	r3, [pc, #136]	; (8013934 <xTaskNotifyWait+0xac>)
 80138aa:	681b      	ldr	r3, [r3, #0]
 80138ac:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80138ae:	68fa      	ldr	r2, [r7, #12]
 80138b0:	43d2      	mvns	r2, r2
 80138b2:	400a      	ands	r2, r1
 80138b4:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80138b6:	4b1f      	ldr	r3, [pc, #124]	; (8013934 <xTaskNotifyWait+0xac>)
 80138b8:	681b      	ldr	r3, [r3, #0]
 80138ba:	2201      	movs	r2, #1
 80138bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 80138c0:	683b      	ldr	r3, [r7, #0]
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	d00b      	beq.n	80138de <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80138c6:	2101      	movs	r1, #1
 80138c8:	6838      	ldr	r0, [r7, #0]
 80138ca:	f000 f99d 	bl	8013c08 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80138ce:	4b1a      	ldr	r3, [pc, #104]	; (8013938 <xTaskNotifyWait+0xb0>)
 80138d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80138d4:	601a      	str	r2, [r3, #0]
 80138d6:	f3bf 8f4f 	dsb	sy
 80138da:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80138de:	f000 fb4b 	bl	8013f78 <vPortExitCritical>

		taskENTER_CRITICAL();
 80138e2:	f000 fb1b 	bl	8013f1c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	d004      	beq.n	80138f6 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80138ec:	4b11      	ldr	r3, [pc, #68]	; (8013934 <xTaskNotifyWait+0xac>)
 80138ee:	681b      	ldr	r3, [r3, #0]
 80138f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80138f6:	4b0f      	ldr	r3, [pc, #60]	; (8013934 <xTaskNotifyWait+0xac>)
 80138f8:	681b      	ldr	r3, [r3, #0]
 80138fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80138fe:	b2db      	uxtb	r3, r3
 8013900:	2b02      	cmp	r3, #2
 8013902:	d002      	beq.n	801390a <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8013904:	2300      	movs	r3, #0
 8013906:	617b      	str	r3, [r7, #20]
 8013908:	e008      	b.n	801391c <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 801390a:	4b0a      	ldr	r3, [pc, #40]	; (8013934 <xTaskNotifyWait+0xac>)
 801390c:	681b      	ldr	r3, [r3, #0]
 801390e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8013910:	68ba      	ldr	r2, [r7, #8]
 8013912:	43d2      	mvns	r2, r2
 8013914:	400a      	ands	r2, r1
 8013916:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 8013918:	2301      	movs	r3, #1
 801391a:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801391c:	4b05      	ldr	r3, [pc, #20]	; (8013934 <xTaskNotifyWait+0xac>)
 801391e:	681b      	ldr	r3, [r3, #0]
 8013920:	2200      	movs	r2, #0
 8013922:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 8013926:	f000 fb27 	bl	8013f78 <vPortExitCritical>

		return xReturn;
 801392a:	697b      	ldr	r3, [r7, #20]
	}
 801392c:	4618      	mov	r0, r3
 801392e:	3718      	adds	r7, #24
 8013930:	46bd      	mov	sp, r7
 8013932:	bd80      	pop	{r7, pc}
 8013934:	200014b0 	.word	0x200014b0
 8013938:	e000ed04 	.word	0xe000ed04

0801393c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 801393c:	b580      	push	{r7, lr}
 801393e:	b08a      	sub	sp, #40	; 0x28
 8013940:	af00      	add	r7, sp, #0
 8013942:	60f8      	str	r0, [r7, #12]
 8013944:	60b9      	str	r1, [r7, #8]
 8013946:	603b      	str	r3, [r7, #0]
 8013948:	4613      	mov	r3, r2
 801394a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 801394c:	2301      	movs	r3, #1
 801394e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8013950:	68fb      	ldr	r3, [r7, #12]
 8013952:	2b00      	cmp	r3, #0
 8013954:	d109      	bne.n	801396a <xTaskGenericNotify+0x2e>
 8013956:	f04f 0350 	mov.w	r3, #80	; 0x50
 801395a:	f383 8811 	msr	BASEPRI, r3
 801395e:	f3bf 8f6f 	isb	sy
 8013962:	f3bf 8f4f 	dsb	sy
 8013966:	61bb      	str	r3, [r7, #24]
 8013968:	e7fe      	b.n	8013968 <xTaskGenericNotify+0x2c>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 801396a:	68fb      	ldr	r3, [r7, #12]
 801396c:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 801396e:	f000 fad5 	bl	8013f1c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8013972:	683b      	ldr	r3, [r7, #0]
 8013974:	2b00      	cmp	r3, #0
 8013976:	d003      	beq.n	8013980 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8013978:	6a3b      	ldr	r3, [r7, #32]
 801397a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801397c:	683b      	ldr	r3, [r7, #0]
 801397e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8013980:	6a3b      	ldr	r3, [r7, #32]
 8013982:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013986:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8013988:	6a3b      	ldr	r3, [r7, #32]
 801398a:	2202      	movs	r2, #2
 801398c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8013990:	79fb      	ldrb	r3, [r7, #7]
 8013992:	2b04      	cmp	r3, #4
 8013994:	d827      	bhi.n	80139e6 <xTaskGenericNotify+0xaa>
 8013996:	a201      	add	r2, pc, #4	; (adr r2, 801399c <xTaskGenericNotify+0x60>)
 8013998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801399c:	080139e7 	.word	0x080139e7
 80139a0:	080139b1 	.word	0x080139b1
 80139a4:	080139bf 	.word	0x080139bf
 80139a8:	080139cb 	.word	0x080139cb
 80139ac:	080139d3 	.word	0x080139d3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80139b0:	6a3b      	ldr	r3, [r7, #32]
 80139b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80139b4:	68bb      	ldr	r3, [r7, #8]
 80139b6:	431a      	orrs	r2, r3
 80139b8:	6a3b      	ldr	r3, [r7, #32]
 80139ba:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80139bc:	e013      	b.n	80139e6 <xTaskGenericNotify+0xaa>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80139be:	6a3b      	ldr	r3, [r7, #32]
 80139c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80139c2:	1c5a      	adds	r2, r3, #1
 80139c4:	6a3b      	ldr	r3, [r7, #32]
 80139c6:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80139c8:	e00d      	b.n	80139e6 <xTaskGenericNotify+0xaa>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80139ca:	6a3b      	ldr	r3, [r7, #32]
 80139cc:	68ba      	ldr	r2, [r7, #8]
 80139ce:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80139d0:	e009      	b.n	80139e6 <xTaskGenericNotify+0xaa>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80139d2:	7ffb      	ldrb	r3, [r7, #31]
 80139d4:	2b02      	cmp	r3, #2
 80139d6:	d003      	beq.n	80139e0 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80139d8:	6a3b      	ldr	r3, [r7, #32]
 80139da:	68ba      	ldr	r2, [r7, #8]
 80139dc:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80139de:	e001      	b.n	80139e4 <xTaskGenericNotify+0xa8>
						xReturn = pdFAIL;
 80139e0:	2300      	movs	r3, #0
 80139e2:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80139e4:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80139e6:	7ffb      	ldrb	r3, [r7, #31]
 80139e8:	2b01      	cmp	r3, #1
 80139ea:	d138      	bne.n	8013a5e <xTaskGenericNotify+0x122>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80139ec:	6a3b      	ldr	r3, [r7, #32]
 80139ee:	3304      	adds	r3, #4
 80139f0:	4618      	mov	r0, r3
 80139f2:	f7fe f866 	bl	8011ac2 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80139f6:	6a3b      	ldr	r3, [r7, #32]
 80139f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139fa:	2201      	movs	r2, #1
 80139fc:	409a      	lsls	r2, r3
 80139fe:	4b1b      	ldr	r3, [pc, #108]	; (8013a6c <xTaskGenericNotify+0x130>)
 8013a00:	681b      	ldr	r3, [r3, #0]
 8013a02:	4313      	orrs	r3, r2
 8013a04:	4a19      	ldr	r2, [pc, #100]	; (8013a6c <xTaskGenericNotify+0x130>)
 8013a06:	6013      	str	r3, [r2, #0]
 8013a08:	6a3b      	ldr	r3, [r7, #32]
 8013a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a0c:	4613      	mov	r3, r2
 8013a0e:	009b      	lsls	r3, r3, #2
 8013a10:	4413      	add	r3, r2
 8013a12:	009b      	lsls	r3, r3, #2
 8013a14:	4a16      	ldr	r2, [pc, #88]	; (8013a70 <xTaskGenericNotify+0x134>)
 8013a16:	441a      	add	r2, r3
 8013a18:	6a3b      	ldr	r3, [r7, #32]
 8013a1a:	3304      	adds	r3, #4
 8013a1c:	4619      	mov	r1, r3
 8013a1e:	4610      	mov	r0, r2
 8013a20:	f7fd fff2 	bl	8011a08 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8013a24:	6a3b      	ldr	r3, [r7, #32]
 8013a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	d009      	beq.n	8013a40 <xTaskGenericNotify+0x104>
 8013a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a30:	f383 8811 	msr	BASEPRI, r3
 8013a34:	f3bf 8f6f 	isb	sy
 8013a38:	f3bf 8f4f 	dsb	sy
 8013a3c:	617b      	str	r3, [r7, #20]
 8013a3e:	e7fe      	b.n	8013a3e <xTaskGenericNotify+0x102>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013a40:	6a3b      	ldr	r3, [r7, #32]
 8013a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a44:	4b0b      	ldr	r3, [pc, #44]	; (8013a74 <xTaskGenericNotify+0x138>)
 8013a46:	681b      	ldr	r3, [r3, #0]
 8013a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a4a:	429a      	cmp	r2, r3
 8013a4c:	d907      	bls.n	8013a5e <xTaskGenericNotify+0x122>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8013a4e:	4b0a      	ldr	r3, [pc, #40]	; (8013a78 <xTaskGenericNotify+0x13c>)
 8013a50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013a54:	601a      	str	r2, [r3, #0]
 8013a56:	f3bf 8f4f 	dsb	sy
 8013a5a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8013a5e:	f000 fa8b 	bl	8013f78 <vPortExitCritical>

		return xReturn;
 8013a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8013a64:	4618      	mov	r0, r3
 8013a66:	3728      	adds	r7, #40	; 0x28
 8013a68:	46bd      	mov	sp, r7
 8013a6a:	bd80      	pop	{r7, pc}
 8013a6c:	200015b8 	.word	0x200015b8
 8013a70:	200014b4 	.word	0x200014b4
 8013a74:	200014b0 	.word	0x200014b0
 8013a78:	e000ed04 	.word	0xe000ed04

08013a7c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8013a7c:	b580      	push	{r7, lr}
 8013a7e:	b08e      	sub	sp, #56	; 0x38
 8013a80:	af00      	add	r7, sp, #0
 8013a82:	60f8      	str	r0, [r7, #12]
 8013a84:	60b9      	str	r1, [r7, #8]
 8013a86:	603b      	str	r3, [r7, #0]
 8013a88:	4613      	mov	r3, r2
 8013a8a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8013a8c:	2301      	movs	r3, #1
 8013a8e:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8013a90:	68fb      	ldr	r3, [r7, #12]
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	d109      	bne.n	8013aaa <xTaskGenericNotifyFromISR+0x2e>
 8013a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a9a:	f383 8811 	msr	BASEPRI, r3
 8013a9e:	f3bf 8f6f 	isb	sy
 8013aa2:	f3bf 8f4f 	dsb	sy
 8013aa6:	627b      	str	r3, [r7, #36]	; 0x24
 8013aa8:	e7fe      	b.n	8013aa8 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013aaa:	f000 fb13 	bl	80140d4 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 8013aae:	68fb      	ldr	r3, [r7, #12]
 8013ab0:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8013ab2:	f3ef 8211 	mrs	r2, BASEPRI
 8013ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013aba:	f383 8811 	msr	BASEPRI, r3
 8013abe:	f3bf 8f6f 	isb	sy
 8013ac2:	f3bf 8f4f 	dsb	sy
 8013ac6:	623a      	str	r2, [r7, #32]
 8013ac8:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8013aca:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013acc:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8013ace:	683b      	ldr	r3, [r7, #0]
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	d003      	beq.n	8013adc <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8013ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ad6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013ad8:	683b      	ldr	r3, [r7, #0]
 8013ada:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8013adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ade:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013ae2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8013ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ae8:	2202      	movs	r2, #2
 8013aea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8013aee:	79fb      	ldrb	r3, [r7, #7]
 8013af0:	2b04      	cmp	r3, #4
 8013af2:	d829      	bhi.n	8013b48 <xTaskGenericNotifyFromISR+0xcc>
 8013af4:	a201      	add	r2, pc, #4	; (adr r2, 8013afc <xTaskGenericNotifyFromISR+0x80>)
 8013af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013afa:	bf00      	nop
 8013afc:	08013b49 	.word	0x08013b49
 8013b00:	08013b11 	.word	0x08013b11
 8013b04:	08013b1f 	.word	0x08013b1f
 8013b08:	08013b2b 	.word	0x08013b2b
 8013b0c:	08013b33 	.word	0x08013b33
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8013b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013b14:	68bb      	ldr	r3, [r7, #8]
 8013b16:	431a      	orrs	r2, r3
 8013b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b1a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8013b1c:	e014      	b.n	8013b48 <xTaskGenericNotifyFromISR+0xcc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8013b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013b22:	1c5a      	adds	r2, r3, #1
 8013b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b26:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8013b28:	e00e      	b.n	8013b48 <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8013b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b2c:	68ba      	ldr	r2, [r7, #8]
 8013b2e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8013b30:	e00a      	b.n	8013b48 <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8013b32:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8013b36:	2b02      	cmp	r3, #2
 8013b38:	d003      	beq.n	8013b42 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8013b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b3c:	68ba      	ldr	r2, [r7, #8]
 8013b3e:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8013b40:	e001      	b.n	8013b46 <xTaskGenericNotifyFromISR+0xca>
						xReturn = pdFAIL;
 8013b42:	2300      	movs	r3, #0
 8013b44:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8013b46:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8013b48:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8013b4c:	2b01      	cmp	r3, #1
 8013b4e:	d145      	bne.n	8013bdc <xTaskGenericNotifyFromISR+0x160>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8013b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013b54:	2b00      	cmp	r3, #0
 8013b56:	d009      	beq.n	8013b6c <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 8013b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b5c:	f383 8811 	msr	BASEPRI, r3
 8013b60:	f3bf 8f6f 	isb	sy
 8013b64:	f3bf 8f4f 	dsb	sy
 8013b68:	61bb      	str	r3, [r7, #24]
 8013b6a:	e7fe      	b.n	8013b6a <xTaskGenericNotifyFromISR+0xee>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013b6c:	4b20      	ldr	r3, [pc, #128]	; (8013bf0 <xTaskGenericNotifyFromISR+0x174>)
 8013b6e:	681b      	ldr	r3, [r3, #0]
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d11c      	bne.n	8013bae <xTaskGenericNotifyFromISR+0x132>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b76:	3304      	adds	r3, #4
 8013b78:	4618      	mov	r0, r3
 8013b7a:	f7fd ffa2 	bl	8011ac2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b82:	2201      	movs	r2, #1
 8013b84:	409a      	lsls	r2, r3
 8013b86:	4b1b      	ldr	r3, [pc, #108]	; (8013bf4 <xTaskGenericNotifyFromISR+0x178>)
 8013b88:	681b      	ldr	r3, [r3, #0]
 8013b8a:	4313      	orrs	r3, r2
 8013b8c:	4a19      	ldr	r2, [pc, #100]	; (8013bf4 <xTaskGenericNotifyFromISR+0x178>)
 8013b8e:	6013      	str	r3, [r2, #0]
 8013b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b94:	4613      	mov	r3, r2
 8013b96:	009b      	lsls	r3, r3, #2
 8013b98:	4413      	add	r3, r2
 8013b9a:	009b      	lsls	r3, r3, #2
 8013b9c:	4a16      	ldr	r2, [pc, #88]	; (8013bf8 <xTaskGenericNotifyFromISR+0x17c>)
 8013b9e:	441a      	add	r2, r3
 8013ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ba2:	3304      	adds	r3, #4
 8013ba4:	4619      	mov	r1, r3
 8013ba6:	4610      	mov	r0, r2
 8013ba8:	f7fd ff2e 	bl	8011a08 <vListInsertEnd>
 8013bac:	e005      	b.n	8013bba <xTaskGenericNotifyFromISR+0x13e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8013bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bb0:	3318      	adds	r3, #24
 8013bb2:	4619      	mov	r1, r3
 8013bb4:	4811      	ldr	r0, [pc, #68]	; (8013bfc <xTaskGenericNotifyFromISR+0x180>)
 8013bb6:	f7fd ff27 	bl	8011a08 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013bbe:	4b10      	ldr	r3, [pc, #64]	; (8013c00 <xTaskGenericNotifyFromISR+0x184>)
 8013bc0:	681b      	ldr	r3, [r3, #0]
 8013bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013bc4:	429a      	cmp	r2, r3
 8013bc6:	d909      	bls.n	8013bdc <xTaskGenericNotifyFromISR+0x160>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8013bc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013bca:	2b00      	cmp	r3, #0
 8013bcc:	d003      	beq.n	8013bd6 <xTaskGenericNotifyFromISR+0x15a>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8013bce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013bd0:	2201      	movs	r2, #1
 8013bd2:	601a      	str	r2, [r3, #0]
 8013bd4:	e002      	b.n	8013bdc <xTaskGenericNotifyFromISR+0x160>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 8013bd6:	4b0b      	ldr	r3, [pc, #44]	; (8013c04 <xTaskGenericNotifyFromISR+0x188>)
 8013bd8:	2201      	movs	r2, #1
 8013bda:	601a      	str	r2, [r3, #0]
 8013bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bde:	617b      	str	r3, [r7, #20]
	__asm volatile
 8013be0:	697b      	ldr	r3, [r7, #20]
 8013be2:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8013be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8013be8:	4618      	mov	r0, r3
 8013bea:	3738      	adds	r7, #56	; 0x38
 8013bec:	46bd      	mov	sp, r7
 8013bee:	bd80      	pop	{r7, pc}
 8013bf0:	200015d8 	.word	0x200015d8
 8013bf4:	200015b8 	.word	0x200015b8
 8013bf8:	200014b4 	.word	0x200014b4
 8013bfc:	20001570 	.word	0x20001570
 8013c00:	200014b0 	.word	0x200014b0
 8013c04:	200015c4 	.word	0x200015c4

08013c08 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8013c08:	b580      	push	{r7, lr}
 8013c0a:	b084      	sub	sp, #16
 8013c0c:	af00      	add	r7, sp, #0
 8013c0e:	6078      	str	r0, [r7, #4]
 8013c10:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8013c12:	4b29      	ldr	r3, [pc, #164]	; (8013cb8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8013c14:	681b      	ldr	r3, [r3, #0]
 8013c16:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013c18:	4b28      	ldr	r3, [pc, #160]	; (8013cbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8013c1a:	681b      	ldr	r3, [r3, #0]
 8013c1c:	3304      	adds	r3, #4
 8013c1e:	4618      	mov	r0, r3
 8013c20:	f7fd ff4f 	bl	8011ac2 <uxListRemove>
 8013c24:	4603      	mov	r3, r0
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	d10b      	bne.n	8013c42 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8013c2a:	4b24      	ldr	r3, [pc, #144]	; (8013cbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8013c2c:	681b      	ldr	r3, [r3, #0]
 8013c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c30:	2201      	movs	r2, #1
 8013c32:	fa02 f303 	lsl.w	r3, r2, r3
 8013c36:	43da      	mvns	r2, r3
 8013c38:	4b21      	ldr	r3, [pc, #132]	; (8013cc0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8013c3a:	681b      	ldr	r3, [r3, #0]
 8013c3c:	4013      	ands	r3, r2
 8013c3e:	4a20      	ldr	r2, [pc, #128]	; (8013cc0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8013c40:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c48:	d10a      	bne.n	8013c60 <prvAddCurrentTaskToDelayedList+0x58>
 8013c4a:	683b      	ldr	r3, [r7, #0]
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d007      	beq.n	8013c60 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013c50:	4b1a      	ldr	r3, [pc, #104]	; (8013cbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8013c52:	681b      	ldr	r3, [r3, #0]
 8013c54:	3304      	adds	r3, #4
 8013c56:	4619      	mov	r1, r3
 8013c58:	481a      	ldr	r0, [pc, #104]	; (8013cc4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8013c5a:	f7fd fed5 	bl	8011a08 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8013c5e:	e026      	b.n	8013cae <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8013c60:	68fa      	ldr	r2, [r7, #12]
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	4413      	add	r3, r2
 8013c66:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8013c68:	4b14      	ldr	r3, [pc, #80]	; (8013cbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8013c6a:	681b      	ldr	r3, [r3, #0]
 8013c6c:	68ba      	ldr	r2, [r7, #8]
 8013c6e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8013c70:	68ba      	ldr	r2, [r7, #8]
 8013c72:	68fb      	ldr	r3, [r7, #12]
 8013c74:	429a      	cmp	r2, r3
 8013c76:	d209      	bcs.n	8013c8c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013c78:	4b13      	ldr	r3, [pc, #76]	; (8013cc8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8013c7a:	681a      	ldr	r2, [r3, #0]
 8013c7c:	4b0f      	ldr	r3, [pc, #60]	; (8013cbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8013c7e:	681b      	ldr	r3, [r3, #0]
 8013c80:	3304      	adds	r3, #4
 8013c82:	4619      	mov	r1, r3
 8013c84:	4610      	mov	r0, r2
 8013c86:	f7fd fee3 	bl	8011a50 <vListInsert>
}
 8013c8a:	e010      	b.n	8013cae <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013c8c:	4b0f      	ldr	r3, [pc, #60]	; (8013ccc <prvAddCurrentTaskToDelayedList+0xc4>)
 8013c8e:	681a      	ldr	r2, [r3, #0]
 8013c90:	4b0a      	ldr	r3, [pc, #40]	; (8013cbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8013c92:	681b      	ldr	r3, [r3, #0]
 8013c94:	3304      	adds	r3, #4
 8013c96:	4619      	mov	r1, r3
 8013c98:	4610      	mov	r0, r2
 8013c9a:	f7fd fed9 	bl	8011a50 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8013c9e:	4b0c      	ldr	r3, [pc, #48]	; (8013cd0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8013ca0:	681b      	ldr	r3, [r3, #0]
 8013ca2:	68ba      	ldr	r2, [r7, #8]
 8013ca4:	429a      	cmp	r2, r3
 8013ca6:	d202      	bcs.n	8013cae <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8013ca8:	4a09      	ldr	r2, [pc, #36]	; (8013cd0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8013caa:	68bb      	ldr	r3, [r7, #8]
 8013cac:	6013      	str	r3, [r2, #0]
}
 8013cae:	bf00      	nop
 8013cb0:	3710      	adds	r7, #16
 8013cb2:	46bd      	mov	sp, r7
 8013cb4:	bd80      	pop	{r7, pc}
 8013cb6:	bf00      	nop
 8013cb8:	200015b4 	.word	0x200015b4
 8013cbc:	200014b0 	.word	0x200014b0
 8013cc0:	200015b8 	.word	0x200015b8
 8013cc4:	2000159c 	.word	0x2000159c
 8013cc8:	2000156c 	.word	0x2000156c
 8013ccc:	20001568 	.word	0x20001568
 8013cd0:	200015d0 	.word	0x200015d0

08013cd4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8013cd4:	b480      	push	{r7}
 8013cd6:	b085      	sub	sp, #20
 8013cd8:	af00      	add	r7, sp, #0
 8013cda:	60f8      	str	r0, [r7, #12]
 8013cdc:	60b9      	str	r1, [r7, #8]
 8013cde:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8013ce0:	68fb      	ldr	r3, [r7, #12]
 8013ce2:	3b04      	subs	r3, #4
 8013ce4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8013ce6:	68fb      	ldr	r3, [r7, #12]
 8013ce8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8013cec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013cee:	68fb      	ldr	r3, [r7, #12]
 8013cf0:	3b04      	subs	r3, #4
 8013cf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8013cf4:	68bb      	ldr	r3, [r7, #8]
 8013cf6:	f023 0201 	bic.w	r2, r3, #1
 8013cfa:	68fb      	ldr	r3, [r7, #12]
 8013cfc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013cfe:	68fb      	ldr	r3, [r7, #12]
 8013d00:	3b04      	subs	r3, #4
 8013d02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8013d04:	4a0c      	ldr	r2, [pc, #48]	; (8013d38 <pxPortInitialiseStack+0x64>)
 8013d06:	68fb      	ldr	r3, [r7, #12]
 8013d08:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8013d0a:	68fb      	ldr	r3, [r7, #12]
 8013d0c:	3b14      	subs	r3, #20
 8013d0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8013d10:	687a      	ldr	r2, [r7, #4]
 8013d12:	68fb      	ldr	r3, [r7, #12]
 8013d14:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8013d16:	68fb      	ldr	r3, [r7, #12]
 8013d18:	3b04      	subs	r3, #4
 8013d1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8013d1c:	68fb      	ldr	r3, [r7, #12]
 8013d1e:	f06f 0202 	mvn.w	r2, #2
 8013d22:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8013d24:	68fb      	ldr	r3, [r7, #12]
 8013d26:	3b20      	subs	r3, #32
 8013d28:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8013d2a:	68fb      	ldr	r3, [r7, #12]
}
 8013d2c:	4618      	mov	r0, r3
 8013d2e:	3714      	adds	r7, #20
 8013d30:	46bd      	mov	sp, r7
 8013d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d36:	4770      	bx	lr
 8013d38:	08013d3d 	.word	0x08013d3d

08013d3c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8013d3c:	b480      	push	{r7}
 8013d3e:	b085      	sub	sp, #20
 8013d40:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8013d42:	2300      	movs	r3, #0
 8013d44:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8013d46:	4b11      	ldr	r3, [pc, #68]	; (8013d8c <prvTaskExitError+0x50>)
 8013d48:	681b      	ldr	r3, [r3, #0]
 8013d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d4e:	d009      	beq.n	8013d64 <prvTaskExitError+0x28>
	__asm volatile
 8013d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d54:	f383 8811 	msr	BASEPRI, r3
 8013d58:	f3bf 8f6f 	isb	sy
 8013d5c:	f3bf 8f4f 	dsb	sy
 8013d60:	60fb      	str	r3, [r7, #12]
 8013d62:	e7fe      	b.n	8013d62 <prvTaskExitError+0x26>
 8013d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d68:	f383 8811 	msr	BASEPRI, r3
 8013d6c:	f3bf 8f6f 	isb	sy
 8013d70:	f3bf 8f4f 	dsb	sy
 8013d74:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8013d76:	bf00      	nop
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	d0fc      	beq.n	8013d78 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8013d7e:	bf00      	nop
 8013d80:	3714      	adds	r7, #20
 8013d82:	46bd      	mov	sp, r7
 8013d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d88:	4770      	bx	lr
 8013d8a:	bf00      	nop
 8013d8c:	20000df8 	.word	0x20000df8

08013d90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8013d90:	4b07      	ldr	r3, [pc, #28]	; (8013db0 <pxCurrentTCBConst2>)
 8013d92:	6819      	ldr	r1, [r3, #0]
 8013d94:	6808      	ldr	r0, [r1, #0]
 8013d96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d9a:	f380 8809 	msr	PSP, r0
 8013d9e:	f3bf 8f6f 	isb	sy
 8013da2:	f04f 0000 	mov.w	r0, #0
 8013da6:	f380 8811 	msr	BASEPRI, r0
 8013daa:	4770      	bx	lr
 8013dac:	f3af 8000 	nop.w

08013db0 <pxCurrentTCBConst2>:
 8013db0:	200014b0 	.word	0x200014b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8013db4:	bf00      	nop
 8013db6:	bf00      	nop

08013db8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8013db8:	4808      	ldr	r0, [pc, #32]	; (8013ddc <prvPortStartFirstTask+0x24>)
 8013dba:	6800      	ldr	r0, [r0, #0]
 8013dbc:	6800      	ldr	r0, [r0, #0]
 8013dbe:	f380 8808 	msr	MSP, r0
 8013dc2:	f04f 0000 	mov.w	r0, #0
 8013dc6:	f380 8814 	msr	CONTROL, r0
 8013dca:	b662      	cpsie	i
 8013dcc:	b661      	cpsie	f
 8013dce:	f3bf 8f4f 	dsb	sy
 8013dd2:	f3bf 8f6f 	isb	sy
 8013dd6:	df00      	svc	0
 8013dd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8013dda:	bf00      	nop
 8013ddc:	e000ed08 	.word	0xe000ed08

08013de0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013de0:	b580      	push	{r7, lr}
 8013de2:	b086      	sub	sp, #24
 8013de4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8013de6:	4b44      	ldr	r3, [pc, #272]	; (8013ef8 <xPortStartScheduler+0x118>)
 8013de8:	681b      	ldr	r3, [r3, #0]
 8013dea:	4a44      	ldr	r2, [pc, #272]	; (8013efc <xPortStartScheduler+0x11c>)
 8013dec:	4293      	cmp	r3, r2
 8013dee:	d109      	bne.n	8013e04 <xPortStartScheduler+0x24>
 8013df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013df4:	f383 8811 	msr	BASEPRI, r3
 8013df8:	f3bf 8f6f 	isb	sy
 8013dfc:	f3bf 8f4f 	dsb	sy
 8013e00:	613b      	str	r3, [r7, #16]
 8013e02:	e7fe      	b.n	8013e02 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8013e04:	4b3c      	ldr	r3, [pc, #240]	; (8013ef8 <xPortStartScheduler+0x118>)
 8013e06:	681b      	ldr	r3, [r3, #0]
 8013e08:	4a3d      	ldr	r2, [pc, #244]	; (8013f00 <xPortStartScheduler+0x120>)
 8013e0a:	4293      	cmp	r3, r2
 8013e0c:	d109      	bne.n	8013e22 <xPortStartScheduler+0x42>
 8013e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e12:	f383 8811 	msr	BASEPRI, r3
 8013e16:	f3bf 8f6f 	isb	sy
 8013e1a:	f3bf 8f4f 	dsb	sy
 8013e1e:	60fb      	str	r3, [r7, #12]
 8013e20:	e7fe      	b.n	8013e20 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8013e22:	4b38      	ldr	r3, [pc, #224]	; (8013f04 <xPortStartScheduler+0x124>)
 8013e24:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8013e26:	697b      	ldr	r3, [r7, #20]
 8013e28:	781b      	ldrb	r3, [r3, #0]
 8013e2a:	b2db      	uxtb	r3, r3
 8013e2c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8013e2e:	697b      	ldr	r3, [r7, #20]
 8013e30:	22ff      	movs	r2, #255	; 0xff
 8013e32:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8013e34:	697b      	ldr	r3, [r7, #20]
 8013e36:	781b      	ldrb	r3, [r3, #0]
 8013e38:	b2db      	uxtb	r3, r3
 8013e3a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8013e3c:	78fb      	ldrb	r3, [r7, #3]
 8013e3e:	b2db      	uxtb	r3, r3
 8013e40:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8013e44:	b2da      	uxtb	r2, r3
 8013e46:	4b30      	ldr	r3, [pc, #192]	; (8013f08 <xPortStartScheduler+0x128>)
 8013e48:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8013e4a:	4b30      	ldr	r3, [pc, #192]	; (8013f0c <xPortStartScheduler+0x12c>)
 8013e4c:	2207      	movs	r2, #7
 8013e4e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013e50:	e009      	b.n	8013e66 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8013e52:	4b2e      	ldr	r3, [pc, #184]	; (8013f0c <xPortStartScheduler+0x12c>)
 8013e54:	681b      	ldr	r3, [r3, #0]
 8013e56:	3b01      	subs	r3, #1
 8013e58:	4a2c      	ldr	r2, [pc, #176]	; (8013f0c <xPortStartScheduler+0x12c>)
 8013e5a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8013e5c:	78fb      	ldrb	r3, [r7, #3]
 8013e5e:	b2db      	uxtb	r3, r3
 8013e60:	005b      	lsls	r3, r3, #1
 8013e62:	b2db      	uxtb	r3, r3
 8013e64:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013e66:	78fb      	ldrb	r3, [r7, #3]
 8013e68:	b2db      	uxtb	r3, r3
 8013e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013e6e:	2b80      	cmp	r3, #128	; 0x80
 8013e70:	d0ef      	beq.n	8013e52 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8013e72:	4b26      	ldr	r3, [pc, #152]	; (8013f0c <xPortStartScheduler+0x12c>)
 8013e74:	681b      	ldr	r3, [r3, #0]
 8013e76:	f1c3 0307 	rsb	r3, r3, #7
 8013e7a:	2b04      	cmp	r3, #4
 8013e7c:	d009      	beq.n	8013e92 <xPortStartScheduler+0xb2>
 8013e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e82:	f383 8811 	msr	BASEPRI, r3
 8013e86:	f3bf 8f6f 	isb	sy
 8013e8a:	f3bf 8f4f 	dsb	sy
 8013e8e:	60bb      	str	r3, [r7, #8]
 8013e90:	e7fe      	b.n	8013e90 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8013e92:	4b1e      	ldr	r3, [pc, #120]	; (8013f0c <xPortStartScheduler+0x12c>)
 8013e94:	681b      	ldr	r3, [r3, #0]
 8013e96:	021b      	lsls	r3, r3, #8
 8013e98:	4a1c      	ldr	r2, [pc, #112]	; (8013f0c <xPortStartScheduler+0x12c>)
 8013e9a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8013e9c:	4b1b      	ldr	r3, [pc, #108]	; (8013f0c <xPortStartScheduler+0x12c>)
 8013e9e:	681b      	ldr	r3, [r3, #0]
 8013ea0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8013ea4:	4a19      	ldr	r2, [pc, #100]	; (8013f0c <xPortStartScheduler+0x12c>)
 8013ea6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	b2da      	uxtb	r2, r3
 8013eac:	697b      	ldr	r3, [r7, #20]
 8013eae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8013eb0:	4b17      	ldr	r3, [pc, #92]	; (8013f10 <xPortStartScheduler+0x130>)
 8013eb2:	681b      	ldr	r3, [r3, #0]
 8013eb4:	4a16      	ldr	r2, [pc, #88]	; (8013f10 <xPortStartScheduler+0x130>)
 8013eb6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8013eba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8013ebc:	4b14      	ldr	r3, [pc, #80]	; (8013f10 <xPortStartScheduler+0x130>)
 8013ebe:	681b      	ldr	r3, [r3, #0]
 8013ec0:	4a13      	ldr	r2, [pc, #76]	; (8013f10 <xPortStartScheduler+0x130>)
 8013ec2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8013ec6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8013ec8:	f000 f8d6 	bl	8014078 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8013ecc:	4b11      	ldr	r3, [pc, #68]	; (8013f14 <xPortStartScheduler+0x134>)
 8013ece:	2200      	movs	r2, #0
 8013ed0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8013ed2:	f000 f8f5 	bl	80140c0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8013ed6:	4b10      	ldr	r3, [pc, #64]	; (8013f18 <xPortStartScheduler+0x138>)
 8013ed8:	681b      	ldr	r3, [r3, #0]
 8013eda:	4a0f      	ldr	r2, [pc, #60]	; (8013f18 <xPortStartScheduler+0x138>)
 8013edc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8013ee0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8013ee2:	f7ff ff69 	bl	8013db8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8013ee6:	f7ff f8bb 	bl	8013060 <vTaskSwitchContext>
	prvTaskExitError();
 8013eea:	f7ff ff27 	bl	8013d3c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8013eee:	2300      	movs	r3, #0
}
 8013ef0:	4618      	mov	r0, r3
 8013ef2:	3718      	adds	r7, #24
 8013ef4:	46bd      	mov	sp, r7
 8013ef6:	bd80      	pop	{r7, pc}
 8013ef8:	e000ed00 	.word	0xe000ed00
 8013efc:	410fc271 	.word	0x410fc271
 8013f00:	410fc270 	.word	0x410fc270
 8013f04:	e000e400 	.word	0xe000e400
 8013f08:	200015dc 	.word	0x200015dc
 8013f0c:	200015e0 	.word	0x200015e0
 8013f10:	e000ed20 	.word	0xe000ed20
 8013f14:	20000df8 	.word	0x20000df8
 8013f18:	e000ef34 	.word	0xe000ef34

08013f1c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8013f1c:	b480      	push	{r7}
 8013f1e:	b083      	sub	sp, #12
 8013f20:	af00      	add	r7, sp, #0
 8013f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f26:	f383 8811 	msr	BASEPRI, r3
 8013f2a:	f3bf 8f6f 	isb	sy
 8013f2e:	f3bf 8f4f 	dsb	sy
 8013f32:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8013f34:	4b0e      	ldr	r3, [pc, #56]	; (8013f70 <vPortEnterCritical+0x54>)
 8013f36:	681b      	ldr	r3, [r3, #0]
 8013f38:	3301      	adds	r3, #1
 8013f3a:	4a0d      	ldr	r2, [pc, #52]	; (8013f70 <vPortEnterCritical+0x54>)
 8013f3c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8013f3e:	4b0c      	ldr	r3, [pc, #48]	; (8013f70 <vPortEnterCritical+0x54>)
 8013f40:	681b      	ldr	r3, [r3, #0]
 8013f42:	2b01      	cmp	r3, #1
 8013f44:	d10e      	bne.n	8013f64 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8013f46:	4b0b      	ldr	r3, [pc, #44]	; (8013f74 <vPortEnterCritical+0x58>)
 8013f48:	681b      	ldr	r3, [r3, #0]
 8013f4a:	b2db      	uxtb	r3, r3
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	d009      	beq.n	8013f64 <vPortEnterCritical+0x48>
 8013f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f54:	f383 8811 	msr	BASEPRI, r3
 8013f58:	f3bf 8f6f 	isb	sy
 8013f5c:	f3bf 8f4f 	dsb	sy
 8013f60:	603b      	str	r3, [r7, #0]
 8013f62:	e7fe      	b.n	8013f62 <vPortEnterCritical+0x46>
	}
}
 8013f64:	bf00      	nop
 8013f66:	370c      	adds	r7, #12
 8013f68:	46bd      	mov	sp, r7
 8013f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f6e:	4770      	bx	lr
 8013f70:	20000df8 	.word	0x20000df8
 8013f74:	e000ed04 	.word	0xe000ed04

08013f78 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8013f78:	b480      	push	{r7}
 8013f7a:	b083      	sub	sp, #12
 8013f7c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8013f7e:	4b11      	ldr	r3, [pc, #68]	; (8013fc4 <vPortExitCritical+0x4c>)
 8013f80:	681b      	ldr	r3, [r3, #0]
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	d109      	bne.n	8013f9a <vPortExitCritical+0x22>
 8013f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f8a:	f383 8811 	msr	BASEPRI, r3
 8013f8e:	f3bf 8f6f 	isb	sy
 8013f92:	f3bf 8f4f 	dsb	sy
 8013f96:	607b      	str	r3, [r7, #4]
 8013f98:	e7fe      	b.n	8013f98 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8013f9a:	4b0a      	ldr	r3, [pc, #40]	; (8013fc4 <vPortExitCritical+0x4c>)
 8013f9c:	681b      	ldr	r3, [r3, #0]
 8013f9e:	3b01      	subs	r3, #1
 8013fa0:	4a08      	ldr	r2, [pc, #32]	; (8013fc4 <vPortExitCritical+0x4c>)
 8013fa2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8013fa4:	4b07      	ldr	r3, [pc, #28]	; (8013fc4 <vPortExitCritical+0x4c>)
 8013fa6:	681b      	ldr	r3, [r3, #0]
 8013fa8:	2b00      	cmp	r3, #0
 8013faa:	d104      	bne.n	8013fb6 <vPortExitCritical+0x3e>
 8013fac:	2300      	movs	r3, #0
 8013fae:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013fb0:	683b      	ldr	r3, [r7, #0]
 8013fb2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8013fb6:	bf00      	nop
 8013fb8:	370c      	adds	r7, #12
 8013fba:	46bd      	mov	sp, r7
 8013fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fc0:	4770      	bx	lr
 8013fc2:	bf00      	nop
 8013fc4:	20000df8 	.word	0x20000df8
	...

08013fd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8013fd0:	f3ef 8009 	mrs	r0, PSP
 8013fd4:	f3bf 8f6f 	isb	sy
 8013fd8:	4b15      	ldr	r3, [pc, #84]	; (8014030 <pxCurrentTCBConst>)
 8013fda:	681a      	ldr	r2, [r3, #0]
 8013fdc:	f01e 0f10 	tst.w	lr, #16
 8013fe0:	bf08      	it	eq
 8013fe2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8013fe6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fea:	6010      	str	r0, [r2, #0]
 8013fec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8013ff0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8013ff4:	f380 8811 	msr	BASEPRI, r0
 8013ff8:	f3bf 8f4f 	dsb	sy
 8013ffc:	f3bf 8f6f 	isb	sy
 8014000:	f7ff f82e 	bl	8013060 <vTaskSwitchContext>
 8014004:	f04f 0000 	mov.w	r0, #0
 8014008:	f380 8811 	msr	BASEPRI, r0
 801400c:	bc09      	pop	{r0, r3}
 801400e:	6819      	ldr	r1, [r3, #0]
 8014010:	6808      	ldr	r0, [r1, #0]
 8014012:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014016:	f01e 0f10 	tst.w	lr, #16
 801401a:	bf08      	it	eq
 801401c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014020:	f380 8809 	msr	PSP, r0
 8014024:	f3bf 8f6f 	isb	sy
 8014028:	4770      	bx	lr
 801402a:	bf00      	nop
 801402c:	f3af 8000 	nop.w

08014030 <pxCurrentTCBConst>:
 8014030:	200014b0 	.word	0x200014b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014034:	bf00      	nop
 8014036:	bf00      	nop

08014038 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014038:	b580      	push	{r7, lr}
 801403a:	b082      	sub	sp, #8
 801403c:	af00      	add	r7, sp, #0
	__asm volatile
 801403e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014042:	f383 8811 	msr	BASEPRI, r3
 8014046:	f3bf 8f6f 	isb	sy
 801404a:	f3bf 8f4f 	dsb	sy
 801404e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014050:	f7fe ff4a 	bl	8012ee8 <xTaskIncrementTick>
 8014054:	4603      	mov	r3, r0
 8014056:	2b00      	cmp	r3, #0
 8014058:	d003      	beq.n	8014062 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801405a:	4b06      	ldr	r3, [pc, #24]	; (8014074 <SysTick_Handler+0x3c>)
 801405c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014060:	601a      	str	r2, [r3, #0]
 8014062:	2300      	movs	r3, #0
 8014064:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014066:	683b      	ldr	r3, [r7, #0]
 8014068:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 801406c:	bf00      	nop
 801406e:	3708      	adds	r7, #8
 8014070:	46bd      	mov	sp, r7
 8014072:	bd80      	pop	{r7, pc}
 8014074:	e000ed04 	.word	0xe000ed04

08014078 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8014078:	b480      	push	{r7}
 801407a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801407c:	4b0b      	ldr	r3, [pc, #44]	; (80140ac <vPortSetupTimerInterrupt+0x34>)
 801407e:	2200      	movs	r2, #0
 8014080:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014082:	4b0b      	ldr	r3, [pc, #44]	; (80140b0 <vPortSetupTimerInterrupt+0x38>)
 8014084:	2200      	movs	r2, #0
 8014086:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014088:	4b0a      	ldr	r3, [pc, #40]	; (80140b4 <vPortSetupTimerInterrupt+0x3c>)
 801408a:	681b      	ldr	r3, [r3, #0]
 801408c:	4a0a      	ldr	r2, [pc, #40]	; (80140b8 <vPortSetupTimerInterrupt+0x40>)
 801408e:	fba2 2303 	umull	r2, r3, r2, r3
 8014092:	099b      	lsrs	r3, r3, #6
 8014094:	4a09      	ldr	r2, [pc, #36]	; (80140bc <vPortSetupTimerInterrupt+0x44>)
 8014096:	3b01      	subs	r3, #1
 8014098:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801409a:	4b04      	ldr	r3, [pc, #16]	; (80140ac <vPortSetupTimerInterrupt+0x34>)
 801409c:	2207      	movs	r2, #7
 801409e:	601a      	str	r2, [r3, #0]
}
 80140a0:	bf00      	nop
 80140a2:	46bd      	mov	sp, r7
 80140a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140a8:	4770      	bx	lr
 80140aa:	bf00      	nop
 80140ac:	e000e010 	.word	0xe000e010
 80140b0:	e000e018 	.word	0xe000e018
 80140b4:	20000cdc 	.word	0x20000cdc
 80140b8:	10624dd3 	.word	0x10624dd3
 80140bc:	e000e014 	.word	0xe000e014

080140c0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80140c0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80140d0 <vPortEnableVFP+0x10>
 80140c4:	6801      	ldr	r1, [r0, #0]
 80140c6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80140ca:	6001      	str	r1, [r0, #0]
 80140cc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80140ce:	bf00      	nop
 80140d0:	e000ed88 	.word	0xe000ed88

080140d4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80140d4:	b480      	push	{r7}
 80140d6:	b085      	sub	sp, #20
 80140d8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80140da:	f3ef 8305 	mrs	r3, IPSR
 80140de:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80140e0:	68fb      	ldr	r3, [r7, #12]
 80140e2:	2b0f      	cmp	r3, #15
 80140e4:	d913      	bls.n	801410e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80140e6:	4a16      	ldr	r2, [pc, #88]	; (8014140 <vPortValidateInterruptPriority+0x6c>)
 80140e8:	68fb      	ldr	r3, [r7, #12]
 80140ea:	4413      	add	r3, r2
 80140ec:	781b      	ldrb	r3, [r3, #0]
 80140ee:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80140f0:	4b14      	ldr	r3, [pc, #80]	; (8014144 <vPortValidateInterruptPriority+0x70>)
 80140f2:	781b      	ldrb	r3, [r3, #0]
 80140f4:	7afa      	ldrb	r2, [r7, #11]
 80140f6:	429a      	cmp	r2, r3
 80140f8:	d209      	bcs.n	801410e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80140fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140fe:	f383 8811 	msr	BASEPRI, r3
 8014102:	f3bf 8f6f 	isb	sy
 8014106:	f3bf 8f4f 	dsb	sy
 801410a:	607b      	str	r3, [r7, #4]
 801410c:	e7fe      	b.n	801410c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801410e:	4b0e      	ldr	r3, [pc, #56]	; (8014148 <vPortValidateInterruptPriority+0x74>)
 8014110:	681b      	ldr	r3, [r3, #0]
 8014112:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8014116:	4b0d      	ldr	r3, [pc, #52]	; (801414c <vPortValidateInterruptPriority+0x78>)
 8014118:	681b      	ldr	r3, [r3, #0]
 801411a:	429a      	cmp	r2, r3
 801411c:	d909      	bls.n	8014132 <vPortValidateInterruptPriority+0x5e>
 801411e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014122:	f383 8811 	msr	BASEPRI, r3
 8014126:	f3bf 8f6f 	isb	sy
 801412a:	f3bf 8f4f 	dsb	sy
 801412e:	603b      	str	r3, [r7, #0]
 8014130:	e7fe      	b.n	8014130 <vPortValidateInterruptPriority+0x5c>
	}
 8014132:	bf00      	nop
 8014134:	3714      	adds	r7, #20
 8014136:	46bd      	mov	sp, r7
 8014138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801413c:	4770      	bx	lr
 801413e:	bf00      	nop
 8014140:	e000e3f0 	.word	0xe000e3f0
 8014144:	200015dc 	.word	0x200015dc
 8014148:	e000ed0c 	.word	0xe000ed0c
 801414c:	200015e0 	.word	0x200015e0

08014150 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014150:	b580      	push	{r7, lr}
 8014152:	b08a      	sub	sp, #40	; 0x28
 8014154:	af00      	add	r7, sp, #0
 8014156:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014158:	2300      	movs	r3, #0
 801415a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801415c:	f7fe fe1a 	bl	8012d94 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014160:	4b57      	ldr	r3, [pc, #348]	; (80142c0 <pvPortMalloc+0x170>)
 8014162:	681b      	ldr	r3, [r3, #0]
 8014164:	2b00      	cmp	r3, #0
 8014166:	d101      	bne.n	801416c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014168:	f000 f90c 	bl	8014384 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801416c:	4b55      	ldr	r3, [pc, #340]	; (80142c4 <pvPortMalloc+0x174>)
 801416e:	681a      	ldr	r2, [r3, #0]
 8014170:	687b      	ldr	r3, [r7, #4]
 8014172:	4013      	ands	r3, r2
 8014174:	2b00      	cmp	r3, #0
 8014176:	f040 808c 	bne.w	8014292 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	2b00      	cmp	r3, #0
 801417e:	d01c      	beq.n	80141ba <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8014180:	2208      	movs	r2, #8
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	4413      	add	r3, r2
 8014186:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	f003 0307 	and.w	r3, r3, #7
 801418e:	2b00      	cmp	r3, #0
 8014190:	d013      	beq.n	80141ba <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	f023 0307 	bic.w	r3, r3, #7
 8014198:	3308      	adds	r3, #8
 801419a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	f003 0307 	and.w	r3, r3, #7
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	d009      	beq.n	80141ba <pvPortMalloc+0x6a>
 80141a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141aa:	f383 8811 	msr	BASEPRI, r3
 80141ae:	f3bf 8f6f 	isb	sy
 80141b2:	f3bf 8f4f 	dsb	sy
 80141b6:	617b      	str	r3, [r7, #20]
 80141b8:	e7fe      	b.n	80141b8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	2b00      	cmp	r3, #0
 80141be:	d068      	beq.n	8014292 <pvPortMalloc+0x142>
 80141c0:	4b41      	ldr	r3, [pc, #260]	; (80142c8 <pvPortMalloc+0x178>)
 80141c2:	681b      	ldr	r3, [r3, #0]
 80141c4:	687a      	ldr	r2, [r7, #4]
 80141c6:	429a      	cmp	r2, r3
 80141c8:	d863      	bhi.n	8014292 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80141ca:	4b40      	ldr	r3, [pc, #256]	; (80142cc <pvPortMalloc+0x17c>)
 80141cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80141ce:	4b3f      	ldr	r3, [pc, #252]	; (80142cc <pvPortMalloc+0x17c>)
 80141d0:	681b      	ldr	r3, [r3, #0]
 80141d2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80141d4:	e004      	b.n	80141e0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80141d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80141da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141dc:	681b      	ldr	r3, [r3, #0]
 80141de:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80141e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141e2:	685b      	ldr	r3, [r3, #4]
 80141e4:	687a      	ldr	r2, [r7, #4]
 80141e6:	429a      	cmp	r2, r3
 80141e8:	d903      	bls.n	80141f2 <pvPortMalloc+0xa2>
 80141ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141ec:	681b      	ldr	r3, [r3, #0]
 80141ee:	2b00      	cmp	r3, #0
 80141f0:	d1f1      	bne.n	80141d6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80141f2:	4b33      	ldr	r3, [pc, #204]	; (80142c0 <pvPortMalloc+0x170>)
 80141f4:	681b      	ldr	r3, [r3, #0]
 80141f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80141f8:	429a      	cmp	r2, r3
 80141fa:	d04a      	beq.n	8014292 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80141fc:	6a3b      	ldr	r3, [r7, #32]
 80141fe:	681b      	ldr	r3, [r3, #0]
 8014200:	2208      	movs	r2, #8
 8014202:	4413      	add	r3, r2
 8014204:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014208:	681a      	ldr	r2, [r3, #0]
 801420a:	6a3b      	ldr	r3, [r7, #32]
 801420c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801420e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014210:	685a      	ldr	r2, [r3, #4]
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	1ad2      	subs	r2, r2, r3
 8014216:	2308      	movs	r3, #8
 8014218:	005b      	lsls	r3, r3, #1
 801421a:	429a      	cmp	r2, r3
 801421c:	d91e      	bls.n	801425c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801421e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	4413      	add	r3, r2
 8014224:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014226:	69bb      	ldr	r3, [r7, #24]
 8014228:	f003 0307 	and.w	r3, r3, #7
 801422c:	2b00      	cmp	r3, #0
 801422e:	d009      	beq.n	8014244 <pvPortMalloc+0xf4>
 8014230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014234:	f383 8811 	msr	BASEPRI, r3
 8014238:	f3bf 8f6f 	isb	sy
 801423c:	f3bf 8f4f 	dsb	sy
 8014240:	613b      	str	r3, [r7, #16]
 8014242:	e7fe      	b.n	8014242 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014246:	685a      	ldr	r2, [r3, #4]
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	1ad2      	subs	r2, r2, r3
 801424c:	69bb      	ldr	r3, [r7, #24]
 801424e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8014250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014252:	687a      	ldr	r2, [r7, #4]
 8014254:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8014256:	69b8      	ldr	r0, [r7, #24]
 8014258:	f000 f8f6 	bl	8014448 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801425c:	4b1a      	ldr	r3, [pc, #104]	; (80142c8 <pvPortMalloc+0x178>)
 801425e:	681a      	ldr	r2, [r3, #0]
 8014260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014262:	685b      	ldr	r3, [r3, #4]
 8014264:	1ad3      	subs	r3, r2, r3
 8014266:	4a18      	ldr	r2, [pc, #96]	; (80142c8 <pvPortMalloc+0x178>)
 8014268:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801426a:	4b17      	ldr	r3, [pc, #92]	; (80142c8 <pvPortMalloc+0x178>)
 801426c:	681a      	ldr	r2, [r3, #0]
 801426e:	4b18      	ldr	r3, [pc, #96]	; (80142d0 <pvPortMalloc+0x180>)
 8014270:	681b      	ldr	r3, [r3, #0]
 8014272:	429a      	cmp	r2, r3
 8014274:	d203      	bcs.n	801427e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8014276:	4b14      	ldr	r3, [pc, #80]	; (80142c8 <pvPortMalloc+0x178>)
 8014278:	681b      	ldr	r3, [r3, #0]
 801427a:	4a15      	ldr	r2, [pc, #84]	; (80142d0 <pvPortMalloc+0x180>)
 801427c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801427e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014280:	685a      	ldr	r2, [r3, #4]
 8014282:	4b10      	ldr	r3, [pc, #64]	; (80142c4 <pvPortMalloc+0x174>)
 8014284:	681b      	ldr	r3, [r3, #0]
 8014286:	431a      	orrs	r2, r3
 8014288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801428a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801428c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801428e:	2200      	movs	r2, #0
 8014290:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8014292:	f7fe fd8d 	bl	8012db0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8014296:	69fb      	ldr	r3, [r7, #28]
 8014298:	f003 0307 	and.w	r3, r3, #7
 801429c:	2b00      	cmp	r3, #0
 801429e:	d009      	beq.n	80142b4 <pvPortMalloc+0x164>
 80142a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142a4:	f383 8811 	msr	BASEPRI, r3
 80142a8:	f3bf 8f6f 	isb	sy
 80142ac:	f3bf 8f4f 	dsb	sy
 80142b0:	60fb      	str	r3, [r7, #12]
 80142b2:	e7fe      	b.n	80142b2 <pvPortMalloc+0x162>
	return pvReturn;
 80142b4:	69fb      	ldr	r3, [r7, #28]
}
 80142b6:	4618      	mov	r0, r3
 80142b8:	3728      	adds	r7, #40	; 0x28
 80142ba:	46bd      	mov	sp, r7
 80142bc:	bd80      	pop	{r7, pc}
 80142be:	bf00      	nop
 80142c0:	200051ec 	.word	0x200051ec
 80142c4:	200051f8 	.word	0x200051f8
 80142c8:	200051f0 	.word	0x200051f0
 80142cc:	200051e4 	.word	0x200051e4
 80142d0:	200051f4 	.word	0x200051f4

080142d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80142d4:	b580      	push	{r7, lr}
 80142d6:	b086      	sub	sp, #24
 80142d8:	af00      	add	r7, sp, #0
 80142da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	2b00      	cmp	r3, #0
 80142e4:	d046      	beq.n	8014374 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80142e6:	2308      	movs	r3, #8
 80142e8:	425b      	negs	r3, r3
 80142ea:	697a      	ldr	r2, [r7, #20]
 80142ec:	4413      	add	r3, r2
 80142ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80142f0:	697b      	ldr	r3, [r7, #20]
 80142f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80142f4:	693b      	ldr	r3, [r7, #16]
 80142f6:	685a      	ldr	r2, [r3, #4]
 80142f8:	4b20      	ldr	r3, [pc, #128]	; (801437c <vPortFree+0xa8>)
 80142fa:	681b      	ldr	r3, [r3, #0]
 80142fc:	4013      	ands	r3, r2
 80142fe:	2b00      	cmp	r3, #0
 8014300:	d109      	bne.n	8014316 <vPortFree+0x42>
 8014302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014306:	f383 8811 	msr	BASEPRI, r3
 801430a:	f3bf 8f6f 	isb	sy
 801430e:	f3bf 8f4f 	dsb	sy
 8014312:	60fb      	str	r3, [r7, #12]
 8014314:	e7fe      	b.n	8014314 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8014316:	693b      	ldr	r3, [r7, #16]
 8014318:	681b      	ldr	r3, [r3, #0]
 801431a:	2b00      	cmp	r3, #0
 801431c:	d009      	beq.n	8014332 <vPortFree+0x5e>
 801431e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014322:	f383 8811 	msr	BASEPRI, r3
 8014326:	f3bf 8f6f 	isb	sy
 801432a:	f3bf 8f4f 	dsb	sy
 801432e:	60bb      	str	r3, [r7, #8]
 8014330:	e7fe      	b.n	8014330 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8014332:	693b      	ldr	r3, [r7, #16]
 8014334:	685a      	ldr	r2, [r3, #4]
 8014336:	4b11      	ldr	r3, [pc, #68]	; (801437c <vPortFree+0xa8>)
 8014338:	681b      	ldr	r3, [r3, #0]
 801433a:	4013      	ands	r3, r2
 801433c:	2b00      	cmp	r3, #0
 801433e:	d019      	beq.n	8014374 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8014340:	693b      	ldr	r3, [r7, #16]
 8014342:	681b      	ldr	r3, [r3, #0]
 8014344:	2b00      	cmp	r3, #0
 8014346:	d115      	bne.n	8014374 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8014348:	693b      	ldr	r3, [r7, #16]
 801434a:	685a      	ldr	r2, [r3, #4]
 801434c:	4b0b      	ldr	r3, [pc, #44]	; (801437c <vPortFree+0xa8>)
 801434e:	681b      	ldr	r3, [r3, #0]
 8014350:	43db      	mvns	r3, r3
 8014352:	401a      	ands	r2, r3
 8014354:	693b      	ldr	r3, [r7, #16]
 8014356:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8014358:	f7fe fd1c 	bl	8012d94 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801435c:	693b      	ldr	r3, [r7, #16]
 801435e:	685a      	ldr	r2, [r3, #4]
 8014360:	4b07      	ldr	r3, [pc, #28]	; (8014380 <vPortFree+0xac>)
 8014362:	681b      	ldr	r3, [r3, #0]
 8014364:	4413      	add	r3, r2
 8014366:	4a06      	ldr	r2, [pc, #24]	; (8014380 <vPortFree+0xac>)
 8014368:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801436a:	6938      	ldr	r0, [r7, #16]
 801436c:	f000 f86c 	bl	8014448 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8014370:	f7fe fd1e 	bl	8012db0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8014374:	bf00      	nop
 8014376:	3718      	adds	r7, #24
 8014378:	46bd      	mov	sp, r7
 801437a:	bd80      	pop	{r7, pc}
 801437c:	200051f8 	.word	0x200051f8
 8014380:	200051f0 	.word	0x200051f0

08014384 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8014384:	b480      	push	{r7}
 8014386:	b085      	sub	sp, #20
 8014388:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801438a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801438e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8014390:	4b27      	ldr	r3, [pc, #156]	; (8014430 <prvHeapInit+0xac>)
 8014392:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8014394:	68fb      	ldr	r3, [r7, #12]
 8014396:	f003 0307 	and.w	r3, r3, #7
 801439a:	2b00      	cmp	r3, #0
 801439c:	d00c      	beq.n	80143b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801439e:	68fb      	ldr	r3, [r7, #12]
 80143a0:	3307      	adds	r3, #7
 80143a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80143a4:	68fb      	ldr	r3, [r7, #12]
 80143a6:	f023 0307 	bic.w	r3, r3, #7
 80143aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80143ac:	68ba      	ldr	r2, [r7, #8]
 80143ae:	68fb      	ldr	r3, [r7, #12]
 80143b0:	1ad3      	subs	r3, r2, r3
 80143b2:	4a1f      	ldr	r2, [pc, #124]	; (8014430 <prvHeapInit+0xac>)
 80143b4:	4413      	add	r3, r2
 80143b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80143b8:	68fb      	ldr	r3, [r7, #12]
 80143ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80143bc:	4a1d      	ldr	r2, [pc, #116]	; (8014434 <prvHeapInit+0xb0>)
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80143c2:	4b1c      	ldr	r3, [pc, #112]	; (8014434 <prvHeapInit+0xb0>)
 80143c4:	2200      	movs	r2, #0
 80143c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	68ba      	ldr	r2, [r7, #8]
 80143cc:	4413      	add	r3, r2
 80143ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80143d0:	2208      	movs	r2, #8
 80143d2:	68fb      	ldr	r3, [r7, #12]
 80143d4:	1a9b      	subs	r3, r3, r2
 80143d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80143d8:	68fb      	ldr	r3, [r7, #12]
 80143da:	f023 0307 	bic.w	r3, r3, #7
 80143de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80143e0:	68fb      	ldr	r3, [r7, #12]
 80143e2:	4a15      	ldr	r2, [pc, #84]	; (8014438 <prvHeapInit+0xb4>)
 80143e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80143e6:	4b14      	ldr	r3, [pc, #80]	; (8014438 <prvHeapInit+0xb4>)
 80143e8:	681b      	ldr	r3, [r3, #0]
 80143ea:	2200      	movs	r2, #0
 80143ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80143ee:	4b12      	ldr	r3, [pc, #72]	; (8014438 <prvHeapInit+0xb4>)
 80143f0:	681b      	ldr	r3, [r3, #0]
 80143f2:	2200      	movs	r2, #0
 80143f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80143fa:	683b      	ldr	r3, [r7, #0]
 80143fc:	68fa      	ldr	r2, [r7, #12]
 80143fe:	1ad2      	subs	r2, r2, r3
 8014400:	683b      	ldr	r3, [r7, #0]
 8014402:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8014404:	4b0c      	ldr	r3, [pc, #48]	; (8014438 <prvHeapInit+0xb4>)
 8014406:	681a      	ldr	r2, [r3, #0]
 8014408:	683b      	ldr	r3, [r7, #0]
 801440a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801440c:	683b      	ldr	r3, [r7, #0]
 801440e:	685b      	ldr	r3, [r3, #4]
 8014410:	4a0a      	ldr	r2, [pc, #40]	; (801443c <prvHeapInit+0xb8>)
 8014412:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014414:	683b      	ldr	r3, [r7, #0]
 8014416:	685b      	ldr	r3, [r3, #4]
 8014418:	4a09      	ldr	r2, [pc, #36]	; (8014440 <prvHeapInit+0xbc>)
 801441a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801441c:	4b09      	ldr	r3, [pc, #36]	; (8014444 <prvHeapInit+0xc0>)
 801441e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8014422:	601a      	str	r2, [r3, #0]
}
 8014424:	bf00      	nop
 8014426:	3714      	adds	r7, #20
 8014428:	46bd      	mov	sp, r7
 801442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801442e:	4770      	bx	lr
 8014430:	200015e4 	.word	0x200015e4
 8014434:	200051e4 	.word	0x200051e4
 8014438:	200051ec 	.word	0x200051ec
 801443c:	200051f4 	.word	0x200051f4
 8014440:	200051f0 	.word	0x200051f0
 8014444:	200051f8 	.word	0x200051f8

08014448 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8014448:	b480      	push	{r7}
 801444a:	b085      	sub	sp, #20
 801444c:	af00      	add	r7, sp, #0
 801444e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8014450:	4b28      	ldr	r3, [pc, #160]	; (80144f4 <prvInsertBlockIntoFreeList+0xac>)
 8014452:	60fb      	str	r3, [r7, #12]
 8014454:	e002      	b.n	801445c <prvInsertBlockIntoFreeList+0x14>
 8014456:	68fb      	ldr	r3, [r7, #12]
 8014458:	681b      	ldr	r3, [r3, #0]
 801445a:	60fb      	str	r3, [r7, #12]
 801445c:	68fb      	ldr	r3, [r7, #12]
 801445e:	681b      	ldr	r3, [r3, #0]
 8014460:	687a      	ldr	r2, [r7, #4]
 8014462:	429a      	cmp	r2, r3
 8014464:	d8f7      	bhi.n	8014456 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8014466:	68fb      	ldr	r3, [r7, #12]
 8014468:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801446a:	68fb      	ldr	r3, [r7, #12]
 801446c:	685b      	ldr	r3, [r3, #4]
 801446e:	68ba      	ldr	r2, [r7, #8]
 8014470:	4413      	add	r3, r2
 8014472:	687a      	ldr	r2, [r7, #4]
 8014474:	429a      	cmp	r2, r3
 8014476:	d108      	bne.n	801448a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8014478:	68fb      	ldr	r3, [r7, #12]
 801447a:	685a      	ldr	r2, [r3, #4]
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	685b      	ldr	r3, [r3, #4]
 8014480:	441a      	add	r2, r3
 8014482:	68fb      	ldr	r3, [r7, #12]
 8014484:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8014486:	68fb      	ldr	r3, [r7, #12]
 8014488:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	685b      	ldr	r3, [r3, #4]
 8014492:	68ba      	ldr	r2, [r7, #8]
 8014494:	441a      	add	r2, r3
 8014496:	68fb      	ldr	r3, [r7, #12]
 8014498:	681b      	ldr	r3, [r3, #0]
 801449a:	429a      	cmp	r2, r3
 801449c:	d118      	bne.n	80144d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801449e:	68fb      	ldr	r3, [r7, #12]
 80144a0:	681a      	ldr	r2, [r3, #0]
 80144a2:	4b15      	ldr	r3, [pc, #84]	; (80144f8 <prvInsertBlockIntoFreeList+0xb0>)
 80144a4:	681b      	ldr	r3, [r3, #0]
 80144a6:	429a      	cmp	r2, r3
 80144a8:	d00d      	beq.n	80144c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	685a      	ldr	r2, [r3, #4]
 80144ae:	68fb      	ldr	r3, [r7, #12]
 80144b0:	681b      	ldr	r3, [r3, #0]
 80144b2:	685b      	ldr	r3, [r3, #4]
 80144b4:	441a      	add	r2, r3
 80144b6:	687b      	ldr	r3, [r7, #4]
 80144b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80144ba:	68fb      	ldr	r3, [r7, #12]
 80144bc:	681b      	ldr	r3, [r3, #0]
 80144be:	681a      	ldr	r2, [r3, #0]
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	601a      	str	r2, [r3, #0]
 80144c4:	e008      	b.n	80144d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80144c6:	4b0c      	ldr	r3, [pc, #48]	; (80144f8 <prvInsertBlockIntoFreeList+0xb0>)
 80144c8:	681a      	ldr	r2, [r3, #0]
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	601a      	str	r2, [r3, #0]
 80144ce:	e003      	b.n	80144d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80144d0:	68fb      	ldr	r3, [r7, #12]
 80144d2:	681a      	ldr	r2, [r3, #0]
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80144d8:	68fa      	ldr	r2, [r7, #12]
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	429a      	cmp	r2, r3
 80144de:	d002      	beq.n	80144e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80144e0:	68fb      	ldr	r3, [r7, #12]
 80144e2:	687a      	ldr	r2, [r7, #4]
 80144e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80144e6:	bf00      	nop
 80144e8:	3714      	adds	r7, #20
 80144ea:	46bd      	mov	sp, r7
 80144ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144f0:	4770      	bx	lr
 80144f2:	bf00      	nop
 80144f4:	200051e4 	.word	0x200051e4
 80144f8:	200051ec 	.word	0x200051ec

080144fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80144fc:	b580      	push	{r7, lr}
 80144fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8014500:	2200      	movs	r2, #0
 8014502:	4912      	ldr	r1, [pc, #72]	; (801454c <MX_USB_DEVICE_Init+0x50>)
 8014504:	4812      	ldr	r0, [pc, #72]	; (8014550 <MX_USB_DEVICE_Init+0x54>)
 8014506:	f7fb fe09 	bl	801011c <USBD_Init>
 801450a:	4603      	mov	r3, r0
 801450c:	2b00      	cmp	r3, #0
 801450e:	d001      	beq.n	8014514 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8014510:	f7ef faca 	bl	8003aa8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8014514:	490f      	ldr	r1, [pc, #60]	; (8014554 <MX_USB_DEVICE_Init+0x58>)
 8014516:	480e      	ldr	r0, [pc, #56]	; (8014550 <MX_USB_DEVICE_Init+0x54>)
 8014518:	f7fb fe2b 	bl	8010172 <USBD_RegisterClass>
 801451c:	4603      	mov	r3, r0
 801451e:	2b00      	cmp	r3, #0
 8014520:	d001      	beq.n	8014526 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8014522:	f7ef fac1 	bl	8003aa8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8014526:	490c      	ldr	r1, [pc, #48]	; (8014558 <MX_USB_DEVICE_Init+0x5c>)
 8014528:	4809      	ldr	r0, [pc, #36]	; (8014550 <MX_USB_DEVICE_Init+0x54>)
 801452a:	f7fb fd59 	bl	800ffe0 <USBD_CDC_RegisterInterface>
 801452e:	4603      	mov	r3, r0
 8014530:	2b00      	cmp	r3, #0
 8014532:	d001      	beq.n	8014538 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8014534:	f7ef fab8 	bl	8003aa8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8014538:	4805      	ldr	r0, [pc, #20]	; (8014550 <MX_USB_DEVICE_Init+0x54>)
 801453a:	f7fb fe34 	bl	80101a6 <USBD_Start>
 801453e:	4603      	mov	r3, r0
 8014540:	2b00      	cmp	r3, #0
 8014542:	d001      	beq.n	8014548 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8014544:	f7ef fab0 	bl	8003aa8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8014548:	bf00      	nop
 801454a:	bd80      	pop	{r7, pc}
 801454c:	20000e0c 	.word	0x20000e0c
 8014550:	200061d4 	.word	0x200061d4
 8014554:	20000cf4 	.word	0x20000cf4
 8014558:	20000dfc 	.word	0x20000dfc

0801455c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801455c:	b580      	push	{r7, lr}
 801455e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8014560:	2200      	movs	r2, #0
 8014562:	4905      	ldr	r1, [pc, #20]	; (8014578 <CDC_Init_FS+0x1c>)
 8014564:	4805      	ldr	r0, [pc, #20]	; (801457c <CDC_Init_FS+0x20>)
 8014566:	f7fb fd52 	bl	801000e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801456a:	4905      	ldr	r1, [pc, #20]	; (8014580 <CDC_Init_FS+0x24>)
 801456c:	4803      	ldr	r0, [pc, #12]	; (801457c <CDC_Init_FS+0x20>)
 801456e:	f7fb fd68 	bl	8010042 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8014572:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8014574:	4618      	mov	r0, r3
 8014576:	bd80      	pop	{r7, pc}
 8014578:	20006670 	.word	0x20006670
 801457c:	200061d4 	.word	0x200061d4
 8014580:	20006470 	.word	0x20006470

08014584 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8014584:	b480      	push	{r7}
 8014586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8014588:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801458a:	4618      	mov	r0, r3
 801458c:	46bd      	mov	sp, r7
 801458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014592:	4770      	bx	lr

08014594 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8014594:	b480      	push	{r7}
 8014596:	b083      	sub	sp, #12
 8014598:	af00      	add	r7, sp, #0
 801459a:	4603      	mov	r3, r0
 801459c:	6039      	str	r1, [r7, #0]
 801459e:	71fb      	strb	r3, [r7, #7]
 80145a0:	4613      	mov	r3, r2
 80145a2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80145a4:	79fb      	ldrb	r3, [r7, #7]
 80145a6:	2b23      	cmp	r3, #35	; 0x23
 80145a8:	f200 808c 	bhi.w	80146c4 <CDC_Control_FS+0x130>
 80145ac:	a201      	add	r2, pc, #4	; (adr r2, 80145b4 <CDC_Control_FS+0x20>)
 80145ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80145b2:	bf00      	nop
 80145b4:	080146c5 	.word	0x080146c5
 80145b8:	080146c5 	.word	0x080146c5
 80145bc:	080146c5 	.word	0x080146c5
 80145c0:	080146c5 	.word	0x080146c5
 80145c4:	080146c5 	.word	0x080146c5
 80145c8:	080146c5 	.word	0x080146c5
 80145cc:	080146c5 	.word	0x080146c5
 80145d0:	080146c5 	.word	0x080146c5
 80145d4:	080146c5 	.word	0x080146c5
 80145d8:	080146c5 	.word	0x080146c5
 80145dc:	080146c5 	.word	0x080146c5
 80145e0:	080146c5 	.word	0x080146c5
 80145e4:	080146c5 	.word	0x080146c5
 80145e8:	080146c5 	.word	0x080146c5
 80145ec:	080146c5 	.word	0x080146c5
 80145f0:	080146c5 	.word	0x080146c5
 80145f4:	080146c5 	.word	0x080146c5
 80145f8:	080146c5 	.word	0x080146c5
 80145fc:	080146c5 	.word	0x080146c5
 8014600:	080146c5 	.word	0x080146c5
 8014604:	080146c5 	.word	0x080146c5
 8014608:	080146c5 	.word	0x080146c5
 801460c:	080146c5 	.word	0x080146c5
 8014610:	080146c5 	.word	0x080146c5
 8014614:	080146c5 	.word	0x080146c5
 8014618:	080146c5 	.word	0x080146c5
 801461c:	080146c5 	.word	0x080146c5
 8014620:	080146c5 	.word	0x080146c5
 8014624:	080146c5 	.word	0x080146c5
 8014628:	080146c5 	.word	0x080146c5
 801462c:	080146c5 	.word	0x080146c5
 8014630:	080146c5 	.word	0x080146c5
 8014634:	08014645 	.word	0x08014645
 8014638:	0801467f 	.word	0x0801467f
 801463c:	080146c5 	.word	0x080146c5
 8014640:	080146c5 	.word	0x080146c5
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	TempBuf_USB[0]=pbuf[0];
 8014644:	683b      	ldr	r3, [r7, #0]
 8014646:	781a      	ldrb	r2, [r3, #0]
 8014648:	4b22      	ldr	r3, [pc, #136]	; (80146d4 <CDC_Control_FS+0x140>)
 801464a:	701a      	strb	r2, [r3, #0]
    	TempBuf_USB[1]=pbuf[1];
 801464c:	683b      	ldr	r3, [r7, #0]
 801464e:	785a      	ldrb	r2, [r3, #1]
 8014650:	4b20      	ldr	r3, [pc, #128]	; (80146d4 <CDC_Control_FS+0x140>)
 8014652:	705a      	strb	r2, [r3, #1]
    	TempBuf_USB[2]=pbuf[2];
 8014654:	683b      	ldr	r3, [r7, #0]
 8014656:	789a      	ldrb	r2, [r3, #2]
 8014658:	4b1e      	ldr	r3, [pc, #120]	; (80146d4 <CDC_Control_FS+0x140>)
 801465a:	709a      	strb	r2, [r3, #2]
    	TempBuf_USB[3]=pbuf[3];
 801465c:	683b      	ldr	r3, [r7, #0]
 801465e:	78da      	ldrb	r2, [r3, #3]
 8014660:	4b1c      	ldr	r3, [pc, #112]	; (80146d4 <CDC_Control_FS+0x140>)
 8014662:	70da      	strb	r2, [r3, #3]
    	TempBuf_USB[4]=pbuf[4];
 8014664:	683b      	ldr	r3, [r7, #0]
 8014666:	791a      	ldrb	r2, [r3, #4]
 8014668:	4b1a      	ldr	r3, [pc, #104]	; (80146d4 <CDC_Control_FS+0x140>)
 801466a:	711a      	strb	r2, [r3, #4]
    	TempBuf_USB[5]=pbuf[5];
 801466c:	683b      	ldr	r3, [r7, #0]
 801466e:	795a      	ldrb	r2, [r3, #5]
 8014670:	4b18      	ldr	r3, [pc, #96]	; (80146d4 <CDC_Control_FS+0x140>)
 8014672:	715a      	strb	r2, [r3, #5]
    	TempBuf_USB[6]=pbuf[6];
 8014674:	683b      	ldr	r3, [r7, #0]
 8014676:	799a      	ldrb	r2, [r3, #6]
 8014678:	4b16      	ldr	r3, [pc, #88]	; (80146d4 <CDC_Control_FS+0x140>)
 801467a:	719a      	strb	r2, [r3, #6]
    	break;
 801467c:	e023      	b.n	80146c6 <CDC_Control_FS+0x132>


    case CDC_GET_LINE_CODING:
        pbuf[0]=TempBuf_USB[0];
 801467e:	4b15      	ldr	r3, [pc, #84]	; (80146d4 <CDC_Control_FS+0x140>)
 8014680:	781a      	ldrb	r2, [r3, #0]
 8014682:	683b      	ldr	r3, [r7, #0]
 8014684:	701a      	strb	r2, [r3, #0]
        pbuf[1]=TempBuf_USB[1];
 8014686:	683b      	ldr	r3, [r7, #0]
 8014688:	3301      	adds	r3, #1
 801468a:	4a12      	ldr	r2, [pc, #72]	; (80146d4 <CDC_Control_FS+0x140>)
 801468c:	7852      	ldrb	r2, [r2, #1]
 801468e:	701a      	strb	r2, [r3, #0]
        pbuf[2]=TempBuf_USB[2];
 8014690:	683b      	ldr	r3, [r7, #0]
 8014692:	3302      	adds	r3, #2
 8014694:	4a0f      	ldr	r2, [pc, #60]	; (80146d4 <CDC_Control_FS+0x140>)
 8014696:	7892      	ldrb	r2, [r2, #2]
 8014698:	701a      	strb	r2, [r3, #0]
        pbuf[3]=TempBuf_USB[3];
 801469a:	683b      	ldr	r3, [r7, #0]
 801469c:	3303      	adds	r3, #3
 801469e:	4a0d      	ldr	r2, [pc, #52]	; (80146d4 <CDC_Control_FS+0x140>)
 80146a0:	78d2      	ldrb	r2, [r2, #3]
 80146a2:	701a      	strb	r2, [r3, #0]
        pbuf[4]=TempBuf_USB[4];
 80146a4:	683b      	ldr	r3, [r7, #0]
 80146a6:	3304      	adds	r3, #4
 80146a8:	4a0a      	ldr	r2, [pc, #40]	; (80146d4 <CDC_Control_FS+0x140>)
 80146aa:	7912      	ldrb	r2, [r2, #4]
 80146ac:	701a      	strb	r2, [r3, #0]
        pbuf[5]=TempBuf_USB[5];
 80146ae:	683b      	ldr	r3, [r7, #0]
 80146b0:	3305      	adds	r3, #5
 80146b2:	4a08      	ldr	r2, [pc, #32]	; (80146d4 <CDC_Control_FS+0x140>)
 80146b4:	7952      	ldrb	r2, [r2, #5]
 80146b6:	701a      	strb	r2, [r3, #0]
        pbuf[6]=TempBuf_USB[6];
 80146b8:	683b      	ldr	r3, [r7, #0]
 80146ba:	3306      	adds	r3, #6
 80146bc:	4a05      	ldr	r2, [pc, #20]	; (80146d4 <CDC_Control_FS+0x140>)
 80146be:	7992      	ldrb	r2, [r2, #6]
 80146c0:	701a      	strb	r2, [r3, #0]
    break;
 80146c2:	e000      	b.n	80146c6 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80146c4:	bf00      	nop
  }

  return (USBD_OK);
 80146c6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80146c8:	4618      	mov	r0, r3
 80146ca:	370c      	adds	r7, #12
 80146cc:	46bd      	mov	sp, r7
 80146ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146d2:	4770      	bx	lr
 80146d4:	20006870 	.word	0x20006870

080146d8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80146d8:	b580      	push	{r7, lr}
 80146da:	b082      	sub	sp, #8
 80146dc:	af00      	add	r7, sp, #0
 80146de:	6078      	str	r0, [r7, #4]
 80146e0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	ringBuff_PushArray(&usb_rx_ringbuff, Buf, (uint16_t)*Len);
 80146e2:	683b      	ldr	r3, [r7, #0]
 80146e4:	681b      	ldr	r3, [r3, #0]
 80146e6:	b29b      	uxth	r3, r3
 80146e8:	461a      	mov	r2, r3
 80146ea:	6879      	ldr	r1, [r7, #4]
 80146ec:	4807      	ldr	r0, [pc, #28]	; (801470c <CDC_Receive_FS+0x34>)
 80146ee:	f7ef fa52 	bl	8003b96 <ringBuff_PushArray>
//	if ( END_CHAR == Buf[*Len - 1]) {
//		osSignalSet(USB_RX_Check_Handle, 0x01);
//	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80146f2:	6879      	ldr	r1, [r7, #4]
 80146f4:	4806      	ldr	r0, [pc, #24]	; (8014710 <CDC_Receive_FS+0x38>)
 80146f6:	f7fb fca4 	bl	8010042 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80146fa:	4805      	ldr	r0, [pc, #20]	; (8014710 <CDC_Receive_FS+0x38>)
 80146fc:	f7fb fce4 	bl	80100c8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8014700:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8014702:	4618      	mov	r0, r3
 8014704:	3708      	adds	r7, #8
 8014706:	46bd      	mov	sp, r7
 8014708:	bd80      	pop	{r7, pc}
 801470a:	bf00      	nop
 801470c:	20000078 	.word	0x20000078
 8014710:	200061d4 	.word	0x200061d4

08014714 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8014714:	b580      	push	{r7, lr}
 8014716:	b084      	sub	sp, #16
 8014718:	af00      	add	r7, sp, #0
 801471a:	6078      	str	r0, [r7, #4]
 801471c:	460b      	mov	r3, r1
 801471e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8014720:	2300      	movs	r3, #0
 8014722:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8014724:	4b0d      	ldr	r3, [pc, #52]	; (801475c <CDC_Transmit_FS+0x48>)
 8014726:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 801472a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801472c:	68bb      	ldr	r3, [r7, #8]
 801472e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014732:	2b00      	cmp	r3, #0
 8014734:	d001      	beq.n	801473a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8014736:	2301      	movs	r3, #1
 8014738:	e00b      	b.n	8014752 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801473a:	887b      	ldrh	r3, [r7, #2]
 801473c:	461a      	mov	r2, r3
 801473e:	6879      	ldr	r1, [r7, #4]
 8014740:	4806      	ldr	r0, [pc, #24]	; (801475c <CDC_Transmit_FS+0x48>)
 8014742:	f7fb fc64 	bl	801000e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8014746:	4805      	ldr	r0, [pc, #20]	; (801475c <CDC_Transmit_FS+0x48>)
 8014748:	f7fb fc8f 	bl	801006a <USBD_CDC_TransmitPacket>
 801474c:	4603      	mov	r3, r0
 801474e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8014750:	7bfb      	ldrb	r3, [r7, #15]
}
 8014752:	4618      	mov	r0, r3
 8014754:	3710      	adds	r7, #16
 8014756:	46bd      	mov	sp, r7
 8014758:	bd80      	pop	{r7, pc}
 801475a:	bf00      	nop
 801475c:	200061d4 	.word	0x200061d4

08014760 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014760:	b480      	push	{r7}
 8014762:	b083      	sub	sp, #12
 8014764:	af00      	add	r7, sp, #0
 8014766:	4603      	mov	r3, r0
 8014768:	6039      	str	r1, [r7, #0]
 801476a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801476c:	683b      	ldr	r3, [r7, #0]
 801476e:	2212      	movs	r2, #18
 8014770:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8014772:	4b03      	ldr	r3, [pc, #12]	; (8014780 <USBD_FS_DeviceDescriptor+0x20>)
}
 8014774:	4618      	mov	r0, r3
 8014776:	370c      	adds	r7, #12
 8014778:	46bd      	mov	sp, r7
 801477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801477e:	4770      	bx	lr
 8014780:	20000e28 	.word	0x20000e28

08014784 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014784:	b480      	push	{r7}
 8014786:	b083      	sub	sp, #12
 8014788:	af00      	add	r7, sp, #0
 801478a:	4603      	mov	r3, r0
 801478c:	6039      	str	r1, [r7, #0]
 801478e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8014790:	683b      	ldr	r3, [r7, #0]
 8014792:	2204      	movs	r2, #4
 8014794:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8014796:	4b03      	ldr	r3, [pc, #12]	; (80147a4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8014798:	4618      	mov	r0, r3
 801479a:	370c      	adds	r7, #12
 801479c:	46bd      	mov	sp, r7
 801479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147a2:	4770      	bx	lr
 80147a4:	20000e3c 	.word	0x20000e3c

080147a8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80147a8:	b580      	push	{r7, lr}
 80147aa:	b082      	sub	sp, #8
 80147ac:	af00      	add	r7, sp, #0
 80147ae:	4603      	mov	r3, r0
 80147b0:	6039      	str	r1, [r7, #0]
 80147b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80147b4:	79fb      	ldrb	r3, [r7, #7]
 80147b6:	2b00      	cmp	r3, #0
 80147b8:	d105      	bne.n	80147c6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80147ba:	683a      	ldr	r2, [r7, #0]
 80147bc:	4907      	ldr	r1, [pc, #28]	; (80147dc <USBD_FS_ProductStrDescriptor+0x34>)
 80147be:	4808      	ldr	r0, [pc, #32]	; (80147e0 <USBD_FS_ProductStrDescriptor+0x38>)
 80147c0:	f7fc fc28 	bl	8011014 <USBD_GetString>
 80147c4:	e004      	b.n	80147d0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80147c6:	683a      	ldr	r2, [r7, #0]
 80147c8:	4904      	ldr	r1, [pc, #16]	; (80147dc <USBD_FS_ProductStrDescriptor+0x34>)
 80147ca:	4805      	ldr	r0, [pc, #20]	; (80147e0 <USBD_FS_ProductStrDescriptor+0x38>)
 80147cc:	f7fc fc22 	bl	8011014 <USBD_GetString>
  }
  return USBD_StrDesc;
 80147d0:	4b02      	ldr	r3, [pc, #8]	; (80147dc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80147d2:	4618      	mov	r0, r3
 80147d4:	3708      	adds	r7, #8
 80147d6:	46bd      	mov	sp, r7
 80147d8:	bd80      	pop	{r7, pc}
 80147da:	bf00      	nop
 80147dc:	20006878 	.word	0x20006878
 80147e0:	0801b2b8 	.word	0x0801b2b8

080147e4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80147e4:	b580      	push	{r7, lr}
 80147e6:	b082      	sub	sp, #8
 80147e8:	af00      	add	r7, sp, #0
 80147ea:	4603      	mov	r3, r0
 80147ec:	6039      	str	r1, [r7, #0]
 80147ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80147f0:	683a      	ldr	r2, [r7, #0]
 80147f2:	4904      	ldr	r1, [pc, #16]	; (8014804 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80147f4:	4804      	ldr	r0, [pc, #16]	; (8014808 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80147f6:	f7fc fc0d 	bl	8011014 <USBD_GetString>
  return USBD_StrDesc;
 80147fa:	4b02      	ldr	r3, [pc, #8]	; (8014804 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80147fc:	4618      	mov	r0, r3
 80147fe:	3708      	adds	r7, #8
 8014800:	46bd      	mov	sp, r7
 8014802:	bd80      	pop	{r7, pc}
 8014804:	20006878 	.word	0x20006878
 8014808:	0801b2d0 	.word	0x0801b2d0

0801480c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801480c:	b580      	push	{r7, lr}
 801480e:	b082      	sub	sp, #8
 8014810:	af00      	add	r7, sp, #0
 8014812:	4603      	mov	r3, r0
 8014814:	6039      	str	r1, [r7, #0]
 8014816:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8014818:	683b      	ldr	r3, [r7, #0]
 801481a:	221a      	movs	r2, #26
 801481c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801481e:	f000 f843 	bl	80148a8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8014822:	4b02      	ldr	r3, [pc, #8]	; (801482c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8014824:	4618      	mov	r0, r3
 8014826:	3708      	adds	r7, #8
 8014828:	46bd      	mov	sp, r7
 801482a:	bd80      	pop	{r7, pc}
 801482c:	20000e40 	.word	0x20000e40

08014830 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014830:	b580      	push	{r7, lr}
 8014832:	b082      	sub	sp, #8
 8014834:	af00      	add	r7, sp, #0
 8014836:	4603      	mov	r3, r0
 8014838:	6039      	str	r1, [r7, #0]
 801483a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801483c:	79fb      	ldrb	r3, [r7, #7]
 801483e:	2b00      	cmp	r3, #0
 8014840:	d105      	bne.n	801484e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8014842:	683a      	ldr	r2, [r7, #0]
 8014844:	4907      	ldr	r1, [pc, #28]	; (8014864 <USBD_FS_ConfigStrDescriptor+0x34>)
 8014846:	4808      	ldr	r0, [pc, #32]	; (8014868 <USBD_FS_ConfigStrDescriptor+0x38>)
 8014848:	f7fc fbe4 	bl	8011014 <USBD_GetString>
 801484c:	e004      	b.n	8014858 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801484e:	683a      	ldr	r2, [r7, #0]
 8014850:	4904      	ldr	r1, [pc, #16]	; (8014864 <USBD_FS_ConfigStrDescriptor+0x34>)
 8014852:	4805      	ldr	r0, [pc, #20]	; (8014868 <USBD_FS_ConfigStrDescriptor+0x38>)
 8014854:	f7fc fbde 	bl	8011014 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014858:	4b02      	ldr	r3, [pc, #8]	; (8014864 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801485a:	4618      	mov	r0, r3
 801485c:	3708      	adds	r7, #8
 801485e:	46bd      	mov	sp, r7
 8014860:	bd80      	pop	{r7, pc}
 8014862:	bf00      	nop
 8014864:	20006878 	.word	0x20006878
 8014868:	0801b2e4 	.word	0x0801b2e4

0801486c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801486c:	b580      	push	{r7, lr}
 801486e:	b082      	sub	sp, #8
 8014870:	af00      	add	r7, sp, #0
 8014872:	4603      	mov	r3, r0
 8014874:	6039      	str	r1, [r7, #0]
 8014876:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014878:	79fb      	ldrb	r3, [r7, #7]
 801487a:	2b00      	cmp	r3, #0
 801487c:	d105      	bne.n	801488a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801487e:	683a      	ldr	r2, [r7, #0]
 8014880:	4907      	ldr	r1, [pc, #28]	; (80148a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8014882:	4808      	ldr	r0, [pc, #32]	; (80148a4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8014884:	f7fc fbc6 	bl	8011014 <USBD_GetString>
 8014888:	e004      	b.n	8014894 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801488a:	683a      	ldr	r2, [r7, #0]
 801488c:	4904      	ldr	r1, [pc, #16]	; (80148a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801488e:	4805      	ldr	r0, [pc, #20]	; (80148a4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8014890:	f7fc fbc0 	bl	8011014 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014894:	4b02      	ldr	r3, [pc, #8]	; (80148a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8014896:	4618      	mov	r0, r3
 8014898:	3708      	adds	r7, #8
 801489a:	46bd      	mov	sp, r7
 801489c:	bd80      	pop	{r7, pc}
 801489e:	bf00      	nop
 80148a0:	20006878 	.word	0x20006878
 80148a4:	0801b2f0 	.word	0x0801b2f0

080148a8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 80148a8:	b580      	push	{r7, lr}
 80148aa:	b084      	sub	sp, #16
 80148ac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80148ae:	4b0f      	ldr	r3, [pc, #60]	; (80148ec <Get_SerialNum+0x44>)
 80148b0:	681b      	ldr	r3, [r3, #0]
 80148b2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80148b4:	4b0e      	ldr	r3, [pc, #56]	; (80148f0 <Get_SerialNum+0x48>)
 80148b6:	681b      	ldr	r3, [r3, #0]
 80148b8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80148ba:	4b0e      	ldr	r3, [pc, #56]	; (80148f4 <Get_SerialNum+0x4c>)
 80148bc:	681b      	ldr	r3, [r3, #0]
 80148be:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80148c0:	68fa      	ldr	r2, [r7, #12]
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	4413      	add	r3, r2
 80148c6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80148c8:	68fb      	ldr	r3, [r7, #12]
 80148ca:	2b00      	cmp	r3, #0
 80148cc:	d009      	beq.n	80148e2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80148ce:	2208      	movs	r2, #8
 80148d0:	4909      	ldr	r1, [pc, #36]	; (80148f8 <Get_SerialNum+0x50>)
 80148d2:	68f8      	ldr	r0, [r7, #12]
 80148d4:	f000 f814 	bl	8014900 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80148d8:	2204      	movs	r2, #4
 80148da:	4908      	ldr	r1, [pc, #32]	; (80148fc <Get_SerialNum+0x54>)
 80148dc:	68b8      	ldr	r0, [r7, #8]
 80148de:	f000 f80f 	bl	8014900 <IntToUnicode>
  }
}
 80148e2:	bf00      	nop
 80148e4:	3710      	adds	r7, #16
 80148e6:	46bd      	mov	sp, r7
 80148e8:	bd80      	pop	{r7, pc}
 80148ea:	bf00      	nop
 80148ec:	1fff7a10 	.word	0x1fff7a10
 80148f0:	1fff7a14 	.word	0x1fff7a14
 80148f4:	1fff7a18 	.word	0x1fff7a18
 80148f8:	20000e42 	.word	0x20000e42
 80148fc:	20000e52 	.word	0x20000e52

08014900 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8014900:	b480      	push	{r7}
 8014902:	b087      	sub	sp, #28
 8014904:	af00      	add	r7, sp, #0
 8014906:	60f8      	str	r0, [r7, #12]
 8014908:	60b9      	str	r1, [r7, #8]
 801490a:	4613      	mov	r3, r2
 801490c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801490e:	2300      	movs	r3, #0
 8014910:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8014912:	2300      	movs	r3, #0
 8014914:	75fb      	strb	r3, [r7, #23]
 8014916:	e027      	b.n	8014968 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8014918:	68fb      	ldr	r3, [r7, #12]
 801491a:	0f1b      	lsrs	r3, r3, #28
 801491c:	2b09      	cmp	r3, #9
 801491e:	d80b      	bhi.n	8014938 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8014920:	68fb      	ldr	r3, [r7, #12]
 8014922:	0f1b      	lsrs	r3, r3, #28
 8014924:	b2da      	uxtb	r2, r3
 8014926:	7dfb      	ldrb	r3, [r7, #23]
 8014928:	005b      	lsls	r3, r3, #1
 801492a:	4619      	mov	r1, r3
 801492c:	68bb      	ldr	r3, [r7, #8]
 801492e:	440b      	add	r3, r1
 8014930:	3230      	adds	r2, #48	; 0x30
 8014932:	b2d2      	uxtb	r2, r2
 8014934:	701a      	strb	r2, [r3, #0]
 8014936:	e00a      	b.n	801494e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8014938:	68fb      	ldr	r3, [r7, #12]
 801493a:	0f1b      	lsrs	r3, r3, #28
 801493c:	b2da      	uxtb	r2, r3
 801493e:	7dfb      	ldrb	r3, [r7, #23]
 8014940:	005b      	lsls	r3, r3, #1
 8014942:	4619      	mov	r1, r3
 8014944:	68bb      	ldr	r3, [r7, #8]
 8014946:	440b      	add	r3, r1
 8014948:	3237      	adds	r2, #55	; 0x37
 801494a:	b2d2      	uxtb	r2, r2
 801494c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801494e:	68fb      	ldr	r3, [r7, #12]
 8014950:	011b      	lsls	r3, r3, #4
 8014952:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8014954:	7dfb      	ldrb	r3, [r7, #23]
 8014956:	005b      	lsls	r3, r3, #1
 8014958:	3301      	adds	r3, #1
 801495a:	68ba      	ldr	r2, [r7, #8]
 801495c:	4413      	add	r3, r2
 801495e:	2200      	movs	r2, #0
 8014960:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8014962:	7dfb      	ldrb	r3, [r7, #23]
 8014964:	3301      	adds	r3, #1
 8014966:	75fb      	strb	r3, [r7, #23]
 8014968:	7dfa      	ldrb	r2, [r7, #23]
 801496a:	79fb      	ldrb	r3, [r7, #7]
 801496c:	429a      	cmp	r2, r3
 801496e:	d3d3      	bcc.n	8014918 <IntToUnicode+0x18>
  }
}
 8014970:	bf00      	nop
 8014972:	371c      	adds	r7, #28
 8014974:	46bd      	mov	sp, r7
 8014976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801497a:	4770      	bx	lr

0801497c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801497c:	b580      	push	{r7, lr}
 801497e:	b08a      	sub	sp, #40	; 0x28
 8014980:	af00      	add	r7, sp, #0
 8014982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014984:	f107 0314 	add.w	r3, r7, #20
 8014988:	2200      	movs	r2, #0
 801498a:	601a      	str	r2, [r3, #0]
 801498c:	605a      	str	r2, [r3, #4]
 801498e:	609a      	str	r2, [r3, #8]
 8014990:	60da      	str	r2, [r3, #12]
 8014992:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	681b      	ldr	r3, [r3, #0]
 8014998:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801499c:	d13a      	bne.n	8014a14 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801499e:	2300      	movs	r3, #0
 80149a0:	613b      	str	r3, [r7, #16]
 80149a2:	4b1e      	ldr	r3, [pc, #120]	; (8014a1c <HAL_PCD_MspInit+0xa0>)
 80149a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80149a6:	4a1d      	ldr	r2, [pc, #116]	; (8014a1c <HAL_PCD_MspInit+0xa0>)
 80149a8:	f043 0301 	orr.w	r3, r3, #1
 80149ac:	6313      	str	r3, [r2, #48]	; 0x30
 80149ae:	4b1b      	ldr	r3, [pc, #108]	; (8014a1c <HAL_PCD_MspInit+0xa0>)
 80149b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80149b2:	f003 0301 	and.w	r3, r3, #1
 80149b6:	613b      	str	r3, [r7, #16]
 80149b8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80149ba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80149be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80149c0:	2302      	movs	r3, #2
 80149c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80149c4:	2300      	movs	r3, #0
 80149c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80149c8:	2303      	movs	r3, #3
 80149ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80149cc:	230a      	movs	r3, #10
 80149ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80149d0:	f107 0314 	add.w	r3, r7, #20
 80149d4:	4619      	mov	r1, r3
 80149d6:	4812      	ldr	r0, [pc, #72]	; (8014a20 <HAL_PCD_MspInit+0xa4>)
 80149d8:	f7f6 fb3a 	bl	800b050 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80149dc:	4b0f      	ldr	r3, [pc, #60]	; (8014a1c <HAL_PCD_MspInit+0xa0>)
 80149de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80149e0:	4a0e      	ldr	r2, [pc, #56]	; (8014a1c <HAL_PCD_MspInit+0xa0>)
 80149e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80149e6:	6353      	str	r3, [r2, #52]	; 0x34
 80149e8:	2300      	movs	r3, #0
 80149ea:	60fb      	str	r3, [r7, #12]
 80149ec:	4b0b      	ldr	r3, [pc, #44]	; (8014a1c <HAL_PCD_MspInit+0xa0>)
 80149ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80149f0:	4a0a      	ldr	r2, [pc, #40]	; (8014a1c <HAL_PCD_MspInit+0xa0>)
 80149f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80149f6:	6453      	str	r3, [r2, #68]	; 0x44
 80149f8:	4b08      	ldr	r3, [pc, #32]	; (8014a1c <HAL_PCD_MspInit+0xa0>)
 80149fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80149fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014a00:	60fb      	str	r3, [r7, #12]
 8014a02:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8014a04:	2200      	movs	r2, #0
 8014a06:	2105      	movs	r1, #5
 8014a08:	2043      	movs	r0, #67	; 0x43
 8014a0a:	f7f5 ff59 	bl	800a8c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8014a0e:	2043      	movs	r0, #67	; 0x43
 8014a10:	f7f5 ff72 	bl	800a8f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8014a14:	bf00      	nop
 8014a16:	3728      	adds	r7, #40	; 0x28
 8014a18:	46bd      	mov	sp, r7
 8014a1a:	bd80      	pop	{r7, pc}
 8014a1c:	40023800 	.word	0x40023800
 8014a20:	40020000 	.word	0x40020000

08014a24 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014a24:	b580      	push	{r7, lr}
 8014a26:	b082      	sub	sp, #8
 8014a28:	af00      	add	r7, sp, #0
 8014a2a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8014a38:	4619      	mov	r1, r3
 8014a3a:	4610      	mov	r0, r2
 8014a3c:	f7fb fbfc 	bl	8010238 <USBD_LL_SetupStage>
}
 8014a40:	bf00      	nop
 8014a42:	3708      	adds	r7, #8
 8014a44:	46bd      	mov	sp, r7
 8014a46:	bd80      	pop	{r7, pc}

08014a48 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014a48:	b580      	push	{r7, lr}
 8014a4a:	b082      	sub	sp, #8
 8014a4c:	af00      	add	r7, sp, #0
 8014a4e:	6078      	str	r0, [r7, #4]
 8014a50:	460b      	mov	r3, r1
 8014a52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8014a5a:	78fa      	ldrb	r2, [r7, #3]
 8014a5c:	6879      	ldr	r1, [r7, #4]
 8014a5e:	4613      	mov	r3, r2
 8014a60:	00db      	lsls	r3, r3, #3
 8014a62:	1a9b      	subs	r3, r3, r2
 8014a64:	009b      	lsls	r3, r3, #2
 8014a66:	440b      	add	r3, r1
 8014a68:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8014a6c:	681a      	ldr	r2, [r3, #0]
 8014a6e:	78fb      	ldrb	r3, [r7, #3]
 8014a70:	4619      	mov	r1, r3
 8014a72:	f7fb fc2c 	bl	80102ce <USBD_LL_DataOutStage>
}
 8014a76:	bf00      	nop
 8014a78:	3708      	adds	r7, #8
 8014a7a:	46bd      	mov	sp, r7
 8014a7c:	bd80      	pop	{r7, pc}

08014a7e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014a7e:	b580      	push	{r7, lr}
 8014a80:	b082      	sub	sp, #8
 8014a82:	af00      	add	r7, sp, #0
 8014a84:	6078      	str	r0, [r7, #4]
 8014a86:	460b      	mov	r3, r1
 8014a88:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8014a90:	78fa      	ldrb	r2, [r7, #3]
 8014a92:	6879      	ldr	r1, [r7, #4]
 8014a94:	4613      	mov	r3, r2
 8014a96:	00db      	lsls	r3, r3, #3
 8014a98:	1a9b      	subs	r3, r3, r2
 8014a9a:	009b      	lsls	r3, r3, #2
 8014a9c:	440b      	add	r3, r1
 8014a9e:	3348      	adds	r3, #72	; 0x48
 8014aa0:	681a      	ldr	r2, [r3, #0]
 8014aa2:	78fb      	ldrb	r3, [r7, #3]
 8014aa4:	4619      	mov	r1, r3
 8014aa6:	f7fb fc83 	bl	80103b0 <USBD_LL_DataInStage>
}
 8014aaa:	bf00      	nop
 8014aac:	3708      	adds	r7, #8
 8014aae:	46bd      	mov	sp, r7
 8014ab0:	bd80      	pop	{r7, pc}

08014ab2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014ab2:	b580      	push	{r7, lr}
 8014ab4:	b082      	sub	sp, #8
 8014ab6:	af00      	add	r7, sp, #0
 8014ab8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014ac0:	4618      	mov	r0, r3
 8014ac2:	f7fb fd91 	bl	80105e8 <USBD_LL_SOF>
}
 8014ac6:	bf00      	nop
 8014ac8:	3708      	adds	r7, #8
 8014aca:	46bd      	mov	sp, r7
 8014acc:	bd80      	pop	{r7, pc}

08014ace <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8014ace:	b580      	push	{r7, lr}
 8014ad0:	b084      	sub	sp, #16
 8014ad2:	af00      	add	r7, sp, #0
 8014ad4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8014ad6:	2301      	movs	r3, #1
 8014ad8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	68db      	ldr	r3, [r3, #12]
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d102      	bne.n	8014ae8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8014ae2:	2300      	movs	r3, #0
 8014ae4:	73fb      	strb	r3, [r7, #15]
 8014ae6:	e008      	b.n	8014afa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	68db      	ldr	r3, [r3, #12]
 8014aec:	2b02      	cmp	r3, #2
 8014aee:	d102      	bne.n	8014af6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8014af0:	2301      	movs	r3, #1
 8014af2:	73fb      	strb	r3, [r7, #15]
 8014af4:	e001      	b.n	8014afa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8014af6:	f7ee ffd7 	bl	8003aa8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014b00:	7bfa      	ldrb	r2, [r7, #15]
 8014b02:	4611      	mov	r1, r2
 8014b04:	4618      	mov	r0, r3
 8014b06:	f7fb fd39 	bl	801057c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014b10:	4618      	mov	r0, r3
 8014b12:	f7fb fcf2 	bl	80104fa <USBD_LL_Reset>
}
 8014b16:	bf00      	nop
 8014b18:	3710      	adds	r7, #16
 8014b1a:	46bd      	mov	sp, r7
 8014b1c:	bd80      	pop	{r7, pc}
	...

08014b20 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014b20:	b580      	push	{r7, lr}
 8014b22:	b082      	sub	sp, #8
 8014b24:	af00      	add	r7, sp, #0
 8014b26:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014b2e:	4618      	mov	r0, r3
 8014b30:	f7fb fd34 	bl	801059c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	681b      	ldr	r3, [r3, #0]
 8014b38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014b3c:	681b      	ldr	r3, [r3, #0]
 8014b3e:	687a      	ldr	r2, [r7, #4]
 8014b40:	6812      	ldr	r2, [r2, #0]
 8014b42:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014b46:	f043 0301 	orr.w	r3, r3, #1
 8014b4a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	6a1b      	ldr	r3, [r3, #32]
 8014b50:	2b00      	cmp	r3, #0
 8014b52:	d005      	beq.n	8014b60 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014b54:	4b04      	ldr	r3, [pc, #16]	; (8014b68 <HAL_PCD_SuspendCallback+0x48>)
 8014b56:	691b      	ldr	r3, [r3, #16]
 8014b58:	4a03      	ldr	r2, [pc, #12]	; (8014b68 <HAL_PCD_SuspendCallback+0x48>)
 8014b5a:	f043 0306 	orr.w	r3, r3, #6
 8014b5e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8014b60:	bf00      	nop
 8014b62:	3708      	adds	r7, #8
 8014b64:	46bd      	mov	sp, r7
 8014b66:	bd80      	pop	{r7, pc}
 8014b68:	e000ed00 	.word	0xe000ed00

08014b6c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014b6c:	b580      	push	{r7, lr}
 8014b6e:	b082      	sub	sp, #8
 8014b70:	af00      	add	r7, sp, #0
 8014b72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014b7a:	4618      	mov	r0, r3
 8014b7c:	f7fb fd23 	bl	80105c6 <USBD_LL_Resume>
}
 8014b80:	bf00      	nop
 8014b82:	3708      	adds	r7, #8
 8014b84:	46bd      	mov	sp, r7
 8014b86:	bd80      	pop	{r7, pc}

08014b88 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014b88:	b580      	push	{r7, lr}
 8014b8a:	b082      	sub	sp, #8
 8014b8c:	af00      	add	r7, sp, #0
 8014b8e:	6078      	str	r0, [r7, #4]
 8014b90:	460b      	mov	r3, r1
 8014b92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014b9a:	78fa      	ldrb	r2, [r7, #3]
 8014b9c:	4611      	mov	r1, r2
 8014b9e:	4618      	mov	r0, r3
 8014ba0:	f7fb fd49 	bl	8010636 <USBD_LL_IsoOUTIncomplete>
}
 8014ba4:	bf00      	nop
 8014ba6:	3708      	adds	r7, #8
 8014ba8:	46bd      	mov	sp, r7
 8014baa:	bd80      	pop	{r7, pc}

08014bac <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014bac:	b580      	push	{r7, lr}
 8014bae:	b082      	sub	sp, #8
 8014bb0:	af00      	add	r7, sp, #0
 8014bb2:	6078      	str	r0, [r7, #4]
 8014bb4:	460b      	mov	r3, r1
 8014bb6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8014bb8:	687b      	ldr	r3, [r7, #4]
 8014bba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014bbe:	78fa      	ldrb	r2, [r7, #3]
 8014bc0:	4611      	mov	r1, r2
 8014bc2:	4618      	mov	r0, r3
 8014bc4:	f7fb fd2a 	bl	801061c <USBD_LL_IsoINIncomplete>
}
 8014bc8:	bf00      	nop
 8014bca:	3708      	adds	r7, #8
 8014bcc:	46bd      	mov	sp, r7
 8014bce:	bd80      	pop	{r7, pc}

08014bd0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014bd0:	b580      	push	{r7, lr}
 8014bd2:	b082      	sub	sp, #8
 8014bd4:	af00      	add	r7, sp, #0
 8014bd6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014bde:	4618      	mov	r0, r3
 8014be0:	f7fb fd36 	bl	8010650 <USBD_LL_DevConnected>
}
 8014be4:	bf00      	nop
 8014be6:	3708      	adds	r7, #8
 8014be8:	46bd      	mov	sp, r7
 8014bea:	bd80      	pop	{r7, pc}

08014bec <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014bec:	b580      	push	{r7, lr}
 8014bee:	b082      	sub	sp, #8
 8014bf0:	af00      	add	r7, sp, #0
 8014bf2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014bfa:	4618      	mov	r0, r3
 8014bfc:	f7fb fd33 	bl	8010666 <USBD_LL_DevDisconnected>
}
 8014c00:	bf00      	nop
 8014c02:	3708      	adds	r7, #8
 8014c04:	46bd      	mov	sp, r7
 8014c06:	bd80      	pop	{r7, pc}

08014c08 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8014c08:	b580      	push	{r7, lr}
 8014c0a:	b082      	sub	sp, #8
 8014c0c:	af00      	add	r7, sp, #0
 8014c0e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8014c10:	687b      	ldr	r3, [r7, #4]
 8014c12:	781b      	ldrb	r3, [r3, #0]
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d13c      	bne.n	8014c92 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8014c18:	4a20      	ldr	r2, [pc, #128]	; (8014c9c <USBD_LL_Init+0x94>)
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8014c20:	687b      	ldr	r3, [r7, #4]
 8014c22:	4a1e      	ldr	r2, [pc, #120]	; (8014c9c <USBD_LL_Init+0x94>)
 8014c24:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8014c28:	4b1c      	ldr	r3, [pc, #112]	; (8014c9c <USBD_LL_Init+0x94>)
 8014c2a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8014c2e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8014c30:	4b1a      	ldr	r3, [pc, #104]	; (8014c9c <USBD_LL_Init+0x94>)
 8014c32:	2204      	movs	r2, #4
 8014c34:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8014c36:	4b19      	ldr	r3, [pc, #100]	; (8014c9c <USBD_LL_Init+0x94>)
 8014c38:	2202      	movs	r2, #2
 8014c3a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8014c3c:	4b17      	ldr	r3, [pc, #92]	; (8014c9c <USBD_LL_Init+0x94>)
 8014c3e:	2200      	movs	r2, #0
 8014c40:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8014c42:	4b16      	ldr	r3, [pc, #88]	; (8014c9c <USBD_LL_Init+0x94>)
 8014c44:	2202      	movs	r2, #2
 8014c46:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8014c48:	4b14      	ldr	r3, [pc, #80]	; (8014c9c <USBD_LL_Init+0x94>)
 8014c4a:	2200      	movs	r2, #0
 8014c4c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8014c4e:	4b13      	ldr	r3, [pc, #76]	; (8014c9c <USBD_LL_Init+0x94>)
 8014c50:	2200      	movs	r2, #0
 8014c52:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8014c54:	4b11      	ldr	r3, [pc, #68]	; (8014c9c <USBD_LL_Init+0x94>)
 8014c56:	2200      	movs	r2, #0
 8014c58:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8014c5a:	4b10      	ldr	r3, [pc, #64]	; (8014c9c <USBD_LL_Init+0x94>)
 8014c5c:	2200      	movs	r2, #0
 8014c5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8014c60:	4b0e      	ldr	r3, [pc, #56]	; (8014c9c <USBD_LL_Init+0x94>)
 8014c62:	2200      	movs	r2, #0
 8014c64:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8014c66:	480d      	ldr	r0, [pc, #52]	; (8014c9c <USBD_LL_Init+0x94>)
 8014c68:	f7f6 fbfc 	bl	800b464 <HAL_PCD_Init>
 8014c6c:	4603      	mov	r3, r0
 8014c6e:	2b00      	cmp	r3, #0
 8014c70:	d001      	beq.n	8014c76 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8014c72:	f7ee ff19 	bl	8003aa8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8014c76:	2180      	movs	r1, #128	; 0x80
 8014c78:	4808      	ldr	r0, [pc, #32]	; (8014c9c <USBD_LL_Init+0x94>)
 8014c7a:	f7f7 fd60 	bl	800c73e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8014c7e:	2240      	movs	r2, #64	; 0x40
 8014c80:	2100      	movs	r1, #0
 8014c82:	4806      	ldr	r0, [pc, #24]	; (8014c9c <USBD_LL_Init+0x94>)
 8014c84:	f7f7 fd14 	bl	800c6b0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8014c88:	2280      	movs	r2, #128	; 0x80
 8014c8a:	2101      	movs	r1, #1
 8014c8c:	4803      	ldr	r0, [pc, #12]	; (8014c9c <USBD_LL_Init+0x94>)
 8014c8e:	f7f7 fd0f 	bl	800c6b0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8014c92:	2300      	movs	r3, #0
}
 8014c94:	4618      	mov	r0, r3
 8014c96:	3708      	adds	r7, #8
 8014c98:	46bd      	mov	sp, r7
 8014c9a:	bd80      	pop	{r7, pc}
 8014c9c:	20006a78 	.word	0x20006a78

08014ca0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8014ca0:	b580      	push	{r7, lr}
 8014ca2:	b084      	sub	sp, #16
 8014ca4:	af00      	add	r7, sp, #0
 8014ca6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014ca8:	2300      	movs	r3, #0
 8014caa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014cac:	2300      	movs	r3, #0
 8014cae:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8014cb6:	4618      	mov	r0, r3
 8014cb8:	f7f6 fcf1 	bl	800b69e <HAL_PCD_Start>
 8014cbc:	4603      	mov	r3, r0
 8014cbe:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8014cc0:	7bfb      	ldrb	r3, [r7, #15]
 8014cc2:	4618      	mov	r0, r3
 8014cc4:	f000 f92e 	bl	8014f24 <USBD_Get_USB_Status>
 8014cc8:	4603      	mov	r3, r0
 8014cca:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8014ccc:	7bbb      	ldrb	r3, [r7, #14]
}
 8014cce:	4618      	mov	r0, r3
 8014cd0:	3710      	adds	r7, #16
 8014cd2:	46bd      	mov	sp, r7
 8014cd4:	bd80      	pop	{r7, pc}

08014cd6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8014cd6:	b580      	push	{r7, lr}
 8014cd8:	b084      	sub	sp, #16
 8014cda:	af00      	add	r7, sp, #0
 8014cdc:	6078      	str	r0, [r7, #4]
 8014cde:	4608      	mov	r0, r1
 8014ce0:	4611      	mov	r1, r2
 8014ce2:	461a      	mov	r2, r3
 8014ce4:	4603      	mov	r3, r0
 8014ce6:	70fb      	strb	r3, [r7, #3]
 8014ce8:	460b      	mov	r3, r1
 8014cea:	70bb      	strb	r3, [r7, #2]
 8014cec:	4613      	mov	r3, r2
 8014cee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014cf0:	2300      	movs	r3, #0
 8014cf2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014cf4:	2300      	movs	r3, #0
 8014cf6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8014cfe:	78bb      	ldrb	r3, [r7, #2]
 8014d00:	883a      	ldrh	r2, [r7, #0]
 8014d02:	78f9      	ldrb	r1, [r7, #3]
 8014d04:	f7f7 f8c6 	bl	800be94 <HAL_PCD_EP_Open>
 8014d08:	4603      	mov	r3, r0
 8014d0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014d0c:	7bfb      	ldrb	r3, [r7, #15]
 8014d0e:	4618      	mov	r0, r3
 8014d10:	f000 f908 	bl	8014f24 <USBD_Get_USB_Status>
 8014d14:	4603      	mov	r3, r0
 8014d16:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8014d18:	7bbb      	ldrb	r3, [r7, #14]
}
 8014d1a:	4618      	mov	r0, r3
 8014d1c:	3710      	adds	r7, #16
 8014d1e:	46bd      	mov	sp, r7
 8014d20:	bd80      	pop	{r7, pc}

08014d22 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014d22:	b580      	push	{r7, lr}
 8014d24:	b084      	sub	sp, #16
 8014d26:	af00      	add	r7, sp, #0
 8014d28:	6078      	str	r0, [r7, #4]
 8014d2a:	460b      	mov	r3, r1
 8014d2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014d2e:	2300      	movs	r3, #0
 8014d30:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014d32:	2300      	movs	r3, #0
 8014d34:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8014d36:	687b      	ldr	r3, [r7, #4]
 8014d38:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8014d3c:	78fa      	ldrb	r2, [r7, #3]
 8014d3e:	4611      	mov	r1, r2
 8014d40:	4618      	mov	r0, r3
 8014d42:	f7f7 f90f 	bl	800bf64 <HAL_PCD_EP_Close>
 8014d46:	4603      	mov	r3, r0
 8014d48:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8014d4a:	7bfb      	ldrb	r3, [r7, #15]
 8014d4c:	4618      	mov	r0, r3
 8014d4e:	f000 f8e9 	bl	8014f24 <USBD_Get_USB_Status>
 8014d52:	4603      	mov	r3, r0
 8014d54:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8014d56:	7bbb      	ldrb	r3, [r7, #14]
}
 8014d58:	4618      	mov	r0, r3
 8014d5a:	3710      	adds	r7, #16
 8014d5c:	46bd      	mov	sp, r7
 8014d5e:	bd80      	pop	{r7, pc}

08014d60 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014d60:	b580      	push	{r7, lr}
 8014d62:	b084      	sub	sp, #16
 8014d64:	af00      	add	r7, sp, #0
 8014d66:	6078      	str	r0, [r7, #4]
 8014d68:	460b      	mov	r3, r1
 8014d6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014d6c:	2300      	movs	r3, #0
 8014d6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014d70:	2300      	movs	r3, #0
 8014d72:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8014d74:	687b      	ldr	r3, [r7, #4]
 8014d76:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8014d7a:	78fa      	ldrb	r2, [r7, #3]
 8014d7c:	4611      	mov	r1, r2
 8014d7e:	4618      	mov	r0, r3
 8014d80:	f7f7 f9e7 	bl	800c152 <HAL_PCD_EP_SetStall>
 8014d84:	4603      	mov	r3, r0
 8014d86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014d88:	7bfb      	ldrb	r3, [r7, #15]
 8014d8a:	4618      	mov	r0, r3
 8014d8c:	f000 f8ca 	bl	8014f24 <USBD_Get_USB_Status>
 8014d90:	4603      	mov	r3, r0
 8014d92:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8014d94:	7bbb      	ldrb	r3, [r7, #14]
}
 8014d96:	4618      	mov	r0, r3
 8014d98:	3710      	adds	r7, #16
 8014d9a:	46bd      	mov	sp, r7
 8014d9c:	bd80      	pop	{r7, pc}

08014d9e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014d9e:	b580      	push	{r7, lr}
 8014da0:	b084      	sub	sp, #16
 8014da2:	af00      	add	r7, sp, #0
 8014da4:	6078      	str	r0, [r7, #4]
 8014da6:	460b      	mov	r3, r1
 8014da8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014daa:	2300      	movs	r3, #0
 8014dac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014dae:	2300      	movs	r3, #0
 8014db0:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8014db2:	687b      	ldr	r3, [r7, #4]
 8014db4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8014db8:	78fa      	ldrb	r2, [r7, #3]
 8014dba:	4611      	mov	r1, r2
 8014dbc:	4618      	mov	r0, r3
 8014dbe:	f7f7 fa2c 	bl	800c21a <HAL_PCD_EP_ClrStall>
 8014dc2:	4603      	mov	r3, r0
 8014dc4:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8014dc6:	7bfb      	ldrb	r3, [r7, #15]
 8014dc8:	4618      	mov	r0, r3
 8014dca:	f000 f8ab 	bl	8014f24 <USBD_Get_USB_Status>
 8014dce:	4603      	mov	r3, r0
 8014dd0:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8014dd2:	7bbb      	ldrb	r3, [r7, #14]
}
 8014dd4:	4618      	mov	r0, r3
 8014dd6:	3710      	adds	r7, #16
 8014dd8:	46bd      	mov	sp, r7
 8014dda:	bd80      	pop	{r7, pc}

08014ddc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014ddc:	b480      	push	{r7}
 8014dde:	b085      	sub	sp, #20
 8014de0:	af00      	add	r7, sp, #0
 8014de2:	6078      	str	r0, [r7, #4]
 8014de4:	460b      	mov	r3, r1
 8014de6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8014dee:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8014df0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014df4:	2b00      	cmp	r3, #0
 8014df6:	da0b      	bge.n	8014e10 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8014df8:	78fb      	ldrb	r3, [r7, #3]
 8014dfa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014dfe:	68f9      	ldr	r1, [r7, #12]
 8014e00:	4613      	mov	r3, r2
 8014e02:	00db      	lsls	r3, r3, #3
 8014e04:	1a9b      	subs	r3, r3, r2
 8014e06:	009b      	lsls	r3, r3, #2
 8014e08:	440b      	add	r3, r1
 8014e0a:	333e      	adds	r3, #62	; 0x3e
 8014e0c:	781b      	ldrb	r3, [r3, #0]
 8014e0e:	e00b      	b.n	8014e28 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8014e10:	78fb      	ldrb	r3, [r7, #3]
 8014e12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014e16:	68f9      	ldr	r1, [r7, #12]
 8014e18:	4613      	mov	r3, r2
 8014e1a:	00db      	lsls	r3, r3, #3
 8014e1c:	1a9b      	subs	r3, r3, r2
 8014e1e:	009b      	lsls	r3, r3, #2
 8014e20:	440b      	add	r3, r1
 8014e22:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8014e26:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014e28:	4618      	mov	r0, r3
 8014e2a:	3714      	adds	r7, #20
 8014e2c:	46bd      	mov	sp, r7
 8014e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e32:	4770      	bx	lr

08014e34 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8014e34:	b580      	push	{r7, lr}
 8014e36:	b084      	sub	sp, #16
 8014e38:	af00      	add	r7, sp, #0
 8014e3a:	6078      	str	r0, [r7, #4]
 8014e3c:	460b      	mov	r3, r1
 8014e3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014e40:	2300      	movs	r3, #0
 8014e42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014e44:	2300      	movs	r3, #0
 8014e46:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8014e4e:	78fa      	ldrb	r2, [r7, #3]
 8014e50:	4611      	mov	r1, r2
 8014e52:	4618      	mov	r0, r3
 8014e54:	f7f6 fff9 	bl	800be4a <HAL_PCD_SetAddress>
 8014e58:	4603      	mov	r3, r0
 8014e5a:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8014e5c:	7bfb      	ldrb	r3, [r7, #15]
 8014e5e:	4618      	mov	r0, r3
 8014e60:	f000 f860 	bl	8014f24 <USBD_Get_USB_Status>
 8014e64:	4603      	mov	r3, r0
 8014e66:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8014e68:	7bbb      	ldrb	r3, [r7, #14]
}
 8014e6a:	4618      	mov	r0, r3
 8014e6c:	3710      	adds	r7, #16
 8014e6e:	46bd      	mov	sp, r7
 8014e70:	bd80      	pop	{r7, pc}

08014e72 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8014e72:	b580      	push	{r7, lr}
 8014e74:	b086      	sub	sp, #24
 8014e76:	af00      	add	r7, sp, #0
 8014e78:	60f8      	str	r0, [r7, #12]
 8014e7a:	607a      	str	r2, [r7, #4]
 8014e7c:	461a      	mov	r2, r3
 8014e7e:	460b      	mov	r3, r1
 8014e80:	72fb      	strb	r3, [r7, #11]
 8014e82:	4613      	mov	r3, r2
 8014e84:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014e86:	2300      	movs	r3, #0
 8014e88:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014e8a:	2300      	movs	r3, #0
 8014e8c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8014e8e:	68fb      	ldr	r3, [r7, #12]
 8014e90:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8014e94:	893b      	ldrh	r3, [r7, #8]
 8014e96:	7af9      	ldrb	r1, [r7, #11]
 8014e98:	687a      	ldr	r2, [r7, #4]
 8014e9a:	f7f7 f910 	bl	800c0be <HAL_PCD_EP_Transmit>
 8014e9e:	4603      	mov	r3, r0
 8014ea0:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8014ea2:	7dfb      	ldrb	r3, [r7, #23]
 8014ea4:	4618      	mov	r0, r3
 8014ea6:	f000 f83d 	bl	8014f24 <USBD_Get_USB_Status>
 8014eaa:	4603      	mov	r3, r0
 8014eac:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8014eae:	7dbb      	ldrb	r3, [r7, #22]
}
 8014eb0:	4618      	mov	r0, r3
 8014eb2:	3718      	adds	r7, #24
 8014eb4:	46bd      	mov	sp, r7
 8014eb6:	bd80      	pop	{r7, pc}

08014eb8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8014eb8:	b580      	push	{r7, lr}
 8014eba:	b086      	sub	sp, #24
 8014ebc:	af00      	add	r7, sp, #0
 8014ebe:	60f8      	str	r0, [r7, #12]
 8014ec0:	607a      	str	r2, [r7, #4]
 8014ec2:	461a      	mov	r2, r3
 8014ec4:	460b      	mov	r3, r1
 8014ec6:	72fb      	strb	r3, [r7, #11]
 8014ec8:	4613      	mov	r3, r2
 8014eca:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014ecc:	2300      	movs	r3, #0
 8014ece:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014ed0:	2300      	movs	r3, #0
 8014ed2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8014ed4:	68fb      	ldr	r3, [r7, #12]
 8014ed6:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8014eda:	893b      	ldrh	r3, [r7, #8]
 8014edc:	7af9      	ldrb	r1, [r7, #11]
 8014ede:	687a      	ldr	r2, [r7, #4]
 8014ee0:	f7f7 f88a 	bl	800bff8 <HAL_PCD_EP_Receive>
 8014ee4:	4603      	mov	r3, r0
 8014ee6:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8014ee8:	7dfb      	ldrb	r3, [r7, #23]
 8014eea:	4618      	mov	r0, r3
 8014eec:	f000 f81a 	bl	8014f24 <USBD_Get_USB_Status>
 8014ef0:	4603      	mov	r3, r0
 8014ef2:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8014ef4:	7dbb      	ldrb	r3, [r7, #22]
}
 8014ef6:	4618      	mov	r0, r3
 8014ef8:	3718      	adds	r7, #24
 8014efa:	46bd      	mov	sp, r7
 8014efc:	bd80      	pop	{r7, pc}

08014efe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014efe:	b580      	push	{r7, lr}
 8014f00:	b082      	sub	sp, #8
 8014f02:	af00      	add	r7, sp, #0
 8014f04:	6078      	str	r0, [r7, #4]
 8014f06:	460b      	mov	r3, r1
 8014f08:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8014f10:	78fa      	ldrb	r2, [r7, #3]
 8014f12:	4611      	mov	r1, r2
 8014f14:	4618      	mov	r0, r3
 8014f16:	f7f7 f8ba 	bl	800c08e <HAL_PCD_EP_GetRxCount>
 8014f1a:	4603      	mov	r3, r0
}
 8014f1c:	4618      	mov	r0, r3
 8014f1e:	3708      	adds	r7, #8
 8014f20:	46bd      	mov	sp, r7
 8014f22:	bd80      	pop	{r7, pc}

08014f24 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8014f24:	b480      	push	{r7}
 8014f26:	b085      	sub	sp, #20
 8014f28:	af00      	add	r7, sp, #0
 8014f2a:	4603      	mov	r3, r0
 8014f2c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014f2e:	2300      	movs	r3, #0
 8014f30:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8014f32:	79fb      	ldrb	r3, [r7, #7]
 8014f34:	2b03      	cmp	r3, #3
 8014f36:	d817      	bhi.n	8014f68 <USBD_Get_USB_Status+0x44>
 8014f38:	a201      	add	r2, pc, #4	; (adr r2, 8014f40 <USBD_Get_USB_Status+0x1c>)
 8014f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014f3e:	bf00      	nop
 8014f40:	08014f51 	.word	0x08014f51
 8014f44:	08014f57 	.word	0x08014f57
 8014f48:	08014f5d 	.word	0x08014f5d
 8014f4c:	08014f63 	.word	0x08014f63
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8014f50:	2300      	movs	r3, #0
 8014f52:	73fb      	strb	r3, [r7, #15]
    break;
 8014f54:	e00b      	b.n	8014f6e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8014f56:	2302      	movs	r3, #2
 8014f58:	73fb      	strb	r3, [r7, #15]
    break;
 8014f5a:	e008      	b.n	8014f6e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014f5c:	2301      	movs	r3, #1
 8014f5e:	73fb      	strb	r3, [r7, #15]
    break;
 8014f60:	e005      	b.n	8014f6e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8014f62:	2302      	movs	r3, #2
 8014f64:	73fb      	strb	r3, [r7, #15]
    break;
 8014f66:	e002      	b.n	8014f6e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8014f68:	2302      	movs	r3, #2
 8014f6a:	73fb      	strb	r3, [r7, #15]
    break;
 8014f6c:	bf00      	nop
  }
  return usb_status;
 8014f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014f70:	4618      	mov	r0, r3
 8014f72:	3714      	adds	r7, #20
 8014f74:	46bd      	mov	sp, r7
 8014f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f7a:	4770      	bx	lr

08014f7c <__errno>:
 8014f7c:	4b01      	ldr	r3, [pc, #4]	; (8014f84 <__errno+0x8>)
 8014f7e:	6818      	ldr	r0, [r3, #0]
 8014f80:	4770      	bx	lr
 8014f82:	bf00      	nop
 8014f84:	20000e5c 	.word	0x20000e5c

08014f88 <__libc_init_array>:
 8014f88:	b570      	push	{r4, r5, r6, lr}
 8014f8a:	4e0d      	ldr	r6, [pc, #52]	; (8014fc0 <__libc_init_array+0x38>)
 8014f8c:	4c0d      	ldr	r4, [pc, #52]	; (8014fc4 <__libc_init_array+0x3c>)
 8014f8e:	1ba4      	subs	r4, r4, r6
 8014f90:	10a4      	asrs	r4, r4, #2
 8014f92:	2500      	movs	r5, #0
 8014f94:	42a5      	cmp	r5, r4
 8014f96:	d109      	bne.n	8014fac <__libc_init_array+0x24>
 8014f98:	4e0b      	ldr	r6, [pc, #44]	; (8014fc8 <__libc_init_array+0x40>)
 8014f9a:	4c0c      	ldr	r4, [pc, #48]	; (8014fcc <__libc_init_array+0x44>)
 8014f9c:	f005 fece 	bl	801ad3c <_init>
 8014fa0:	1ba4      	subs	r4, r4, r6
 8014fa2:	10a4      	asrs	r4, r4, #2
 8014fa4:	2500      	movs	r5, #0
 8014fa6:	42a5      	cmp	r5, r4
 8014fa8:	d105      	bne.n	8014fb6 <__libc_init_array+0x2e>
 8014faa:	bd70      	pop	{r4, r5, r6, pc}
 8014fac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014fb0:	4798      	blx	r3
 8014fb2:	3501      	adds	r5, #1
 8014fb4:	e7ee      	b.n	8014f94 <__libc_init_array+0xc>
 8014fb6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014fba:	4798      	blx	r3
 8014fbc:	3501      	adds	r5, #1
 8014fbe:	e7f2      	b.n	8014fa6 <__libc_init_array+0x1e>
 8014fc0:	0801b888 	.word	0x0801b888
 8014fc4:	0801b888 	.word	0x0801b888
 8014fc8:	0801b888 	.word	0x0801b888
 8014fcc:	0801b88c 	.word	0x0801b88c

08014fd0 <malloc>:
 8014fd0:	4b02      	ldr	r3, [pc, #8]	; (8014fdc <malloc+0xc>)
 8014fd2:	4601      	mov	r1, r0
 8014fd4:	6818      	ldr	r0, [r3, #0]
 8014fd6:	f000 b885 	b.w	80150e4 <_malloc_r>
 8014fda:	bf00      	nop
 8014fdc:	20000e5c 	.word	0x20000e5c

08014fe0 <free>:
 8014fe0:	4b02      	ldr	r3, [pc, #8]	; (8014fec <free+0xc>)
 8014fe2:	4601      	mov	r1, r0
 8014fe4:	6818      	ldr	r0, [r3, #0]
 8014fe6:	f000 b82f 	b.w	8015048 <_free_r>
 8014fea:	bf00      	nop
 8014fec:	20000e5c 	.word	0x20000e5c

08014ff0 <memcpy>:
 8014ff0:	b510      	push	{r4, lr}
 8014ff2:	1e43      	subs	r3, r0, #1
 8014ff4:	440a      	add	r2, r1
 8014ff6:	4291      	cmp	r1, r2
 8014ff8:	d100      	bne.n	8014ffc <memcpy+0xc>
 8014ffa:	bd10      	pop	{r4, pc}
 8014ffc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015000:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015004:	e7f7      	b.n	8014ff6 <memcpy+0x6>

08015006 <memmove>:
 8015006:	4288      	cmp	r0, r1
 8015008:	b510      	push	{r4, lr}
 801500a:	eb01 0302 	add.w	r3, r1, r2
 801500e:	d807      	bhi.n	8015020 <memmove+0x1a>
 8015010:	1e42      	subs	r2, r0, #1
 8015012:	4299      	cmp	r1, r3
 8015014:	d00a      	beq.n	801502c <memmove+0x26>
 8015016:	f811 4b01 	ldrb.w	r4, [r1], #1
 801501a:	f802 4f01 	strb.w	r4, [r2, #1]!
 801501e:	e7f8      	b.n	8015012 <memmove+0xc>
 8015020:	4283      	cmp	r3, r0
 8015022:	d9f5      	bls.n	8015010 <memmove+0xa>
 8015024:	1881      	adds	r1, r0, r2
 8015026:	1ad2      	subs	r2, r2, r3
 8015028:	42d3      	cmn	r3, r2
 801502a:	d100      	bne.n	801502e <memmove+0x28>
 801502c:	bd10      	pop	{r4, pc}
 801502e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015032:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8015036:	e7f7      	b.n	8015028 <memmove+0x22>

08015038 <memset>:
 8015038:	4402      	add	r2, r0
 801503a:	4603      	mov	r3, r0
 801503c:	4293      	cmp	r3, r2
 801503e:	d100      	bne.n	8015042 <memset+0xa>
 8015040:	4770      	bx	lr
 8015042:	f803 1b01 	strb.w	r1, [r3], #1
 8015046:	e7f9      	b.n	801503c <memset+0x4>

08015048 <_free_r>:
 8015048:	b538      	push	{r3, r4, r5, lr}
 801504a:	4605      	mov	r5, r0
 801504c:	2900      	cmp	r1, #0
 801504e:	d045      	beq.n	80150dc <_free_r+0x94>
 8015050:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015054:	1f0c      	subs	r4, r1, #4
 8015056:	2b00      	cmp	r3, #0
 8015058:	bfb8      	it	lt
 801505a:	18e4      	addlt	r4, r4, r3
 801505c:	f002 ffce 	bl	8017ffc <__malloc_lock>
 8015060:	4a1f      	ldr	r2, [pc, #124]	; (80150e0 <_free_r+0x98>)
 8015062:	6813      	ldr	r3, [r2, #0]
 8015064:	4610      	mov	r0, r2
 8015066:	b933      	cbnz	r3, 8015076 <_free_r+0x2e>
 8015068:	6063      	str	r3, [r4, #4]
 801506a:	6014      	str	r4, [r2, #0]
 801506c:	4628      	mov	r0, r5
 801506e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015072:	f002 bfc4 	b.w	8017ffe <__malloc_unlock>
 8015076:	42a3      	cmp	r3, r4
 8015078:	d90c      	bls.n	8015094 <_free_r+0x4c>
 801507a:	6821      	ldr	r1, [r4, #0]
 801507c:	1862      	adds	r2, r4, r1
 801507e:	4293      	cmp	r3, r2
 8015080:	bf04      	itt	eq
 8015082:	681a      	ldreq	r2, [r3, #0]
 8015084:	685b      	ldreq	r3, [r3, #4]
 8015086:	6063      	str	r3, [r4, #4]
 8015088:	bf04      	itt	eq
 801508a:	1852      	addeq	r2, r2, r1
 801508c:	6022      	streq	r2, [r4, #0]
 801508e:	6004      	str	r4, [r0, #0]
 8015090:	e7ec      	b.n	801506c <_free_r+0x24>
 8015092:	4613      	mov	r3, r2
 8015094:	685a      	ldr	r2, [r3, #4]
 8015096:	b10a      	cbz	r2, 801509c <_free_r+0x54>
 8015098:	42a2      	cmp	r2, r4
 801509a:	d9fa      	bls.n	8015092 <_free_r+0x4a>
 801509c:	6819      	ldr	r1, [r3, #0]
 801509e:	1858      	adds	r0, r3, r1
 80150a0:	42a0      	cmp	r0, r4
 80150a2:	d10b      	bne.n	80150bc <_free_r+0x74>
 80150a4:	6820      	ldr	r0, [r4, #0]
 80150a6:	4401      	add	r1, r0
 80150a8:	1858      	adds	r0, r3, r1
 80150aa:	4282      	cmp	r2, r0
 80150ac:	6019      	str	r1, [r3, #0]
 80150ae:	d1dd      	bne.n	801506c <_free_r+0x24>
 80150b0:	6810      	ldr	r0, [r2, #0]
 80150b2:	6852      	ldr	r2, [r2, #4]
 80150b4:	605a      	str	r2, [r3, #4]
 80150b6:	4401      	add	r1, r0
 80150b8:	6019      	str	r1, [r3, #0]
 80150ba:	e7d7      	b.n	801506c <_free_r+0x24>
 80150bc:	d902      	bls.n	80150c4 <_free_r+0x7c>
 80150be:	230c      	movs	r3, #12
 80150c0:	602b      	str	r3, [r5, #0]
 80150c2:	e7d3      	b.n	801506c <_free_r+0x24>
 80150c4:	6820      	ldr	r0, [r4, #0]
 80150c6:	1821      	adds	r1, r4, r0
 80150c8:	428a      	cmp	r2, r1
 80150ca:	bf04      	itt	eq
 80150cc:	6811      	ldreq	r1, [r2, #0]
 80150ce:	6852      	ldreq	r2, [r2, #4]
 80150d0:	6062      	str	r2, [r4, #4]
 80150d2:	bf04      	itt	eq
 80150d4:	1809      	addeq	r1, r1, r0
 80150d6:	6021      	streq	r1, [r4, #0]
 80150d8:	605c      	str	r4, [r3, #4]
 80150da:	e7c7      	b.n	801506c <_free_r+0x24>
 80150dc:	bd38      	pop	{r3, r4, r5, pc}
 80150de:	bf00      	nop
 80150e0:	200051fc 	.word	0x200051fc

080150e4 <_malloc_r>:
 80150e4:	b570      	push	{r4, r5, r6, lr}
 80150e6:	1ccd      	adds	r5, r1, #3
 80150e8:	f025 0503 	bic.w	r5, r5, #3
 80150ec:	3508      	adds	r5, #8
 80150ee:	2d0c      	cmp	r5, #12
 80150f0:	bf38      	it	cc
 80150f2:	250c      	movcc	r5, #12
 80150f4:	2d00      	cmp	r5, #0
 80150f6:	4606      	mov	r6, r0
 80150f8:	db01      	blt.n	80150fe <_malloc_r+0x1a>
 80150fa:	42a9      	cmp	r1, r5
 80150fc:	d903      	bls.n	8015106 <_malloc_r+0x22>
 80150fe:	230c      	movs	r3, #12
 8015100:	6033      	str	r3, [r6, #0]
 8015102:	2000      	movs	r0, #0
 8015104:	bd70      	pop	{r4, r5, r6, pc}
 8015106:	f002 ff79 	bl	8017ffc <__malloc_lock>
 801510a:	4a21      	ldr	r2, [pc, #132]	; (8015190 <_malloc_r+0xac>)
 801510c:	6814      	ldr	r4, [r2, #0]
 801510e:	4621      	mov	r1, r4
 8015110:	b991      	cbnz	r1, 8015138 <_malloc_r+0x54>
 8015112:	4c20      	ldr	r4, [pc, #128]	; (8015194 <_malloc_r+0xb0>)
 8015114:	6823      	ldr	r3, [r4, #0]
 8015116:	b91b      	cbnz	r3, 8015120 <_malloc_r+0x3c>
 8015118:	4630      	mov	r0, r6
 801511a:	f000 fe7b 	bl	8015e14 <_sbrk_r>
 801511e:	6020      	str	r0, [r4, #0]
 8015120:	4629      	mov	r1, r5
 8015122:	4630      	mov	r0, r6
 8015124:	f000 fe76 	bl	8015e14 <_sbrk_r>
 8015128:	1c43      	adds	r3, r0, #1
 801512a:	d124      	bne.n	8015176 <_malloc_r+0x92>
 801512c:	230c      	movs	r3, #12
 801512e:	6033      	str	r3, [r6, #0]
 8015130:	4630      	mov	r0, r6
 8015132:	f002 ff64 	bl	8017ffe <__malloc_unlock>
 8015136:	e7e4      	b.n	8015102 <_malloc_r+0x1e>
 8015138:	680b      	ldr	r3, [r1, #0]
 801513a:	1b5b      	subs	r3, r3, r5
 801513c:	d418      	bmi.n	8015170 <_malloc_r+0x8c>
 801513e:	2b0b      	cmp	r3, #11
 8015140:	d90f      	bls.n	8015162 <_malloc_r+0x7e>
 8015142:	600b      	str	r3, [r1, #0]
 8015144:	50cd      	str	r5, [r1, r3]
 8015146:	18cc      	adds	r4, r1, r3
 8015148:	4630      	mov	r0, r6
 801514a:	f002 ff58 	bl	8017ffe <__malloc_unlock>
 801514e:	f104 000b 	add.w	r0, r4, #11
 8015152:	1d23      	adds	r3, r4, #4
 8015154:	f020 0007 	bic.w	r0, r0, #7
 8015158:	1ac3      	subs	r3, r0, r3
 801515a:	d0d3      	beq.n	8015104 <_malloc_r+0x20>
 801515c:	425a      	negs	r2, r3
 801515e:	50e2      	str	r2, [r4, r3]
 8015160:	e7d0      	b.n	8015104 <_malloc_r+0x20>
 8015162:	428c      	cmp	r4, r1
 8015164:	684b      	ldr	r3, [r1, #4]
 8015166:	bf16      	itet	ne
 8015168:	6063      	strne	r3, [r4, #4]
 801516a:	6013      	streq	r3, [r2, #0]
 801516c:	460c      	movne	r4, r1
 801516e:	e7eb      	b.n	8015148 <_malloc_r+0x64>
 8015170:	460c      	mov	r4, r1
 8015172:	6849      	ldr	r1, [r1, #4]
 8015174:	e7cc      	b.n	8015110 <_malloc_r+0x2c>
 8015176:	1cc4      	adds	r4, r0, #3
 8015178:	f024 0403 	bic.w	r4, r4, #3
 801517c:	42a0      	cmp	r0, r4
 801517e:	d005      	beq.n	801518c <_malloc_r+0xa8>
 8015180:	1a21      	subs	r1, r4, r0
 8015182:	4630      	mov	r0, r6
 8015184:	f000 fe46 	bl	8015e14 <_sbrk_r>
 8015188:	3001      	adds	r0, #1
 801518a:	d0cf      	beq.n	801512c <_malloc_r+0x48>
 801518c:	6025      	str	r5, [r4, #0]
 801518e:	e7db      	b.n	8015148 <_malloc_r+0x64>
 8015190:	200051fc 	.word	0x200051fc
 8015194:	20005200 	.word	0x20005200

08015198 <__cvt>:
 8015198:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801519c:	ec55 4b10 	vmov	r4, r5, d0
 80151a0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80151a2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80151a6:	2d00      	cmp	r5, #0
 80151a8:	460e      	mov	r6, r1
 80151aa:	4691      	mov	r9, r2
 80151ac:	4619      	mov	r1, r3
 80151ae:	bfb8      	it	lt
 80151b0:	4622      	movlt	r2, r4
 80151b2:	462b      	mov	r3, r5
 80151b4:	f027 0720 	bic.w	r7, r7, #32
 80151b8:	bfbb      	ittet	lt
 80151ba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80151be:	461d      	movlt	r5, r3
 80151c0:	2300      	movge	r3, #0
 80151c2:	232d      	movlt	r3, #45	; 0x2d
 80151c4:	bfb8      	it	lt
 80151c6:	4614      	movlt	r4, r2
 80151c8:	2f46      	cmp	r7, #70	; 0x46
 80151ca:	700b      	strb	r3, [r1, #0]
 80151cc:	d004      	beq.n	80151d8 <__cvt+0x40>
 80151ce:	2f45      	cmp	r7, #69	; 0x45
 80151d0:	d100      	bne.n	80151d4 <__cvt+0x3c>
 80151d2:	3601      	adds	r6, #1
 80151d4:	2102      	movs	r1, #2
 80151d6:	e000      	b.n	80151da <__cvt+0x42>
 80151d8:	2103      	movs	r1, #3
 80151da:	ab03      	add	r3, sp, #12
 80151dc:	9301      	str	r3, [sp, #4]
 80151de:	ab02      	add	r3, sp, #8
 80151e0:	9300      	str	r3, [sp, #0]
 80151e2:	4632      	mov	r2, r6
 80151e4:	4653      	mov	r3, sl
 80151e6:	ec45 4b10 	vmov	d0, r4, r5
 80151ea:	f001 fdf5 	bl	8016dd8 <_dtoa_r>
 80151ee:	2f47      	cmp	r7, #71	; 0x47
 80151f0:	4680      	mov	r8, r0
 80151f2:	d102      	bne.n	80151fa <__cvt+0x62>
 80151f4:	f019 0f01 	tst.w	r9, #1
 80151f8:	d026      	beq.n	8015248 <__cvt+0xb0>
 80151fa:	2f46      	cmp	r7, #70	; 0x46
 80151fc:	eb08 0906 	add.w	r9, r8, r6
 8015200:	d111      	bne.n	8015226 <__cvt+0x8e>
 8015202:	f898 3000 	ldrb.w	r3, [r8]
 8015206:	2b30      	cmp	r3, #48	; 0x30
 8015208:	d10a      	bne.n	8015220 <__cvt+0x88>
 801520a:	2200      	movs	r2, #0
 801520c:	2300      	movs	r3, #0
 801520e:	4620      	mov	r0, r4
 8015210:	4629      	mov	r1, r5
 8015212:	f7eb fc69 	bl	8000ae8 <__aeabi_dcmpeq>
 8015216:	b918      	cbnz	r0, 8015220 <__cvt+0x88>
 8015218:	f1c6 0601 	rsb	r6, r6, #1
 801521c:	f8ca 6000 	str.w	r6, [sl]
 8015220:	f8da 3000 	ldr.w	r3, [sl]
 8015224:	4499      	add	r9, r3
 8015226:	2200      	movs	r2, #0
 8015228:	2300      	movs	r3, #0
 801522a:	4620      	mov	r0, r4
 801522c:	4629      	mov	r1, r5
 801522e:	f7eb fc5b 	bl	8000ae8 <__aeabi_dcmpeq>
 8015232:	b938      	cbnz	r0, 8015244 <__cvt+0xac>
 8015234:	2230      	movs	r2, #48	; 0x30
 8015236:	9b03      	ldr	r3, [sp, #12]
 8015238:	454b      	cmp	r3, r9
 801523a:	d205      	bcs.n	8015248 <__cvt+0xb0>
 801523c:	1c59      	adds	r1, r3, #1
 801523e:	9103      	str	r1, [sp, #12]
 8015240:	701a      	strb	r2, [r3, #0]
 8015242:	e7f8      	b.n	8015236 <__cvt+0x9e>
 8015244:	f8cd 900c 	str.w	r9, [sp, #12]
 8015248:	9b03      	ldr	r3, [sp, #12]
 801524a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801524c:	eba3 0308 	sub.w	r3, r3, r8
 8015250:	4640      	mov	r0, r8
 8015252:	6013      	str	r3, [r2, #0]
 8015254:	b004      	add	sp, #16
 8015256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801525a <__exponent>:
 801525a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801525c:	2900      	cmp	r1, #0
 801525e:	4604      	mov	r4, r0
 8015260:	bfba      	itte	lt
 8015262:	4249      	neglt	r1, r1
 8015264:	232d      	movlt	r3, #45	; 0x2d
 8015266:	232b      	movge	r3, #43	; 0x2b
 8015268:	2909      	cmp	r1, #9
 801526a:	f804 2b02 	strb.w	r2, [r4], #2
 801526e:	7043      	strb	r3, [r0, #1]
 8015270:	dd20      	ble.n	80152b4 <__exponent+0x5a>
 8015272:	f10d 0307 	add.w	r3, sp, #7
 8015276:	461f      	mov	r7, r3
 8015278:	260a      	movs	r6, #10
 801527a:	fb91 f5f6 	sdiv	r5, r1, r6
 801527e:	fb06 1115 	mls	r1, r6, r5, r1
 8015282:	3130      	adds	r1, #48	; 0x30
 8015284:	2d09      	cmp	r5, #9
 8015286:	f803 1c01 	strb.w	r1, [r3, #-1]
 801528a:	f103 32ff 	add.w	r2, r3, #4294967295
 801528e:	4629      	mov	r1, r5
 8015290:	dc09      	bgt.n	80152a6 <__exponent+0x4c>
 8015292:	3130      	adds	r1, #48	; 0x30
 8015294:	3b02      	subs	r3, #2
 8015296:	f802 1c01 	strb.w	r1, [r2, #-1]
 801529a:	42bb      	cmp	r3, r7
 801529c:	4622      	mov	r2, r4
 801529e:	d304      	bcc.n	80152aa <__exponent+0x50>
 80152a0:	1a10      	subs	r0, r2, r0
 80152a2:	b003      	add	sp, #12
 80152a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80152a6:	4613      	mov	r3, r2
 80152a8:	e7e7      	b.n	801527a <__exponent+0x20>
 80152aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80152ae:	f804 2b01 	strb.w	r2, [r4], #1
 80152b2:	e7f2      	b.n	801529a <__exponent+0x40>
 80152b4:	2330      	movs	r3, #48	; 0x30
 80152b6:	4419      	add	r1, r3
 80152b8:	7083      	strb	r3, [r0, #2]
 80152ba:	1d02      	adds	r2, r0, #4
 80152bc:	70c1      	strb	r1, [r0, #3]
 80152be:	e7ef      	b.n	80152a0 <__exponent+0x46>

080152c0 <_printf_float>:
 80152c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152c4:	b08d      	sub	sp, #52	; 0x34
 80152c6:	460c      	mov	r4, r1
 80152c8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80152cc:	4616      	mov	r6, r2
 80152ce:	461f      	mov	r7, r3
 80152d0:	4605      	mov	r5, r0
 80152d2:	f002 fe73 	bl	8017fbc <_localeconv_r>
 80152d6:	6803      	ldr	r3, [r0, #0]
 80152d8:	9304      	str	r3, [sp, #16]
 80152da:	4618      	mov	r0, r3
 80152dc:	f7ea ff82 	bl	80001e4 <strlen>
 80152e0:	2300      	movs	r3, #0
 80152e2:	930a      	str	r3, [sp, #40]	; 0x28
 80152e4:	f8d8 3000 	ldr.w	r3, [r8]
 80152e8:	9005      	str	r0, [sp, #20]
 80152ea:	3307      	adds	r3, #7
 80152ec:	f023 0307 	bic.w	r3, r3, #7
 80152f0:	f103 0208 	add.w	r2, r3, #8
 80152f4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80152f8:	f8d4 b000 	ldr.w	fp, [r4]
 80152fc:	f8c8 2000 	str.w	r2, [r8]
 8015300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015304:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8015308:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801530c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015310:	9307      	str	r3, [sp, #28]
 8015312:	f8cd 8018 	str.w	r8, [sp, #24]
 8015316:	f04f 32ff 	mov.w	r2, #4294967295
 801531a:	4ba7      	ldr	r3, [pc, #668]	; (80155b8 <_printf_float+0x2f8>)
 801531c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015320:	f7eb fc14 	bl	8000b4c <__aeabi_dcmpun>
 8015324:	bb70      	cbnz	r0, 8015384 <_printf_float+0xc4>
 8015326:	f04f 32ff 	mov.w	r2, #4294967295
 801532a:	4ba3      	ldr	r3, [pc, #652]	; (80155b8 <_printf_float+0x2f8>)
 801532c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015330:	f7eb fbee 	bl	8000b10 <__aeabi_dcmple>
 8015334:	bb30      	cbnz	r0, 8015384 <_printf_float+0xc4>
 8015336:	2200      	movs	r2, #0
 8015338:	2300      	movs	r3, #0
 801533a:	4640      	mov	r0, r8
 801533c:	4649      	mov	r1, r9
 801533e:	f7eb fbdd 	bl	8000afc <__aeabi_dcmplt>
 8015342:	b110      	cbz	r0, 801534a <_printf_float+0x8a>
 8015344:	232d      	movs	r3, #45	; 0x2d
 8015346:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801534a:	4a9c      	ldr	r2, [pc, #624]	; (80155bc <_printf_float+0x2fc>)
 801534c:	4b9c      	ldr	r3, [pc, #624]	; (80155c0 <_printf_float+0x300>)
 801534e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8015352:	bf8c      	ite	hi
 8015354:	4690      	movhi	r8, r2
 8015356:	4698      	movls	r8, r3
 8015358:	2303      	movs	r3, #3
 801535a:	f02b 0204 	bic.w	r2, fp, #4
 801535e:	6123      	str	r3, [r4, #16]
 8015360:	6022      	str	r2, [r4, #0]
 8015362:	f04f 0900 	mov.w	r9, #0
 8015366:	9700      	str	r7, [sp, #0]
 8015368:	4633      	mov	r3, r6
 801536a:	aa0b      	add	r2, sp, #44	; 0x2c
 801536c:	4621      	mov	r1, r4
 801536e:	4628      	mov	r0, r5
 8015370:	f000 f9e6 	bl	8015740 <_printf_common>
 8015374:	3001      	adds	r0, #1
 8015376:	f040 808d 	bne.w	8015494 <_printf_float+0x1d4>
 801537a:	f04f 30ff 	mov.w	r0, #4294967295
 801537e:	b00d      	add	sp, #52	; 0x34
 8015380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015384:	4642      	mov	r2, r8
 8015386:	464b      	mov	r3, r9
 8015388:	4640      	mov	r0, r8
 801538a:	4649      	mov	r1, r9
 801538c:	f7eb fbde 	bl	8000b4c <__aeabi_dcmpun>
 8015390:	b110      	cbz	r0, 8015398 <_printf_float+0xd8>
 8015392:	4a8c      	ldr	r2, [pc, #560]	; (80155c4 <_printf_float+0x304>)
 8015394:	4b8c      	ldr	r3, [pc, #560]	; (80155c8 <_printf_float+0x308>)
 8015396:	e7da      	b.n	801534e <_printf_float+0x8e>
 8015398:	6861      	ldr	r1, [r4, #4]
 801539a:	1c4b      	adds	r3, r1, #1
 801539c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80153a0:	a80a      	add	r0, sp, #40	; 0x28
 80153a2:	d13e      	bne.n	8015422 <_printf_float+0x162>
 80153a4:	2306      	movs	r3, #6
 80153a6:	6063      	str	r3, [r4, #4]
 80153a8:	2300      	movs	r3, #0
 80153aa:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80153ae:	ab09      	add	r3, sp, #36	; 0x24
 80153b0:	9300      	str	r3, [sp, #0]
 80153b2:	ec49 8b10 	vmov	d0, r8, r9
 80153b6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80153ba:	6022      	str	r2, [r4, #0]
 80153bc:	f8cd a004 	str.w	sl, [sp, #4]
 80153c0:	6861      	ldr	r1, [r4, #4]
 80153c2:	4628      	mov	r0, r5
 80153c4:	f7ff fee8 	bl	8015198 <__cvt>
 80153c8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80153cc:	2b47      	cmp	r3, #71	; 0x47
 80153ce:	4680      	mov	r8, r0
 80153d0:	d109      	bne.n	80153e6 <_printf_float+0x126>
 80153d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80153d4:	1cd8      	adds	r0, r3, #3
 80153d6:	db02      	blt.n	80153de <_printf_float+0x11e>
 80153d8:	6862      	ldr	r2, [r4, #4]
 80153da:	4293      	cmp	r3, r2
 80153dc:	dd47      	ble.n	801546e <_printf_float+0x1ae>
 80153de:	f1aa 0a02 	sub.w	sl, sl, #2
 80153e2:	fa5f fa8a 	uxtb.w	sl, sl
 80153e6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80153ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80153ec:	d824      	bhi.n	8015438 <_printf_float+0x178>
 80153ee:	3901      	subs	r1, #1
 80153f0:	4652      	mov	r2, sl
 80153f2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80153f6:	9109      	str	r1, [sp, #36]	; 0x24
 80153f8:	f7ff ff2f 	bl	801525a <__exponent>
 80153fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80153fe:	1813      	adds	r3, r2, r0
 8015400:	2a01      	cmp	r2, #1
 8015402:	4681      	mov	r9, r0
 8015404:	6123      	str	r3, [r4, #16]
 8015406:	dc02      	bgt.n	801540e <_printf_float+0x14e>
 8015408:	6822      	ldr	r2, [r4, #0]
 801540a:	07d1      	lsls	r1, r2, #31
 801540c:	d501      	bpl.n	8015412 <_printf_float+0x152>
 801540e:	3301      	adds	r3, #1
 8015410:	6123      	str	r3, [r4, #16]
 8015412:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8015416:	2b00      	cmp	r3, #0
 8015418:	d0a5      	beq.n	8015366 <_printf_float+0xa6>
 801541a:	232d      	movs	r3, #45	; 0x2d
 801541c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015420:	e7a1      	b.n	8015366 <_printf_float+0xa6>
 8015422:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8015426:	f000 8177 	beq.w	8015718 <_printf_float+0x458>
 801542a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801542e:	d1bb      	bne.n	80153a8 <_printf_float+0xe8>
 8015430:	2900      	cmp	r1, #0
 8015432:	d1b9      	bne.n	80153a8 <_printf_float+0xe8>
 8015434:	2301      	movs	r3, #1
 8015436:	e7b6      	b.n	80153a6 <_printf_float+0xe6>
 8015438:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 801543c:	d119      	bne.n	8015472 <_printf_float+0x1b2>
 801543e:	2900      	cmp	r1, #0
 8015440:	6863      	ldr	r3, [r4, #4]
 8015442:	dd0c      	ble.n	801545e <_printf_float+0x19e>
 8015444:	6121      	str	r1, [r4, #16]
 8015446:	b913      	cbnz	r3, 801544e <_printf_float+0x18e>
 8015448:	6822      	ldr	r2, [r4, #0]
 801544a:	07d2      	lsls	r2, r2, #31
 801544c:	d502      	bpl.n	8015454 <_printf_float+0x194>
 801544e:	3301      	adds	r3, #1
 8015450:	440b      	add	r3, r1
 8015452:	6123      	str	r3, [r4, #16]
 8015454:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015456:	65a3      	str	r3, [r4, #88]	; 0x58
 8015458:	f04f 0900 	mov.w	r9, #0
 801545c:	e7d9      	b.n	8015412 <_printf_float+0x152>
 801545e:	b913      	cbnz	r3, 8015466 <_printf_float+0x1a6>
 8015460:	6822      	ldr	r2, [r4, #0]
 8015462:	07d0      	lsls	r0, r2, #31
 8015464:	d501      	bpl.n	801546a <_printf_float+0x1aa>
 8015466:	3302      	adds	r3, #2
 8015468:	e7f3      	b.n	8015452 <_printf_float+0x192>
 801546a:	2301      	movs	r3, #1
 801546c:	e7f1      	b.n	8015452 <_printf_float+0x192>
 801546e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8015472:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8015476:	4293      	cmp	r3, r2
 8015478:	db05      	blt.n	8015486 <_printf_float+0x1c6>
 801547a:	6822      	ldr	r2, [r4, #0]
 801547c:	6123      	str	r3, [r4, #16]
 801547e:	07d1      	lsls	r1, r2, #31
 8015480:	d5e8      	bpl.n	8015454 <_printf_float+0x194>
 8015482:	3301      	adds	r3, #1
 8015484:	e7e5      	b.n	8015452 <_printf_float+0x192>
 8015486:	2b00      	cmp	r3, #0
 8015488:	bfd4      	ite	le
 801548a:	f1c3 0302 	rsble	r3, r3, #2
 801548e:	2301      	movgt	r3, #1
 8015490:	4413      	add	r3, r2
 8015492:	e7de      	b.n	8015452 <_printf_float+0x192>
 8015494:	6823      	ldr	r3, [r4, #0]
 8015496:	055a      	lsls	r2, r3, #21
 8015498:	d407      	bmi.n	80154aa <_printf_float+0x1ea>
 801549a:	6923      	ldr	r3, [r4, #16]
 801549c:	4642      	mov	r2, r8
 801549e:	4631      	mov	r1, r6
 80154a0:	4628      	mov	r0, r5
 80154a2:	47b8      	blx	r7
 80154a4:	3001      	adds	r0, #1
 80154a6:	d12b      	bne.n	8015500 <_printf_float+0x240>
 80154a8:	e767      	b.n	801537a <_printf_float+0xba>
 80154aa:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80154ae:	f240 80dc 	bls.w	801566a <_printf_float+0x3aa>
 80154b2:	2200      	movs	r2, #0
 80154b4:	2300      	movs	r3, #0
 80154b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80154ba:	f7eb fb15 	bl	8000ae8 <__aeabi_dcmpeq>
 80154be:	2800      	cmp	r0, #0
 80154c0:	d033      	beq.n	801552a <_printf_float+0x26a>
 80154c2:	2301      	movs	r3, #1
 80154c4:	4a41      	ldr	r2, [pc, #260]	; (80155cc <_printf_float+0x30c>)
 80154c6:	4631      	mov	r1, r6
 80154c8:	4628      	mov	r0, r5
 80154ca:	47b8      	blx	r7
 80154cc:	3001      	adds	r0, #1
 80154ce:	f43f af54 	beq.w	801537a <_printf_float+0xba>
 80154d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80154d6:	429a      	cmp	r2, r3
 80154d8:	db02      	blt.n	80154e0 <_printf_float+0x220>
 80154da:	6823      	ldr	r3, [r4, #0]
 80154dc:	07d8      	lsls	r0, r3, #31
 80154de:	d50f      	bpl.n	8015500 <_printf_float+0x240>
 80154e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80154e4:	4631      	mov	r1, r6
 80154e6:	4628      	mov	r0, r5
 80154e8:	47b8      	blx	r7
 80154ea:	3001      	adds	r0, #1
 80154ec:	f43f af45 	beq.w	801537a <_printf_float+0xba>
 80154f0:	f04f 0800 	mov.w	r8, #0
 80154f4:	f104 091a 	add.w	r9, r4, #26
 80154f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80154fa:	3b01      	subs	r3, #1
 80154fc:	4543      	cmp	r3, r8
 80154fe:	dc09      	bgt.n	8015514 <_printf_float+0x254>
 8015500:	6823      	ldr	r3, [r4, #0]
 8015502:	079b      	lsls	r3, r3, #30
 8015504:	f100 8103 	bmi.w	801570e <_printf_float+0x44e>
 8015508:	68e0      	ldr	r0, [r4, #12]
 801550a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801550c:	4298      	cmp	r0, r3
 801550e:	bfb8      	it	lt
 8015510:	4618      	movlt	r0, r3
 8015512:	e734      	b.n	801537e <_printf_float+0xbe>
 8015514:	2301      	movs	r3, #1
 8015516:	464a      	mov	r2, r9
 8015518:	4631      	mov	r1, r6
 801551a:	4628      	mov	r0, r5
 801551c:	47b8      	blx	r7
 801551e:	3001      	adds	r0, #1
 8015520:	f43f af2b 	beq.w	801537a <_printf_float+0xba>
 8015524:	f108 0801 	add.w	r8, r8, #1
 8015528:	e7e6      	b.n	80154f8 <_printf_float+0x238>
 801552a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801552c:	2b00      	cmp	r3, #0
 801552e:	dc2b      	bgt.n	8015588 <_printf_float+0x2c8>
 8015530:	2301      	movs	r3, #1
 8015532:	4a26      	ldr	r2, [pc, #152]	; (80155cc <_printf_float+0x30c>)
 8015534:	4631      	mov	r1, r6
 8015536:	4628      	mov	r0, r5
 8015538:	47b8      	blx	r7
 801553a:	3001      	adds	r0, #1
 801553c:	f43f af1d 	beq.w	801537a <_printf_float+0xba>
 8015540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015542:	b923      	cbnz	r3, 801554e <_printf_float+0x28e>
 8015544:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015546:	b913      	cbnz	r3, 801554e <_printf_float+0x28e>
 8015548:	6823      	ldr	r3, [r4, #0]
 801554a:	07d9      	lsls	r1, r3, #31
 801554c:	d5d8      	bpl.n	8015500 <_printf_float+0x240>
 801554e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015552:	4631      	mov	r1, r6
 8015554:	4628      	mov	r0, r5
 8015556:	47b8      	blx	r7
 8015558:	3001      	adds	r0, #1
 801555a:	f43f af0e 	beq.w	801537a <_printf_float+0xba>
 801555e:	f04f 0900 	mov.w	r9, #0
 8015562:	f104 0a1a 	add.w	sl, r4, #26
 8015566:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015568:	425b      	negs	r3, r3
 801556a:	454b      	cmp	r3, r9
 801556c:	dc01      	bgt.n	8015572 <_printf_float+0x2b2>
 801556e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015570:	e794      	b.n	801549c <_printf_float+0x1dc>
 8015572:	2301      	movs	r3, #1
 8015574:	4652      	mov	r2, sl
 8015576:	4631      	mov	r1, r6
 8015578:	4628      	mov	r0, r5
 801557a:	47b8      	blx	r7
 801557c:	3001      	adds	r0, #1
 801557e:	f43f aefc 	beq.w	801537a <_printf_float+0xba>
 8015582:	f109 0901 	add.w	r9, r9, #1
 8015586:	e7ee      	b.n	8015566 <_printf_float+0x2a6>
 8015588:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801558a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801558c:	429a      	cmp	r2, r3
 801558e:	bfa8      	it	ge
 8015590:	461a      	movge	r2, r3
 8015592:	2a00      	cmp	r2, #0
 8015594:	4691      	mov	r9, r2
 8015596:	dd07      	ble.n	80155a8 <_printf_float+0x2e8>
 8015598:	4613      	mov	r3, r2
 801559a:	4631      	mov	r1, r6
 801559c:	4642      	mov	r2, r8
 801559e:	4628      	mov	r0, r5
 80155a0:	47b8      	blx	r7
 80155a2:	3001      	adds	r0, #1
 80155a4:	f43f aee9 	beq.w	801537a <_printf_float+0xba>
 80155a8:	f104 031a 	add.w	r3, r4, #26
 80155ac:	f04f 0b00 	mov.w	fp, #0
 80155b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80155b4:	9306      	str	r3, [sp, #24]
 80155b6:	e015      	b.n	80155e4 <_printf_float+0x324>
 80155b8:	7fefffff 	.word	0x7fefffff
 80155bc:	0801b334 	.word	0x0801b334
 80155c0:	0801b330 	.word	0x0801b330
 80155c4:	0801b33c 	.word	0x0801b33c
 80155c8:	0801b338 	.word	0x0801b338
 80155cc:	0801b4f3 	.word	0x0801b4f3
 80155d0:	2301      	movs	r3, #1
 80155d2:	9a06      	ldr	r2, [sp, #24]
 80155d4:	4631      	mov	r1, r6
 80155d6:	4628      	mov	r0, r5
 80155d8:	47b8      	blx	r7
 80155da:	3001      	adds	r0, #1
 80155dc:	f43f aecd 	beq.w	801537a <_printf_float+0xba>
 80155e0:	f10b 0b01 	add.w	fp, fp, #1
 80155e4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80155e8:	ebaa 0309 	sub.w	r3, sl, r9
 80155ec:	455b      	cmp	r3, fp
 80155ee:	dcef      	bgt.n	80155d0 <_printf_float+0x310>
 80155f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80155f4:	429a      	cmp	r2, r3
 80155f6:	44d0      	add	r8, sl
 80155f8:	db15      	blt.n	8015626 <_printf_float+0x366>
 80155fa:	6823      	ldr	r3, [r4, #0]
 80155fc:	07da      	lsls	r2, r3, #31
 80155fe:	d412      	bmi.n	8015626 <_printf_float+0x366>
 8015600:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015602:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015604:	eba3 020a 	sub.w	r2, r3, sl
 8015608:	eba3 0a01 	sub.w	sl, r3, r1
 801560c:	4592      	cmp	sl, r2
 801560e:	bfa8      	it	ge
 8015610:	4692      	movge	sl, r2
 8015612:	f1ba 0f00 	cmp.w	sl, #0
 8015616:	dc0e      	bgt.n	8015636 <_printf_float+0x376>
 8015618:	f04f 0800 	mov.w	r8, #0
 801561c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015620:	f104 091a 	add.w	r9, r4, #26
 8015624:	e019      	b.n	801565a <_printf_float+0x39a>
 8015626:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801562a:	4631      	mov	r1, r6
 801562c:	4628      	mov	r0, r5
 801562e:	47b8      	blx	r7
 8015630:	3001      	adds	r0, #1
 8015632:	d1e5      	bne.n	8015600 <_printf_float+0x340>
 8015634:	e6a1      	b.n	801537a <_printf_float+0xba>
 8015636:	4653      	mov	r3, sl
 8015638:	4642      	mov	r2, r8
 801563a:	4631      	mov	r1, r6
 801563c:	4628      	mov	r0, r5
 801563e:	47b8      	blx	r7
 8015640:	3001      	adds	r0, #1
 8015642:	d1e9      	bne.n	8015618 <_printf_float+0x358>
 8015644:	e699      	b.n	801537a <_printf_float+0xba>
 8015646:	2301      	movs	r3, #1
 8015648:	464a      	mov	r2, r9
 801564a:	4631      	mov	r1, r6
 801564c:	4628      	mov	r0, r5
 801564e:	47b8      	blx	r7
 8015650:	3001      	adds	r0, #1
 8015652:	f43f ae92 	beq.w	801537a <_printf_float+0xba>
 8015656:	f108 0801 	add.w	r8, r8, #1
 801565a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801565e:	1a9b      	subs	r3, r3, r2
 8015660:	eba3 030a 	sub.w	r3, r3, sl
 8015664:	4543      	cmp	r3, r8
 8015666:	dcee      	bgt.n	8015646 <_printf_float+0x386>
 8015668:	e74a      	b.n	8015500 <_printf_float+0x240>
 801566a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801566c:	2a01      	cmp	r2, #1
 801566e:	dc01      	bgt.n	8015674 <_printf_float+0x3b4>
 8015670:	07db      	lsls	r3, r3, #31
 8015672:	d53a      	bpl.n	80156ea <_printf_float+0x42a>
 8015674:	2301      	movs	r3, #1
 8015676:	4642      	mov	r2, r8
 8015678:	4631      	mov	r1, r6
 801567a:	4628      	mov	r0, r5
 801567c:	47b8      	blx	r7
 801567e:	3001      	adds	r0, #1
 8015680:	f43f ae7b 	beq.w	801537a <_printf_float+0xba>
 8015684:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015688:	4631      	mov	r1, r6
 801568a:	4628      	mov	r0, r5
 801568c:	47b8      	blx	r7
 801568e:	3001      	adds	r0, #1
 8015690:	f108 0801 	add.w	r8, r8, #1
 8015694:	f43f ae71 	beq.w	801537a <_printf_float+0xba>
 8015698:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801569a:	2200      	movs	r2, #0
 801569c:	f103 3aff 	add.w	sl, r3, #4294967295
 80156a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80156a4:	2300      	movs	r3, #0
 80156a6:	f7eb fa1f 	bl	8000ae8 <__aeabi_dcmpeq>
 80156aa:	b9c8      	cbnz	r0, 80156e0 <_printf_float+0x420>
 80156ac:	4653      	mov	r3, sl
 80156ae:	4642      	mov	r2, r8
 80156b0:	4631      	mov	r1, r6
 80156b2:	4628      	mov	r0, r5
 80156b4:	47b8      	blx	r7
 80156b6:	3001      	adds	r0, #1
 80156b8:	d10e      	bne.n	80156d8 <_printf_float+0x418>
 80156ba:	e65e      	b.n	801537a <_printf_float+0xba>
 80156bc:	2301      	movs	r3, #1
 80156be:	4652      	mov	r2, sl
 80156c0:	4631      	mov	r1, r6
 80156c2:	4628      	mov	r0, r5
 80156c4:	47b8      	blx	r7
 80156c6:	3001      	adds	r0, #1
 80156c8:	f43f ae57 	beq.w	801537a <_printf_float+0xba>
 80156cc:	f108 0801 	add.w	r8, r8, #1
 80156d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80156d2:	3b01      	subs	r3, #1
 80156d4:	4543      	cmp	r3, r8
 80156d6:	dcf1      	bgt.n	80156bc <_printf_float+0x3fc>
 80156d8:	464b      	mov	r3, r9
 80156da:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80156de:	e6de      	b.n	801549e <_printf_float+0x1de>
 80156e0:	f04f 0800 	mov.w	r8, #0
 80156e4:	f104 0a1a 	add.w	sl, r4, #26
 80156e8:	e7f2      	b.n	80156d0 <_printf_float+0x410>
 80156ea:	2301      	movs	r3, #1
 80156ec:	e7df      	b.n	80156ae <_printf_float+0x3ee>
 80156ee:	2301      	movs	r3, #1
 80156f0:	464a      	mov	r2, r9
 80156f2:	4631      	mov	r1, r6
 80156f4:	4628      	mov	r0, r5
 80156f6:	47b8      	blx	r7
 80156f8:	3001      	adds	r0, #1
 80156fa:	f43f ae3e 	beq.w	801537a <_printf_float+0xba>
 80156fe:	f108 0801 	add.w	r8, r8, #1
 8015702:	68e3      	ldr	r3, [r4, #12]
 8015704:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015706:	1a9b      	subs	r3, r3, r2
 8015708:	4543      	cmp	r3, r8
 801570a:	dcf0      	bgt.n	80156ee <_printf_float+0x42e>
 801570c:	e6fc      	b.n	8015508 <_printf_float+0x248>
 801570e:	f04f 0800 	mov.w	r8, #0
 8015712:	f104 0919 	add.w	r9, r4, #25
 8015716:	e7f4      	b.n	8015702 <_printf_float+0x442>
 8015718:	2900      	cmp	r1, #0
 801571a:	f43f ae8b 	beq.w	8015434 <_printf_float+0x174>
 801571e:	2300      	movs	r3, #0
 8015720:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8015724:	ab09      	add	r3, sp, #36	; 0x24
 8015726:	9300      	str	r3, [sp, #0]
 8015728:	ec49 8b10 	vmov	d0, r8, r9
 801572c:	6022      	str	r2, [r4, #0]
 801572e:	f8cd a004 	str.w	sl, [sp, #4]
 8015732:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015736:	4628      	mov	r0, r5
 8015738:	f7ff fd2e 	bl	8015198 <__cvt>
 801573c:	4680      	mov	r8, r0
 801573e:	e648      	b.n	80153d2 <_printf_float+0x112>

08015740 <_printf_common>:
 8015740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015744:	4691      	mov	r9, r2
 8015746:	461f      	mov	r7, r3
 8015748:	688a      	ldr	r2, [r1, #8]
 801574a:	690b      	ldr	r3, [r1, #16]
 801574c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015750:	4293      	cmp	r3, r2
 8015752:	bfb8      	it	lt
 8015754:	4613      	movlt	r3, r2
 8015756:	f8c9 3000 	str.w	r3, [r9]
 801575a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801575e:	4606      	mov	r6, r0
 8015760:	460c      	mov	r4, r1
 8015762:	b112      	cbz	r2, 801576a <_printf_common+0x2a>
 8015764:	3301      	adds	r3, #1
 8015766:	f8c9 3000 	str.w	r3, [r9]
 801576a:	6823      	ldr	r3, [r4, #0]
 801576c:	0699      	lsls	r1, r3, #26
 801576e:	bf42      	ittt	mi
 8015770:	f8d9 3000 	ldrmi.w	r3, [r9]
 8015774:	3302      	addmi	r3, #2
 8015776:	f8c9 3000 	strmi.w	r3, [r9]
 801577a:	6825      	ldr	r5, [r4, #0]
 801577c:	f015 0506 	ands.w	r5, r5, #6
 8015780:	d107      	bne.n	8015792 <_printf_common+0x52>
 8015782:	f104 0a19 	add.w	sl, r4, #25
 8015786:	68e3      	ldr	r3, [r4, #12]
 8015788:	f8d9 2000 	ldr.w	r2, [r9]
 801578c:	1a9b      	subs	r3, r3, r2
 801578e:	42ab      	cmp	r3, r5
 8015790:	dc28      	bgt.n	80157e4 <_printf_common+0xa4>
 8015792:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8015796:	6822      	ldr	r2, [r4, #0]
 8015798:	3300      	adds	r3, #0
 801579a:	bf18      	it	ne
 801579c:	2301      	movne	r3, #1
 801579e:	0692      	lsls	r2, r2, #26
 80157a0:	d42d      	bmi.n	80157fe <_printf_common+0xbe>
 80157a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80157a6:	4639      	mov	r1, r7
 80157a8:	4630      	mov	r0, r6
 80157aa:	47c0      	blx	r8
 80157ac:	3001      	adds	r0, #1
 80157ae:	d020      	beq.n	80157f2 <_printf_common+0xb2>
 80157b0:	6823      	ldr	r3, [r4, #0]
 80157b2:	68e5      	ldr	r5, [r4, #12]
 80157b4:	f8d9 2000 	ldr.w	r2, [r9]
 80157b8:	f003 0306 	and.w	r3, r3, #6
 80157bc:	2b04      	cmp	r3, #4
 80157be:	bf08      	it	eq
 80157c0:	1aad      	subeq	r5, r5, r2
 80157c2:	68a3      	ldr	r3, [r4, #8]
 80157c4:	6922      	ldr	r2, [r4, #16]
 80157c6:	bf0c      	ite	eq
 80157c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80157cc:	2500      	movne	r5, #0
 80157ce:	4293      	cmp	r3, r2
 80157d0:	bfc4      	itt	gt
 80157d2:	1a9b      	subgt	r3, r3, r2
 80157d4:	18ed      	addgt	r5, r5, r3
 80157d6:	f04f 0900 	mov.w	r9, #0
 80157da:	341a      	adds	r4, #26
 80157dc:	454d      	cmp	r5, r9
 80157de:	d11a      	bne.n	8015816 <_printf_common+0xd6>
 80157e0:	2000      	movs	r0, #0
 80157e2:	e008      	b.n	80157f6 <_printf_common+0xb6>
 80157e4:	2301      	movs	r3, #1
 80157e6:	4652      	mov	r2, sl
 80157e8:	4639      	mov	r1, r7
 80157ea:	4630      	mov	r0, r6
 80157ec:	47c0      	blx	r8
 80157ee:	3001      	adds	r0, #1
 80157f0:	d103      	bne.n	80157fa <_printf_common+0xba>
 80157f2:	f04f 30ff 	mov.w	r0, #4294967295
 80157f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80157fa:	3501      	adds	r5, #1
 80157fc:	e7c3      	b.n	8015786 <_printf_common+0x46>
 80157fe:	18e1      	adds	r1, r4, r3
 8015800:	1c5a      	adds	r2, r3, #1
 8015802:	2030      	movs	r0, #48	; 0x30
 8015804:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015808:	4422      	add	r2, r4
 801580a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801580e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015812:	3302      	adds	r3, #2
 8015814:	e7c5      	b.n	80157a2 <_printf_common+0x62>
 8015816:	2301      	movs	r3, #1
 8015818:	4622      	mov	r2, r4
 801581a:	4639      	mov	r1, r7
 801581c:	4630      	mov	r0, r6
 801581e:	47c0      	blx	r8
 8015820:	3001      	adds	r0, #1
 8015822:	d0e6      	beq.n	80157f2 <_printf_common+0xb2>
 8015824:	f109 0901 	add.w	r9, r9, #1
 8015828:	e7d8      	b.n	80157dc <_printf_common+0x9c>
	...

0801582c <_printf_i>:
 801582c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015830:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8015834:	460c      	mov	r4, r1
 8015836:	7e09      	ldrb	r1, [r1, #24]
 8015838:	b085      	sub	sp, #20
 801583a:	296e      	cmp	r1, #110	; 0x6e
 801583c:	4617      	mov	r7, r2
 801583e:	4606      	mov	r6, r0
 8015840:	4698      	mov	r8, r3
 8015842:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015844:	f000 80b3 	beq.w	80159ae <_printf_i+0x182>
 8015848:	d822      	bhi.n	8015890 <_printf_i+0x64>
 801584a:	2963      	cmp	r1, #99	; 0x63
 801584c:	d036      	beq.n	80158bc <_printf_i+0x90>
 801584e:	d80a      	bhi.n	8015866 <_printf_i+0x3a>
 8015850:	2900      	cmp	r1, #0
 8015852:	f000 80b9 	beq.w	80159c8 <_printf_i+0x19c>
 8015856:	2958      	cmp	r1, #88	; 0x58
 8015858:	f000 8083 	beq.w	8015962 <_printf_i+0x136>
 801585c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015860:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8015864:	e032      	b.n	80158cc <_printf_i+0xa0>
 8015866:	2964      	cmp	r1, #100	; 0x64
 8015868:	d001      	beq.n	801586e <_printf_i+0x42>
 801586a:	2969      	cmp	r1, #105	; 0x69
 801586c:	d1f6      	bne.n	801585c <_printf_i+0x30>
 801586e:	6820      	ldr	r0, [r4, #0]
 8015870:	6813      	ldr	r3, [r2, #0]
 8015872:	0605      	lsls	r5, r0, #24
 8015874:	f103 0104 	add.w	r1, r3, #4
 8015878:	d52a      	bpl.n	80158d0 <_printf_i+0xa4>
 801587a:	681b      	ldr	r3, [r3, #0]
 801587c:	6011      	str	r1, [r2, #0]
 801587e:	2b00      	cmp	r3, #0
 8015880:	da03      	bge.n	801588a <_printf_i+0x5e>
 8015882:	222d      	movs	r2, #45	; 0x2d
 8015884:	425b      	negs	r3, r3
 8015886:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801588a:	486f      	ldr	r0, [pc, #444]	; (8015a48 <_printf_i+0x21c>)
 801588c:	220a      	movs	r2, #10
 801588e:	e039      	b.n	8015904 <_printf_i+0xd8>
 8015890:	2973      	cmp	r1, #115	; 0x73
 8015892:	f000 809d 	beq.w	80159d0 <_printf_i+0x1a4>
 8015896:	d808      	bhi.n	80158aa <_printf_i+0x7e>
 8015898:	296f      	cmp	r1, #111	; 0x6f
 801589a:	d020      	beq.n	80158de <_printf_i+0xb2>
 801589c:	2970      	cmp	r1, #112	; 0x70
 801589e:	d1dd      	bne.n	801585c <_printf_i+0x30>
 80158a0:	6823      	ldr	r3, [r4, #0]
 80158a2:	f043 0320 	orr.w	r3, r3, #32
 80158a6:	6023      	str	r3, [r4, #0]
 80158a8:	e003      	b.n	80158b2 <_printf_i+0x86>
 80158aa:	2975      	cmp	r1, #117	; 0x75
 80158ac:	d017      	beq.n	80158de <_printf_i+0xb2>
 80158ae:	2978      	cmp	r1, #120	; 0x78
 80158b0:	d1d4      	bne.n	801585c <_printf_i+0x30>
 80158b2:	2378      	movs	r3, #120	; 0x78
 80158b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80158b8:	4864      	ldr	r0, [pc, #400]	; (8015a4c <_printf_i+0x220>)
 80158ba:	e055      	b.n	8015968 <_printf_i+0x13c>
 80158bc:	6813      	ldr	r3, [r2, #0]
 80158be:	1d19      	adds	r1, r3, #4
 80158c0:	681b      	ldr	r3, [r3, #0]
 80158c2:	6011      	str	r1, [r2, #0]
 80158c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80158c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80158cc:	2301      	movs	r3, #1
 80158ce:	e08c      	b.n	80159ea <_printf_i+0x1be>
 80158d0:	681b      	ldr	r3, [r3, #0]
 80158d2:	6011      	str	r1, [r2, #0]
 80158d4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80158d8:	bf18      	it	ne
 80158da:	b21b      	sxthne	r3, r3
 80158dc:	e7cf      	b.n	801587e <_printf_i+0x52>
 80158de:	6813      	ldr	r3, [r2, #0]
 80158e0:	6825      	ldr	r5, [r4, #0]
 80158e2:	1d18      	adds	r0, r3, #4
 80158e4:	6010      	str	r0, [r2, #0]
 80158e6:	0628      	lsls	r0, r5, #24
 80158e8:	d501      	bpl.n	80158ee <_printf_i+0xc2>
 80158ea:	681b      	ldr	r3, [r3, #0]
 80158ec:	e002      	b.n	80158f4 <_printf_i+0xc8>
 80158ee:	0668      	lsls	r0, r5, #25
 80158f0:	d5fb      	bpl.n	80158ea <_printf_i+0xbe>
 80158f2:	881b      	ldrh	r3, [r3, #0]
 80158f4:	4854      	ldr	r0, [pc, #336]	; (8015a48 <_printf_i+0x21c>)
 80158f6:	296f      	cmp	r1, #111	; 0x6f
 80158f8:	bf14      	ite	ne
 80158fa:	220a      	movne	r2, #10
 80158fc:	2208      	moveq	r2, #8
 80158fe:	2100      	movs	r1, #0
 8015900:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015904:	6865      	ldr	r5, [r4, #4]
 8015906:	60a5      	str	r5, [r4, #8]
 8015908:	2d00      	cmp	r5, #0
 801590a:	f2c0 8095 	blt.w	8015a38 <_printf_i+0x20c>
 801590e:	6821      	ldr	r1, [r4, #0]
 8015910:	f021 0104 	bic.w	r1, r1, #4
 8015914:	6021      	str	r1, [r4, #0]
 8015916:	2b00      	cmp	r3, #0
 8015918:	d13d      	bne.n	8015996 <_printf_i+0x16a>
 801591a:	2d00      	cmp	r5, #0
 801591c:	f040 808e 	bne.w	8015a3c <_printf_i+0x210>
 8015920:	4665      	mov	r5, ip
 8015922:	2a08      	cmp	r2, #8
 8015924:	d10b      	bne.n	801593e <_printf_i+0x112>
 8015926:	6823      	ldr	r3, [r4, #0]
 8015928:	07db      	lsls	r3, r3, #31
 801592a:	d508      	bpl.n	801593e <_printf_i+0x112>
 801592c:	6923      	ldr	r3, [r4, #16]
 801592e:	6862      	ldr	r2, [r4, #4]
 8015930:	429a      	cmp	r2, r3
 8015932:	bfde      	ittt	le
 8015934:	2330      	movle	r3, #48	; 0x30
 8015936:	f805 3c01 	strble.w	r3, [r5, #-1]
 801593a:	f105 35ff 	addle.w	r5, r5, #4294967295
 801593e:	ebac 0305 	sub.w	r3, ip, r5
 8015942:	6123      	str	r3, [r4, #16]
 8015944:	f8cd 8000 	str.w	r8, [sp]
 8015948:	463b      	mov	r3, r7
 801594a:	aa03      	add	r2, sp, #12
 801594c:	4621      	mov	r1, r4
 801594e:	4630      	mov	r0, r6
 8015950:	f7ff fef6 	bl	8015740 <_printf_common>
 8015954:	3001      	adds	r0, #1
 8015956:	d14d      	bne.n	80159f4 <_printf_i+0x1c8>
 8015958:	f04f 30ff 	mov.w	r0, #4294967295
 801595c:	b005      	add	sp, #20
 801595e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015962:	4839      	ldr	r0, [pc, #228]	; (8015a48 <_printf_i+0x21c>)
 8015964:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8015968:	6813      	ldr	r3, [r2, #0]
 801596a:	6821      	ldr	r1, [r4, #0]
 801596c:	1d1d      	adds	r5, r3, #4
 801596e:	681b      	ldr	r3, [r3, #0]
 8015970:	6015      	str	r5, [r2, #0]
 8015972:	060a      	lsls	r2, r1, #24
 8015974:	d50b      	bpl.n	801598e <_printf_i+0x162>
 8015976:	07ca      	lsls	r2, r1, #31
 8015978:	bf44      	itt	mi
 801597a:	f041 0120 	orrmi.w	r1, r1, #32
 801597e:	6021      	strmi	r1, [r4, #0]
 8015980:	b91b      	cbnz	r3, 801598a <_printf_i+0x15e>
 8015982:	6822      	ldr	r2, [r4, #0]
 8015984:	f022 0220 	bic.w	r2, r2, #32
 8015988:	6022      	str	r2, [r4, #0]
 801598a:	2210      	movs	r2, #16
 801598c:	e7b7      	b.n	80158fe <_printf_i+0xd2>
 801598e:	064d      	lsls	r5, r1, #25
 8015990:	bf48      	it	mi
 8015992:	b29b      	uxthmi	r3, r3
 8015994:	e7ef      	b.n	8015976 <_printf_i+0x14a>
 8015996:	4665      	mov	r5, ip
 8015998:	fbb3 f1f2 	udiv	r1, r3, r2
 801599c:	fb02 3311 	mls	r3, r2, r1, r3
 80159a0:	5cc3      	ldrb	r3, [r0, r3]
 80159a2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80159a6:	460b      	mov	r3, r1
 80159a8:	2900      	cmp	r1, #0
 80159aa:	d1f5      	bne.n	8015998 <_printf_i+0x16c>
 80159ac:	e7b9      	b.n	8015922 <_printf_i+0xf6>
 80159ae:	6813      	ldr	r3, [r2, #0]
 80159b0:	6825      	ldr	r5, [r4, #0]
 80159b2:	6961      	ldr	r1, [r4, #20]
 80159b4:	1d18      	adds	r0, r3, #4
 80159b6:	6010      	str	r0, [r2, #0]
 80159b8:	0628      	lsls	r0, r5, #24
 80159ba:	681b      	ldr	r3, [r3, #0]
 80159bc:	d501      	bpl.n	80159c2 <_printf_i+0x196>
 80159be:	6019      	str	r1, [r3, #0]
 80159c0:	e002      	b.n	80159c8 <_printf_i+0x19c>
 80159c2:	066a      	lsls	r2, r5, #25
 80159c4:	d5fb      	bpl.n	80159be <_printf_i+0x192>
 80159c6:	8019      	strh	r1, [r3, #0]
 80159c8:	2300      	movs	r3, #0
 80159ca:	6123      	str	r3, [r4, #16]
 80159cc:	4665      	mov	r5, ip
 80159ce:	e7b9      	b.n	8015944 <_printf_i+0x118>
 80159d0:	6813      	ldr	r3, [r2, #0]
 80159d2:	1d19      	adds	r1, r3, #4
 80159d4:	6011      	str	r1, [r2, #0]
 80159d6:	681d      	ldr	r5, [r3, #0]
 80159d8:	6862      	ldr	r2, [r4, #4]
 80159da:	2100      	movs	r1, #0
 80159dc:	4628      	mov	r0, r5
 80159de:	f7ea fc0f 	bl	8000200 <memchr>
 80159e2:	b108      	cbz	r0, 80159e8 <_printf_i+0x1bc>
 80159e4:	1b40      	subs	r0, r0, r5
 80159e6:	6060      	str	r0, [r4, #4]
 80159e8:	6863      	ldr	r3, [r4, #4]
 80159ea:	6123      	str	r3, [r4, #16]
 80159ec:	2300      	movs	r3, #0
 80159ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80159f2:	e7a7      	b.n	8015944 <_printf_i+0x118>
 80159f4:	6923      	ldr	r3, [r4, #16]
 80159f6:	462a      	mov	r2, r5
 80159f8:	4639      	mov	r1, r7
 80159fa:	4630      	mov	r0, r6
 80159fc:	47c0      	blx	r8
 80159fe:	3001      	adds	r0, #1
 8015a00:	d0aa      	beq.n	8015958 <_printf_i+0x12c>
 8015a02:	6823      	ldr	r3, [r4, #0]
 8015a04:	079b      	lsls	r3, r3, #30
 8015a06:	d413      	bmi.n	8015a30 <_printf_i+0x204>
 8015a08:	68e0      	ldr	r0, [r4, #12]
 8015a0a:	9b03      	ldr	r3, [sp, #12]
 8015a0c:	4298      	cmp	r0, r3
 8015a0e:	bfb8      	it	lt
 8015a10:	4618      	movlt	r0, r3
 8015a12:	e7a3      	b.n	801595c <_printf_i+0x130>
 8015a14:	2301      	movs	r3, #1
 8015a16:	464a      	mov	r2, r9
 8015a18:	4639      	mov	r1, r7
 8015a1a:	4630      	mov	r0, r6
 8015a1c:	47c0      	blx	r8
 8015a1e:	3001      	adds	r0, #1
 8015a20:	d09a      	beq.n	8015958 <_printf_i+0x12c>
 8015a22:	3501      	adds	r5, #1
 8015a24:	68e3      	ldr	r3, [r4, #12]
 8015a26:	9a03      	ldr	r2, [sp, #12]
 8015a28:	1a9b      	subs	r3, r3, r2
 8015a2a:	42ab      	cmp	r3, r5
 8015a2c:	dcf2      	bgt.n	8015a14 <_printf_i+0x1e8>
 8015a2e:	e7eb      	b.n	8015a08 <_printf_i+0x1dc>
 8015a30:	2500      	movs	r5, #0
 8015a32:	f104 0919 	add.w	r9, r4, #25
 8015a36:	e7f5      	b.n	8015a24 <_printf_i+0x1f8>
 8015a38:	2b00      	cmp	r3, #0
 8015a3a:	d1ac      	bne.n	8015996 <_printf_i+0x16a>
 8015a3c:	7803      	ldrb	r3, [r0, #0]
 8015a3e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015a42:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015a46:	e76c      	b.n	8015922 <_printf_i+0xf6>
 8015a48:	0801b340 	.word	0x0801b340
 8015a4c:	0801b351 	.word	0x0801b351

08015a50 <_scanf_float>:
 8015a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a54:	469a      	mov	sl, r3
 8015a56:	688b      	ldr	r3, [r1, #8]
 8015a58:	4616      	mov	r6, r2
 8015a5a:	1e5a      	subs	r2, r3, #1
 8015a5c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8015a60:	b087      	sub	sp, #28
 8015a62:	bf83      	ittte	hi
 8015a64:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8015a68:	189b      	addhi	r3, r3, r2
 8015a6a:	9301      	strhi	r3, [sp, #4]
 8015a6c:	2300      	movls	r3, #0
 8015a6e:	bf86      	itte	hi
 8015a70:	f240 135d 	movwhi	r3, #349	; 0x15d
 8015a74:	608b      	strhi	r3, [r1, #8]
 8015a76:	9301      	strls	r3, [sp, #4]
 8015a78:	680b      	ldr	r3, [r1, #0]
 8015a7a:	4688      	mov	r8, r1
 8015a7c:	f04f 0b00 	mov.w	fp, #0
 8015a80:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8015a84:	f848 3b1c 	str.w	r3, [r8], #28
 8015a88:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8015a8c:	4607      	mov	r7, r0
 8015a8e:	460c      	mov	r4, r1
 8015a90:	4645      	mov	r5, r8
 8015a92:	465a      	mov	r2, fp
 8015a94:	46d9      	mov	r9, fp
 8015a96:	f8cd b008 	str.w	fp, [sp, #8]
 8015a9a:	68a1      	ldr	r1, [r4, #8]
 8015a9c:	b181      	cbz	r1, 8015ac0 <_scanf_float+0x70>
 8015a9e:	6833      	ldr	r3, [r6, #0]
 8015aa0:	781b      	ldrb	r3, [r3, #0]
 8015aa2:	2b49      	cmp	r3, #73	; 0x49
 8015aa4:	d071      	beq.n	8015b8a <_scanf_float+0x13a>
 8015aa6:	d84d      	bhi.n	8015b44 <_scanf_float+0xf4>
 8015aa8:	2b39      	cmp	r3, #57	; 0x39
 8015aaa:	d840      	bhi.n	8015b2e <_scanf_float+0xde>
 8015aac:	2b31      	cmp	r3, #49	; 0x31
 8015aae:	f080 8088 	bcs.w	8015bc2 <_scanf_float+0x172>
 8015ab2:	2b2d      	cmp	r3, #45	; 0x2d
 8015ab4:	f000 8090 	beq.w	8015bd8 <_scanf_float+0x188>
 8015ab8:	d815      	bhi.n	8015ae6 <_scanf_float+0x96>
 8015aba:	2b2b      	cmp	r3, #43	; 0x2b
 8015abc:	f000 808c 	beq.w	8015bd8 <_scanf_float+0x188>
 8015ac0:	f1b9 0f00 	cmp.w	r9, #0
 8015ac4:	d003      	beq.n	8015ace <_scanf_float+0x7e>
 8015ac6:	6823      	ldr	r3, [r4, #0]
 8015ac8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015acc:	6023      	str	r3, [r4, #0]
 8015ace:	3a01      	subs	r2, #1
 8015ad0:	2a01      	cmp	r2, #1
 8015ad2:	f200 80ea 	bhi.w	8015caa <_scanf_float+0x25a>
 8015ad6:	4545      	cmp	r5, r8
 8015ad8:	f200 80dc 	bhi.w	8015c94 <_scanf_float+0x244>
 8015adc:	2601      	movs	r6, #1
 8015ade:	4630      	mov	r0, r6
 8015ae0:	b007      	add	sp, #28
 8015ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ae6:	2b2e      	cmp	r3, #46	; 0x2e
 8015ae8:	f000 809f 	beq.w	8015c2a <_scanf_float+0x1da>
 8015aec:	2b30      	cmp	r3, #48	; 0x30
 8015aee:	d1e7      	bne.n	8015ac0 <_scanf_float+0x70>
 8015af0:	6820      	ldr	r0, [r4, #0]
 8015af2:	f410 7f80 	tst.w	r0, #256	; 0x100
 8015af6:	d064      	beq.n	8015bc2 <_scanf_float+0x172>
 8015af8:	9b01      	ldr	r3, [sp, #4]
 8015afa:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8015afe:	6020      	str	r0, [r4, #0]
 8015b00:	f109 0901 	add.w	r9, r9, #1
 8015b04:	b11b      	cbz	r3, 8015b0e <_scanf_float+0xbe>
 8015b06:	3b01      	subs	r3, #1
 8015b08:	3101      	adds	r1, #1
 8015b0a:	9301      	str	r3, [sp, #4]
 8015b0c:	60a1      	str	r1, [r4, #8]
 8015b0e:	68a3      	ldr	r3, [r4, #8]
 8015b10:	3b01      	subs	r3, #1
 8015b12:	60a3      	str	r3, [r4, #8]
 8015b14:	6923      	ldr	r3, [r4, #16]
 8015b16:	3301      	adds	r3, #1
 8015b18:	6123      	str	r3, [r4, #16]
 8015b1a:	6873      	ldr	r3, [r6, #4]
 8015b1c:	3b01      	subs	r3, #1
 8015b1e:	2b00      	cmp	r3, #0
 8015b20:	6073      	str	r3, [r6, #4]
 8015b22:	f340 80ac 	ble.w	8015c7e <_scanf_float+0x22e>
 8015b26:	6833      	ldr	r3, [r6, #0]
 8015b28:	3301      	adds	r3, #1
 8015b2a:	6033      	str	r3, [r6, #0]
 8015b2c:	e7b5      	b.n	8015a9a <_scanf_float+0x4a>
 8015b2e:	2b45      	cmp	r3, #69	; 0x45
 8015b30:	f000 8085 	beq.w	8015c3e <_scanf_float+0x1ee>
 8015b34:	2b46      	cmp	r3, #70	; 0x46
 8015b36:	d06a      	beq.n	8015c0e <_scanf_float+0x1be>
 8015b38:	2b41      	cmp	r3, #65	; 0x41
 8015b3a:	d1c1      	bne.n	8015ac0 <_scanf_float+0x70>
 8015b3c:	2a01      	cmp	r2, #1
 8015b3e:	d1bf      	bne.n	8015ac0 <_scanf_float+0x70>
 8015b40:	2202      	movs	r2, #2
 8015b42:	e046      	b.n	8015bd2 <_scanf_float+0x182>
 8015b44:	2b65      	cmp	r3, #101	; 0x65
 8015b46:	d07a      	beq.n	8015c3e <_scanf_float+0x1ee>
 8015b48:	d818      	bhi.n	8015b7c <_scanf_float+0x12c>
 8015b4a:	2b54      	cmp	r3, #84	; 0x54
 8015b4c:	d066      	beq.n	8015c1c <_scanf_float+0x1cc>
 8015b4e:	d811      	bhi.n	8015b74 <_scanf_float+0x124>
 8015b50:	2b4e      	cmp	r3, #78	; 0x4e
 8015b52:	d1b5      	bne.n	8015ac0 <_scanf_float+0x70>
 8015b54:	2a00      	cmp	r2, #0
 8015b56:	d146      	bne.n	8015be6 <_scanf_float+0x196>
 8015b58:	f1b9 0f00 	cmp.w	r9, #0
 8015b5c:	d145      	bne.n	8015bea <_scanf_float+0x19a>
 8015b5e:	6821      	ldr	r1, [r4, #0]
 8015b60:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8015b64:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8015b68:	d13f      	bne.n	8015bea <_scanf_float+0x19a>
 8015b6a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8015b6e:	6021      	str	r1, [r4, #0]
 8015b70:	2201      	movs	r2, #1
 8015b72:	e02e      	b.n	8015bd2 <_scanf_float+0x182>
 8015b74:	2b59      	cmp	r3, #89	; 0x59
 8015b76:	d01e      	beq.n	8015bb6 <_scanf_float+0x166>
 8015b78:	2b61      	cmp	r3, #97	; 0x61
 8015b7a:	e7de      	b.n	8015b3a <_scanf_float+0xea>
 8015b7c:	2b6e      	cmp	r3, #110	; 0x6e
 8015b7e:	d0e9      	beq.n	8015b54 <_scanf_float+0x104>
 8015b80:	d815      	bhi.n	8015bae <_scanf_float+0x15e>
 8015b82:	2b66      	cmp	r3, #102	; 0x66
 8015b84:	d043      	beq.n	8015c0e <_scanf_float+0x1be>
 8015b86:	2b69      	cmp	r3, #105	; 0x69
 8015b88:	d19a      	bne.n	8015ac0 <_scanf_float+0x70>
 8015b8a:	f1bb 0f00 	cmp.w	fp, #0
 8015b8e:	d138      	bne.n	8015c02 <_scanf_float+0x1b2>
 8015b90:	f1b9 0f00 	cmp.w	r9, #0
 8015b94:	d197      	bne.n	8015ac6 <_scanf_float+0x76>
 8015b96:	6821      	ldr	r1, [r4, #0]
 8015b98:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8015b9c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8015ba0:	d195      	bne.n	8015ace <_scanf_float+0x7e>
 8015ba2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8015ba6:	6021      	str	r1, [r4, #0]
 8015ba8:	f04f 0b01 	mov.w	fp, #1
 8015bac:	e011      	b.n	8015bd2 <_scanf_float+0x182>
 8015bae:	2b74      	cmp	r3, #116	; 0x74
 8015bb0:	d034      	beq.n	8015c1c <_scanf_float+0x1cc>
 8015bb2:	2b79      	cmp	r3, #121	; 0x79
 8015bb4:	d184      	bne.n	8015ac0 <_scanf_float+0x70>
 8015bb6:	f1bb 0f07 	cmp.w	fp, #7
 8015bba:	d181      	bne.n	8015ac0 <_scanf_float+0x70>
 8015bbc:	f04f 0b08 	mov.w	fp, #8
 8015bc0:	e007      	b.n	8015bd2 <_scanf_float+0x182>
 8015bc2:	eb12 0f0b 	cmn.w	r2, fp
 8015bc6:	f47f af7b 	bne.w	8015ac0 <_scanf_float+0x70>
 8015bca:	6821      	ldr	r1, [r4, #0]
 8015bcc:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8015bd0:	6021      	str	r1, [r4, #0]
 8015bd2:	702b      	strb	r3, [r5, #0]
 8015bd4:	3501      	adds	r5, #1
 8015bd6:	e79a      	b.n	8015b0e <_scanf_float+0xbe>
 8015bd8:	6821      	ldr	r1, [r4, #0]
 8015bda:	0608      	lsls	r0, r1, #24
 8015bdc:	f57f af70 	bpl.w	8015ac0 <_scanf_float+0x70>
 8015be0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8015be4:	e7f4      	b.n	8015bd0 <_scanf_float+0x180>
 8015be6:	2a02      	cmp	r2, #2
 8015be8:	d047      	beq.n	8015c7a <_scanf_float+0x22a>
 8015bea:	f1bb 0f01 	cmp.w	fp, #1
 8015bee:	d003      	beq.n	8015bf8 <_scanf_float+0x1a8>
 8015bf0:	f1bb 0f04 	cmp.w	fp, #4
 8015bf4:	f47f af64 	bne.w	8015ac0 <_scanf_float+0x70>
 8015bf8:	f10b 0b01 	add.w	fp, fp, #1
 8015bfc:	fa5f fb8b 	uxtb.w	fp, fp
 8015c00:	e7e7      	b.n	8015bd2 <_scanf_float+0x182>
 8015c02:	f1bb 0f03 	cmp.w	fp, #3
 8015c06:	d0f7      	beq.n	8015bf8 <_scanf_float+0x1a8>
 8015c08:	f1bb 0f05 	cmp.w	fp, #5
 8015c0c:	e7f2      	b.n	8015bf4 <_scanf_float+0x1a4>
 8015c0e:	f1bb 0f02 	cmp.w	fp, #2
 8015c12:	f47f af55 	bne.w	8015ac0 <_scanf_float+0x70>
 8015c16:	f04f 0b03 	mov.w	fp, #3
 8015c1a:	e7da      	b.n	8015bd2 <_scanf_float+0x182>
 8015c1c:	f1bb 0f06 	cmp.w	fp, #6
 8015c20:	f47f af4e 	bne.w	8015ac0 <_scanf_float+0x70>
 8015c24:	f04f 0b07 	mov.w	fp, #7
 8015c28:	e7d3      	b.n	8015bd2 <_scanf_float+0x182>
 8015c2a:	6821      	ldr	r1, [r4, #0]
 8015c2c:	0588      	lsls	r0, r1, #22
 8015c2e:	f57f af47 	bpl.w	8015ac0 <_scanf_float+0x70>
 8015c32:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8015c36:	6021      	str	r1, [r4, #0]
 8015c38:	f8cd 9008 	str.w	r9, [sp, #8]
 8015c3c:	e7c9      	b.n	8015bd2 <_scanf_float+0x182>
 8015c3e:	6821      	ldr	r1, [r4, #0]
 8015c40:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8015c44:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8015c48:	d006      	beq.n	8015c58 <_scanf_float+0x208>
 8015c4a:	0548      	lsls	r0, r1, #21
 8015c4c:	f57f af38 	bpl.w	8015ac0 <_scanf_float+0x70>
 8015c50:	f1b9 0f00 	cmp.w	r9, #0
 8015c54:	f43f af3b 	beq.w	8015ace <_scanf_float+0x7e>
 8015c58:	0588      	lsls	r0, r1, #22
 8015c5a:	bf58      	it	pl
 8015c5c:	9802      	ldrpl	r0, [sp, #8]
 8015c5e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8015c62:	bf58      	it	pl
 8015c64:	eba9 0000 	subpl.w	r0, r9, r0
 8015c68:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8015c6c:	bf58      	it	pl
 8015c6e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8015c72:	6021      	str	r1, [r4, #0]
 8015c74:	f04f 0900 	mov.w	r9, #0
 8015c78:	e7ab      	b.n	8015bd2 <_scanf_float+0x182>
 8015c7a:	2203      	movs	r2, #3
 8015c7c:	e7a9      	b.n	8015bd2 <_scanf_float+0x182>
 8015c7e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8015c82:	9205      	str	r2, [sp, #20]
 8015c84:	4631      	mov	r1, r6
 8015c86:	4638      	mov	r0, r7
 8015c88:	4798      	blx	r3
 8015c8a:	9a05      	ldr	r2, [sp, #20]
 8015c8c:	2800      	cmp	r0, #0
 8015c8e:	f43f af04 	beq.w	8015a9a <_scanf_float+0x4a>
 8015c92:	e715      	b.n	8015ac0 <_scanf_float+0x70>
 8015c94:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015c98:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015c9c:	4632      	mov	r2, r6
 8015c9e:	4638      	mov	r0, r7
 8015ca0:	4798      	blx	r3
 8015ca2:	6923      	ldr	r3, [r4, #16]
 8015ca4:	3b01      	subs	r3, #1
 8015ca6:	6123      	str	r3, [r4, #16]
 8015ca8:	e715      	b.n	8015ad6 <_scanf_float+0x86>
 8015caa:	f10b 33ff 	add.w	r3, fp, #4294967295
 8015cae:	2b06      	cmp	r3, #6
 8015cb0:	d80a      	bhi.n	8015cc8 <_scanf_float+0x278>
 8015cb2:	f1bb 0f02 	cmp.w	fp, #2
 8015cb6:	d968      	bls.n	8015d8a <_scanf_float+0x33a>
 8015cb8:	f1ab 0b03 	sub.w	fp, fp, #3
 8015cbc:	fa5f fb8b 	uxtb.w	fp, fp
 8015cc0:	eba5 0b0b 	sub.w	fp, r5, fp
 8015cc4:	455d      	cmp	r5, fp
 8015cc6:	d14b      	bne.n	8015d60 <_scanf_float+0x310>
 8015cc8:	6823      	ldr	r3, [r4, #0]
 8015cca:	05da      	lsls	r2, r3, #23
 8015ccc:	d51f      	bpl.n	8015d0e <_scanf_float+0x2be>
 8015cce:	055b      	lsls	r3, r3, #21
 8015cd0:	d468      	bmi.n	8015da4 <_scanf_float+0x354>
 8015cd2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8015cd6:	6923      	ldr	r3, [r4, #16]
 8015cd8:	2965      	cmp	r1, #101	; 0x65
 8015cda:	f103 33ff 	add.w	r3, r3, #4294967295
 8015cde:	f105 3bff 	add.w	fp, r5, #4294967295
 8015ce2:	6123      	str	r3, [r4, #16]
 8015ce4:	d00d      	beq.n	8015d02 <_scanf_float+0x2b2>
 8015ce6:	2945      	cmp	r1, #69	; 0x45
 8015ce8:	d00b      	beq.n	8015d02 <_scanf_float+0x2b2>
 8015cea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015cee:	4632      	mov	r2, r6
 8015cf0:	4638      	mov	r0, r7
 8015cf2:	4798      	blx	r3
 8015cf4:	6923      	ldr	r3, [r4, #16]
 8015cf6:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8015cfa:	3b01      	subs	r3, #1
 8015cfc:	f1a5 0b02 	sub.w	fp, r5, #2
 8015d00:	6123      	str	r3, [r4, #16]
 8015d02:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015d06:	4632      	mov	r2, r6
 8015d08:	4638      	mov	r0, r7
 8015d0a:	4798      	blx	r3
 8015d0c:	465d      	mov	r5, fp
 8015d0e:	6826      	ldr	r6, [r4, #0]
 8015d10:	f016 0610 	ands.w	r6, r6, #16
 8015d14:	d17a      	bne.n	8015e0c <_scanf_float+0x3bc>
 8015d16:	702e      	strb	r6, [r5, #0]
 8015d18:	6823      	ldr	r3, [r4, #0]
 8015d1a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8015d1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015d22:	d142      	bne.n	8015daa <_scanf_float+0x35a>
 8015d24:	9b02      	ldr	r3, [sp, #8]
 8015d26:	eba9 0303 	sub.w	r3, r9, r3
 8015d2a:	425a      	negs	r2, r3
 8015d2c:	2b00      	cmp	r3, #0
 8015d2e:	d149      	bne.n	8015dc4 <_scanf_float+0x374>
 8015d30:	2200      	movs	r2, #0
 8015d32:	4641      	mov	r1, r8
 8015d34:	4638      	mov	r0, r7
 8015d36:	f000 ff23 	bl	8016b80 <_strtod_r>
 8015d3a:	6825      	ldr	r5, [r4, #0]
 8015d3c:	f8da 3000 	ldr.w	r3, [sl]
 8015d40:	f015 0f02 	tst.w	r5, #2
 8015d44:	f103 0204 	add.w	r2, r3, #4
 8015d48:	ec59 8b10 	vmov	r8, r9, d0
 8015d4c:	f8ca 2000 	str.w	r2, [sl]
 8015d50:	d043      	beq.n	8015dda <_scanf_float+0x38a>
 8015d52:	681b      	ldr	r3, [r3, #0]
 8015d54:	e9c3 8900 	strd	r8, r9, [r3]
 8015d58:	68e3      	ldr	r3, [r4, #12]
 8015d5a:	3301      	adds	r3, #1
 8015d5c:	60e3      	str	r3, [r4, #12]
 8015d5e:	e6be      	b.n	8015ade <_scanf_float+0x8e>
 8015d60:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015d64:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015d68:	4632      	mov	r2, r6
 8015d6a:	4638      	mov	r0, r7
 8015d6c:	4798      	blx	r3
 8015d6e:	6923      	ldr	r3, [r4, #16]
 8015d70:	3b01      	subs	r3, #1
 8015d72:	6123      	str	r3, [r4, #16]
 8015d74:	e7a6      	b.n	8015cc4 <_scanf_float+0x274>
 8015d76:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015d7a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015d7e:	4632      	mov	r2, r6
 8015d80:	4638      	mov	r0, r7
 8015d82:	4798      	blx	r3
 8015d84:	6923      	ldr	r3, [r4, #16]
 8015d86:	3b01      	subs	r3, #1
 8015d88:	6123      	str	r3, [r4, #16]
 8015d8a:	4545      	cmp	r5, r8
 8015d8c:	d8f3      	bhi.n	8015d76 <_scanf_float+0x326>
 8015d8e:	e6a5      	b.n	8015adc <_scanf_float+0x8c>
 8015d90:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015d94:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015d98:	4632      	mov	r2, r6
 8015d9a:	4638      	mov	r0, r7
 8015d9c:	4798      	blx	r3
 8015d9e:	6923      	ldr	r3, [r4, #16]
 8015da0:	3b01      	subs	r3, #1
 8015da2:	6123      	str	r3, [r4, #16]
 8015da4:	4545      	cmp	r5, r8
 8015da6:	d8f3      	bhi.n	8015d90 <_scanf_float+0x340>
 8015da8:	e698      	b.n	8015adc <_scanf_float+0x8c>
 8015daa:	9b03      	ldr	r3, [sp, #12]
 8015dac:	2b00      	cmp	r3, #0
 8015dae:	d0bf      	beq.n	8015d30 <_scanf_float+0x2e0>
 8015db0:	9904      	ldr	r1, [sp, #16]
 8015db2:	230a      	movs	r3, #10
 8015db4:	4632      	mov	r2, r6
 8015db6:	3101      	adds	r1, #1
 8015db8:	4638      	mov	r0, r7
 8015dba:	f000 ff6d 	bl	8016c98 <_strtol_r>
 8015dbe:	9b03      	ldr	r3, [sp, #12]
 8015dc0:	9d04      	ldr	r5, [sp, #16]
 8015dc2:	1ac2      	subs	r2, r0, r3
 8015dc4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8015dc8:	429d      	cmp	r5, r3
 8015dca:	bf28      	it	cs
 8015dcc:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8015dd0:	490f      	ldr	r1, [pc, #60]	; (8015e10 <_scanf_float+0x3c0>)
 8015dd2:	4628      	mov	r0, r5
 8015dd4:	f000 f868 	bl	8015ea8 <siprintf>
 8015dd8:	e7aa      	b.n	8015d30 <_scanf_float+0x2e0>
 8015dda:	f015 0504 	ands.w	r5, r5, #4
 8015dde:	d1b8      	bne.n	8015d52 <_scanf_float+0x302>
 8015de0:	681f      	ldr	r7, [r3, #0]
 8015de2:	ee10 2a10 	vmov	r2, s0
 8015de6:	464b      	mov	r3, r9
 8015de8:	ee10 0a10 	vmov	r0, s0
 8015dec:	4649      	mov	r1, r9
 8015dee:	f7ea fead 	bl	8000b4c <__aeabi_dcmpun>
 8015df2:	b128      	cbz	r0, 8015e00 <_scanf_float+0x3b0>
 8015df4:	4628      	mov	r0, r5
 8015df6:	f000 f81d 	bl	8015e34 <nanf>
 8015dfa:	ed87 0a00 	vstr	s0, [r7]
 8015dfe:	e7ab      	b.n	8015d58 <_scanf_float+0x308>
 8015e00:	4640      	mov	r0, r8
 8015e02:	4649      	mov	r1, r9
 8015e04:	f7ea ff00 	bl	8000c08 <__aeabi_d2f>
 8015e08:	6038      	str	r0, [r7, #0]
 8015e0a:	e7a5      	b.n	8015d58 <_scanf_float+0x308>
 8015e0c:	2600      	movs	r6, #0
 8015e0e:	e666      	b.n	8015ade <_scanf_float+0x8e>
 8015e10:	0801b362 	.word	0x0801b362

08015e14 <_sbrk_r>:
 8015e14:	b538      	push	{r3, r4, r5, lr}
 8015e16:	4c06      	ldr	r4, [pc, #24]	; (8015e30 <_sbrk_r+0x1c>)
 8015e18:	2300      	movs	r3, #0
 8015e1a:	4605      	mov	r5, r0
 8015e1c:	4608      	mov	r0, r1
 8015e1e:	6023      	str	r3, [r4, #0]
 8015e20:	f7f4 fa94 	bl	800a34c <_sbrk>
 8015e24:	1c43      	adds	r3, r0, #1
 8015e26:	d102      	bne.n	8015e2e <_sbrk_r+0x1a>
 8015e28:	6823      	ldr	r3, [r4, #0]
 8015e2a:	b103      	cbz	r3, 8015e2e <_sbrk_r+0x1a>
 8015e2c:	602b      	str	r3, [r5, #0]
 8015e2e:	bd38      	pop	{r3, r4, r5, pc}
 8015e30:	20006e80 	.word	0x20006e80

08015e34 <nanf>:
 8015e34:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8015e3c <nanf+0x8>
 8015e38:	4770      	bx	lr
 8015e3a:	bf00      	nop
 8015e3c:	7fc00000 	.word	0x7fc00000

08015e40 <sniprintf>:
 8015e40:	b40c      	push	{r2, r3}
 8015e42:	b530      	push	{r4, r5, lr}
 8015e44:	4b17      	ldr	r3, [pc, #92]	; (8015ea4 <sniprintf+0x64>)
 8015e46:	1e0c      	subs	r4, r1, #0
 8015e48:	b09d      	sub	sp, #116	; 0x74
 8015e4a:	681d      	ldr	r5, [r3, #0]
 8015e4c:	da08      	bge.n	8015e60 <sniprintf+0x20>
 8015e4e:	238b      	movs	r3, #139	; 0x8b
 8015e50:	602b      	str	r3, [r5, #0]
 8015e52:	f04f 30ff 	mov.w	r0, #4294967295
 8015e56:	b01d      	add	sp, #116	; 0x74
 8015e58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015e5c:	b002      	add	sp, #8
 8015e5e:	4770      	bx	lr
 8015e60:	f44f 7302 	mov.w	r3, #520	; 0x208
 8015e64:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015e68:	bf14      	ite	ne
 8015e6a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8015e6e:	4623      	moveq	r3, r4
 8015e70:	9304      	str	r3, [sp, #16]
 8015e72:	9307      	str	r3, [sp, #28]
 8015e74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015e78:	9002      	str	r0, [sp, #8]
 8015e7a:	9006      	str	r0, [sp, #24]
 8015e7c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015e80:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015e82:	ab21      	add	r3, sp, #132	; 0x84
 8015e84:	a902      	add	r1, sp, #8
 8015e86:	4628      	mov	r0, r5
 8015e88:	9301      	str	r3, [sp, #4]
 8015e8a:	f002 fd21 	bl	80188d0 <_svfiprintf_r>
 8015e8e:	1c43      	adds	r3, r0, #1
 8015e90:	bfbc      	itt	lt
 8015e92:	238b      	movlt	r3, #139	; 0x8b
 8015e94:	602b      	strlt	r3, [r5, #0]
 8015e96:	2c00      	cmp	r4, #0
 8015e98:	d0dd      	beq.n	8015e56 <sniprintf+0x16>
 8015e9a:	9b02      	ldr	r3, [sp, #8]
 8015e9c:	2200      	movs	r2, #0
 8015e9e:	701a      	strb	r2, [r3, #0]
 8015ea0:	e7d9      	b.n	8015e56 <sniprintf+0x16>
 8015ea2:	bf00      	nop
 8015ea4:	20000e5c 	.word	0x20000e5c

08015ea8 <siprintf>:
 8015ea8:	b40e      	push	{r1, r2, r3}
 8015eaa:	b500      	push	{lr}
 8015eac:	b09c      	sub	sp, #112	; 0x70
 8015eae:	ab1d      	add	r3, sp, #116	; 0x74
 8015eb0:	9002      	str	r0, [sp, #8]
 8015eb2:	9006      	str	r0, [sp, #24]
 8015eb4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015eb8:	4809      	ldr	r0, [pc, #36]	; (8015ee0 <siprintf+0x38>)
 8015eba:	9107      	str	r1, [sp, #28]
 8015ebc:	9104      	str	r1, [sp, #16]
 8015ebe:	4909      	ldr	r1, [pc, #36]	; (8015ee4 <siprintf+0x3c>)
 8015ec0:	f853 2b04 	ldr.w	r2, [r3], #4
 8015ec4:	9105      	str	r1, [sp, #20]
 8015ec6:	6800      	ldr	r0, [r0, #0]
 8015ec8:	9301      	str	r3, [sp, #4]
 8015eca:	a902      	add	r1, sp, #8
 8015ecc:	f002 fd00 	bl	80188d0 <_svfiprintf_r>
 8015ed0:	9b02      	ldr	r3, [sp, #8]
 8015ed2:	2200      	movs	r2, #0
 8015ed4:	701a      	strb	r2, [r3, #0]
 8015ed6:	b01c      	add	sp, #112	; 0x70
 8015ed8:	f85d eb04 	ldr.w	lr, [sp], #4
 8015edc:	b003      	add	sp, #12
 8015ede:	4770      	bx	lr
 8015ee0:	20000e5c 	.word	0x20000e5c
 8015ee4:	ffff0208 	.word	0xffff0208

08015ee8 <siscanf>:
 8015ee8:	b40e      	push	{r1, r2, r3}
 8015eea:	b530      	push	{r4, r5, lr}
 8015eec:	b09c      	sub	sp, #112	; 0x70
 8015eee:	ac1f      	add	r4, sp, #124	; 0x7c
 8015ef0:	f44f 7201 	mov.w	r2, #516	; 0x204
 8015ef4:	f854 5b04 	ldr.w	r5, [r4], #4
 8015ef8:	f8ad 2014 	strh.w	r2, [sp, #20]
 8015efc:	9002      	str	r0, [sp, #8]
 8015efe:	9006      	str	r0, [sp, #24]
 8015f00:	f7ea f970 	bl	80001e4 <strlen>
 8015f04:	4b0b      	ldr	r3, [pc, #44]	; (8015f34 <siscanf+0x4c>)
 8015f06:	9003      	str	r0, [sp, #12]
 8015f08:	9007      	str	r0, [sp, #28]
 8015f0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8015f0c:	480a      	ldr	r0, [pc, #40]	; (8015f38 <siscanf+0x50>)
 8015f0e:	9401      	str	r4, [sp, #4]
 8015f10:	2300      	movs	r3, #0
 8015f12:	930f      	str	r3, [sp, #60]	; 0x3c
 8015f14:	9314      	str	r3, [sp, #80]	; 0x50
 8015f16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015f1a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015f1e:	462a      	mov	r2, r5
 8015f20:	4623      	mov	r3, r4
 8015f22:	a902      	add	r1, sp, #8
 8015f24:	6800      	ldr	r0, [r0, #0]
 8015f26:	f002 fe25 	bl	8018b74 <__ssvfiscanf_r>
 8015f2a:	b01c      	add	sp, #112	; 0x70
 8015f2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015f30:	b003      	add	sp, #12
 8015f32:	4770      	bx	lr
 8015f34:	08015f3d 	.word	0x08015f3d
 8015f38:	20000e5c 	.word	0x20000e5c

08015f3c <__seofread>:
 8015f3c:	2000      	movs	r0, #0
 8015f3e:	4770      	bx	lr

08015f40 <strcat>:
 8015f40:	b510      	push	{r4, lr}
 8015f42:	4603      	mov	r3, r0
 8015f44:	781a      	ldrb	r2, [r3, #0]
 8015f46:	1c5c      	adds	r4, r3, #1
 8015f48:	b93a      	cbnz	r2, 8015f5a <strcat+0x1a>
 8015f4a:	3b01      	subs	r3, #1
 8015f4c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015f50:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015f54:	2a00      	cmp	r2, #0
 8015f56:	d1f9      	bne.n	8015f4c <strcat+0xc>
 8015f58:	bd10      	pop	{r4, pc}
 8015f5a:	4623      	mov	r3, r4
 8015f5c:	e7f2      	b.n	8015f44 <strcat+0x4>

08015f5e <sulp>:
 8015f5e:	b570      	push	{r4, r5, r6, lr}
 8015f60:	4604      	mov	r4, r0
 8015f62:	460d      	mov	r5, r1
 8015f64:	ec45 4b10 	vmov	d0, r4, r5
 8015f68:	4616      	mov	r6, r2
 8015f6a:	f002 fb15 	bl	8018598 <__ulp>
 8015f6e:	ec51 0b10 	vmov	r0, r1, d0
 8015f72:	b17e      	cbz	r6, 8015f94 <sulp+0x36>
 8015f74:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8015f78:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8015f7c:	2b00      	cmp	r3, #0
 8015f7e:	dd09      	ble.n	8015f94 <sulp+0x36>
 8015f80:	051b      	lsls	r3, r3, #20
 8015f82:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8015f86:	2400      	movs	r4, #0
 8015f88:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8015f8c:	4622      	mov	r2, r4
 8015f8e:	462b      	mov	r3, r5
 8015f90:	f7ea fb42 	bl	8000618 <__aeabi_dmul>
 8015f94:	bd70      	pop	{r4, r5, r6, pc}
	...

08015f98 <_strtod_l>:
 8015f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f9c:	461f      	mov	r7, r3
 8015f9e:	b0a1      	sub	sp, #132	; 0x84
 8015fa0:	2300      	movs	r3, #0
 8015fa2:	4681      	mov	r9, r0
 8015fa4:	4638      	mov	r0, r7
 8015fa6:	460e      	mov	r6, r1
 8015fa8:	9217      	str	r2, [sp, #92]	; 0x5c
 8015faa:	931c      	str	r3, [sp, #112]	; 0x70
 8015fac:	f002 f804 	bl	8017fb8 <__localeconv_l>
 8015fb0:	4680      	mov	r8, r0
 8015fb2:	6800      	ldr	r0, [r0, #0]
 8015fb4:	f7ea f916 	bl	80001e4 <strlen>
 8015fb8:	f04f 0a00 	mov.w	sl, #0
 8015fbc:	4604      	mov	r4, r0
 8015fbe:	f04f 0b00 	mov.w	fp, #0
 8015fc2:	961b      	str	r6, [sp, #108]	; 0x6c
 8015fc4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015fc6:	781a      	ldrb	r2, [r3, #0]
 8015fc8:	2a0d      	cmp	r2, #13
 8015fca:	d832      	bhi.n	8016032 <_strtod_l+0x9a>
 8015fcc:	2a09      	cmp	r2, #9
 8015fce:	d236      	bcs.n	801603e <_strtod_l+0xa6>
 8015fd0:	2a00      	cmp	r2, #0
 8015fd2:	d03e      	beq.n	8016052 <_strtod_l+0xba>
 8015fd4:	2300      	movs	r3, #0
 8015fd6:	930d      	str	r3, [sp, #52]	; 0x34
 8015fd8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8015fda:	782b      	ldrb	r3, [r5, #0]
 8015fdc:	2b30      	cmp	r3, #48	; 0x30
 8015fde:	f040 80ac 	bne.w	801613a <_strtod_l+0x1a2>
 8015fe2:	786b      	ldrb	r3, [r5, #1]
 8015fe4:	2b58      	cmp	r3, #88	; 0x58
 8015fe6:	d001      	beq.n	8015fec <_strtod_l+0x54>
 8015fe8:	2b78      	cmp	r3, #120	; 0x78
 8015fea:	d167      	bne.n	80160bc <_strtod_l+0x124>
 8015fec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015fee:	9301      	str	r3, [sp, #4]
 8015ff0:	ab1c      	add	r3, sp, #112	; 0x70
 8015ff2:	9300      	str	r3, [sp, #0]
 8015ff4:	9702      	str	r7, [sp, #8]
 8015ff6:	ab1d      	add	r3, sp, #116	; 0x74
 8015ff8:	4a88      	ldr	r2, [pc, #544]	; (801621c <_strtod_l+0x284>)
 8015ffa:	a91b      	add	r1, sp, #108	; 0x6c
 8015ffc:	4648      	mov	r0, r9
 8015ffe:	f001 fcf2 	bl	80179e6 <__gethex>
 8016002:	f010 0407 	ands.w	r4, r0, #7
 8016006:	4606      	mov	r6, r0
 8016008:	d005      	beq.n	8016016 <_strtod_l+0x7e>
 801600a:	2c06      	cmp	r4, #6
 801600c:	d12b      	bne.n	8016066 <_strtod_l+0xce>
 801600e:	3501      	adds	r5, #1
 8016010:	2300      	movs	r3, #0
 8016012:	951b      	str	r5, [sp, #108]	; 0x6c
 8016014:	930d      	str	r3, [sp, #52]	; 0x34
 8016016:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016018:	2b00      	cmp	r3, #0
 801601a:	f040 859a 	bne.w	8016b52 <_strtod_l+0xbba>
 801601e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016020:	b1e3      	cbz	r3, 801605c <_strtod_l+0xc4>
 8016022:	4652      	mov	r2, sl
 8016024:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8016028:	ec43 2b10 	vmov	d0, r2, r3
 801602c:	b021      	add	sp, #132	; 0x84
 801602e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016032:	2a2b      	cmp	r2, #43	; 0x2b
 8016034:	d015      	beq.n	8016062 <_strtod_l+0xca>
 8016036:	2a2d      	cmp	r2, #45	; 0x2d
 8016038:	d004      	beq.n	8016044 <_strtod_l+0xac>
 801603a:	2a20      	cmp	r2, #32
 801603c:	d1ca      	bne.n	8015fd4 <_strtod_l+0x3c>
 801603e:	3301      	adds	r3, #1
 8016040:	931b      	str	r3, [sp, #108]	; 0x6c
 8016042:	e7bf      	b.n	8015fc4 <_strtod_l+0x2c>
 8016044:	2201      	movs	r2, #1
 8016046:	920d      	str	r2, [sp, #52]	; 0x34
 8016048:	1c5a      	adds	r2, r3, #1
 801604a:	921b      	str	r2, [sp, #108]	; 0x6c
 801604c:	785b      	ldrb	r3, [r3, #1]
 801604e:	2b00      	cmp	r3, #0
 8016050:	d1c2      	bne.n	8015fd8 <_strtod_l+0x40>
 8016052:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016054:	961b      	str	r6, [sp, #108]	; 0x6c
 8016056:	2b00      	cmp	r3, #0
 8016058:	f040 8579 	bne.w	8016b4e <_strtod_l+0xbb6>
 801605c:	4652      	mov	r2, sl
 801605e:	465b      	mov	r3, fp
 8016060:	e7e2      	b.n	8016028 <_strtod_l+0x90>
 8016062:	2200      	movs	r2, #0
 8016064:	e7ef      	b.n	8016046 <_strtod_l+0xae>
 8016066:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016068:	b13a      	cbz	r2, 801607a <_strtod_l+0xe2>
 801606a:	2135      	movs	r1, #53	; 0x35
 801606c:	a81e      	add	r0, sp, #120	; 0x78
 801606e:	f002 fb8b 	bl	8018788 <__copybits>
 8016072:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016074:	4648      	mov	r0, r9
 8016076:	f001 fff7 	bl	8018068 <_Bfree>
 801607a:	3c01      	subs	r4, #1
 801607c:	2c04      	cmp	r4, #4
 801607e:	d806      	bhi.n	801608e <_strtod_l+0xf6>
 8016080:	e8df f004 	tbb	[pc, r4]
 8016084:	1714030a 	.word	0x1714030a
 8016088:	0a          	.byte	0x0a
 8016089:	00          	.byte	0x00
 801608a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 801608e:	0730      	lsls	r0, r6, #28
 8016090:	d5c1      	bpl.n	8016016 <_strtod_l+0x7e>
 8016092:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8016096:	e7be      	b.n	8016016 <_strtod_l+0x7e>
 8016098:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 801609c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801609e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80160a2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80160a6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80160aa:	e7f0      	b.n	801608e <_strtod_l+0xf6>
 80160ac:	f8df b170 	ldr.w	fp, [pc, #368]	; 8016220 <_strtod_l+0x288>
 80160b0:	e7ed      	b.n	801608e <_strtod_l+0xf6>
 80160b2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80160b6:	f04f 3aff 	mov.w	sl, #4294967295
 80160ba:	e7e8      	b.n	801608e <_strtod_l+0xf6>
 80160bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80160be:	1c5a      	adds	r2, r3, #1
 80160c0:	921b      	str	r2, [sp, #108]	; 0x6c
 80160c2:	785b      	ldrb	r3, [r3, #1]
 80160c4:	2b30      	cmp	r3, #48	; 0x30
 80160c6:	d0f9      	beq.n	80160bc <_strtod_l+0x124>
 80160c8:	2b00      	cmp	r3, #0
 80160ca:	d0a4      	beq.n	8016016 <_strtod_l+0x7e>
 80160cc:	2301      	movs	r3, #1
 80160ce:	2500      	movs	r5, #0
 80160d0:	9306      	str	r3, [sp, #24]
 80160d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80160d4:	9308      	str	r3, [sp, #32]
 80160d6:	9507      	str	r5, [sp, #28]
 80160d8:	9505      	str	r5, [sp, #20]
 80160da:	220a      	movs	r2, #10
 80160dc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80160de:	7807      	ldrb	r7, [r0, #0]
 80160e0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80160e4:	b2d9      	uxtb	r1, r3
 80160e6:	2909      	cmp	r1, #9
 80160e8:	d929      	bls.n	801613e <_strtod_l+0x1a6>
 80160ea:	4622      	mov	r2, r4
 80160ec:	f8d8 1000 	ldr.w	r1, [r8]
 80160f0:	f003 f81a 	bl	8019128 <strncmp>
 80160f4:	2800      	cmp	r0, #0
 80160f6:	d031      	beq.n	801615c <_strtod_l+0x1c4>
 80160f8:	2000      	movs	r0, #0
 80160fa:	9c05      	ldr	r4, [sp, #20]
 80160fc:	9004      	str	r0, [sp, #16]
 80160fe:	463b      	mov	r3, r7
 8016100:	4602      	mov	r2, r0
 8016102:	2b65      	cmp	r3, #101	; 0x65
 8016104:	d001      	beq.n	801610a <_strtod_l+0x172>
 8016106:	2b45      	cmp	r3, #69	; 0x45
 8016108:	d114      	bne.n	8016134 <_strtod_l+0x19c>
 801610a:	b924      	cbnz	r4, 8016116 <_strtod_l+0x17e>
 801610c:	b910      	cbnz	r0, 8016114 <_strtod_l+0x17c>
 801610e:	9b06      	ldr	r3, [sp, #24]
 8016110:	2b00      	cmp	r3, #0
 8016112:	d09e      	beq.n	8016052 <_strtod_l+0xba>
 8016114:	2400      	movs	r4, #0
 8016116:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8016118:	1c73      	adds	r3, r6, #1
 801611a:	931b      	str	r3, [sp, #108]	; 0x6c
 801611c:	7873      	ldrb	r3, [r6, #1]
 801611e:	2b2b      	cmp	r3, #43	; 0x2b
 8016120:	d078      	beq.n	8016214 <_strtod_l+0x27c>
 8016122:	2b2d      	cmp	r3, #45	; 0x2d
 8016124:	d070      	beq.n	8016208 <_strtod_l+0x270>
 8016126:	f04f 0c00 	mov.w	ip, #0
 801612a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 801612e:	2f09      	cmp	r7, #9
 8016130:	d97c      	bls.n	801622c <_strtod_l+0x294>
 8016132:	961b      	str	r6, [sp, #108]	; 0x6c
 8016134:	f04f 0e00 	mov.w	lr, #0
 8016138:	e09a      	b.n	8016270 <_strtod_l+0x2d8>
 801613a:	2300      	movs	r3, #0
 801613c:	e7c7      	b.n	80160ce <_strtod_l+0x136>
 801613e:	9905      	ldr	r1, [sp, #20]
 8016140:	2908      	cmp	r1, #8
 8016142:	bfdd      	ittte	le
 8016144:	9907      	ldrle	r1, [sp, #28]
 8016146:	fb02 3301 	mlale	r3, r2, r1, r3
 801614a:	9307      	strle	r3, [sp, #28]
 801614c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8016150:	9b05      	ldr	r3, [sp, #20]
 8016152:	3001      	adds	r0, #1
 8016154:	3301      	adds	r3, #1
 8016156:	9305      	str	r3, [sp, #20]
 8016158:	901b      	str	r0, [sp, #108]	; 0x6c
 801615a:	e7bf      	b.n	80160dc <_strtod_l+0x144>
 801615c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801615e:	191a      	adds	r2, r3, r4
 8016160:	921b      	str	r2, [sp, #108]	; 0x6c
 8016162:	9a05      	ldr	r2, [sp, #20]
 8016164:	5d1b      	ldrb	r3, [r3, r4]
 8016166:	2a00      	cmp	r2, #0
 8016168:	d037      	beq.n	80161da <_strtod_l+0x242>
 801616a:	9c05      	ldr	r4, [sp, #20]
 801616c:	4602      	mov	r2, r0
 801616e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8016172:	2909      	cmp	r1, #9
 8016174:	d913      	bls.n	801619e <_strtod_l+0x206>
 8016176:	2101      	movs	r1, #1
 8016178:	9104      	str	r1, [sp, #16]
 801617a:	e7c2      	b.n	8016102 <_strtod_l+0x16a>
 801617c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801617e:	1c5a      	adds	r2, r3, #1
 8016180:	921b      	str	r2, [sp, #108]	; 0x6c
 8016182:	785b      	ldrb	r3, [r3, #1]
 8016184:	3001      	adds	r0, #1
 8016186:	2b30      	cmp	r3, #48	; 0x30
 8016188:	d0f8      	beq.n	801617c <_strtod_l+0x1e4>
 801618a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801618e:	2a08      	cmp	r2, #8
 8016190:	f200 84e4 	bhi.w	8016b5c <_strtod_l+0xbc4>
 8016194:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8016196:	9208      	str	r2, [sp, #32]
 8016198:	4602      	mov	r2, r0
 801619a:	2000      	movs	r0, #0
 801619c:	4604      	mov	r4, r0
 801619e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80161a2:	f100 0101 	add.w	r1, r0, #1
 80161a6:	d012      	beq.n	80161ce <_strtod_l+0x236>
 80161a8:	440a      	add	r2, r1
 80161aa:	eb00 0c04 	add.w	ip, r0, r4
 80161ae:	4621      	mov	r1, r4
 80161b0:	270a      	movs	r7, #10
 80161b2:	458c      	cmp	ip, r1
 80161b4:	d113      	bne.n	80161de <_strtod_l+0x246>
 80161b6:	1821      	adds	r1, r4, r0
 80161b8:	2908      	cmp	r1, #8
 80161ba:	f104 0401 	add.w	r4, r4, #1
 80161be:	4404      	add	r4, r0
 80161c0:	dc19      	bgt.n	80161f6 <_strtod_l+0x25e>
 80161c2:	9b07      	ldr	r3, [sp, #28]
 80161c4:	210a      	movs	r1, #10
 80161c6:	fb01 e303 	mla	r3, r1, r3, lr
 80161ca:	9307      	str	r3, [sp, #28]
 80161cc:	2100      	movs	r1, #0
 80161ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80161d0:	1c58      	adds	r0, r3, #1
 80161d2:	901b      	str	r0, [sp, #108]	; 0x6c
 80161d4:	785b      	ldrb	r3, [r3, #1]
 80161d6:	4608      	mov	r0, r1
 80161d8:	e7c9      	b.n	801616e <_strtod_l+0x1d6>
 80161da:	9805      	ldr	r0, [sp, #20]
 80161dc:	e7d3      	b.n	8016186 <_strtod_l+0x1ee>
 80161de:	2908      	cmp	r1, #8
 80161e0:	f101 0101 	add.w	r1, r1, #1
 80161e4:	dc03      	bgt.n	80161ee <_strtod_l+0x256>
 80161e6:	9b07      	ldr	r3, [sp, #28]
 80161e8:	437b      	muls	r3, r7
 80161ea:	9307      	str	r3, [sp, #28]
 80161ec:	e7e1      	b.n	80161b2 <_strtod_l+0x21a>
 80161ee:	2910      	cmp	r1, #16
 80161f0:	bfd8      	it	le
 80161f2:	437d      	mulle	r5, r7
 80161f4:	e7dd      	b.n	80161b2 <_strtod_l+0x21a>
 80161f6:	2c10      	cmp	r4, #16
 80161f8:	bfdc      	itt	le
 80161fa:	210a      	movle	r1, #10
 80161fc:	fb01 e505 	mlale	r5, r1, r5, lr
 8016200:	e7e4      	b.n	80161cc <_strtod_l+0x234>
 8016202:	2301      	movs	r3, #1
 8016204:	9304      	str	r3, [sp, #16]
 8016206:	e781      	b.n	801610c <_strtod_l+0x174>
 8016208:	f04f 0c01 	mov.w	ip, #1
 801620c:	1cb3      	adds	r3, r6, #2
 801620e:	931b      	str	r3, [sp, #108]	; 0x6c
 8016210:	78b3      	ldrb	r3, [r6, #2]
 8016212:	e78a      	b.n	801612a <_strtod_l+0x192>
 8016214:	f04f 0c00 	mov.w	ip, #0
 8016218:	e7f8      	b.n	801620c <_strtod_l+0x274>
 801621a:	bf00      	nop
 801621c:	0801b368 	.word	0x0801b368
 8016220:	7ff00000 	.word	0x7ff00000
 8016224:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016226:	1c5f      	adds	r7, r3, #1
 8016228:	971b      	str	r7, [sp, #108]	; 0x6c
 801622a:	785b      	ldrb	r3, [r3, #1]
 801622c:	2b30      	cmp	r3, #48	; 0x30
 801622e:	d0f9      	beq.n	8016224 <_strtod_l+0x28c>
 8016230:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8016234:	2f08      	cmp	r7, #8
 8016236:	f63f af7d 	bhi.w	8016134 <_strtod_l+0x19c>
 801623a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801623e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016240:	930a      	str	r3, [sp, #40]	; 0x28
 8016242:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016244:	1c5f      	adds	r7, r3, #1
 8016246:	971b      	str	r7, [sp, #108]	; 0x6c
 8016248:	785b      	ldrb	r3, [r3, #1]
 801624a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 801624e:	f1b8 0f09 	cmp.w	r8, #9
 8016252:	d937      	bls.n	80162c4 <_strtod_l+0x32c>
 8016254:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016256:	1a7f      	subs	r7, r7, r1
 8016258:	2f08      	cmp	r7, #8
 801625a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801625e:	dc37      	bgt.n	80162d0 <_strtod_l+0x338>
 8016260:	45be      	cmp	lr, r7
 8016262:	bfa8      	it	ge
 8016264:	46be      	movge	lr, r7
 8016266:	f1bc 0f00 	cmp.w	ip, #0
 801626a:	d001      	beq.n	8016270 <_strtod_l+0x2d8>
 801626c:	f1ce 0e00 	rsb	lr, lr, #0
 8016270:	2c00      	cmp	r4, #0
 8016272:	d151      	bne.n	8016318 <_strtod_l+0x380>
 8016274:	2800      	cmp	r0, #0
 8016276:	f47f aece 	bne.w	8016016 <_strtod_l+0x7e>
 801627a:	9a06      	ldr	r2, [sp, #24]
 801627c:	2a00      	cmp	r2, #0
 801627e:	f47f aeca 	bne.w	8016016 <_strtod_l+0x7e>
 8016282:	9a04      	ldr	r2, [sp, #16]
 8016284:	2a00      	cmp	r2, #0
 8016286:	f47f aee4 	bne.w	8016052 <_strtod_l+0xba>
 801628a:	2b4e      	cmp	r3, #78	; 0x4e
 801628c:	d027      	beq.n	80162de <_strtod_l+0x346>
 801628e:	dc21      	bgt.n	80162d4 <_strtod_l+0x33c>
 8016290:	2b49      	cmp	r3, #73	; 0x49
 8016292:	f47f aede 	bne.w	8016052 <_strtod_l+0xba>
 8016296:	49a0      	ldr	r1, [pc, #640]	; (8016518 <_strtod_l+0x580>)
 8016298:	a81b      	add	r0, sp, #108	; 0x6c
 801629a:	f001 fdd7 	bl	8017e4c <__match>
 801629e:	2800      	cmp	r0, #0
 80162a0:	f43f aed7 	beq.w	8016052 <_strtod_l+0xba>
 80162a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80162a6:	499d      	ldr	r1, [pc, #628]	; (801651c <_strtod_l+0x584>)
 80162a8:	3b01      	subs	r3, #1
 80162aa:	a81b      	add	r0, sp, #108	; 0x6c
 80162ac:	931b      	str	r3, [sp, #108]	; 0x6c
 80162ae:	f001 fdcd 	bl	8017e4c <__match>
 80162b2:	b910      	cbnz	r0, 80162ba <_strtod_l+0x322>
 80162b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80162b6:	3301      	adds	r3, #1
 80162b8:	931b      	str	r3, [sp, #108]	; 0x6c
 80162ba:	f8df b274 	ldr.w	fp, [pc, #628]	; 8016530 <_strtod_l+0x598>
 80162be:	f04f 0a00 	mov.w	sl, #0
 80162c2:	e6a8      	b.n	8016016 <_strtod_l+0x7e>
 80162c4:	210a      	movs	r1, #10
 80162c6:	fb01 3e0e 	mla	lr, r1, lr, r3
 80162ca:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80162ce:	e7b8      	b.n	8016242 <_strtod_l+0x2aa>
 80162d0:	46be      	mov	lr, r7
 80162d2:	e7c8      	b.n	8016266 <_strtod_l+0x2ce>
 80162d4:	2b69      	cmp	r3, #105	; 0x69
 80162d6:	d0de      	beq.n	8016296 <_strtod_l+0x2fe>
 80162d8:	2b6e      	cmp	r3, #110	; 0x6e
 80162da:	f47f aeba 	bne.w	8016052 <_strtod_l+0xba>
 80162de:	4990      	ldr	r1, [pc, #576]	; (8016520 <_strtod_l+0x588>)
 80162e0:	a81b      	add	r0, sp, #108	; 0x6c
 80162e2:	f001 fdb3 	bl	8017e4c <__match>
 80162e6:	2800      	cmp	r0, #0
 80162e8:	f43f aeb3 	beq.w	8016052 <_strtod_l+0xba>
 80162ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80162ee:	781b      	ldrb	r3, [r3, #0]
 80162f0:	2b28      	cmp	r3, #40	; 0x28
 80162f2:	d10e      	bne.n	8016312 <_strtod_l+0x37a>
 80162f4:	aa1e      	add	r2, sp, #120	; 0x78
 80162f6:	498b      	ldr	r1, [pc, #556]	; (8016524 <_strtod_l+0x58c>)
 80162f8:	a81b      	add	r0, sp, #108	; 0x6c
 80162fa:	f001 fdbb 	bl	8017e74 <__hexnan>
 80162fe:	2805      	cmp	r0, #5
 8016300:	d107      	bne.n	8016312 <_strtod_l+0x37a>
 8016302:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016304:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8016308:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801630c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8016310:	e681      	b.n	8016016 <_strtod_l+0x7e>
 8016312:	f8df b224 	ldr.w	fp, [pc, #548]	; 8016538 <_strtod_l+0x5a0>
 8016316:	e7d2      	b.n	80162be <_strtod_l+0x326>
 8016318:	ebae 0302 	sub.w	r3, lr, r2
 801631c:	9306      	str	r3, [sp, #24]
 801631e:	9b05      	ldr	r3, [sp, #20]
 8016320:	9807      	ldr	r0, [sp, #28]
 8016322:	2b00      	cmp	r3, #0
 8016324:	bf08      	it	eq
 8016326:	4623      	moveq	r3, r4
 8016328:	2c10      	cmp	r4, #16
 801632a:	9305      	str	r3, [sp, #20]
 801632c:	46a0      	mov	r8, r4
 801632e:	bfa8      	it	ge
 8016330:	f04f 0810 	movge.w	r8, #16
 8016334:	f7ea f8f6 	bl	8000524 <__aeabi_ui2d>
 8016338:	2c09      	cmp	r4, #9
 801633a:	4682      	mov	sl, r0
 801633c:	468b      	mov	fp, r1
 801633e:	dc13      	bgt.n	8016368 <_strtod_l+0x3d0>
 8016340:	9b06      	ldr	r3, [sp, #24]
 8016342:	2b00      	cmp	r3, #0
 8016344:	f43f ae67 	beq.w	8016016 <_strtod_l+0x7e>
 8016348:	9b06      	ldr	r3, [sp, #24]
 801634a:	dd7a      	ble.n	8016442 <_strtod_l+0x4aa>
 801634c:	2b16      	cmp	r3, #22
 801634e:	dc61      	bgt.n	8016414 <_strtod_l+0x47c>
 8016350:	4a75      	ldr	r2, [pc, #468]	; (8016528 <_strtod_l+0x590>)
 8016352:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8016356:	e9de 0100 	ldrd	r0, r1, [lr]
 801635a:	4652      	mov	r2, sl
 801635c:	465b      	mov	r3, fp
 801635e:	f7ea f95b 	bl	8000618 <__aeabi_dmul>
 8016362:	4682      	mov	sl, r0
 8016364:	468b      	mov	fp, r1
 8016366:	e656      	b.n	8016016 <_strtod_l+0x7e>
 8016368:	4b6f      	ldr	r3, [pc, #444]	; (8016528 <_strtod_l+0x590>)
 801636a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801636e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8016372:	f7ea f951 	bl	8000618 <__aeabi_dmul>
 8016376:	4606      	mov	r6, r0
 8016378:	4628      	mov	r0, r5
 801637a:	460f      	mov	r7, r1
 801637c:	f7ea f8d2 	bl	8000524 <__aeabi_ui2d>
 8016380:	4602      	mov	r2, r0
 8016382:	460b      	mov	r3, r1
 8016384:	4630      	mov	r0, r6
 8016386:	4639      	mov	r1, r7
 8016388:	f7e9 ff90 	bl	80002ac <__adddf3>
 801638c:	2c0f      	cmp	r4, #15
 801638e:	4682      	mov	sl, r0
 8016390:	468b      	mov	fp, r1
 8016392:	ddd5      	ble.n	8016340 <_strtod_l+0x3a8>
 8016394:	9b06      	ldr	r3, [sp, #24]
 8016396:	eba4 0808 	sub.w	r8, r4, r8
 801639a:	4498      	add	r8, r3
 801639c:	f1b8 0f00 	cmp.w	r8, #0
 80163a0:	f340 8096 	ble.w	80164d0 <_strtod_l+0x538>
 80163a4:	f018 030f 	ands.w	r3, r8, #15
 80163a8:	d00a      	beq.n	80163c0 <_strtod_l+0x428>
 80163aa:	495f      	ldr	r1, [pc, #380]	; (8016528 <_strtod_l+0x590>)
 80163ac:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80163b0:	4652      	mov	r2, sl
 80163b2:	465b      	mov	r3, fp
 80163b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80163b8:	f7ea f92e 	bl	8000618 <__aeabi_dmul>
 80163bc:	4682      	mov	sl, r0
 80163be:	468b      	mov	fp, r1
 80163c0:	f038 080f 	bics.w	r8, r8, #15
 80163c4:	d073      	beq.n	80164ae <_strtod_l+0x516>
 80163c6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80163ca:	dd47      	ble.n	801645c <_strtod_l+0x4c4>
 80163cc:	2400      	movs	r4, #0
 80163ce:	46a0      	mov	r8, r4
 80163d0:	9407      	str	r4, [sp, #28]
 80163d2:	9405      	str	r4, [sp, #20]
 80163d4:	2322      	movs	r3, #34	; 0x22
 80163d6:	f8df b158 	ldr.w	fp, [pc, #344]	; 8016530 <_strtod_l+0x598>
 80163da:	f8c9 3000 	str.w	r3, [r9]
 80163de:	f04f 0a00 	mov.w	sl, #0
 80163e2:	9b07      	ldr	r3, [sp, #28]
 80163e4:	2b00      	cmp	r3, #0
 80163e6:	f43f ae16 	beq.w	8016016 <_strtod_l+0x7e>
 80163ea:	991c      	ldr	r1, [sp, #112]	; 0x70
 80163ec:	4648      	mov	r0, r9
 80163ee:	f001 fe3b 	bl	8018068 <_Bfree>
 80163f2:	9905      	ldr	r1, [sp, #20]
 80163f4:	4648      	mov	r0, r9
 80163f6:	f001 fe37 	bl	8018068 <_Bfree>
 80163fa:	4641      	mov	r1, r8
 80163fc:	4648      	mov	r0, r9
 80163fe:	f001 fe33 	bl	8018068 <_Bfree>
 8016402:	9907      	ldr	r1, [sp, #28]
 8016404:	4648      	mov	r0, r9
 8016406:	f001 fe2f 	bl	8018068 <_Bfree>
 801640a:	4621      	mov	r1, r4
 801640c:	4648      	mov	r0, r9
 801640e:	f001 fe2b 	bl	8018068 <_Bfree>
 8016412:	e600      	b.n	8016016 <_strtod_l+0x7e>
 8016414:	9a06      	ldr	r2, [sp, #24]
 8016416:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 801641a:	4293      	cmp	r3, r2
 801641c:	dbba      	blt.n	8016394 <_strtod_l+0x3fc>
 801641e:	4d42      	ldr	r5, [pc, #264]	; (8016528 <_strtod_l+0x590>)
 8016420:	f1c4 040f 	rsb	r4, r4, #15
 8016424:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8016428:	4652      	mov	r2, sl
 801642a:	465b      	mov	r3, fp
 801642c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016430:	f7ea f8f2 	bl	8000618 <__aeabi_dmul>
 8016434:	9b06      	ldr	r3, [sp, #24]
 8016436:	1b1c      	subs	r4, r3, r4
 8016438:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 801643c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016440:	e78d      	b.n	801635e <_strtod_l+0x3c6>
 8016442:	f113 0f16 	cmn.w	r3, #22
 8016446:	dba5      	blt.n	8016394 <_strtod_l+0x3fc>
 8016448:	4a37      	ldr	r2, [pc, #220]	; (8016528 <_strtod_l+0x590>)
 801644a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 801644e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8016452:	4650      	mov	r0, sl
 8016454:	4659      	mov	r1, fp
 8016456:	f7ea fa09 	bl	800086c <__aeabi_ddiv>
 801645a:	e782      	b.n	8016362 <_strtod_l+0x3ca>
 801645c:	2300      	movs	r3, #0
 801645e:	4e33      	ldr	r6, [pc, #204]	; (801652c <_strtod_l+0x594>)
 8016460:	ea4f 1828 	mov.w	r8, r8, asr #4
 8016464:	4650      	mov	r0, sl
 8016466:	4659      	mov	r1, fp
 8016468:	461d      	mov	r5, r3
 801646a:	f1b8 0f01 	cmp.w	r8, #1
 801646e:	dc21      	bgt.n	80164b4 <_strtod_l+0x51c>
 8016470:	b10b      	cbz	r3, 8016476 <_strtod_l+0x4de>
 8016472:	4682      	mov	sl, r0
 8016474:	468b      	mov	fp, r1
 8016476:	4b2d      	ldr	r3, [pc, #180]	; (801652c <_strtod_l+0x594>)
 8016478:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801647c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8016480:	4652      	mov	r2, sl
 8016482:	465b      	mov	r3, fp
 8016484:	e9d5 0100 	ldrd	r0, r1, [r5]
 8016488:	f7ea f8c6 	bl	8000618 <__aeabi_dmul>
 801648c:	4b28      	ldr	r3, [pc, #160]	; (8016530 <_strtod_l+0x598>)
 801648e:	460a      	mov	r2, r1
 8016490:	400b      	ands	r3, r1
 8016492:	4928      	ldr	r1, [pc, #160]	; (8016534 <_strtod_l+0x59c>)
 8016494:	428b      	cmp	r3, r1
 8016496:	4682      	mov	sl, r0
 8016498:	d898      	bhi.n	80163cc <_strtod_l+0x434>
 801649a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801649e:	428b      	cmp	r3, r1
 80164a0:	bf86      	itte	hi
 80164a2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801653c <_strtod_l+0x5a4>
 80164a6:	f04f 3aff 	movhi.w	sl, #4294967295
 80164aa:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80164ae:	2300      	movs	r3, #0
 80164b0:	9304      	str	r3, [sp, #16]
 80164b2:	e077      	b.n	80165a4 <_strtod_l+0x60c>
 80164b4:	f018 0f01 	tst.w	r8, #1
 80164b8:	d006      	beq.n	80164c8 <_strtod_l+0x530>
 80164ba:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80164be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164c2:	f7ea f8a9 	bl	8000618 <__aeabi_dmul>
 80164c6:	2301      	movs	r3, #1
 80164c8:	3501      	adds	r5, #1
 80164ca:	ea4f 0868 	mov.w	r8, r8, asr #1
 80164ce:	e7cc      	b.n	801646a <_strtod_l+0x4d2>
 80164d0:	d0ed      	beq.n	80164ae <_strtod_l+0x516>
 80164d2:	f1c8 0800 	rsb	r8, r8, #0
 80164d6:	f018 020f 	ands.w	r2, r8, #15
 80164da:	d00a      	beq.n	80164f2 <_strtod_l+0x55a>
 80164dc:	4b12      	ldr	r3, [pc, #72]	; (8016528 <_strtod_l+0x590>)
 80164de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80164e2:	4650      	mov	r0, sl
 80164e4:	4659      	mov	r1, fp
 80164e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164ea:	f7ea f9bf 	bl	800086c <__aeabi_ddiv>
 80164ee:	4682      	mov	sl, r0
 80164f0:	468b      	mov	fp, r1
 80164f2:	ea5f 1828 	movs.w	r8, r8, asr #4
 80164f6:	d0da      	beq.n	80164ae <_strtod_l+0x516>
 80164f8:	f1b8 0f1f 	cmp.w	r8, #31
 80164fc:	dd20      	ble.n	8016540 <_strtod_l+0x5a8>
 80164fe:	2400      	movs	r4, #0
 8016500:	46a0      	mov	r8, r4
 8016502:	9407      	str	r4, [sp, #28]
 8016504:	9405      	str	r4, [sp, #20]
 8016506:	2322      	movs	r3, #34	; 0x22
 8016508:	f04f 0a00 	mov.w	sl, #0
 801650c:	f04f 0b00 	mov.w	fp, #0
 8016510:	f8c9 3000 	str.w	r3, [r9]
 8016514:	e765      	b.n	80163e2 <_strtod_l+0x44a>
 8016516:	bf00      	nop
 8016518:	0801b335 	.word	0x0801b335
 801651c:	0801b3bb 	.word	0x0801b3bb
 8016520:	0801b33d 	.word	0x0801b33d
 8016524:	0801b37c 	.word	0x0801b37c
 8016528:	0801b3f8 	.word	0x0801b3f8
 801652c:	0801b3d0 	.word	0x0801b3d0
 8016530:	7ff00000 	.word	0x7ff00000
 8016534:	7ca00000 	.word	0x7ca00000
 8016538:	fff80000 	.word	0xfff80000
 801653c:	7fefffff 	.word	0x7fefffff
 8016540:	f018 0310 	ands.w	r3, r8, #16
 8016544:	bf18      	it	ne
 8016546:	236a      	movne	r3, #106	; 0x6a
 8016548:	4da0      	ldr	r5, [pc, #640]	; (80167cc <_strtod_l+0x834>)
 801654a:	9304      	str	r3, [sp, #16]
 801654c:	4650      	mov	r0, sl
 801654e:	4659      	mov	r1, fp
 8016550:	2300      	movs	r3, #0
 8016552:	f1b8 0f00 	cmp.w	r8, #0
 8016556:	f300 810a 	bgt.w	801676e <_strtod_l+0x7d6>
 801655a:	b10b      	cbz	r3, 8016560 <_strtod_l+0x5c8>
 801655c:	4682      	mov	sl, r0
 801655e:	468b      	mov	fp, r1
 8016560:	9b04      	ldr	r3, [sp, #16]
 8016562:	b1bb      	cbz	r3, 8016594 <_strtod_l+0x5fc>
 8016564:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8016568:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801656c:	2b00      	cmp	r3, #0
 801656e:	4659      	mov	r1, fp
 8016570:	dd10      	ble.n	8016594 <_strtod_l+0x5fc>
 8016572:	2b1f      	cmp	r3, #31
 8016574:	f340 8107 	ble.w	8016786 <_strtod_l+0x7ee>
 8016578:	2b34      	cmp	r3, #52	; 0x34
 801657a:	bfde      	ittt	le
 801657c:	3b20      	suble	r3, #32
 801657e:	f04f 32ff 	movle.w	r2, #4294967295
 8016582:	fa02 f303 	lslle.w	r3, r2, r3
 8016586:	f04f 0a00 	mov.w	sl, #0
 801658a:	bfcc      	ite	gt
 801658c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8016590:	ea03 0b01 	andle.w	fp, r3, r1
 8016594:	2200      	movs	r2, #0
 8016596:	2300      	movs	r3, #0
 8016598:	4650      	mov	r0, sl
 801659a:	4659      	mov	r1, fp
 801659c:	f7ea faa4 	bl	8000ae8 <__aeabi_dcmpeq>
 80165a0:	2800      	cmp	r0, #0
 80165a2:	d1ac      	bne.n	80164fe <_strtod_l+0x566>
 80165a4:	9b07      	ldr	r3, [sp, #28]
 80165a6:	9300      	str	r3, [sp, #0]
 80165a8:	9a05      	ldr	r2, [sp, #20]
 80165aa:	9908      	ldr	r1, [sp, #32]
 80165ac:	4623      	mov	r3, r4
 80165ae:	4648      	mov	r0, r9
 80165b0:	f001 fdac 	bl	801810c <__s2b>
 80165b4:	9007      	str	r0, [sp, #28]
 80165b6:	2800      	cmp	r0, #0
 80165b8:	f43f af08 	beq.w	80163cc <_strtod_l+0x434>
 80165bc:	9a06      	ldr	r2, [sp, #24]
 80165be:	9b06      	ldr	r3, [sp, #24]
 80165c0:	2a00      	cmp	r2, #0
 80165c2:	f1c3 0300 	rsb	r3, r3, #0
 80165c6:	bfa8      	it	ge
 80165c8:	2300      	movge	r3, #0
 80165ca:	930e      	str	r3, [sp, #56]	; 0x38
 80165cc:	2400      	movs	r4, #0
 80165ce:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80165d2:	9316      	str	r3, [sp, #88]	; 0x58
 80165d4:	46a0      	mov	r8, r4
 80165d6:	9b07      	ldr	r3, [sp, #28]
 80165d8:	4648      	mov	r0, r9
 80165da:	6859      	ldr	r1, [r3, #4]
 80165dc:	f001 fd10 	bl	8018000 <_Balloc>
 80165e0:	9005      	str	r0, [sp, #20]
 80165e2:	2800      	cmp	r0, #0
 80165e4:	f43f aef6 	beq.w	80163d4 <_strtod_l+0x43c>
 80165e8:	9b07      	ldr	r3, [sp, #28]
 80165ea:	691a      	ldr	r2, [r3, #16]
 80165ec:	3202      	adds	r2, #2
 80165ee:	f103 010c 	add.w	r1, r3, #12
 80165f2:	0092      	lsls	r2, r2, #2
 80165f4:	300c      	adds	r0, #12
 80165f6:	f7fe fcfb 	bl	8014ff0 <memcpy>
 80165fa:	aa1e      	add	r2, sp, #120	; 0x78
 80165fc:	a91d      	add	r1, sp, #116	; 0x74
 80165fe:	ec4b ab10 	vmov	d0, sl, fp
 8016602:	4648      	mov	r0, r9
 8016604:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8016608:	f002 f83c 	bl	8018684 <__d2b>
 801660c:	901c      	str	r0, [sp, #112]	; 0x70
 801660e:	2800      	cmp	r0, #0
 8016610:	f43f aee0 	beq.w	80163d4 <_strtod_l+0x43c>
 8016614:	2101      	movs	r1, #1
 8016616:	4648      	mov	r0, r9
 8016618:	f001 fe04 	bl	8018224 <__i2b>
 801661c:	4680      	mov	r8, r0
 801661e:	2800      	cmp	r0, #0
 8016620:	f43f aed8 	beq.w	80163d4 <_strtod_l+0x43c>
 8016624:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8016626:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8016628:	2e00      	cmp	r6, #0
 801662a:	bfab      	itete	ge
 801662c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 801662e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8016630:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8016632:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8016634:	bfac      	ite	ge
 8016636:	18f7      	addge	r7, r6, r3
 8016638:	1b9d      	sublt	r5, r3, r6
 801663a:	9b04      	ldr	r3, [sp, #16]
 801663c:	1af6      	subs	r6, r6, r3
 801663e:	4416      	add	r6, r2
 8016640:	4b63      	ldr	r3, [pc, #396]	; (80167d0 <_strtod_l+0x838>)
 8016642:	3e01      	subs	r6, #1
 8016644:	429e      	cmp	r6, r3
 8016646:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801664a:	f280 80af 	bge.w	80167ac <_strtod_l+0x814>
 801664e:	1b9b      	subs	r3, r3, r6
 8016650:	2b1f      	cmp	r3, #31
 8016652:	eba2 0203 	sub.w	r2, r2, r3
 8016656:	f04f 0101 	mov.w	r1, #1
 801665a:	f300 809b 	bgt.w	8016794 <_strtod_l+0x7fc>
 801665e:	fa01 f303 	lsl.w	r3, r1, r3
 8016662:	930f      	str	r3, [sp, #60]	; 0x3c
 8016664:	2300      	movs	r3, #0
 8016666:	930a      	str	r3, [sp, #40]	; 0x28
 8016668:	18be      	adds	r6, r7, r2
 801666a:	9b04      	ldr	r3, [sp, #16]
 801666c:	42b7      	cmp	r7, r6
 801666e:	4415      	add	r5, r2
 8016670:	441d      	add	r5, r3
 8016672:	463b      	mov	r3, r7
 8016674:	bfa8      	it	ge
 8016676:	4633      	movge	r3, r6
 8016678:	42ab      	cmp	r3, r5
 801667a:	bfa8      	it	ge
 801667c:	462b      	movge	r3, r5
 801667e:	2b00      	cmp	r3, #0
 8016680:	bfc2      	ittt	gt
 8016682:	1af6      	subgt	r6, r6, r3
 8016684:	1aed      	subgt	r5, r5, r3
 8016686:	1aff      	subgt	r7, r7, r3
 8016688:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801668a:	b1bb      	cbz	r3, 80166bc <_strtod_l+0x724>
 801668c:	4641      	mov	r1, r8
 801668e:	461a      	mov	r2, r3
 8016690:	4648      	mov	r0, r9
 8016692:	f001 fe67 	bl	8018364 <__pow5mult>
 8016696:	4680      	mov	r8, r0
 8016698:	2800      	cmp	r0, #0
 801669a:	f43f ae9b 	beq.w	80163d4 <_strtod_l+0x43c>
 801669e:	4601      	mov	r1, r0
 80166a0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80166a2:	4648      	mov	r0, r9
 80166a4:	f001 fdc7 	bl	8018236 <__multiply>
 80166a8:	900c      	str	r0, [sp, #48]	; 0x30
 80166aa:	2800      	cmp	r0, #0
 80166ac:	f43f ae92 	beq.w	80163d4 <_strtod_l+0x43c>
 80166b0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80166b2:	4648      	mov	r0, r9
 80166b4:	f001 fcd8 	bl	8018068 <_Bfree>
 80166b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80166ba:	931c      	str	r3, [sp, #112]	; 0x70
 80166bc:	2e00      	cmp	r6, #0
 80166be:	dc7a      	bgt.n	80167b6 <_strtod_l+0x81e>
 80166c0:	9b06      	ldr	r3, [sp, #24]
 80166c2:	2b00      	cmp	r3, #0
 80166c4:	dd08      	ble.n	80166d8 <_strtod_l+0x740>
 80166c6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80166c8:	9905      	ldr	r1, [sp, #20]
 80166ca:	4648      	mov	r0, r9
 80166cc:	f001 fe4a 	bl	8018364 <__pow5mult>
 80166d0:	9005      	str	r0, [sp, #20]
 80166d2:	2800      	cmp	r0, #0
 80166d4:	f43f ae7e 	beq.w	80163d4 <_strtod_l+0x43c>
 80166d8:	2d00      	cmp	r5, #0
 80166da:	dd08      	ble.n	80166ee <_strtod_l+0x756>
 80166dc:	462a      	mov	r2, r5
 80166de:	9905      	ldr	r1, [sp, #20]
 80166e0:	4648      	mov	r0, r9
 80166e2:	f001 fe8d 	bl	8018400 <__lshift>
 80166e6:	9005      	str	r0, [sp, #20]
 80166e8:	2800      	cmp	r0, #0
 80166ea:	f43f ae73 	beq.w	80163d4 <_strtod_l+0x43c>
 80166ee:	2f00      	cmp	r7, #0
 80166f0:	dd08      	ble.n	8016704 <_strtod_l+0x76c>
 80166f2:	4641      	mov	r1, r8
 80166f4:	463a      	mov	r2, r7
 80166f6:	4648      	mov	r0, r9
 80166f8:	f001 fe82 	bl	8018400 <__lshift>
 80166fc:	4680      	mov	r8, r0
 80166fe:	2800      	cmp	r0, #0
 8016700:	f43f ae68 	beq.w	80163d4 <_strtod_l+0x43c>
 8016704:	9a05      	ldr	r2, [sp, #20]
 8016706:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016708:	4648      	mov	r0, r9
 801670a:	f001 fee7 	bl	80184dc <__mdiff>
 801670e:	4604      	mov	r4, r0
 8016710:	2800      	cmp	r0, #0
 8016712:	f43f ae5f 	beq.w	80163d4 <_strtod_l+0x43c>
 8016716:	68c3      	ldr	r3, [r0, #12]
 8016718:	930c      	str	r3, [sp, #48]	; 0x30
 801671a:	2300      	movs	r3, #0
 801671c:	60c3      	str	r3, [r0, #12]
 801671e:	4641      	mov	r1, r8
 8016720:	f001 fec2 	bl	80184a8 <__mcmp>
 8016724:	2800      	cmp	r0, #0
 8016726:	da55      	bge.n	80167d4 <_strtod_l+0x83c>
 8016728:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801672a:	b9e3      	cbnz	r3, 8016766 <_strtod_l+0x7ce>
 801672c:	f1ba 0f00 	cmp.w	sl, #0
 8016730:	d119      	bne.n	8016766 <_strtod_l+0x7ce>
 8016732:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016736:	b9b3      	cbnz	r3, 8016766 <_strtod_l+0x7ce>
 8016738:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801673c:	0d1b      	lsrs	r3, r3, #20
 801673e:	051b      	lsls	r3, r3, #20
 8016740:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8016744:	d90f      	bls.n	8016766 <_strtod_l+0x7ce>
 8016746:	6963      	ldr	r3, [r4, #20]
 8016748:	b913      	cbnz	r3, 8016750 <_strtod_l+0x7b8>
 801674a:	6923      	ldr	r3, [r4, #16]
 801674c:	2b01      	cmp	r3, #1
 801674e:	dd0a      	ble.n	8016766 <_strtod_l+0x7ce>
 8016750:	4621      	mov	r1, r4
 8016752:	2201      	movs	r2, #1
 8016754:	4648      	mov	r0, r9
 8016756:	f001 fe53 	bl	8018400 <__lshift>
 801675a:	4641      	mov	r1, r8
 801675c:	4604      	mov	r4, r0
 801675e:	f001 fea3 	bl	80184a8 <__mcmp>
 8016762:	2800      	cmp	r0, #0
 8016764:	dc67      	bgt.n	8016836 <_strtod_l+0x89e>
 8016766:	9b04      	ldr	r3, [sp, #16]
 8016768:	2b00      	cmp	r3, #0
 801676a:	d171      	bne.n	8016850 <_strtod_l+0x8b8>
 801676c:	e63d      	b.n	80163ea <_strtod_l+0x452>
 801676e:	f018 0f01 	tst.w	r8, #1
 8016772:	d004      	beq.n	801677e <_strtod_l+0x7e6>
 8016774:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016778:	f7e9 ff4e 	bl	8000618 <__aeabi_dmul>
 801677c:	2301      	movs	r3, #1
 801677e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8016782:	3508      	adds	r5, #8
 8016784:	e6e5      	b.n	8016552 <_strtod_l+0x5ba>
 8016786:	f04f 32ff 	mov.w	r2, #4294967295
 801678a:	fa02 f303 	lsl.w	r3, r2, r3
 801678e:	ea03 0a0a 	and.w	sl, r3, sl
 8016792:	e6ff      	b.n	8016594 <_strtod_l+0x5fc>
 8016794:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8016798:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801679c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80167a0:	36e2      	adds	r6, #226	; 0xe2
 80167a2:	fa01 f306 	lsl.w	r3, r1, r6
 80167a6:	930a      	str	r3, [sp, #40]	; 0x28
 80167a8:	910f      	str	r1, [sp, #60]	; 0x3c
 80167aa:	e75d      	b.n	8016668 <_strtod_l+0x6d0>
 80167ac:	2300      	movs	r3, #0
 80167ae:	930a      	str	r3, [sp, #40]	; 0x28
 80167b0:	2301      	movs	r3, #1
 80167b2:	930f      	str	r3, [sp, #60]	; 0x3c
 80167b4:	e758      	b.n	8016668 <_strtod_l+0x6d0>
 80167b6:	4632      	mov	r2, r6
 80167b8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80167ba:	4648      	mov	r0, r9
 80167bc:	f001 fe20 	bl	8018400 <__lshift>
 80167c0:	901c      	str	r0, [sp, #112]	; 0x70
 80167c2:	2800      	cmp	r0, #0
 80167c4:	f47f af7c 	bne.w	80166c0 <_strtod_l+0x728>
 80167c8:	e604      	b.n	80163d4 <_strtod_l+0x43c>
 80167ca:	bf00      	nop
 80167cc:	0801b390 	.word	0x0801b390
 80167d0:	fffffc02 	.word	0xfffffc02
 80167d4:	465d      	mov	r5, fp
 80167d6:	f040 8086 	bne.w	80168e6 <_strtod_l+0x94e>
 80167da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80167dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80167e0:	b32a      	cbz	r2, 801682e <_strtod_l+0x896>
 80167e2:	4aaf      	ldr	r2, [pc, #700]	; (8016aa0 <_strtod_l+0xb08>)
 80167e4:	4293      	cmp	r3, r2
 80167e6:	d153      	bne.n	8016890 <_strtod_l+0x8f8>
 80167e8:	9b04      	ldr	r3, [sp, #16]
 80167ea:	4650      	mov	r0, sl
 80167ec:	b1d3      	cbz	r3, 8016824 <_strtod_l+0x88c>
 80167ee:	4aad      	ldr	r2, [pc, #692]	; (8016aa4 <_strtod_l+0xb0c>)
 80167f0:	402a      	ands	r2, r5
 80167f2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80167f6:	f04f 31ff 	mov.w	r1, #4294967295
 80167fa:	d816      	bhi.n	801682a <_strtod_l+0x892>
 80167fc:	0d12      	lsrs	r2, r2, #20
 80167fe:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8016802:	fa01 f303 	lsl.w	r3, r1, r3
 8016806:	4298      	cmp	r0, r3
 8016808:	d142      	bne.n	8016890 <_strtod_l+0x8f8>
 801680a:	4ba7      	ldr	r3, [pc, #668]	; (8016aa8 <_strtod_l+0xb10>)
 801680c:	429d      	cmp	r5, r3
 801680e:	d102      	bne.n	8016816 <_strtod_l+0x87e>
 8016810:	3001      	adds	r0, #1
 8016812:	f43f addf 	beq.w	80163d4 <_strtod_l+0x43c>
 8016816:	4ba3      	ldr	r3, [pc, #652]	; (8016aa4 <_strtod_l+0xb0c>)
 8016818:	402b      	ands	r3, r5
 801681a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801681e:	f04f 0a00 	mov.w	sl, #0
 8016822:	e7a0      	b.n	8016766 <_strtod_l+0x7ce>
 8016824:	f04f 33ff 	mov.w	r3, #4294967295
 8016828:	e7ed      	b.n	8016806 <_strtod_l+0x86e>
 801682a:	460b      	mov	r3, r1
 801682c:	e7eb      	b.n	8016806 <_strtod_l+0x86e>
 801682e:	bb7b      	cbnz	r3, 8016890 <_strtod_l+0x8f8>
 8016830:	f1ba 0f00 	cmp.w	sl, #0
 8016834:	d12c      	bne.n	8016890 <_strtod_l+0x8f8>
 8016836:	9904      	ldr	r1, [sp, #16]
 8016838:	4a9a      	ldr	r2, [pc, #616]	; (8016aa4 <_strtod_l+0xb0c>)
 801683a:	465b      	mov	r3, fp
 801683c:	b1f1      	cbz	r1, 801687c <_strtod_l+0x8e4>
 801683e:	ea02 010b 	and.w	r1, r2, fp
 8016842:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8016846:	dc19      	bgt.n	801687c <_strtod_l+0x8e4>
 8016848:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801684c:	f77f ae5b 	ble.w	8016506 <_strtod_l+0x56e>
 8016850:	4a96      	ldr	r2, [pc, #600]	; (8016aac <_strtod_l+0xb14>)
 8016852:	2300      	movs	r3, #0
 8016854:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8016858:	4650      	mov	r0, sl
 801685a:	4659      	mov	r1, fp
 801685c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8016860:	f7e9 feda 	bl	8000618 <__aeabi_dmul>
 8016864:	4682      	mov	sl, r0
 8016866:	468b      	mov	fp, r1
 8016868:	2900      	cmp	r1, #0
 801686a:	f47f adbe 	bne.w	80163ea <_strtod_l+0x452>
 801686e:	2800      	cmp	r0, #0
 8016870:	f47f adbb 	bne.w	80163ea <_strtod_l+0x452>
 8016874:	2322      	movs	r3, #34	; 0x22
 8016876:	f8c9 3000 	str.w	r3, [r9]
 801687a:	e5b6      	b.n	80163ea <_strtod_l+0x452>
 801687c:	4013      	ands	r3, r2
 801687e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8016882:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8016886:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801688a:	f04f 3aff 	mov.w	sl, #4294967295
 801688e:	e76a      	b.n	8016766 <_strtod_l+0x7ce>
 8016890:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016892:	b193      	cbz	r3, 80168ba <_strtod_l+0x922>
 8016894:	422b      	tst	r3, r5
 8016896:	f43f af66 	beq.w	8016766 <_strtod_l+0x7ce>
 801689a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801689c:	9a04      	ldr	r2, [sp, #16]
 801689e:	4650      	mov	r0, sl
 80168a0:	4659      	mov	r1, fp
 80168a2:	b173      	cbz	r3, 80168c2 <_strtod_l+0x92a>
 80168a4:	f7ff fb5b 	bl	8015f5e <sulp>
 80168a8:	4602      	mov	r2, r0
 80168aa:	460b      	mov	r3, r1
 80168ac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80168b0:	f7e9 fcfc 	bl	80002ac <__adddf3>
 80168b4:	4682      	mov	sl, r0
 80168b6:	468b      	mov	fp, r1
 80168b8:	e755      	b.n	8016766 <_strtod_l+0x7ce>
 80168ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80168bc:	ea13 0f0a 	tst.w	r3, sl
 80168c0:	e7e9      	b.n	8016896 <_strtod_l+0x8fe>
 80168c2:	f7ff fb4c 	bl	8015f5e <sulp>
 80168c6:	4602      	mov	r2, r0
 80168c8:	460b      	mov	r3, r1
 80168ca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80168ce:	f7e9 fceb 	bl	80002a8 <__aeabi_dsub>
 80168d2:	2200      	movs	r2, #0
 80168d4:	2300      	movs	r3, #0
 80168d6:	4682      	mov	sl, r0
 80168d8:	468b      	mov	fp, r1
 80168da:	f7ea f905 	bl	8000ae8 <__aeabi_dcmpeq>
 80168de:	2800      	cmp	r0, #0
 80168e0:	f47f ae11 	bne.w	8016506 <_strtod_l+0x56e>
 80168e4:	e73f      	b.n	8016766 <_strtod_l+0x7ce>
 80168e6:	4641      	mov	r1, r8
 80168e8:	4620      	mov	r0, r4
 80168ea:	f001 ff1a 	bl	8018722 <__ratio>
 80168ee:	ec57 6b10 	vmov	r6, r7, d0
 80168f2:	2200      	movs	r2, #0
 80168f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80168f8:	ee10 0a10 	vmov	r0, s0
 80168fc:	4639      	mov	r1, r7
 80168fe:	f7ea f907 	bl	8000b10 <__aeabi_dcmple>
 8016902:	2800      	cmp	r0, #0
 8016904:	d077      	beq.n	80169f6 <_strtod_l+0xa5e>
 8016906:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016908:	2b00      	cmp	r3, #0
 801690a:	d04a      	beq.n	80169a2 <_strtod_l+0xa0a>
 801690c:	4b68      	ldr	r3, [pc, #416]	; (8016ab0 <_strtod_l+0xb18>)
 801690e:	2200      	movs	r2, #0
 8016910:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8016914:	4f66      	ldr	r7, [pc, #408]	; (8016ab0 <_strtod_l+0xb18>)
 8016916:	2600      	movs	r6, #0
 8016918:	4b62      	ldr	r3, [pc, #392]	; (8016aa4 <_strtod_l+0xb0c>)
 801691a:	402b      	ands	r3, r5
 801691c:	930f      	str	r3, [sp, #60]	; 0x3c
 801691e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016920:	4b64      	ldr	r3, [pc, #400]	; (8016ab4 <_strtod_l+0xb1c>)
 8016922:	429a      	cmp	r2, r3
 8016924:	f040 80ce 	bne.w	8016ac4 <_strtod_l+0xb2c>
 8016928:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801692c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016930:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8016934:	ec4b ab10 	vmov	d0, sl, fp
 8016938:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 801693c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8016940:	f001 fe2a 	bl	8018598 <__ulp>
 8016944:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016948:	ec53 2b10 	vmov	r2, r3, d0
 801694c:	f7e9 fe64 	bl	8000618 <__aeabi_dmul>
 8016950:	4652      	mov	r2, sl
 8016952:	465b      	mov	r3, fp
 8016954:	f7e9 fcaa 	bl	80002ac <__adddf3>
 8016958:	460b      	mov	r3, r1
 801695a:	4952      	ldr	r1, [pc, #328]	; (8016aa4 <_strtod_l+0xb0c>)
 801695c:	4a56      	ldr	r2, [pc, #344]	; (8016ab8 <_strtod_l+0xb20>)
 801695e:	4019      	ands	r1, r3
 8016960:	4291      	cmp	r1, r2
 8016962:	4682      	mov	sl, r0
 8016964:	d95b      	bls.n	8016a1e <_strtod_l+0xa86>
 8016966:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016968:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801696c:	4293      	cmp	r3, r2
 801696e:	d103      	bne.n	8016978 <_strtod_l+0x9e0>
 8016970:	9b08      	ldr	r3, [sp, #32]
 8016972:	3301      	adds	r3, #1
 8016974:	f43f ad2e 	beq.w	80163d4 <_strtod_l+0x43c>
 8016978:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8016aa8 <_strtod_l+0xb10>
 801697c:	f04f 3aff 	mov.w	sl, #4294967295
 8016980:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016982:	4648      	mov	r0, r9
 8016984:	f001 fb70 	bl	8018068 <_Bfree>
 8016988:	9905      	ldr	r1, [sp, #20]
 801698a:	4648      	mov	r0, r9
 801698c:	f001 fb6c 	bl	8018068 <_Bfree>
 8016990:	4641      	mov	r1, r8
 8016992:	4648      	mov	r0, r9
 8016994:	f001 fb68 	bl	8018068 <_Bfree>
 8016998:	4621      	mov	r1, r4
 801699a:	4648      	mov	r0, r9
 801699c:	f001 fb64 	bl	8018068 <_Bfree>
 80169a0:	e619      	b.n	80165d6 <_strtod_l+0x63e>
 80169a2:	f1ba 0f00 	cmp.w	sl, #0
 80169a6:	d11a      	bne.n	80169de <_strtod_l+0xa46>
 80169a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80169ac:	b9eb      	cbnz	r3, 80169ea <_strtod_l+0xa52>
 80169ae:	2200      	movs	r2, #0
 80169b0:	4b3f      	ldr	r3, [pc, #252]	; (8016ab0 <_strtod_l+0xb18>)
 80169b2:	4630      	mov	r0, r6
 80169b4:	4639      	mov	r1, r7
 80169b6:	f7ea f8a1 	bl	8000afc <__aeabi_dcmplt>
 80169ba:	b9c8      	cbnz	r0, 80169f0 <_strtod_l+0xa58>
 80169bc:	4630      	mov	r0, r6
 80169be:	4639      	mov	r1, r7
 80169c0:	2200      	movs	r2, #0
 80169c2:	4b3e      	ldr	r3, [pc, #248]	; (8016abc <_strtod_l+0xb24>)
 80169c4:	f7e9 fe28 	bl	8000618 <__aeabi_dmul>
 80169c8:	4606      	mov	r6, r0
 80169ca:	460f      	mov	r7, r1
 80169cc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80169d0:	9618      	str	r6, [sp, #96]	; 0x60
 80169d2:	9319      	str	r3, [sp, #100]	; 0x64
 80169d4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80169d8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80169dc:	e79c      	b.n	8016918 <_strtod_l+0x980>
 80169de:	f1ba 0f01 	cmp.w	sl, #1
 80169e2:	d102      	bne.n	80169ea <_strtod_l+0xa52>
 80169e4:	2d00      	cmp	r5, #0
 80169e6:	f43f ad8e 	beq.w	8016506 <_strtod_l+0x56e>
 80169ea:	2200      	movs	r2, #0
 80169ec:	4b34      	ldr	r3, [pc, #208]	; (8016ac0 <_strtod_l+0xb28>)
 80169ee:	e78f      	b.n	8016910 <_strtod_l+0x978>
 80169f0:	2600      	movs	r6, #0
 80169f2:	4f32      	ldr	r7, [pc, #200]	; (8016abc <_strtod_l+0xb24>)
 80169f4:	e7ea      	b.n	80169cc <_strtod_l+0xa34>
 80169f6:	4b31      	ldr	r3, [pc, #196]	; (8016abc <_strtod_l+0xb24>)
 80169f8:	4630      	mov	r0, r6
 80169fa:	4639      	mov	r1, r7
 80169fc:	2200      	movs	r2, #0
 80169fe:	f7e9 fe0b 	bl	8000618 <__aeabi_dmul>
 8016a02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016a04:	4606      	mov	r6, r0
 8016a06:	460f      	mov	r7, r1
 8016a08:	b933      	cbnz	r3, 8016a18 <_strtod_l+0xa80>
 8016a0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016a0e:	9010      	str	r0, [sp, #64]	; 0x40
 8016a10:	9311      	str	r3, [sp, #68]	; 0x44
 8016a12:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8016a16:	e7df      	b.n	80169d8 <_strtod_l+0xa40>
 8016a18:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8016a1c:	e7f9      	b.n	8016a12 <_strtod_l+0xa7a>
 8016a1e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8016a22:	9b04      	ldr	r3, [sp, #16]
 8016a24:	2b00      	cmp	r3, #0
 8016a26:	d1ab      	bne.n	8016980 <_strtod_l+0x9e8>
 8016a28:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016a2c:	0d1b      	lsrs	r3, r3, #20
 8016a2e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016a30:	051b      	lsls	r3, r3, #20
 8016a32:	429a      	cmp	r2, r3
 8016a34:	465d      	mov	r5, fp
 8016a36:	d1a3      	bne.n	8016980 <_strtod_l+0x9e8>
 8016a38:	4639      	mov	r1, r7
 8016a3a:	4630      	mov	r0, r6
 8016a3c:	f7ea f89c 	bl	8000b78 <__aeabi_d2iz>
 8016a40:	f7e9 fd80 	bl	8000544 <__aeabi_i2d>
 8016a44:	460b      	mov	r3, r1
 8016a46:	4602      	mov	r2, r0
 8016a48:	4639      	mov	r1, r7
 8016a4a:	4630      	mov	r0, r6
 8016a4c:	f7e9 fc2c 	bl	80002a8 <__aeabi_dsub>
 8016a50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016a52:	4606      	mov	r6, r0
 8016a54:	460f      	mov	r7, r1
 8016a56:	b933      	cbnz	r3, 8016a66 <_strtod_l+0xace>
 8016a58:	f1ba 0f00 	cmp.w	sl, #0
 8016a5c:	d103      	bne.n	8016a66 <_strtod_l+0xace>
 8016a5e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8016a62:	2d00      	cmp	r5, #0
 8016a64:	d06d      	beq.n	8016b42 <_strtod_l+0xbaa>
 8016a66:	a30a      	add	r3, pc, #40	; (adr r3, 8016a90 <_strtod_l+0xaf8>)
 8016a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a6c:	4630      	mov	r0, r6
 8016a6e:	4639      	mov	r1, r7
 8016a70:	f7ea f844 	bl	8000afc <__aeabi_dcmplt>
 8016a74:	2800      	cmp	r0, #0
 8016a76:	f47f acb8 	bne.w	80163ea <_strtod_l+0x452>
 8016a7a:	a307      	add	r3, pc, #28	; (adr r3, 8016a98 <_strtod_l+0xb00>)
 8016a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a80:	4630      	mov	r0, r6
 8016a82:	4639      	mov	r1, r7
 8016a84:	f7ea f858 	bl	8000b38 <__aeabi_dcmpgt>
 8016a88:	2800      	cmp	r0, #0
 8016a8a:	f43f af79 	beq.w	8016980 <_strtod_l+0x9e8>
 8016a8e:	e4ac      	b.n	80163ea <_strtod_l+0x452>
 8016a90:	94a03595 	.word	0x94a03595
 8016a94:	3fdfffff 	.word	0x3fdfffff
 8016a98:	35afe535 	.word	0x35afe535
 8016a9c:	3fe00000 	.word	0x3fe00000
 8016aa0:	000fffff 	.word	0x000fffff
 8016aa4:	7ff00000 	.word	0x7ff00000
 8016aa8:	7fefffff 	.word	0x7fefffff
 8016aac:	39500000 	.word	0x39500000
 8016ab0:	3ff00000 	.word	0x3ff00000
 8016ab4:	7fe00000 	.word	0x7fe00000
 8016ab8:	7c9fffff 	.word	0x7c9fffff
 8016abc:	3fe00000 	.word	0x3fe00000
 8016ac0:	bff00000 	.word	0xbff00000
 8016ac4:	9b04      	ldr	r3, [sp, #16]
 8016ac6:	b333      	cbz	r3, 8016b16 <_strtod_l+0xb7e>
 8016ac8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016aca:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8016ace:	d822      	bhi.n	8016b16 <_strtod_l+0xb7e>
 8016ad0:	a327      	add	r3, pc, #156	; (adr r3, 8016b70 <_strtod_l+0xbd8>)
 8016ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ad6:	4630      	mov	r0, r6
 8016ad8:	4639      	mov	r1, r7
 8016ada:	f7ea f819 	bl	8000b10 <__aeabi_dcmple>
 8016ade:	b1a0      	cbz	r0, 8016b0a <_strtod_l+0xb72>
 8016ae0:	4639      	mov	r1, r7
 8016ae2:	4630      	mov	r0, r6
 8016ae4:	f7ea f870 	bl	8000bc8 <__aeabi_d2uiz>
 8016ae8:	2800      	cmp	r0, #0
 8016aea:	bf08      	it	eq
 8016aec:	2001      	moveq	r0, #1
 8016aee:	f7e9 fd19 	bl	8000524 <__aeabi_ui2d>
 8016af2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016af4:	4606      	mov	r6, r0
 8016af6:	460f      	mov	r7, r1
 8016af8:	bb03      	cbnz	r3, 8016b3c <_strtod_l+0xba4>
 8016afa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016afe:	9012      	str	r0, [sp, #72]	; 0x48
 8016b00:	9313      	str	r3, [sp, #76]	; 0x4c
 8016b02:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8016b06:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8016b0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016b0c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016b0e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8016b12:	1a9b      	subs	r3, r3, r2
 8016b14:	930b      	str	r3, [sp, #44]	; 0x2c
 8016b16:	ed9d 0b08 	vldr	d0, [sp, #32]
 8016b1a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8016b1e:	f001 fd3b 	bl	8018598 <__ulp>
 8016b22:	4650      	mov	r0, sl
 8016b24:	ec53 2b10 	vmov	r2, r3, d0
 8016b28:	4659      	mov	r1, fp
 8016b2a:	f7e9 fd75 	bl	8000618 <__aeabi_dmul>
 8016b2e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016b32:	f7e9 fbbb 	bl	80002ac <__adddf3>
 8016b36:	4682      	mov	sl, r0
 8016b38:	468b      	mov	fp, r1
 8016b3a:	e772      	b.n	8016a22 <_strtod_l+0xa8a>
 8016b3c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8016b40:	e7df      	b.n	8016b02 <_strtod_l+0xb6a>
 8016b42:	a30d      	add	r3, pc, #52	; (adr r3, 8016b78 <_strtod_l+0xbe0>)
 8016b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b48:	f7e9 ffd8 	bl	8000afc <__aeabi_dcmplt>
 8016b4c:	e79c      	b.n	8016a88 <_strtod_l+0xaf0>
 8016b4e:	2300      	movs	r3, #0
 8016b50:	930d      	str	r3, [sp, #52]	; 0x34
 8016b52:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016b54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016b56:	6013      	str	r3, [r2, #0]
 8016b58:	f7ff ba61 	b.w	801601e <_strtod_l+0x86>
 8016b5c:	2b65      	cmp	r3, #101	; 0x65
 8016b5e:	f04f 0200 	mov.w	r2, #0
 8016b62:	f43f ab4e 	beq.w	8016202 <_strtod_l+0x26a>
 8016b66:	2101      	movs	r1, #1
 8016b68:	4614      	mov	r4, r2
 8016b6a:	9104      	str	r1, [sp, #16]
 8016b6c:	f7ff bacb 	b.w	8016106 <_strtod_l+0x16e>
 8016b70:	ffc00000 	.word	0xffc00000
 8016b74:	41dfffff 	.word	0x41dfffff
 8016b78:	94a03595 	.word	0x94a03595
 8016b7c:	3fcfffff 	.word	0x3fcfffff

08016b80 <_strtod_r>:
 8016b80:	4b05      	ldr	r3, [pc, #20]	; (8016b98 <_strtod_r+0x18>)
 8016b82:	681b      	ldr	r3, [r3, #0]
 8016b84:	b410      	push	{r4}
 8016b86:	6a1b      	ldr	r3, [r3, #32]
 8016b88:	4c04      	ldr	r4, [pc, #16]	; (8016b9c <_strtod_r+0x1c>)
 8016b8a:	2b00      	cmp	r3, #0
 8016b8c:	bf08      	it	eq
 8016b8e:	4623      	moveq	r3, r4
 8016b90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016b94:	f7ff ba00 	b.w	8015f98 <_strtod_l>
 8016b98:	20000e5c 	.word	0x20000e5c
 8016b9c:	20000ec0 	.word	0x20000ec0

08016ba0 <_strtol_l.isra.0>:
 8016ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016ba4:	4680      	mov	r8, r0
 8016ba6:	4689      	mov	r9, r1
 8016ba8:	4692      	mov	sl, r2
 8016baa:	461e      	mov	r6, r3
 8016bac:	460f      	mov	r7, r1
 8016bae:	463d      	mov	r5, r7
 8016bb0:	9808      	ldr	r0, [sp, #32]
 8016bb2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016bb6:	f001 f9ed 	bl	8017f94 <__locale_ctype_ptr_l>
 8016bba:	4420      	add	r0, r4
 8016bbc:	7843      	ldrb	r3, [r0, #1]
 8016bbe:	f013 0308 	ands.w	r3, r3, #8
 8016bc2:	d132      	bne.n	8016c2a <_strtol_l.isra.0+0x8a>
 8016bc4:	2c2d      	cmp	r4, #45	; 0x2d
 8016bc6:	d132      	bne.n	8016c2e <_strtol_l.isra.0+0x8e>
 8016bc8:	787c      	ldrb	r4, [r7, #1]
 8016bca:	1cbd      	adds	r5, r7, #2
 8016bcc:	2201      	movs	r2, #1
 8016bce:	2e00      	cmp	r6, #0
 8016bd0:	d05d      	beq.n	8016c8e <_strtol_l.isra.0+0xee>
 8016bd2:	2e10      	cmp	r6, #16
 8016bd4:	d109      	bne.n	8016bea <_strtol_l.isra.0+0x4a>
 8016bd6:	2c30      	cmp	r4, #48	; 0x30
 8016bd8:	d107      	bne.n	8016bea <_strtol_l.isra.0+0x4a>
 8016bda:	782b      	ldrb	r3, [r5, #0]
 8016bdc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016be0:	2b58      	cmp	r3, #88	; 0x58
 8016be2:	d14f      	bne.n	8016c84 <_strtol_l.isra.0+0xe4>
 8016be4:	786c      	ldrb	r4, [r5, #1]
 8016be6:	2610      	movs	r6, #16
 8016be8:	3502      	adds	r5, #2
 8016bea:	2a00      	cmp	r2, #0
 8016bec:	bf14      	ite	ne
 8016bee:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8016bf2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8016bf6:	2700      	movs	r7, #0
 8016bf8:	fbb1 fcf6 	udiv	ip, r1, r6
 8016bfc:	4638      	mov	r0, r7
 8016bfe:	fb06 1e1c 	mls	lr, r6, ip, r1
 8016c02:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8016c06:	2b09      	cmp	r3, #9
 8016c08:	d817      	bhi.n	8016c3a <_strtol_l.isra.0+0x9a>
 8016c0a:	461c      	mov	r4, r3
 8016c0c:	42a6      	cmp	r6, r4
 8016c0e:	dd23      	ble.n	8016c58 <_strtol_l.isra.0+0xb8>
 8016c10:	1c7b      	adds	r3, r7, #1
 8016c12:	d007      	beq.n	8016c24 <_strtol_l.isra.0+0x84>
 8016c14:	4584      	cmp	ip, r0
 8016c16:	d31c      	bcc.n	8016c52 <_strtol_l.isra.0+0xb2>
 8016c18:	d101      	bne.n	8016c1e <_strtol_l.isra.0+0x7e>
 8016c1a:	45a6      	cmp	lr, r4
 8016c1c:	db19      	blt.n	8016c52 <_strtol_l.isra.0+0xb2>
 8016c1e:	fb00 4006 	mla	r0, r0, r6, r4
 8016c22:	2701      	movs	r7, #1
 8016c24:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016c28:	e7eb      	b.n	8016c02 <_strtol_l.isra.0+0x62>
 8016c2a:	462f      	mov	r7, r5
 8016c2c:	e7bf      	b.n	8016bae <_strtol_l.isra.0+0xe>
 8016c2e:	2c2b      	cmp	r4, #43	; 0x2b
 8016c30:	bf04      	itt	eq
 8016c32:	1cbd      	addeq	r5, r7, #2
 8016c34:	787c      	ldrbeq	r4, [r7, #1]
 8016c36:	461a      	mov	r2, r3
 8016c38:	e7c9      	b.n	8016bce <_strtol_l.isra.0+0x2e>
 8016c3a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8016c3e:	2b19      	cmp	r3, #25
 8016c40:	d801      	bhi.n	8016c46 <_strtol_l.isra.0+0xa6>
 8016c42:	3c37      	subs	r4, #55	; 0x37
 8016c44:	e7e2      	b.n	8016c0c <_strtol_l.isra.0+0x6c>
 8016c46:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8016c4a:	2b19      	cmp	r3, #25
 8016c4c:	d804      	bhi.n	8016c58 <_strtol_l.isra.0+0xb8>
 8016c4e:	3c57      	subs	r4, #87	; 0x57
 8016c50:	e7dc      	b.n	8016c0c <_strtol_l.isra.0+0x6c>
 8016c52:	f04f 37ff 	mov.w	r7, #4294967295
 8016c56:	e7e5      	b.n	8016c24 <_strtol_l.isra.0+0x84>
 8016c58:	1c7b      	adds	r3, r7, #1
 8016c5a:	d108      	bne.n	8016c6e <_strtol_l.isra.0+0xce>
 8016c5c:	2322      	movs	r3, #34	; 0x22
 8016c5e:	f8c8 3000 	str.w	r3, [r8]
 8016c62:	4608      	mov	r0, r1
 8016c64:	f1ba 0f00 	cmp.w	sl, #0
 8016c68:	d107      	bne.n	8016c7a <_strtol_l.isra.0+0xda>
 8016c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016c6e:	b102      	cbz	r2, 8016c72 <_strtol_l.isra.0+0xd2>
 8016c70:	4240      	negs	r0, r0
 8016c72:	f1ba 0f00 	cmp.w	sl, #0
 8016c76:	d0f8      	beq.n	8016c6a <_strtol_l.isra.0+0xca>
 8016c78:	b10f      	cbz	r7, 8016c7e <_strtol_l.isra.0+0xde>
 8016c7a:	f105 39ff 	add.w	r9, r5, #4294967295
 8016c7e:	f8ca 9000 	str.w	r9, [sl]
 8016c82:	e7f2      	b.n	8016c6a <_strtol_l.isra.0+0xca>
 8016c84:	2430      	movs	r4, #48	; 0x30
 8016c86:	2e00      	cmp	r6, #0
 8016c88:	d1af      	bne.n	8016bea <_strtol_l.isra.0+0x4a>
 8016c8a:	2608      	movs	r6, #8
 8016c8c:	e7ad      	b.n	8016bea <_strtol_l.isra.0+0x4a>
 8016c8e:	2c30      	cmp	r4, #48	; 0x30
 8016c90:	d0a3      	beq.n	8016bda <_strtol_l.isra.0+0x3a>
 8016c92:	260a      	movs	r6, #10
 8016c94:	e7a9      	b.n	8016bea <_strtol_l.isra.0+0x4a>
	...

08016c98 <_strtol_r>:
 8016c98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016c9a:	4c06      	ldr	r4, [pc, #24]	; (8016cb4 <_strtol_r+0x1c>)
 8016c9c:	4d06      	ldr	r5, [pc, #24]	; (8016cb8 <_strtol_r+0x20>)
 8016c9e:	6824      	ldr	r4, [r4, #0]
 8016ca0:	6a24      	ldr	r4, [r4, #32]
 8016ca2:	2c00      	cmp	r4, #0
 8016ca4:	bf08      	it	eq
 8016ca6:	462c      	moveq	r4, r5
 8016ca8:	9400      	str	r4, [sp, #0]
 8016caa:	f7ff ff79 	bl	8016ba0 <_strtol_l.isra.0>
 8016cae:	b003      	add	sp, #12
 8016cb0:	bd30      	pop	{r4, r5, pc}
 8016cb2:	bf00      	nop
 8016cb4:	20000e5c 	.word	0x20000e5c
 8016cb8:	20000ec0 	.word	0x20000ec0

08016cbc <quorem>:
 8016cbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016cc0:	6903      	ldr	r3, [r0, #16]
 8016cc2:	690c      	ldr	r4, [r1, #16]
 8016cc4:	42a3      	cmp	r3, r4
 8016cc6:	4680      	mov	r8, r0
 8016cc8:	f2c0 8082 	blt.w	8016dd0 <quorem+0x114>
 8016ccc:	3c01      	subs	r4, #1
 8016cce:	f101 0714 	add.w	r7, r1, #20
 8016cd2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8016cd6:	f100 0614 	add.w	r6, r0, #20
 8016cda:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8016cde:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8016ce2:	eb06 030c 	add.w	r3, r6, ip
 8016ce6:	3501      	adds	r5, #1
 8016ce8:	eb07 090c 	add.w	r9, r7, ip
 8016cec:	9301      	str	r3, [sp, #4]
 8016cee:	fbb0 f5f5 	udiv	r5, r0, r5
 8016cf2:	b395      	cbz	r5, 8016d5a <quorem+0x9e>
 8016cf4:	f04f 0a00 	mov.w	sl, #0
 8016cf8:	4638      	mov	r0, r7
 8016cfa:	46b6      	mov	lr, r6
 8016cfc:	46d3      	mov	fp, sl
 8016cfe:	f850 2b04 	ldr.w	r2, [r0], #4
 8016d02:	b293      	uxth	r3, r2
 8016d04:	fb05 a303 	mla	r3, r5, r3, sl
 8016d08:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016d0c:	b29b      	uxth	r3, r3
 8016d0e:	ebab 0303 	sub.w	r3, fp, r3
 8016d12:	0c12      	lsrs	r2, r2, #16
 8016d14:	f8de b000 	ldr.w	fp, [lr]
 8016d18:	fb05 a202 	mla	r2, r5, r2, sl
 8016d1c:	fa13 f38b 	uxtah	r3, r3, fp
 8016d20:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8016d24:	fa1f fb82 	uxth.w	fp, r2
 8016d28:	f8de 2000 	ldr.w	r2, [lr]
 8016d2c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8016d30:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016d34:	b29b      	uxth	r3, r3
 8016d36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016d3a:	4581      	cmp	r9, r0
 8016d3c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8016d40:	f84e 3b04 	str.w	r3, [lr], #4
 8016d44:	d2db      	bcs.n	8016cfe <quorem+0x42>
 8016d46:	f856 300c 	ldr.w	r3, [r6, ip]
 8016d4a:	b933      	cbnz	r3, 8016d5a <quorem+0x9e>
 8016d4c:	9b01      	ldr	r3, [sp, #4]
 8016d4e:	3b04      	subs	r3, #4
 8016d50:	429e      	cmp	r6, r3
 8016d52:	461a      	mov	r2, r3
 8016d54:	d330      	bcc.n	8016db8 <quorem+0xfc>
 8016d56:	f8c8 4010 	str.w	r4, [r8, #16]
 8016d5a:	4640      	mov	r0, r8
 8016d5c:	f001 fba4 	bl	80184a8 <__mcmp>
 8016d60:	2800      	cmp	r0, #0
 8016d62:	db25      	blt.n	8016db0 <quorem+0xf4>
 8016d64:	3501      	adds	r5, #1
 8016d66:	4630      	mov	r0, r6
 8016d68:	f04f 0c00 	mov.w	ip, #0
 8016d6c:	f857 2b04 	ldr.w	r2, [r7], #4
 8016d70:	f8d0 e000 	ldr.w	lr, [r0]
 8016d74:	b293      	uxth	r3, r2
 8016d76:	ebac 0303 	sub.w	r3, ip, r3
 8016d7a:	0c12      	lsrs	r2, r2, #16
 8016d7c:	fa13 f38e 	uxtah	r3, r3, lr
 8016d80:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8016d84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016d88:	b29b      	uxth	r3, r3
 8016d8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016d8e:	45b9      	cmp	r9, r7
 8016d90:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8016d94:	f840 3b04 	str.w	r3, [r0], #4
 8016d98:	d2e8      	bcs.n	8016d6c <quorem+0xb0>
 8016d9a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8016d9e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8016da2:	b92a      	cbnz	r2, 8016db0 <quorem+0xf4>
 8016da4:	3b04      	subs	r3, #4
 8016da6:	429e      	cmp	r6, r3
 8016da8:	461a      	mov	r2, r3
 8016daa:	d30b      	bcc.n	8016dc4 <quorem+0x108>
 8016dac:	f8c8 4010 	str.w	r4, [r8, #16]
 8016db0:	4628      	mov	r0, r5
 8016db2:	b003      	add	sp, #12
 8016db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016db8:	6812      	ldr	r2, [r2, #0]
 8016dba:	3b04      	subs	r3, #4
 8016dbc:	2a00      	cmp	r2, #0
 8016dbe:	d1ca      	bne.n	8016d56 <quorem+0x9a>
 8016dc0:	3c01      	subs	r4, #1
 8016dc2:	e7c5      	b.n	8016d50 <quorem+0x94>
 8016dc4:	6812      	ldr	r2, [r2, #0]
 8016dc6:	3b04      	subs	r3, #4
 8016dc8:	2a00      	cmp	r2, #0
 8016dca:	d1ef      	bne.n	8016dac <quorem+0xf0>
 8016dcc:	3c01      	subs	r4, #1
 8016dce:	e7ea      	b.n	8016da6 <quorem+0xea>
 8016dd0:	2000      	movs	r0, #0
 8016dd2:	e7ee      	b.n	8016db2 <quorem+0xf6>
 8016dd4:	0000      	movs	r0, r0
	...

08016dd8 <_dtoa_r>:
 8016dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ddc:	ec57 6b10 	vmov	r6, r7, d0
 8016de0:	b097      	sub	sp, #92	; 0x5c
 8016de2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8016de4:	9106      	str	r1, [sp, #24]
 8016de6:	4604      	mov	r4, r0
 8016de8:	920b      	str	r2, [sp, #44]	; 0x2c
 8016dea:	9312      	str	r3, [sp, #72]	; 0x48
 8016dec:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8016df0:	e9cd 6700 	strd	r6, r7, [sp]
 8016df4:	b93d      	cbnz	r5, 8016e06 <_dtoa_r+0x2e>
 8016df6:	2010      	movs	r0, #16
 8016df8:	f7fe f8ea 	bl	8014fd0 <malloc>
 8016dfc:	6260      	str	r0, [r4, #36]	; 0x24
 8016dfe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8016e02:	6005      	str	r5, [r0, #0]
 8016e04:	60c5      	str	r5, [r0, #12]
 8016e06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016e08:	6819      	ldr	r1, [r3, #0]
 8016e0a:	b151      	cbz	r1, 8016e22 <_dtoa_r+0x4a>
 8016e0c:	685a      	ldr	r2, [r3, #4]
 8016e0e:	604a      	str	r2, [r1, #4]
 8016e10:	2301      	movs	r3, #1
 8016e12:	4093      	lsls	r3, r2
 8016e14:	608b      	str	r3, [r1, #8]
 8016e16:	4620      	mov	r0, r4
 8016e18:	f001 f926 	bl	8018068 <_Bfree>
 8016e1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016e1e:	2200      	movs	r2, #0
 8016e20:	601a      	str	r2, [r3, #0]
 8016e22:	1e3b      	subs	r3, r7, #0
 8016e24:	bfbb      	ittet	lt
 8016e26:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8016e2a:	9301      	strlt	r3, [sp, #4]
 8016e2c:	2300      	movge	r3, #0
 8016e2e:	2201      	movlt	r2, #1
 8016e30:	bfac      	ite	ge
 8016e32:	f8c8 3000 	strge.w	r3, [r8]
 8016e36:	f8c8 2000 	strlt.w	r2, [r8]
 8016e3a:	4baf      	ldr	r3, [pc, #700]	; (80170f8 <_dtoa_r+0x320>)
 8016e3c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8016e40:	ea33 0308 	bics.w	r3, r3, r8
 8016e44:	d114      	bne.n	8016e70 <_dtoa_r+0x98>
 8016e46:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016e48:	f242 730f 	movw	r3, #9999	; 0x270f
 8016e4c:	6013      	str	r3, [r2, #0]
 8016e4e:	9b00      	ldr	r3, [sp, #0]
 8016e50:	b923      	cbnz	r3, 8016e5c <_dtoa_r+0x84>
 8016e52:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8016e56:	2800      	cmp	r0, #0
 8016e58:	f000 8542 	beq.w	80178e0 <_dtoa_r+0xb08>
 8016e5c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016e5e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 801710c <_dtoa_r+0x334>
 8016e62:	2b00      	cmp	r3, #0
 8016e64:	f000 8544 	beq.w	80178f0 <_dtoa_r+0xb18>
 8016e68:	f10b 0303 	add.w	r3, fp, #3
 8016e6c:	f000 bd3e 	b.w	80178ec <_dtoa_r+0xb14>
 8016e70:	e9dd 6700 	ldrd	r6, r7, [sp]
 8016e74:	2200      	movs	r2, #0
 8016e76:	2300      	movs	r3, #0
 8016e78:	4630      	mov	r0, r6
 8016e7a:	4639      	mov	r1, r7
 8016e7c:	f7e9 fe34 	bl	8000ae8 <__aeabi_dcmpeq>
 8016e80:	4681      	mov	r9, r0
 8016e82:	b168      	cbz	r0, 8016ea0 <_dtoa_r+0xc8>
 8016e84:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016e86:	2301      	movs	r3, #1
 8016e88:	6013      	str	r3, [r2, #0]
 8016e8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016e8c:	2b00      	cmp	r3, #0
 8016e8e:	f000 8524 	beq.w	80178da <_dtoa_r+0xb02>
 8016e92:	4b9a      	ldr	r3, [pc, #616]	; (80170fc <_dtoa_r+0x324>)
 8016e94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016e96:	f103 3bff 	add.w	fp, r3, #4294967295
 8016e9a:	6013      	str	r3, [r2, #0]
 8016e9c:	f000 bd28 	b.w	80178f0 <_dtoa_r+0xb18>
 8016ea0:	aa14      	add	r2, sp, #80	; 0x50
 8016ea2:	a915      	add	r1, sp, #84	; 0x54
 8016ea4:	ec47 6b10 	vmov	d0, r6, r7
 8016ea8:	4620      	mov	r0, r4
 8016eaa:	f001 fbeb 	bl	8018684 <__d2b>
 8016eae:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8016eb2:	9004      	str	r0, [sp, #16]
 8016eb4:	2d00      	cmp	r5, #0
 8016eb6:	d07c      	beq.n	8016fb2 <_dtoa_r+0x1da>
 8016eb8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8016ebc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8016ec0:	46b2      	mov	sl, r6
 8016ec2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8016ec6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8016eca:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8016ece:	2200      	movs	r2, #0
 8016ed0:	4b8b      	ldr	r3, [pc, #556]	; (8017100 <_dtoa_r+0x328>)
 8016ed2:	4650      	mov	r0, sl
 8016ed4:	4659      	mov	r1, fp
 8016ed6:	f7e9 f9e7 	bl	80002a8 <__aeabi_dsub>
 8016eda:	a381      	add	r3, pc, #516	; (adr r3, 80170e0 <_dtoa_r+0x308>)
 8016edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ee0:	f7e9 fb9a 	bl	8000618 <__aeabi_dmul>
 8016ee4:	a380      	add	r3, pc, #512	; (adr r3, 80170e8 <_dtoa_r+0x310>)
 8016ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016eea:	f7e9 f9df 	bl	80002ac <__adddf3>
 8016eee:	4606      	mov	r6, r0
 8016ef0:	4628      	mov	r0, r5
 8016ef2:	460f      	mov	r7, r1
 8016ef4:	f7e9 fb26 	bl	8000544 <__aeabi_i2d>
 8016ef8:	a37d      	add	r3, pc, #500	; (adr r3, 80170f0 <_dtoa_r+0x318>)
 8016efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016efe:	f7e9 fb8b 	bl	8000618 <__aeabi_dmul>
 8016f02:	4602      	mov	r2, r0
 8016f04:	460b      	mov	r3, r1
 8016f06:	4630      	mov	r0, r6
 8016f08:	4639      	mov	r1, r7
 8016f0a:	f7e9 f9cf 	bl	80002ac <__adddf3>
 8016f0e:	4606      	mov	r6, r0
 8016f10:	460f      	mov	r7, r1
 8016f12:	f7e9 fe31 	bl	8000b78 <__aeabi_d2iz>
 8016f16:	2200      	movs	r2, #0
 8016f18:	4682      	mov	sl, r0
 8016f1a:	2300      	movs	r3, #0
 8016f1c:	4630      	mov	r0, r6
 8016f1e:	4639      	mov	r1, r7
 8016f20:	f7e9 fdec 	bl	8000afc <__aeabi_dcmplt>
 8016f24:	b148      	cbz	r0, 8016f3a <_dtoa_r+0x162>
 8016f26:	4650      	mov	r0, sl
 8016f28:	f7e9 fb0c 	bl	8000544 <__aeabi_i2d>
 8016f2c:	4632      	mov	r2, r6
 8016f2e:	463b      	mov	r3, r7
 8016f30:	f7e9 fdda 	bl	8000ae8 <__aeabi_dcmpeq>
 8016f34:	b908      	cbnz	r0, 8016f3a <_dtoa_r+0x162>
 8016f36:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016f3a:	f1ba 0f16 	cmp.w	sl, #22
 8016f3e:	d859      	bhi.n	8016ff4 <_dtoa_r+0x21c>
 8016f40:	4970      	ldr	r1, [pc, #448]	; (8017104 <_dtoa_r+0x32c>)
 8016f42:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8016f46:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016f4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016f4e:	f7e9 fdf3 	bl	8000b38 <__aeabi_dcmpgt>
 8016f52:	2800      	cmp	r0, #0
 8016f54:	d050      	beq.n	8016ff8 <_dtoa_r+0x220>
 8016f56:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016f5a:	2300      	movs	r3, #0
 8016f5c:	930f      	str	r3, [sp, #60]	; 0x3c
 8016f5e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016f60:	1b5d      	subs	r5, r3, r5
 8016f62:	f1b5 0801 	subs.w	r8, r5, #1
 8016f66:	bf49      	itett	mi
 8016f68:	f1c5 0301 	rsbmi	r3, r5, #1
 8016f6c:	2300      	movpl	r3, #0
 8016f6e:	9305      	strmi	r3, [sp, #20]
 8016f70:	f04f 0800 	movmi.w	r8, #0
 8016f74:	bf58      	it	pl
 8016f76:	9305      	strpl	r3, [sp, #20]
 8016f78:	f1ba 0f00 	cmp.w	sl, #0
 8016f7c:	db3e      	blt.n	8016ffc <_dtoa_r+0x224>
 8016f7e:	2300      	movs	r3, #0
 8016f80:	44d0      	add	r8, sl
 8016f82:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8016f86:	9307      	str	r3, [sp, #28]
 8016f88:	9b06      	ldr	r3, [sp, #24]
 8016f8a:	2b09      	cmp	r3, #9
 8016f8c:	f200 8090 	bhi.w	80170b0 <_dtoa_r+0x2d8>
 8016f90:	2b05      	cmp	r3, #5
 8016f92:	bfc4      	itt	gt
 8016f94:	3b04      	subgt	r3, #4
 8016f96:	9306      	strgt	r3, [sp, #24]
 8016f98:	9b06      	ldr	r3, [sp, #24]
 8016f9a:	f1a3 0302 	sub.w	r3, r3, #2
 8016f9e:	bfcc      	ite	gt
 8016fa0:	2500      	movgt	r5, #0
 8016fa2:	2501      	movle	r5, #1
 8016fa4:	2b03      	cmp	r3, #3
 8016fa6:	f200 808f 	bhi.w	80170c8 <_dtoa_r+0x2f0>
 8016faa:	e8df f003 	tbb	[pc, r3]
 8016fae:	7f7d      	.short	0x7f7d
 8016fb0:	7131      	.short	0x7131
 8016fb2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8016fb6:	441d      	add	r5, r3
 8016fb8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8016fbc:	2820      	cmp	r0, #32
 8016fbe:	dd13      	ble.n	8016fe8 <_dtoa_r+0x210>
 8016fc0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8016fc4:	9b00      	ldr	r3, [sp, #0]
 8016fc6:	fa08 f800 	lsl.w	r8, r8, r0
 8016fca:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8016fce:	fa23 f000 	lsr.w	r0, r3, r0
 8016fd2:	ea48 0000 	orr.w	r0, r8, r0
 8016fd6:	f7e9 faa5 	bl	8000524 <__aeabi_ui2d>
 8016fda:	2301      	movs	r3, #1
 8016fdc:	4682      	mov	sl, r0
 8016fde:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8016fe2:	3d01      	subs	r5, #1
 8016fe4:	9313      	str	r3, [sp, #76]	; 0x4c
 8016fe6:	e772      	b.n	8016ece <_dtoa_r+0xf6>
 8016fe8:	9b00      	ldr	r3, [sp, #0]
 8016fea:	f1c0 0020 	rsb	r0, r0, #32
 8016fee:	fa03 f000 	lsl.w	r0, r3, r0
 8016ff2:	e7f0      	b.n	8016fd6 <_dtoa_r+0x1fe>
 8016ff4:	2301      	movs	r3, #1
 8016ff6:	e7b1      	b.n	8016f5c <_dtoa_r+0x184>
 8016ff8:	900f      	str	r0, [sp, #60]	; 0x3c
 8016ffa:	e7b0      	b.n	8016f5e <_dtoa_r+0x186>
 8016ffc:	9b05      	ldr	r3, [sp, #20]
 8016ffe:	eba3 030a 	sub.w	r3, r3, sl
 8017002:	9305      	str	r3, [sp, #20]
 8017004:	f1ca 0300 	rsb	r3, sl, #0
 8017008:	9307      	str	r3, [sp, #28]
 801700a:	2300      	movs	r3, #0
 801700c:	930e      	str	r3, [sp, #56]	; 0x38
 801700e:	e7bb      	b.n	8016f88 <_dtoa_r+0x1b0>
 8017010:	2301      	movs	r3, #1
 8017012:	930a      	str	r3, [sp, #40]	; 0x28
 8017014:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017016:	2b00      	cmp	r3, #0
 8017018:	dd59      	ble.n	80170ce <_dtoa_r+0x2f6>
 801701a:	9302      	str	r3, [sp, #8]
 801701c:	4699      	mov	r9, r3
 801701e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8017020:	2200      	movs	r2, #0
 8017022:	6072      	str	r2, [r6, #4]
 8017024:	2204      	movs	r2, #4
 8017026:	f102 0014 	add.w	r0, r2, #20
 801702a:	4298      	cmp	r0, r3
 801702c:	6871      	ldr	r1, [r6, #4]
 801702e:	d953      	bls.n	80170d8 <_dtoa_r+0x300>
 8017030:	4620      	mov	r0, r4
 8017032:	f000 ffe5 	bl	8018000 <_Balloc>
 8017036:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017038:	6030      	str	r0, [r6, #0]
 801703a:	f1b9 0f0e 	cmp.w	r9, #14
 801703e:	f8d3 b000 	ldr.w	fp, [r3]
 8017042:	f200 80e6 	bhi.w	8017212 <_dtoa_r+0x43a>
 8017046:	2d00      	cmp	r5, #0
 8017048:	f000 80e3 	beq.w	8017212 <_dtoa_r+0x43a>
 801704c:	ed9d 7b00 	vldr	d7, [sp]
 8017050:	f1ba 0f00 	cmp.w	sl, #0
 8017054:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8017058:	dd74      	ble.n	8017144 <_dtoa_r+0x36c>
 801705a:	4a2a      	ldr	r2, [pc, #168]	; (8017104 <_dtoa_r+0x32c>)
 801705c:	f00a 030f 	and.w	r3, sl, #15
 8017060:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8017064:	ed93 7b00 	vldr	d7, [r3]
 8017068:	ea4f 162a 	mov.w	r6, sl, asr #4
 801706c:	06f0      	lsls	r0, r6, #27
 801706e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8017072:	d565      	bpl.n	8017140 <_dtoa_r+0x368>
 8017074:	4b24      	ldr	r3, [pc, #144]	; (8017108 <_dtoa_r+0x330>)
 8017076:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801707a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801707e:	f7e9 fbf5 	bl	800086c <__aeabi_ddiv>
 8017082:	e9cd 0100 	strd	r0, r1, [sp]
 8017086:	f006 060f 	and.w	r6, r6, #15
 801708a:	2503      	movs	r5, #3
 801708c:	4f1e      	ldr	r7, [pc, #120]	; (8017108 <_dtoa_r+0x330>)
 801708e:	e04c      	b.n	801712a <_dtoa_r+0x352>
 8017090:	2301      	movs	r3, #1
 8017092:	930a      	str	r3, [sp, #40]	; 0x28
 8017094:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017096:	4453      	add	r3, sl
 8017098:	f103 0901 	add.w	r9, r3, #1
 801709c:	9302      	str	r3, [sp, #8]
 801709e:	464b      	mov	r3, r9
 80170a0:	2b01      	cmp	r3, #1
 80170a2:	bfb8      	it	lt
 80170a4:	2301      	movlt	r3, #1
 80170a6:	e7ba      	b.n	801701e <_dtoa_r+0x246>
 80170a8:	2300      	movs	r3, #0
 80170aa:	e7b2      	b.n	8017012 <_dtoa_r+0x23a>
 80170ac:	2300      	movs	r3, #0
 80170ae:	e7f0      	b.n	8017092 <_dtoa_r+0x2ba>
 80170b0:	2501      	movs	r5, #1
 80170b2:	2300      	movs	r3, #0
 80170b4:	9306      	str	r3, [sp, #24]
 80170b6:	950a      	str	r5, [sp, #40]	; 0x28
 80170b8:	f04f 33ff 	mov.w	r3, #4294967295
 80170bc:	9302      	str	r3, [sp, #8]
 80170be:	4699      	mov	r9, r3
 80170c0:	2200      	movs	r2, #0
 80170c2:	2312      	movs	r3, #18
 80170c4:	920b      	str	r2, [sp, #44]	; 0x2c
 80170c6:	e7aa      	b.n	801701e <_dtoa_r+0x246>
 80170c8:	2301      	movs	r3, #1
 80170ca:	930a      	str	r3, [sp, #40]	; 0x28
 80170cc:	e7f4      	b.n	80170b8 <_dtoa_r+0x2e0>
 80170ce:	2301      	movs	r3, #1
 80170d0:	9302      	str	r3, [sp, #8]
 80170d2:	4699      	mov	r9, r3
 80170d4:	461a      	mov	r2, r3
 80170d6:	e7f5      	b.n	80170c4 <_dtoa_r+0x2ec>
 80170d8:	3101      	adds	r1, #1
 80170da:	6071      	str	r1, [r6, #4]
 80170dc:	0052      	lsls	r2, r2, #1
 80170de:	e7a2      	b.n	8017026 <_dtoa_r+0x24e>
 80170e0:	636f4361 	.word	0x636f4361
 80170e4:	3fd287a7 	.word	0x3fd287a7
 80170e8:	8b60c8b3 	.word	0x8b60c8b3
 80170ec:	3fc68a28 	.word	0x3fc68a28
 80170f0:	509f79fb 	.word	0x509f79fb
 80170f4:	3fd34413 	.word	0x3fd34413
 80170f8:	7ff00000 	.word	0x7ff00000
 80170fc:	0801b4f4 	.word	0x0801b4f4
 8017100:	3ff80000 	.word	0x3ff80000
 8017104:	0801b3f8 	.word	0x0801b3f8
 8017108:	0801b3d0 	.word	0x0801b3d0
 801710c:	0801b3c1 	.word	0x0801b3c1
 8017110:	07f1      	lsls	r1, r6, #31
 8017112:	d508      	bpl.n	8017126 <_dtoa_r+0x34e>
 8017114:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017118:	e9d7 2300 	ldrd	r2, r3, [r7]
 801711c:	f7e9 fa7c 	bl	8000618 <__aeabi_dmul>
 8017120:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8017124:	3501      	adds	r5, #1
 8017126:	1076      	asrs	r6, r6, #1
 8017128:	3708      	adds	r7, #8
 801712a:	2e00      	cmp	r6, #0
 801712c:	d1f0      	bne.n	8017110 <_dtoa_r+0x338>
 801712e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017132:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017136:	f7e9 fb99 	bl	800086c <__aeabi_ddiv>
 801713a:	e9cd 0100 	strd	r0, r1, [sp]
 801713e:	e01a      	b.n	8017176 <_dtoa_r+0x39e>
 8017140:	2502      	movs	r5, #2
 8017142:	e7a3      	b.n	801708c <_dtoa_r+0x2b4>
 8017144:	f000 80a0 	beq.w	8017288 <_dtoa_r+0x4b0>
 8017148:	f1ca 0600 	rsb	r6, sl, #0
 801714c:	4b9f      	ldr	r3, [pc, #636]	; (80173cc <_dtoa_r+0x5f4>)
 801714e:	4fa0      	ldr	r7, [pc, #640]	; (80173d0 <_dtoa_r+0x5f8>)
 8017150:	f006 020f 	and.w	r2, r6, #15
 8017154:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017158:	e9d3 2300 	ldrd	r2, r3, [r3]
 801715c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8017160:	f7e9 fa5a 	bl	8000618 <__aeabi_dmul>
 8017164:	e9cd 0100 	strd	r0, r1, [sp]
 8017168:	1136      	asrs	r6, r6, #4
 801716a:	2300      	movs	r3, #0
 801716c:	2502      	movs	r5, #2
 801716e:	2e00      	cmp	r6, #0
 8017170:	d17f      	bne.n	8017272 <_dtoa_r+0x49a>
 8017172:	2b00      	cmp	r3, #0
 8017174:	d1e1      	bne.n	801713a <_dtoa_r+0x362>
 8017176:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017178:	2b00      	cmp	r3, #0
 801717a:	f000 8087 	beq.w	801728c <_dtoa_r+0x4b4>
 801717e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017182:	2200      	movs	r2, #0
 8017184:	4b93      	ldr	r3, [pc, #588]	; (80173d4 <_dtoa_r+0x5fc>)
 8017186:	4630      	mov	r0, r6
 8017188:	4639      	mov	r1, r7
 801718a:	f7e9 fcb7 	bl	8000afc <__aeabi_dcmplt>
 801718e:	2800      	cmp	r0, #0
 8017190:	d07c      	beq.n	801728c <_dtoa_r+0x4b4>
 8017192:	f1b9 0f00 	cmp.w	r9, #0
 8017196:	d079      	beq.n	801728c <_dtoa_r+0x4b4>
 8017198:	9b02      	ldr	r3, [sp, #8]
 801719a:	2b00      	cmp	r3, #0
 801719c:	dd35      	ble.n	801720a <_dtoa_r+0x432>
 801719e:	f10a 33ff 	add.w	r3, sl, #4294967295
 80171a2:	9308      	str	r3, [sp, #32]
 80171a4:	4639      	mov	r1, r7
 80171a6:	2200      	movs	r2, #0
 80171a8:	4b8b      	ldr	r3, [pc, #556]	; (80173d8 <_dtoa_r+0x600>)
 80171aa:	4630      	mov	r0, r6
 80171ac:	f7e9 fa34 	bl	8000618 <__aeabi_dmul>
 80171b0:	e9cd 0100 	strd	r0, r1, [sp]
 80171b4:	9f02      	ldr	r7, [sp, #8]
 80171b6:	3501      	adds	r5, #1
 80171b8:	4628      	mov	r0, r5
 80171ba:	f7e9 f9c3 	bl	8000544 <__aeabi_i2d>
 80171be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80171c2:	f7e9 fa29 	bl	8000618 <__aeabi_dmul>
 80171c6:	2200      	movs	r2, #0
 80171c8:	4b84      	ldr	r3, [pc, #528]	; (80173dc <_dtoa_r+0x604>)
 80171ca:	f7e9 f86f 	bl	80002ac <__adddf3>
 80171ce:	4605      	mov	r5, r0
 80171d0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80171d4:	2f00      	cmp	r7, #0
 80171d6:	d15d      	bne.n	8017294 <_dtoa_r+0x4bc>
 80171d8:	2200      	movs	r2, #0
 80171da:	4b81      	ldr	r3, [pc, #516]	; (80173e0 <_dtoa_r+0x608>)
 80171dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80171e0:	f7e9 f862 	bl	80002a8 <__aeabi_dsub>
 80171e4:	462a      	mov	r2, r5
 80171e6:	4633      	mov	r3, r6
 80171e8:	e9cd 0100 	strd	r0, r1, [sp]
 80171ec:	f7e9 fca4 	bl	8000b38 <__aeabi_dcmpgt>
 80171f0:	2800      	cmp	r0, #0
 80171f2:	f040 8288 	bne.w	8017706 <_dtoa_r+0x92e>
 80171f6:	462a      	mov	r2, r5
 80171f8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80171fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017200:	f7e9 fc7c 	bl	8000afc <__aeabi_dcmplt>
 8017204:	2800      	cmp	r0, #0
 8017206:	f040 827c 	bne.w	8017702 <_dtoa_r+0x92a>
 801720a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801720e:	e9cd 2300 	strd	r2, r3, [sp]
 8017212:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017214:	2b00      	cmp	r3, #0
 8017216:	f2c0 8150 	blt.w	80174ba <_dtoa_r+0x6e2>
 801721a:	f1ba 0f0e 	cmp.w	sl, #14
 801721e:	f300 814c 	bgt.w	80174ba <_dtoa_r+0x6e2>
 8017222:	4b6a      	ldr	r3, [pc, #424]	; (80173cc <_dtoa_r+0x5f4>)
 8017224:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017228:	ed93 7b00 	vldr	d7, [r3]
 801722c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801722e:	2b00      	cmp	r3, #0
 8017230:	ed8d 7b02 	vstr	d7, [sp, #8]
 8017234:	f280 80d8 	bge.w	80173e8 <_dtoa_r+0x610>
 8017238:	f1b9 0f00 	cmp.w	r9, #0
 801723c:	f300 80d4 	bgt.w	80173e8 <_dtoa_r+0x610>
 8017240:	f040 825e 	bne.w	8017700 <_dtoa_r+0x928>
 8017244:	2200      	movs	r2, #0
 8017246:	4b66      	ldr	r3, [pc, #408]	; (80173e0 <_dtoa_r+0x608>)
 8017248:	ec51 0b17 	vmov	r0, r1, d7
 801724c:	f7e9 f9e4 	bl	8000618 <__aeabi_dmul>
 8017250:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017254:	f7e9 fc66 	bl	8000b24 <__aeabi_dcmpge>
 8017258:	464f      	mov	r7, r9
 801725a:	464e      	mov	r6, r9
 801725c:	2800      	cmp	r0, #0
 801725e:	f040 8234 	bne.w	80176ca <_dtoa_r+0x8f2>
 8017262:	2331      	movs	r3, #49	; 0x31
 8017264:	f10b 0501 	add.w	r5, fp, #1
 8017268:	f88b 3000 	strb.w	r3, [fp]
 801726c:	f10a 0a01 	add.w	sl, sl, #1
 8017270:	e22f      	b.n	80176d2 <_dtoa_r+0x8fa>
 8017272:	07f2      	lsls	r2, r6, #31
 8017274:	d505      	bpl.n	8017282 <_dtoa_r+0x4aa>
 8017276:	e9d7 2300 	ldrd	r2, r3, [r7]
 801727a:	f7e9 f9cd 	bl	8000618 <__aeabi_dmul>
 801727e:	3501      	adds	r5, #1
 8017280:	2301      	movs	r3, #1
 8017282:	1076      	asrs	r6, r6, #1
 8017284:	3708      	adds	r7, #8
 8017286:	e772      	b.n	801716e <_dtoa_r+0x396>
 8017288:	2502      	movs	r5, #2
 801728a:	e774      	b.n	8017176 <_dtoa_r+0x39e>
 801728c:	f8cd a020 	str.w	sl, [sp, #32]
 8017290:	464f      	mov	r7, r9
 8017292:	e791      	b.n	80171b8 <_dtoa_r+0x3e0>
 8017294:	4b4d      	ldr	r3, [pc, #308]	; (80173cc <_dtoa_r+0x5f4>)
 8017296:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801729a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801729e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80172a0:	2b00      	cmp	r3, #0
 80172a2:	d047      	beq.n	8017334 <_dtoa_r+0x55c>
 80172a4:	4602      	mov	r2, r0
 80172a6:	460b      	mov	r3, r1
 80172a8:	2000      	movs	r0, #0
 80172aa:	494e      	ldr	r1, [pc, #312]	; (80173e4 <_dtoa_r+0x60c>)
 80172ac:	f7e9 fade 	bl	800086c <__aeabi_ddiv>
 80172b0:	462a      	mov	r2, r5
 80172b2:	4633      	mov	r3, r6
 80172b4:	f7e8 fff8 	bl	80002a8 <__aeabi_dsub>
 80172b8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80172bc:	465d      	mov	r5, fp
 80172be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80172c2:	f7e9 fc59 	bl	8000b78 <__aeabi_d2iz>
 80172c6:	4606      	mov	r6, r0
 80172c8:	f7e9 f93c 	bl	8000544 <__aeabi_i2d>
 80172cc:	4602      	mov	r2, r0
 80172ce:	460b      	mov	r3, r1
 80172d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80172d4:	f7e8 ffe8 	bl	80002a8 <__aeabi_dsub>
 80172d8:	3630      	adds	r6, #48	; 0x30
 80172da:	f805 6b01 	strb.w	r6, [r5], #1
 80172de:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80172e2:	e9cd 0100 	strd	r0, r1, [sp]
 80172e6:	f7e9 fc09 	bl	8000afc <__aeabi_dcmplt>
 80172ea:	2800      	cmp	r0, #0
 80172ec:	d163      	bne.n	80173b6 <_dtoa_r+0x5de>
 80172ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80172f2:	2000      	movs	r0, #0
 80172f4:	4937      	ldr	r1, [pc, #220]	; (80173d4 <_dtoa_r+0x5fc>)
 80172f6:	f7e8 ffd7 	bl	80002a8 <__aeabi_dsub>
 80172fa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80172fe:	f7e9 fbfd 	bl	8000afc <__aeabi_dcmplt>
 8017302:	2800      	cmp	r0, #0
 8017304:	f040 80b7 	bne.w	8017476 <_dtoa_r+0x69e>
 8017308:	eba5 030b 	sub.w	r3, r5, fp
 801730c:	429f      	cmp	r7, r3
 801730e:	f77f af7c 	ble.w	801720a <_dtoa_r+0x432>
 8017312:	2200      	movs	r2, #0
 8017314:	4b30      	ldr	r3, [pc, #192]	; (80173d8 <_dtoa_r+0x600>)
 8017316:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801731a:	f7e9 f97d 	bl	8000618 <__aeabi_dmul>
 801731e:	2200      	movs	r2, #0
 8017320:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017324:	4b2c      	ldr	r3, [pc, #176]	; (80173d8 <_dtoa_r+0x600>)
 8017326:	e9dd 0100 	ldrd	r0, r1, [sp]
 801732a:	f7e9 f975 	bl	8000618 <__aeabi_dmul>
 801732e:	e9cd 0100 	strd	r0, r1, [sp]
 8017332:	e7c4      	b.n	80172be <_dtoa_r+0x4e6>
 8017334:	462a      	mov	r2, r5
 8017336:	4633      	mov	r3, r6
 8017338:	f7e9 f96e 	bl	8000618 <__aeabi_dmul>
 801733c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017340:	eb0b 0507 	add.w	r5, fp, r7
 8017344:	465e      	mov	r6, fp
 8017346:	e9dd 0100 	ldrd	r0, r1, [sp]
 801734a:	f7e9 fc15 	bl	8000b78 <__aeabi_d2iz>
 801734e:	4607      	mov	r7, r0
 8017350:	f7e9 f8f8 	bl	8000544 <__aeabi_i2d>
 8017354:	3730      	adds	r7, #48	; 0x30
 8017356:	4602      	mov	r2, r0
 8017358:	460b      	mov	r3, r1
 801735a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801735e:	f7e8 ffa3 	bl	80002a8 <__aeabi_dsub>
 8017362:	f806 7b01 	strb.w	r7, [r6], #1
 8017366:	42ae      	cmp	r6, r5
 8017368:	e9cd 0100 	strd	r0, r1, [sp]
 801736c:	f04f 0200 	mov.w	r2, #0
 8017370:	d126      	bne.n	80173c0 <_dtoa_r+0x5e8>
 8017372:	4b1c      	ldr	r3, [pc, #112]	; (80173e4 <_dtoa_r+0x60c>)
 8017374:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017378:	f7e8 ff98 	bl	80002ac <__adddf3>
 801737c:	4602      	mov	r2, r0
 801737e:	460b      	mov	r3, r1
 8017380:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017384:	f7e9 fbd8 	bl	8000b38 <__aeabi_dcmpgt>
 8017388:	2800      	cmp	r0, #0
 801738a:	d174      	bne.n	8017476 <_dtoa_r+0x69e>
 801738c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017390:	2000      	movs	r0, #0
 8017392:	4914      	ldr	r1, [pc, #80]	; (80173e4 <_dtoa_r+0x60c>)
 8017394:	f7e8 ff88 	bl	80002a8 <__aeabi_dsub>
 8017398:	4602      	mov	r2, r0
 801739a:	460b      	mov	r3, r1
 801739c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80173a0:	f7e9 fbac 	bl	8000afc <__aeabi_dcmplt>
 80173a4:	2800      	cmp	r0, #0
 80173a6:	f43f af30 	beq.w	801720a <_dtoa_r+0x432>
 80173aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80173ae:	2b30      	cmp	r3, #48	; 0x30
 80173b0:	f105 32ff 	add.w	r2, r5, #4294967295
 80173b4:	d002      	beq.n	80173bc <_dtoa_r+0x5e4>
 80173b6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80173ba:	e04a      	b.n	8017452 <_dtoa_r+0x67a>
 80173bc:	4615      	mov	r5, r2
 80173be:	e7f4      	b.n	80173aa <_dtoa_r+0x5d2>
 80173c0:	4b05      	ldr	r3, [pc, #20]	; (80173d8 <_dtoa_r+0x600>)
 80173c2:	f7e9 f929 	bl	8000618 <__aeabi_dmul>
 80173c6:	e9cd 0100 	strd	r0, r1, [sp]
 80173ca:	e7bc      	b.n	8017346 <_dtoa_r+0x56e>
 80173cc:	0801b3f8 	.word	0x0801b3f8
 80173d0:	0801b3d0 	.word	0x0801b3d0
 80173d4:	3ff00000 	.word	0x3ff00000
 80173d8:	40240000 	.word	0x40240000
 80173dc:	401c0000 	.word	0x401c0000
 80173e0:	40140000 	.word	0x40140000
 80173e4:	3fe00000 	.word	0x3fe00000
 80173e8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80173ec:	465d      	mov	r5, fp
 80173ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80173f2:	4630      	mov	r0, r6
 80173f4:	4639      	mov	r1, r7
 80173f6:	f7e9 fa39 	bl	800086c <__aeabi_ddiv>
 80173fa:	f7e9 fbbd 	bl	8000b78 <__aeabi_d2iz>
 80173fe:	4680      	mov	r8, r0
 8017400:	f7e9 f8a0 	bl	8000544 <__aeabi_i2d>
 8017404:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017408:	f7e9 f906 	bl	8000618 <__aeabi_dmul>
 801740c:	4602      	mov	r2, r0
 801740e:	460b      	mov	r3, r1
 8017410:	4630      	mov	r0, r6
 8017412:	4639      	mov	r1, r7
 8017414:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8017418:	f7e8 ff46 	bl	80002a8 <__aeabi_dsub>
 801741c:	f805 6b01 	strb.w	r6, [r5], #1
 8017420:	eba5 060b 	sub.w	r6, r5, fp
 8017424:	45b1      	cmp	r9, r6
 8017426:	4602      	mov	r2, r0
 8017428:	460b      	mov	r3, r1
 801742a:	d139      	bne.n	80174a0 <_dtoa_r+0x6c8>
 801742c:	f7e8 ff3e 	bl	80002ac <__adddf3>
 8017430:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017434:	4606      	mov	r6, r0
 8017436:	460f      	mov	r7, r1
 8017438:	f7e9 fb7e 	bl	8000b38 <__aeabi_dcmpgt>
 801743c:	b9c8      	cbnz	r0, 8017472 <_dtoa_r+0x69a>
 801743e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017442:	4630      	mov	r0, r6
 8017444:	4639      	mov	r1, r7
 8017446:	f7e9 fb4f 	bl	8000ae8 <__aeabi_dcmpeq>
 801744a:	b110      	cbz	r0, 8017452 <_dtoa_r+0x67a>
 801744c:	f018 0f01 	tst.w	r8, #1
 8017450:	d10f      	bne.n	8017472 <_dtoa_r+0x69a>
 8017452:	9904      	ldr	r1, [sp, #16]
 8017454:	4620      	mov	r0, r4
 8017456:	f000 fe07 	bl	8018068 <_Bfree>
 801745a:	2300      	movs	r3, #0
 801745c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801745e:	702b      	strb	r3, [r5, #0]
 8017460:	f10a 0301 	add.w	r3, sl, #1
 8017464:	6013      	str	r3, [r2, #0]
 8017466:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017468:	2b00      	cmp	r3, #0
 801746a:	f000 8241 	beq.w	80178f0 <_dtoa_r+0xb18>
 801746e:	601d      	str	r5, [r3, #0]
 8017470:	e23e      	b.n	80178f0 <_dtoa_r+0xb18>
 8017472:	f8cd a020 	str.w	sl, [sp, #32]
 8017476:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801747a:	2a39      	cmp	r2, #57	; 0x39
 801747c:	f105 33ff 	add.w	r3, r5, #4294967295
 8017480:	d108      	bne.n	8017494 <_dtoa_r+0x6bc>
 8017482:	459b      	cmp	fp, r3
 8017484:	d10a      	bne.n	801749c <_dtoa_r+0x6c4>
 8017486:	9b08      	ldr	r3, [sp, #32]
 8017488:	3301      	adds	r3, #1
 801748a:	9308      	str	r3, [sp, #32]
 801748c:	2330      	movs	r3, #48	; 0x30
 801748e:	f88b 3000 	strb.w	r3, [fp]
 8017492:	465b      	mov	r3, fp
 8017494:	781a      	ldrb	r2, [r3, #0]
 8017496:	3201      	adds	r2, #1
 8017498:	701a      	strb	r2, [r3, #0]
 801749a:	e78c      	b.n	80173b6 <_dtoa_r+0x5de>
 801749c:	461d      	mov	r5, r3
 801749e:	e7ea      	b.n	8017476 <_dtoa_r+0x69e>
 80174a0:	2200      	movs	r2, #0
 80174a2:	4b9b      	ldr	r3, [pc, #620]	; (8017710 <_dtoa_r+0x938>)
 80174a4:	f7e9 f8b8 	bl	8000618 <__aeabi_dmul>
 80174a8:	2200      	movs	r2, #0
 80174aa:	2300      	movs	r3, #0
 80174ac:	4606      	mov	r6, r0
 80174ae:	460f      	mov	r7, r1
 80174b0:	f7e9 fb1a 	bl	8000ae8 <__aeabi_dcmpeq>
 80174b4:	2800      	cmp	r0, #0
 80174b6:	d09a      	beq.n	80173ee <_dtoa_r+0x616>
 80174b8:	e7cb      	b.n	8017452 <_dtoa_r+0x67a>
 80174ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80174bc:	2a00      	cmp	r2, #0
 80174be:	f000 808b 	beq.w	80175d8 <_dtoa_r+0x800>
 80174c2:	9a06      	ldr	r2, [sp, #24]
 80174c4:	2a01      	cmp	r2, #1
 80174c6:	dc6e      	bgt.n	80175a6 <_dtoa_r+0x7ce>
 80174c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80174ca:	2a00      	cmp	r2, #0
 80174cc:	d067      	beq.n	801759e <_dtoa_r+0x7c6>
 80174ce:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80174d2:	9f07      	ldr	r7, [sp, #28]
 80174d4:	9d05      	ldr	r5, [sp, #20]
 80174d6:	9a05      	ldr	r2, [sp, #20]
 80174d8:	2101      	movs	r1, #1
 80174da:	441a      	add	r2, r3
 80174dc:	4620      	mov	r0, r4
 80174de:	9205      	str	r2, [sp, #20]
 80174e0:	4498      	add	r8, r3
 80174e2:	f000 fe9f 	bl	8018224 <__i2b>
 80174e6:	4606      	mov	r6, r0
 80174e8:	2d00      	cmp	r5, #0
 80174ea:	dd0c      	ble.n	8017506 <_dtoa_r+0x72e>
 80174ec:	f1b8 0f00 	cmp.w	r8, #0
 80174f0:	dd09      	ble.n	8017506 <_dtoa_r+0x72e>
 80174f2:	4545      	cmp	r5, r8
 80174f4:	9a05      	ldr	r2, [sp, #20]
 80174f6:	462b      	mov	r3, r5
 80174f8:	bfa8      	it	ge
 80174fa:	4643      	movge	r3, r8
 80174fc:	1ad2      	subs	r2, r2, r3
 80174fe:	9205      	str	r2, [sp, #20]
 8017500:	1aed      	subs	r5, r5, r3
 8017502:	eba8 0803 	sub.w	r8, r8, r3
 8017506:	9b07      	ldr	r3, [sp, #28]
 8017508:	b1eb      	cbz	r3, 8017546 <_dtoa_r+0x76e>
 801750a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801750c:	2b00      	cmp	r3, #0
 801750e:	d067      	beq.n	80175e0 <_dtoa_r+0x808>
 8017510:	b18f      	cbz	r7, 8017536 <_dtoa_r+0x75e>
 8017512:	4631      	mov	r1, r6
 8017514:	463a      	mov	r2, r7
 8017516:	4620      	mov	r0, r4
 8017518:	f000 ff24 	bl	8018364 <__pow5mult>
 801751c:	9a04      	ldr	r2, [sp, #16]
 801751e:	4601      	mov	r1, r0
 8017520:	4606      	mov	r6, r0
 8017522:	4620      	mov	r0, r4
 8017524:	f000 fe87 	bl	8018236 <__multiply>
 8017528:	9904      	ldr	r1, [sp, #16]
 801752a:	9008      	str	r0, [sp, #32]
 801752c:	4620      	mov	r0, r4
 801752e:	f000 fd9b 	bl	8018068 <_Bfree>
 8017532:	9b08      	ldr	r3, [sp, #32]
 8017534:	9304      	str	r3, [sp, #16]
 8017536:	9b07      	ldr	r3, [sp, #28]
 8017538:	1bda      	subs	r2, r3, r7
 801753a:	d004      	beq.n	8017546 <_dtoa_r+0x76e>
 801753c:	9904      	ldr	r1, [sp, #16]
 801753e:	4620      	mov	r0, r4
 8017540:	f000 ff10 	bl	8018364 <__pow5mult>
 8017544:	9004      	str	r0, [sp, #16]
 8017546:	2101      	movs	r1, #1
 8017548:	4620      	mov	r0, r4
 801754a:	f000 fe6b 	bl	8018224 <__i2b>
 801754e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017550:	4607      	mov	r7, r0
 8017552:	2b00      	cmp	r3, #0
 8017554:	f000 81d0 	beq.w	80178f8 <_dtoa_r+0xb20>
 8017558:	461a      	mov	r2, r3
 801755a:	4601      	mov	r1, r0
 801755c:	4620      	mov	r0, r4
 801755e:	f000 ff01 	bl	8018364 <__pow5mult>
 8017562:	9b06      	ldr	r3, [sp, #24]
 8017564:	2b01      	cmp	r3, #1
 8017566:	4607      	mov	r7, r0
 8017568:	dc40      	bgt.n	80175ec <_dtoa_r+0x814>
 801756a:	9b00      	ldr	r3, [sp, #0]
 801756c:	2b00      	cmp	r3, #0
 801756e:	d139      	bne.n	80175e4 <_dtoa_r+0x80c>
 8017570:	9b01      	ldr	r3, [sp, #4]
 8017572:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017576:	2b00      	cmp	r3, #0
 8017578:	d136      	bne.n	80175e8 <_dtoa_r+0x810>
 801757a:	9b01      	ldr	r3, [sp, #4]
 801757c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017580:	0d1b      	lsrs	r3, r3, #20
 8017582:	051b      	lsls	r3, r3, #20
 8017584:	b12b      	cbz	r3, 8017592 <_dtoa_r+0x7ba>
 8017586:	9b05      	ldr	r3, [sp, #20]
 8017588:	3301      	adds	r3, #1
 801758a:	9305      	str	r3, [sp, #20]
 801758c:	f108 0801 	add.w	r8, r8, #1
 8017590:	2301      	movs	r3, #1
 8017592:	9307      	str	r3, [sp, #28]
 8017594:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017596:	2b00      	cmp	r3, #0
 8017598:	d12a      	bne.n	80175f0 <_dtoa_r+0x818>
 801759a:	2001      	movs	r0, #1
 801759c:	e030      	b.n	8017600 <_dtoa_r+0x828>
 801759e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80175a0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80175a4:	e795      	b.n	80174d2 <_dtoa_r+0x6fa>
 80175a6:	9b07      	ldr	r3, [sp, #28]
 80175a8:	f109 37ff 	add.w	r7, r9, #4294967295
 80175ac:	42bb      	cmp	r3, r7
 80175ae:	bfbf      	itttt	lt
 80175b0:	9b07      	ldrlt	r3, [sp, #28]
 80175b2:	9707      	strlt	r7, [sp, #28]
 80175b4:	1afa      	sublt	r2, r7, r3
 80175b6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80175b8:	bfbb      	ittet	lt
 80175ba:	189b      	addlt	r3, r3, r2
 80175bc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80175be:	1bdf      	subge	r7, r3, r7
 80175c0:	2700      	movlt	r7, #0
 80175c2:	f1b9 0f00 	cmp.w	r9, #0
 80175c6:	bfb5      	itete	lt
 80175c8:	9b05      	ldrlt	r3, [sp, #20]
 80175ca:	9d05      	ldrge	r5, [sp, #20]
 80175cc:	eba3 0509 	sublt.w	r5, r3, r9
 80175d0:	464b      	movge	r3, r9
 80175d2:	bfb8      	it	lt
 80175d4:	2300      	movlt	r3, #0
 80175d6:	e77e      	b.n	80174d6 <_dtoa_r+0x6fe>
 80175d8:	9f07      	ldr	r7, [sp, #28]
 80175da:	9d05      	ldr	r5, [sp, #20]
 80175dc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80175de:	e783      	b.n	80174e8 <_dtoa_r+0x710>
 80175e0:	9a07      	ldr	r2, [sp, #28]
 80175e2:	e7ab      	b.n	801753c <_dtoa_r+0x764>
 80175e4:	2300      	movs	r3, #0
 80175e6:	e7d4      	b.n	8017592 <_dtoa_r+0x7ba>
 80175e8:	9b00      	ldr	r3, [sp, #0]
 80175ea:	e7d2      	b.n	8017592 <_dtoa_r+0x7ba>
 80175ec:	2300      	movs	r3, #0
 80175ee:	9307      	str	r3, [sp, #28]
 80175f0:	693b      	ldr	r3, [r7, #16]
 80175f2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80175f6:	6918      	ldr	r0, [r3, #16]
 80175f8:	f000 fdc6 	bl	8018188 <__hi0bits>
 80175fc:	f1c0 0020 	rsb	r0, r0, #32
 8017600:	4440      	add	r0, r8
 8017602:	f010 001f 	ands.w	r0, r0, #31
 8017606:	d047      	beq.n	8017698 <_dtoa_r+0x8c0>
 8017608:	f1c0 0320 	rsb	r3, r0, #32
 801760c:	2b04      	cmp	r3, #4
 801760e:	dd3b      	ble.n	8017688 <_dtoa_r+0x8b0>
 8017610:	9b05      	ldr	r3, [sp, #20]
 8017612:	f1c0 001c 	rsb	r0, r0, #28
 8017616:	4403      	add	r3, r0
 8017618:	9305      	str	r3, [sp, #20]
 801761a:	4405      	add	r5, r0
 801761c:	4480      	add	r8, r0
 801761e:	9b05      	ldr	r3, [sp, #20]
 8017620:	2b00      	cmp	r3, #0
 8017622:	dd05      	ble.n	8017630 <_dtoa_r+0x858>
 8017624:	461a      	mov	r2, r3
 8017626:	9904      	ldr	r1, [sp, #16]
 8017628:	4620      	mov	r0, r4
 801762a:	f000 fee9 	bl	8018400 <__lshift>
 801762e:	9004      	str	r0, [sp, #16]
 8017630:	f1b8 0f00 	cmp.w	r8, #0
 8017634:	dd05      	ble.n	8017642 <_dtoa_r+0x86a>
 8017636:	4639      	mov	r1, r7
 8017638:	4642      	mov	r2, r8
 801763a:	4620      	mov	r0, r4
 801763c:	f000 fee0 	bl	8018400 <__lshift>
 8017640:	4607      	mov	r7, r0
 8017642:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017644:	b353      	cbz	r3, 801769c <_dtoa_r+0x8c4>
 8017646:	4639      	mov	r1, r7
 8017648:	9804      	ldr	r0, [sp, #16]
 801764a:	f000 ff2d 	bl	80184a8 <__mcmp>
 801764e:	2800      	cmp	r0, #0
 8017650:	da24      	bge.n	801769c <_dtoa_r+0x8c4>
 8017652:	2300      	movs	r3, #0
 8017654:	220a      	movs	r2, #10
 8017656:	9904      	ldr	r1, [sp, #16]
 8017658:	4620      	mov	r0, r4
 801765a:	f000 fd1c 	bl	8018096 <__multadd>
 801765e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017660:	9004      	str	r0, [sp, #16]
 8017662:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017666:	2b00      	cmp	r3, #0
 8017668:	f000 814d 	beq.w	8017906 <_dtoa_r+0xb2e>
 801766c:	2300      	movs	r3, #0
 801766e:	4631      	mov	r1, r6
 8017670:	220a      	movs	r2, #10
 8017672:	4620      	mov	r0, r4
 8017674:	f000 fd0f 	bl	8018096 <__multadd>
 8017678:	9b02      	ldr	r3, [sp, #8]
 801767a:	2b00      	cmp	r3, #0
 801767c:	4606      	mov	r6, r0
 801767e:	dc4f      	bgt.n	8017720 <_dtoa_r+0x948>
 8017680:	9b06      	ldr	r3, [sp, #24]
 8017682:	2b02      	cmp	r3, #2
 8017684:	dd4c      	ble.n	8017720 <_dtoa_r+0x948>
 8017686:	e011      	b.n	80176ac <_dtoa_r+0x8d4>
 8017688:	d0c9      	beq.n	801761e <_dtoa_r+0x846>
 801768a:	9a05      	ldr	r2, [sp, #20]
 801768c:	331c      	adds	r3, #28
 801768e:	441a      	add	r2, r3
 8017690:	9205      	str	r2, [sp, #20]
 8017692:	441d      	add	r5, r3
 8017694:	4498      	add	r8, r3
 8017696:	e7c2      	b.n	801761e <_dtoa_r+0x846>
 8017698:	4603      	mov	r3, r0
 801769a:	e7f6      	b.n	801768a <_dtoa_r+0x8b2>
 801769c:	f1b9 0f00 	cmp.w	r9, #0
 80176a0:	dc38      	bgt.n	8017714 <_dtoa_r+0x93c>
 80176a2:	9b06      	ldr	r3, [sp, #24]
 80176a4:	2b02      	cmp	r3, #2
 80176a6:	dd35      	ble.n	8017714 <_dtoa_r+0x93c>
 80176a8:	f8cd 9008 	str.w	r9, [sp, #8]
 80176ac:	9b02      	ldr	r3, [sp, #8]
 80176ae:	b963      	cbnz	r3, 80176ca <_dtoa_r+0x8f2>
 80176b0:	4639      	mov	r1, r7
 80176b2:	2205      	movs	r2, #5
 80176b4:	4620      	mov	r0, r4
 80176b6:	f000 fcee 	bl	8018096 <__multadd>
 80176ba:	4601      	mov	r1, r0
 80176bc:	4607      	mov	r7, r0
 80176be:	9804      	ldr	r0, [sp, #16]
 80176c0:	f000 fef2 	bl	80184a8 <__mcmp>
 80176c4:	2800      	cmp	r0, #0
 80176c6:	f73f adcc 	bgt.w	8017262 <_dtoa_r+0x48a>
 80176ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80176cc:	465d      	mov	r5, fp
 80176ce:	ea6f 0a03 	mvn.w	sl, r3
 80176d2:	f04f 0900 	mov.w	r9, #0
 80176d6:	4639      	mov	r1, r7
 80176d8:	4620      	mov	r0, r4
 80176da:	f000 fcc5 	bl	8018068 <_Bfree>
 80176de:	2e00      	cmp	r6, #0
 80176e0:	f43f aeb7 	beq.w	8017452 <_dtoa_r+0x67a>
 80176e4:	f1b9 0f00 	cmp.w	r9, #0
 80176e8:	d005      	beq.n	80176f6 <_dtoa_r+0x91e>
 80176ea:	45b1      	cmp	r9, r6
 80176ec:	d003      	beq.n	80176f6 <_dtoa_r+0x91e>
 80176ee:	4649      	mov	r1, r9
 80176f0:	4620      	mov	r0, r4
 80176f2:	f000 fcb9 	bl	8018068 <_Bfree>
 80176f6:	4631      	mov	r1, r6
 80176f8:	4620      	mov	r0, r4
 80176fa:	f000 fcb5 	bl	8018068 <_Bfree>
 80176fe:	e6a8      	b.n	8017452 <_dtoa_r+0x67a>
 8017700:	2700      	movs	r7, #0
 8017702:	463e      	mov	r6, r7
 8017704:	e7e1      	b.n	80176ca <_dtoa_r+0x8f2>
 8017706:	f8dd a020 	ldr.w	sl, [sp, #32]
 801770a:	463e      	mov	r6, r7
 801770c:	e5a9      	b.n	8017262 <_dtoa_r+0x48a>
 801770e:	bf00      	nop
 8017710:	40240000 	.word	0x40240000
 8017714:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017716:	f8cd 9008 	str.w	r9, [sp, #8]
 801771a:	2b00      	cmp	r3, #0
 801771c:	f000 80fa 	beq.w	8017914 <_dtoa_r+0xb3c>
 8017720:	2d00      	cmp	r5, #0
 8017722:	dd05      	ble.n	8017730 <_dtoa_r+0x958>
 8017724:	4631      	mov	r1, r6
 8017726:	462a      	mov	r2, r5
 8017728:	4620      	mov	r0, r4
 801772a:	f000 fe69 	bl	8018400 <__lshift>
 801772e:	4606      	mov	r6, r0
 8017730:	9b07      	ldr	r3, [sp, #28]
 8017732:	2b00      	cmp	r3, #0
 8017734:	d04c      	beq.n	80177d0 <_dtoa_r+0x9f8>
 8017736:	6871      	ldr	r1, [r6, #4]
 8017738:	4620      	mov	r0, r4
 801773a:	f000 fc61 	bl	8018000 <_Balloc>
 801773e:	6932      	ldr	r2, [r6, #16]
 8017740:	3202      	adds	r2, #2
 8017742:	4605      	mov	r5, r0
 8017744:	0092      	lsls	r2, r2, #2
 8017746:	f106 010c 	add.w	r1, r6, #12
 801774a:	300c      	adds	r0, #12
 801774c:	f7fd fc50 	bl	8014ff0 <memcpy>
 8017750:	2201      	movs	r2, #1
 8017752:	4629      	mov	r1, r5
 8017754:	4620      	mov	r0, r4
 8017756:	f000 fe53 	bl	8018400 <__lshift>
 801775a:	9b00      	ldr	r3, [sp, #0]
 801775c:	f8cd b014 	str.w	fp, [sp, #20]
 8017760:	f003 0301 	and.w	r3, r3, #1
 8017764:	46b1      	mov	r9, r6
 8017766:	9307      	str	r3, [sp, #28]
 8017768:	4606      	mov	r6, r0
 801776a:	4639      	mov	r1, r7
 801776c:	9804      	ldr	r0, [sp, #16]
 801776e:	f7ff faa5 	bl	8016cbc <quorem>
 8017772:	4649      	mov	r1, r9
 8017774:	4605      	mov	r5, r0
 8017776:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801777a:	9804      	ldr	r0, [sp, #16]
 801777c:	f000 fe94 	bl	80184a8 <__mcmp>
 8017780:	4632      	mov	r2, r6
 8017782:	9000      	str	r0, [sp, #0]
 8017784:	4639      	mov	r1, r7
 8017786:	4620      	mov	r0, r4
 8017788:	f000 fea8 	bl	80184dc <__mdiff>
 801778c:	68c3      	ldr	r3, [r0, #12]
 801778e:	4602      	mov	r2, r0
 8017790:	bb03      	cbnz	r3, 80177d4 <_dtoa_r+0x9fc>
 8017792:	4601      	mov	r1, r0
 8017794:	9008      	str	r0, [sp, #32]
 8017796:	9804      	ldr	r0, [sp, #16]
 8017798:	f000 fe86 	bl	80184a8 <__mcmp>
 801779c:	9a08      	ldr	r2, [sp, #32]
 801779e:	4603      	mov	r3, r0
 80177a0:	4611      	mov	r1, r2
 80177a2:	4620      	mov	r0, r4
 80177a4:	9308      	str	r3, [sp, #32]
 80177a6:	f000 fc5f 	bl	8018068 <_Bfree>
 80177aa:	9b08      	ldr	r3, [sp, #32]
 80177ac:	b9a3      	cbnz	r3, 80177d8 <_dtoa_r+0xa00>
 80177ae:	9a06      	ldr	r2, [sp, #24]
 80177b0:	b992      	cbnz	r2, 80177d8 <_dtoa_r+0xa00>
 80177b2:	9a07      	ldr	r2, [sp, #28]
 80177b4:	b982      	cbnz	r2, 80177d8 <_dtoa_r+0xa00>
 80177b6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80177ba:	d029      	beq.n	8017810 <_dtoa_r+0xa38>
 80177bc:	9b00      	ldr	r3, [sp, #0]
 80177be:	2b00      	cmp	r3, #0
 80177c0:	dd01      	ble.n	80177c6 <_dtoa_r+0x9ee>
 80177c2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80177c6:	9b05      	ldr	r3, [sp, #20]
 80177c8:	1c5d      	adds	r5, r3, #1
 80177ca:	f883 8000 	strb.w	r8, [r3]
 80177ce:	e782      	b.n	80176d6 <_dtoa_r+0x8fe>
 80177d0:	4630      	mov	r0, r6
 80177d2:	e7c2      	b.n	801775a <_dtoa_r+0x982>
 80177d4:	2301      	movs	r3, #1
 80177d6:	e7e3      	b.n	80177a0 <_dtoa_r+0x9c8>
 80177d8:	9a00      	ldr	r2, [sp, #0]
 80177da:	2a00      	cmp	r2, #0
 80177dc:	db04      	blt.n	80177e8 <_dtoa_r+0xa10>
 80177de:	d125      	bne.n	801782c <_dtoa_r+0xa54>
 80177e0:	9a06      	ldr	r2, [sp, #24]
 80177e2:	bb1a      	cbnz	r2, 801782c <_dtoa_r+0xa54>
 80177e4:	9a07      	ldr	r2, [sp, #28]
 80177e6:	bb0a      	cbnz	r2, 801782c <_dtoa_r+0xa54>
 80177e8:	2b00      	cmp	r3, #0
 80177ea:	ddec      	ble.n	80177c6 <_dtoa_r+0x9ee>
 80177ec:	2201      	movs	r2, #1
 80177ee:	9904      	ldr	r1, [sp, #16]
 80177f0:	4620      	mov	r0, r4
 80177f2:	f000 fe05 	bl	8018400 <__lshift>
 80177f6:	4639      	mov	r1, r7
 80177f8:	9004      	str	r0, [sp, #16]
 80177fa:	f000 fe55 	bl	80184a8 <__mcmp>
 80177fe:	2800      	cmp	r0, #0
 8017800:	dc03      	bgt.n	801780a <_dtoa_r+0xa32>
 8017802:	d1e0      	bne.n	80177c6 <_dtoa_r+0x9ee>
 8017804:	f018 0f01 	tst.w	r8, #1
 8017808:	d0dd      	beq.n	80177c6 <_dtoa_r+0x9ee>
 801780a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801780e:	d1d8      	bne.n	80177c2 <_dtoa_r+0x9ea>
 8017810:	9b05      	ldr	r3, [sp, #20]
 8017812:	9a05      	ldr	r2, [sp, #20]
 8017814:	1c5d      	adds	r5, r3, #1
 8017816:	2339      	movs	r3, #57	; 0x39
 8017818:	7013      	strb	r3, [r2, #0]
 801781a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801781e:	2b39      	cmp	r3, #57	; 0x39
 8017820:	f105 32ff 	add.w	r2, r5, #4294967295
 8017824:	d04f      	beq.n	80178c6 <_dtoa_r+0xaee>
 8017826:	3301      	adds	r3, #1
 8017828:	7013      	strb	r3, [r2, #0]
 801782a:	e754      	b.n	80176d6 <_dtoa_r+0x8fe>
 801782c:	9a05      	ldr	r2, [sp, #20]
 801782e:	2b00      	cmp	r3, #0
 8017830:	f102 0501 	add.w	r5, r2, #1
 8017834:	dd06      	ble.n	8017844 <_dtoa_r+0xa6c>
 8017836:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801783a:	d0e9      	beq.n	8017810 <_dtoa_r+0xa38>
 801783c:	f108 0801 	add.w	r8, r8, #1
 8017840:	9b05      	ldr	r3, [sp, #20]
 8017842:	e7c2      	b.n	80177ca <_dtoa_r+0x9f2>
 8017844:	9a02      	ldr	r2, [sp, #8]
 8017846:	f805 8c01 	strb.w	r8, [r5, #-1]
 801784a:	eba5 030b 	sub.w	r3, r5, fp
 801784e:	4293      	cmp	r3, r2
 8017850:	d021      	beq.n	8017896 <_dtoa_r+0xabe>
 8017852:	2300      	movs	r3, #0
 8017854:	220a      	movs	r2, #10
 8017856:	9904      	ldr	r1, [sp, #16]
 8017858:	4620      	mov	r0, r4
 801785a:	f000 fc1c 	bl	8018096 <__multadd>
 801785e:	45b1      	cmp	r9, r6
 8017860:	9004      	str	r0, [sp, #16]
 8017862:	f04f 0300 	mov.w	r3, #0
 8017866:	f04f 020a 	mov.w	r2, #10
 801786a:	4649      	mov	r1, r9
 801786c:	4620      	mov	r0, r4
 801786e:	d105      	bne.n	801787c <_dtoa_r+0xaa4>
 8017870:	f000 fc11 	bl	8018096 <__multadd>
 8017874:	4681      	mov	r9, r0
 8017876:	4606      	mov	r6, r0
 8017878:	9505      	str	r5, [sp, #20]
 801787a:	e776      	b.n	801776a <_dtoa_r+0x992>
 801787c:	f000 fc0b 	bl	8018096 <__multadd>
 8017880:	4631      	mov	r1, r6
 8017882:	4681      	mov	r9, r0
 8017884:	2300      	movs	r3, #0
 8017886:	220a      	movs	r2, #10
 8017888:	4620      	mov	r0, r4
 801788a:	f000 fc04 	bl	8018096 <__multadd>
 801788e:	4606      	mov	r6, r0
 8017890:	e7f2      	b.n	8017878 <_dtoa_r+0xaa0>
 8017892:	f04f 0900 	mov.w	r9, #0
 8017896:	2201      	movs	r2, #1
 8017898:	9904      	ldr	r1, [sp, #16]
 801789a:	4620      	mov	r0, r4
 801789c:	f000 fdb0 	bl	8018400 <__lshift>
 80178a0:	4639      	mov	r1, r7
 80178a2:	9004      	str	r0, [sp, #16]
 80178a4:	f000 fe00 	bl	80184a8 <__mcmp>
 80178a8:	2800      	cmp	r0, #0
 80178aa:	dcb6      	bgt.n	801781a <_dtoa_r+0xa42>
 80178ac:	d102      	bne.n	80178b4 <_dtoa_r+0xadc>
 80178ae:	f018 0f01 	tst.w	r8, #1
 80178b2:	d1b2      	bne.n	801781a <_dtoa_r+0xa42>
 80178b4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80178b8:	2b30      	cmp	r3, #48	; 0x30
 80178ba:	f105 32ff 	add.w	r2, r5, #4294967295
 80178be:	f47f af0a 	bne.w	80176d6 <_dtoa_r+0x8fe>
 80178c2:	4615      	mov	r5, r2
 80178c4:	e7f6      	b.n	80178b4 <_dtoa_r+0xadc>
 80178c6:	4593      	cmp	fp, r2
 80178c8:	d105      	bne.n	80178d6 <_dtoa_r+0xafe>
 80178ca:	2331      	movs	r3, #49	; 0x31
 80178cc:	f10a 0a01 	add.w	sl, sl, #1
 80178d0:	f88b 3000 	strb.w	r3, [fp]
 80178d4:	e6ff      	b.n	80176d6 <_dtoa_r+0x8fe>
 80178d6:	4615      	mov	r5, r2
 80178d8:	e79f      	b.n	801781a <_dtoa_r+0xa42>
 80178da:	f8df b064 	ldr.w	fp, [pc, #100]	; 8017940 <_dtoa_r+0xb68>
 80178de:	e007      	b.n	80178f0 <_dtoa_r+0xb18>
 80178e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80178e2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8017944 <_dtoa_r+0xb6c>
 80178e6:	b11b      	cbz	r3, 80178f0 <_dtoa_r+0xb18>
 80178e8:	f10b 0308 	add.w	r3, fp, #8
 80178ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80178ee:	6013      	str	r3, [r2, #0]
 80178f0:	4658      	mov	r0, fp
 80178f2:	b017      	add	sp, #92	; 0x5c
 80178f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80178f8:	9b06      	ldr	r3, [sp, #24]
 80178fa:	2b01      	cmp	r3, #1
 80178fc:	f77f ae35 	ble.w	801756a <_dtoa_r+0x792>
 8017900:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017902:	9307      	str	r3, [sp, #28]
 8017904:	e649      	b.n	801759a <_dtoa_r+0x7c2>
 8017906:	9b02      	ldr	r3, [sp, #8]
 8017908:	2b00      	cmp	r3, #0
 801790a:	dc03      	bgt.n	8017914 <_dtoa_r+0xb3c>
 801790c:	9b06      	ldr	r3, [sp, #24]
 801790e:	2b02      	cmp	r3, #2
 8017910:	f73f aecc 	bgt.w	80176ac <_dtoa_r+0x8d4>
 8017914:	465d      	mov	r5, fp
 8017916:	4639      	mov	r1, r7
 8017918:	9804      	ldr	r0, [sp, #16]
 801791a:	f7ff f9cf 	bl	8016cbc <quorem>
 801791e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8017922:	f805 8b01 	strb.w	r8, [r5], #1
 8017926:	9a02      	ldr	r2, [sp, #8]
 8017928:	eba5 030b 	sub.w	r3, r5, fp
 801792c:	429a      	cmp	r2, r3
 801792e:	ddb0      	ble.n	8017892 <_dtoa_r+0xaba>
 8017930:	2300      	movs	r3, #0
 8017932:	220a      	movs	r2, #10
 8017934:	9904      	ldr	r1, [sp, #16]
 8017936:	4620      	mov	r0, r4
 8017938:	f000 fbad 	bl	8018096 <__multadd>
 801793c:	9004      	str	r0, [sp, #16]
 801793e:	e7ea      	b.n	8017916 <_dtoa_r+0xb3e>
 8017940:	0801b4f3 	.word	0x0801b4f3
 8017944:	0801b3b8 	.word	0x0801b3b8

08017948 <rshift>:
 8017948:	b5f0      	push	{r4, r5, r6, r7, lr}
 801794a:	6906      	ldr	r6, [r0, #16]
 801794c:	114b      	asrs	r3, r1, #5
 801794e:	429e      	cmp	r6, r3
 8017950:	f100 0414 	add.w	r4, r0, #20
 8017954:	dd30      	ble.n	80179b8 <rshift+0x70>
 8017956:	f011 011f 	ands.w	r1, r1, #31
 801795a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 801795e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8017962:	d108      	bne.n	8017976 <rshift+0x2e>
 8017964:	4621      	mov	r1, r4
 8017966:	42b2      	cmp	r2, r6
 8017968:	460b      	mov	r3, r1
 801796a:	d211      	bcs.n	8017990 <rshift+0x48>
 801796c:	f852 3b04 	ldr.w	r3, [r2], #4
 8017970:	f841 3b04 	str.w	r3, [r1], #4
 8017974:	e7f7      	b.n	8017966 <rshift+0x1e>
 8017976:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 801797a:	f1c1 0c20 	rsb	ip, r1, #32
 801797e:	40cd      	lsrs	r5, r1
 8017980:	3204      	adds	r2, #4
 8017982:	4623      	mov	r3, r4
 8017984:	42b2      	cmp	r2, r6
 8017986:	4617      	mov	r7, r2
 8017988:	d30c      	bcc.n	80179a4 <rshift+0x5c>
 801798a:	601d      	str	r5, [r3, #0]
 801798c:	b105      	cbz	r5, 8017990 <rshift+0x48>
 801798e:	3304      	adds	r3, #4
 8017990:	1b1a      	subs	r2, r3, r4
 8017992:	42a3      	cmp	r3, r4
 8017994:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8017998:	bf08      	it	eq
 801799a:	2300      	moveq	r3, #0
 801799c:	6102      	str	r2, [r0, #16]
 801799e:	bf08      	it	eq
 80179a0:	6143      	streq	r3, [r0, #20]
 80179a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80179a4:	683f      	ldr	r7, [r7, #0]
 80179a6:	fa07 f70c 	lsl.w	r7, r7, ip
 80179aa:	433d      	orrs	r5, r7
 80179ac:	f843 5b04 	str.w	r5, [r3], #4
 80179b0:	f852 5b04 	ldr.w	r5, [r2], #4
 80179b4:	40cd      	lsrs	r5, r1
 80179b6:	e7e5      	b.n	8017984 <rshift+0x3c>
 80179b8:	4623      	mov	r3, r4
 80179ba:	e7e9      	b.n	8017990 <rshift+0x48>

080179bc <__hexdig_fun>:
 80179bc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80179c0:	2b09      	cmp	r3, #9
 80179c2:	d802      	bhi.n	80179ca <__hexdig_fun+0xe>
 80179c4:	3820      	subs	r0, #32
 80179c6:	b2c0      	uxtb	r0, r0
 80179c8:	4770      	bx	lr
 80179ca:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80179ce:	2b05      	cmp	r3, #5
 80179d0:	d801      	bhi.n	80179d6 <__hexdig_fun+0x1a>
 80179d2:	3847      	subs	r0, #71	; 0x47
 80179d4:	e7f7      	b.n	80179c6 <__hexdig_fun+0xa>
 80179d6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80179da:	2b05      	cmp	r3, #5
 80179dc:	d801      	bhi.n	80179e2 <__hexdig_fun+0x26>
 80179de:	3827      	subs	r0, #39	; 0x27
 80179e0:	e7f1      	b.n	80179c6 <__hexdig_fun+0xa>
 80179e2:	2000      	movs	r0, #0
 80179e4:	4770      	bx	lr

080179e6 <__gethex>:
 80179e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179ea:	b08b      	sub	sp, #44	; 0x2c
 80179ec:	468a      	mov	sl, r1
 80179ee:	9002      	str	r0, [sp, #8]
 80179f0:	9816      	ldr	r0, [sp, #88]	; 0x58
 80179f2:	9306      	str	r3, [sp, #24]
 80179f4:	4690      	mov	r8, r2
 80179f6:	f000 fadf 	bl	8017fb8 <__localeconv_l>
 80179fa:	6803      	ldr	r3, [r0, #0]
 80179fc:	9303      	str	r3, [sp, #12]
 80179fe:	4618      	mov	r0, r3
 8017a00:	f7e8 fbf0 	bl	80001e4 <strlen>
 8017a04:	9b03      	ldr	r3, [sp, #12]
 8017a06:	9001      	str	r0, [sp, #4]
 8017a08:	4403      	add	r3, r0
 8017a0a:	f04f 0b00 	mov.w	fp, #0
 8017a0e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8017a12:	9307      	str	r3, [sp, #28]
 8017a14:	f8da 3000 	ldr.w	r3, [sl]
 8017a18:	3302      	adds	r3, #2
 8017a1a:	461f      	mov	r7, r3
 8017a1c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8017a20:	2830      	cmp	r0, #48	; 0x30
 8017a22:	d06c      	beq.n	8017afe <__gethex+0x118>
 8017a24:	f7ff ffca 	bl	80179bc <__hexdig_fun>
 8017a28:	4604      	mov	r4, r0
 8017a2a:	2800      	cmp	r0, #0
 8017a2c:	d16a      	bne.n	8017b04 <__gethex+0x11e>
 8017a2e:	9a01      	ldr	r2, [sp, #4]
 8017a30:	9903      	ldr	r1, [sp, #12]
 8017a32:	4638      	mov	r0, r7
 8017a34:	f001 fb78 	bl	8019128 <strncmp>
 8017a38:	2800      	cmp	r0, #0
 8017a3a:	d166      	bne.n	8017b0a <__gethex+0x124>
 8017a3c:	9b01      	ldr	r3, [sp, #4]
 8017a3e:	5cf8      	ldrb	r0, [r7, r3]
 8017a40:	18fe      	adds	r6, r7, r3
 8017a42:	f7ff ffbb 	bl	80179bc <__hexdig_fun>
 8017a46:	2800      	cmp	r0, #0
 8017a48:	d062      	beq.n	8017b10 <__gethex+0x12a>
 8017a4a:	4633      	mov	r3, r6
 8017a4c:	7818      	ldrb	r0, [r3, #0]
 8017a4e:	2830      	cmp	r0, #48	; 0x30
 8017a50:	461f      	mov	r7, r3
 8017a52:	f103 0301 	add.w	r3, r3, #1
 8017a56:	d0f9      	beq.n	8017a4c <__gethex+0x66>
 8017a58:	f7ff ffb0 	bl	80179bc <__hexdig_fun>
 8017a5c:	fab0 f580 	clz	r5, r0
 8017a60:	096d      	lsrs	r5, r5, #5
 8017a62:	4634      	mov	r4, r6
 8017a64:	f04f 0b01 	mov.w	fp, #1
 8017a68:	463a      	mov	r2, r7
 8017a6a:	4616      	mov	r6, r2
 8017a6c:	3201      	adds	r2, #1
 8017a6e:	7830      	ldrb	r0, [r6, #0]
 8017a70:	f7ff ffa4 	bl	80179bc <__hexdig_fun>
 8017a74:	2800      	cmp	r0, #0
 8017a76:	d1f8      	bne.n	8017a6a <__gethex+0x84>
 8017a78:	9a01      	ldr	r2, [sp, #4]
 8017a7a:	9903      	ldr	r1, [sp, #12]
 8017a7c:	4630      	mov	r0, r6
 8017a7e:	f001 fb53 	bl	8019128 <strncmp>
 8017a82:	b950      	cbnz	r0, 8017a9a <__gethex+0xb4>
 8017a84:	b954      	cbnz	r4, 8017a9c <__gethex+0xb6>
 8017a86:	9b01      	ldr	r3, [sp, #4]
 8017a88:	18f4      	adds	r4, r6, r3
 8017a8a:	4622      	mov	r2, r4
 8017a8c:	4616      	mov	r6, r2
 8017a8e:	3201      	adds	r2, #1
 8017a90:	7830      	ldrb	r0, [r6, #0]
 8017a92:	f7ff ff93 	bl	80179bc <__hexdig_fun>
 8017a96:	2800      	cmp	r0, #0
 8017a98:	d1f8      	bne.n	8017a8c <__gethex+0xa6>
 8017a9a:	b10c      	cbz	r4, 8017aa0 <__gethex+0xba>
 8017a9c:	1ba4      	subs	r4, r4, r6
 8017a9e:	00a4      	lsls	r4, r4, #2
 8017aa0:	7833      	ldrb	r3, [r6, #0]
 8017aa2:	2b50      	cmp	r3, #80	; 0x50
 8017aa4:	d001      	beq.n	8017aaa <__gethex+0xc4>
 8017aa6:	2b70      	cmp	r3, #112	; 0x70
 8017aa8:	d140      	bne.n	8017b2c <__gethex+0x146>
 8017aaa:	7873      	ldrb	r3, [r6, #1]
 8017aac:	2b2b      	cmp	r3, #43	; 0x2b
 8017aae:	d031      	beq.n	8017b14 <__gethex+0x12e>
 8017ab0:	2b2d      	cmp	r3, #45	; 0x2d
 8017ab2:	d033      	beq.n	8017b1c <__gethex+0x136>
 8017ab4:	1c71      	adds	r1, r6, #1
 8017ab6:	f04f 0900 	mov.w	r9, #0
 8017aba:	7808      	ldrb	r0, [r1, #0]
 8017abc:	f7ff ff7e 	bl	80179bc <__hexdig_fun>
 8017ac0:	1e43      	subs	r3, r0, #1
 8017ac2:	b2db      	uxtb	r3, r3
 8017ac4:	2b18      	cmp	r3, #24
 8017ac6:	d831      	bhi.n	8017b2c <__gethex+0x146>
 8017ac8:	f1a0 0210 	sub.w	r2, r0, #16
 8017acc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8017ad0:	f7ff ff74 	bl	80179bc <__hexdig_fun>
 8017ad4:	1e43      	subs	r3, r0, #1
 8017ad6:	b2db      	uxtb	r3, r3
 8017ad8:	2b18      	cmp	r3, #24
 8017ada:	d922      	bls.n	8017b22 <__gethex+0x13c>
 8017adc:	f1b9 0f00 	cmp.w	r9, #0
 8017ae0:	d000      	beq.n	8017ae4 <__gethex+0xfe>
 8017ae2:	4252      	negs	r2, r2
 8017ae4:	4414      	add	r4, r2
 8017ae6:	f8ca 1000 	str.w	r1, [sl]
 8017aea:	b30d      	cbz	r5, 8017b30 <__gethex+0x14a>
 8017aec:	f1bb 0f00 	cmp.w	fp, #0
 8017af0:	bf0c      	ite	eq
 8017af2:	2706      	moveq	r7, #6
 8017af4:	2700      	movne	r7, #0
 8017af6:	4638      	mov	r0, r7
 8017af8:	b00b      	add	sp, #44	; 0x2c
 8017afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017afe:	f10b 0b01 	add.w	fp, fp, #1
 8017b02:	e78a      	b.n	8017a1a <__gethex+0x34>
 8017b04:	2500      	movs	r5, #0
 8017b06:	462c      	mov	r4, r5
 8017b08:	e7ae      	b.n	8017a68 <__gethex+0x82>
 8017b0a:	463e      	mov	r6, r7
 8017b0c:	2501      	movs	r5, #1
 8017b0e:	e7c7      	b.n	8017aa0 <__gethex+0xba>
 8017b10:	4604      	mov	r4, r0
 8017b12:	e7fb      	b.n	8017b0c <__gethex+0x126>
 8017b14:	f04f 0900 	mov.w	r9, #0
 8017b18:	1cb1      	adds	r1, r6, #2
 8017b1a:	e7ce      	b.n	8017aba <__gethex+0xd4>
 8017b1c:	f04f 0901 	mov.w	r9, #1
 8017b20:	e7fa      	b.n	8017b18 <__gethex+0x132>
 8017b22:	230a      	movs	r3, #10
 8017b24:	fb03 0202 	mla	r2, r3, r2, r0
 8017b28:	3a10      	subs	r2, #16
 8017b2a:	e7cf      	b.n	8017acc <__gethex+0xe6>
 8017b2c:	4631      	mov	r1, r6
 8017b2e:	e7da      	b.n	8017ae6 <__gethex+0x100>
 8017b30:	1bf3      	subs	r3, r6, r7
 8017b32:	3b01      	subs	r3, #1
 8017b34:	4629      	mov	r1, r5
 8017b36:	2b07      	cmp	r3, #7
 8017b38:	dc49      	bgt.n	8017bce <__gethex+0x1e8>
 8017b3a:	9802      	ldr	r0, [sp, #8]
 8017b3c:	f000 fa60 	bl	8018000 <_Balloc>
 8017b40:	9b01      	ldr	r3, [sp, #4]
 8017b42:	f100 0914 	add.w	r9, r0, #20
 8017b46:	f04f 0b00 	mov.w	fp, #0
 8017b4a:	f1c3 0301 	rsb	r3, r3, #1
 8017b4e:	4605      	mov	r5, r0
 8017b50:	f8cd 9010 	str.w	r9, [sp, #16]
 8017b54:	46da      	mov	sl, fp
 8017b56:	9308      	str	r3, [sp, #32]
 8017b58:	42b7      	cmp	r7, r6
 8017b5a:	d33b      	bcc.n	8017bd4 <__gethex+0x1ee>
 8017b5c:	9804      	ldr	r0, [sp, #16]
 8017b5e:	f840 ab04 	str.w	sl, [r0], #4
 8017b62:	eba0 0009 	sub.w	r0, r0, r9
 8017b66:	1080      	asrs	r0, r0, #2
 8017b68:	6128      	str	r0, [r5, #16]
 8017b6a:	0147      	lsls	r7, r0, #5
 8017b6c:	4650      	mov	r0, sl
 8017b6e:	f000 fb0b 	bl	8018188 <__hi0bits>
 8017b72:	f8d8 6000 	ldr.w	r6, [r8]
 8017b76:	1a3f      	subs	r7, r7, r0
 8017b78:	42b7      	cmp	r7, r6
 8017b7a:	dd64      	ble.n	8017c46 <__gethex+0x260>
 8017b7c:	1bbf      	subs	r7, r7, r6
 8017b7e:	4639      	mov	r1, r7
 8017b80:	4628      	mov	r0, r5
 8017b82:	f000 fe1b 	bl	80187bc <__any_on>
 8017b86:	4682      	mov	sl, r0
 8017b88:	b178      	cbz	r0, 8017baa <__gethex+0x1c4>
 8017b8a:	1e7b      	subs	r3, r7, #1
 8017b8c:	1159      	asrs	r1, r3, #5
 8017b8e:	f003 021f 	and.w	r2, r3, #31
 8017b92:	f04f 0a01 	mov.w	sl, #1
 8017b96:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8017b9a:	fa0a f202 	lsl.w	r2, sl, r2
 8017b9e:	420a      	tst	r2, r1
 8017ba0:	d003      	beq.n	8017baa <__gethex+0x1c4>
 8017ba2:	4553      	cmp	r3, sl
 8017ba4:	dc46      	bgt.n	8017c34 <__gethex+0x24e>
 8017ba6:	f04f 0a02 	mov.w	sl, #2
 8017baa:	4639      	mov	r1, r7
 8017bac:	4628      	mov	r0, r5
 8017bae:	f7ff fecb 	bl	8017948 <rshift>
 8017bb2:	443c      	add	r4, r7
 8017bb4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017bb8:	42a3      	cmp	r3, r4
 8017bba:	da52      	bge.n	8017c62 <__gethex+0x27c>
 8017bbc:	4629      	mov	r1, r5
 8017bbe:	9802      	ldr	r0, [sp, #8]
 8017bc0:	f000 fa52 	bl	8018068 <_Bfree>
 8017bc4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017bc6:	2300      	movs	r3, #0
 8017bc8:	6013      	str	r3, [r2, #0]
 8017bca:	27a3      	movs	r7, #163	; 0xa3
 8017bcc:	e793      	b.n	8017af6 <__gethex+0x110>
 8017bce:	3101      	adds	r1, #1
 8017bd0:	105b      	asrs	r3, r3, #1
 8017bd2:	e7b0      	b.n	8017b36 <__gethex+0x150>
 8017bd4:	1e73      	subs	r3, r6, #1
 8017bd6:	9305      	str	r3, [sp, #20]
 8017bd8:	9a07      	ldr	r2, [sp, #28]
 8017bda:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8017bde:	4293      	cmp	r3, r2
 8017be0:	d018      	beq.n	8017c14 <__gethex+0x22e>
 8017be2:	f1bb 0f20 	cmp.w	fp, #32
 8017be6:	d107      	bne.n	8017bf8 <__gethex+0x212>
 8017be8:	9b04      	ldr	r3, [sp, #16]
 8017bea:	f8c3 a000 	str.w	sl, [r3]
 8017bee:	3304      	adds	r3, #4
 8017bf0:	f04f 0a00 	mov.w	sl, #0
 8017bf4:	9304      	str	r3, [sp, #16]
 8017bf6:	46d3      	mov	fp, sl
 8017bf8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8017bfc:	f7ff fede 	bl	80179bc <__hexdig_fun>
 8017c00:	f000 000f 	and.w	r0, r0, #15
 8017c04:	fa00 f00b 	lsl.w	r0, r0, fp
 8017c08:	ea4a 0a00 	orr.w	sl, sl, r0
 8017c0c:	f10b 0b04 	add.w	fp, fp, #4
 8017c10:	9b05      	ldr	r3, [sp, #20]
 8017c12:	e00d      	b.n	8017c30 <__gethex+0x24a>
 8017c14:	9b05      	ldr	r3, [sp, #20]
 8017c16:	9a08      	ldr	r2, [sp, #32]
 8017c18:	4413      	add	r3, r2
 8017c1a:	42bb      	cmp	r3, r7
 8017c1c:	d3e1      	bcc.n	8017be2 <__gethex+0x1fc>
 8017c1e:	4618      	mov	r0, r3
 8017c20:	9a01      	ldr	r2, [sp, #4]
 8017c22:	9903      	ldr	r1, [sp, #12]
 8017c24:	9309      	str	r3, [sp, #36]	; 0x24
 8017c26:	f001 fa7f 	bl	8019128 <strncmp>
 8017c2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017c2c:	2800      	cmp	r0, #0
 8017c2e:	d1d8      	bne.n	8017be2 <__gethex+0x1fc>
 8017c30:	461e      	mov	r6, r3
 8017c32:	e791      	b.n	8017b58 <__gethex+0x172>
 8017c34:	1eb9      	subs	r1, r7, #2
 8017c36:	4628      	mov	r0, r5
 8017c38:	f000 fdc0 	bl	80187bc <__any_on>
 8017c3c:	2800      	cmp	r0, #0
 8017c3e:	d0b2      	beq.n	8017ba6 <__gethex+0x1c0>
 8017c40:	f04f 0a03 	mov.w	sl, #3
 8017c44:	e7b1      	b.n	8017baa <__gethex+0x1c4>
 8017c46:	da09      	bge.n	8017c5c <__gethex+0x276>
 8017c48:	1bf7      	subs	r7, r6, r7
 8017c4a:	4629      	mov	r1, r5
 8017c4c:	463a      	mov	r2, r7
 8017c4e:	9802      	ldr	r0, [sp, #8]
 8017c50:	f000 fbd6 	bl	8018400 <__lshift>
 8017c54:	1be4      	subs	r4, r4, r7
 8017c56:	4605      	mov	r5, r0
 8017c58:	f100 0914 	add.w	r9, r0, #20
 8017c5c:	f04f 0a00 	mov.w	sl, #0
 8017c60:	e7a8      	b.n	8017bb4 <__gethex+0x1ce>
 8017c62:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8017c66:	42a0      	cmp	r0, r4
 8017c68:	dd6a      	ble.n	8017d40 <__gethex+0x35a>
 8017c6a:	1b04      	subs	r4, r0, r4
 8017c6c:	42a6      	cmp	r6, r4
 8017c6e:	dc2e      	bgt.n	8017cce <__gethex+0x2e8>
 8017c70:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017c74:	2b02      	cmp	r3, #2
 8017c76:	d022      	beq.n	8017cbe <__gethex+0x2d8>
 8017c78:	2b03      	cmp	r3, #3
 8017c7a:	d024      	beq.n	8017cc6 <__gethex+0x2e0>
 8017c7c:	2b01      	cmp	r3, #1
 8017c7e:	d115      	bne.n	8017cac <__gethex+0x2c6>
 8017c80:	42a6      	cmp	r6, r4
 8017c82:	d113      	bne.n	8017cac <__gethex+0x2c6>
 8017c84:	2e01      	cmp	r6, #1
 8017c86:	dc0b      	bgt.n	8017ca0 <__gethex+0x2ba>
 8017c88:	9a06      	ldr	r2, [sp, #24]
 8017c8a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8017c8e:	6013      	str	r3, [r2, #0]
 8017c90:	2301      	movs	r3, #1
 8017c92:	612b      	str	r3, [r5, #16]
 8017c94:	f8c9 3000 	str.w	r3, [r9]
 8017c98:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017c9a:	2762      	movs	r7, #98	; 0x62
 8017c9c:	601d      	str	r5, [r3, #0]
 8017c9e:	e72a      	b.n	8017af6 <__gethex+0x110>
 8017ca0:	1e71      	subs	r1, r6, #1
 8017ca2:	4628      	mov	r0, r5
 8017ca4:	f000 fd8a 	bl	80187bc <__any_on>
 8017ca8:	2800      	cmp	r0, #0
 8017caa:	d1ed      	bne.n	8017c88 <__gethex+0x2a2>
 8017cac:	4629      	mov	r1, r5
 8017cae:	9802      	ldr	r0, [sp, #8]
 8017cb0:	f000 f9da 	bl	8018068 <_Bfree>
 8017cb4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017cb6:	2300      	movs	r3, #0
 8017cb8:	6013      	str	r3, [r2, #0]
 8017cba:	2750      	movs	r7, #80	; 0x50
 8017cbc:	e71b      	b.n	8017af6 <__gethex+0x110>
 8017cbe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017cc0:	2b00      	cmp	r3, #0
 8017cc2:	d0e1      	beq.n	8017c88 <__gethex+0x2a2>
 8017cc4:	e7f2      	b.n	8017cac <__gethex+0x2c6>
 8017cc6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017cc8:	2b00      	cmp	r3, #0
 8017cca:	d1dd      	bne.n	8017c88 <__gethex+0x2a2>
 8017ccc:	e7ee      	b.n	8017cac <__gethex+0x2c6>
 8017cce:	1e67      	subs	r7, r4, #1
 8017cd0:	f1ba 0f00 	cmp.w	sl, #0
 8017cd4:	d131      	bne.n	8017d3a <__gethex+0x354>
 8017cd6:	b127      	cbz	r7, 8017ce2 <__gethex+0x2fc>
 8017cd8:	4639      	mov	r1, r7
 8017cda:	4628      	mov	r0, r5
 8017cdc:	f000 fd6e 	bl	80187bc <__any_on>
 8017ce0:	4682      	mov	sl, r0
 8017ce2:	117a      	asrs	r2, r7, #5
 8017ce4:	2301      	movs	r3, #1
 8017ce6:	f007 071f 	and.w	r7, r7, #31
 8017cea:	fa03 f707 	lsl.w	r7, r3, r7
 8017cee:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8017cf2:	4621      	mov	r1, r4
 8017cf4:	421f      	tst	r7, r3
 8017cf6:	4628      	mov	r0, r5
 8017cf8:	bf18      	it	ne
 8017cfa:	f04a 0a02 	orrne.w	sl, sl, #2
 8017cfe:	1b36      	subs	r6, r6, r4
 8017d00:	f7ff fe22 	bl	8017948 <rshift>
 8017d04:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8017d08:	2702      	movs	r7, #2
 8017d0a:	f1ba 0f00 	cmp.w	sl, #0
 8017d0e:	d048      	beq.n	8017da2 <__gethex+0x3bc>
 8017d10:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017d14:	2b02      	cmp	r3, #2
 8017d16:	d015      	beq.n	8017d44 <__gethex+0x35e>
 8017d18:	2b03      	cmp	r3, #3
 8017d1a:	d017      	beq.n	8017d4c <__gethex+0x366>
 8017d1c:	2b01      	cmp	r3, #1
 8017d1e:	d109      	bne.n	8017d34 <__gethex+0x34e>
 8017d20:	f01a 0f02 	tst.w	sl, #2
 8017d24:	d006      	beq.n	8017d34 <__gethex+0x34e>
 8017d26:	f8d9 3000 	ldr.w	r3, [r9]
 8017d2a:	ea4a 0a03 	orr.w	sl, sl, r3
 8017d2e:	f01a 0f01 	tst.w	sl, #1
 8017d32:	d10e      	bne.n	8017d52 <__gethex+0x36c>
 8017d34:	f047 0710 	orr.w	r7, r7, #16
 8017d38:	e033      	b.n	8017da2 <__gethex+0x3bc>
 8017d3a:	f04f 0a01 	mov.w	sl, #1
 8017d3e:	e7d0      	b.n	8017ce2 <__gethex+0x2fc>
 8017d40:	2701      	movs	r7, #1
 8017d42:	e7e2      	b.n	8017d0a <__gethex+0x324>
 8017d44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017d46:	f1c3 0301 	rsb	r3, r3, #1
 8017d4a:	9315      	str	r3, [sp, #84]	; 0x54
 8017d4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017d4e:	2b00      	cmp	r3, #0
 8017d50:	d0f0      	beq.n	8017d34 <__gethex+0x34e>
 8017d52:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8017d56:	f105 0314 	add.w	r3, r5, #20
 8017d5a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8017d5e:	eb03 010a 	add.w	r1, r3, sl
 8017d62:	f04f 0c00 	mov.w	ip, #0
 8017d66:	4618      	mov	r0, r3
 8017d68:	f853 2b04 	ldr.w	r2, [r3], #4
 8017d6c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8017d70:	d01c      	beq.n	8017dac <__gethex+0x3c6>
 8017d72:	3201      	adds	r2, #1
 8017d74:	6002      	str	r2, [r0, #0]
 8017d76:	2f02      	cmp	r7, #2
 8017d78:	f105 0314 	add.w	r3, r5, #20
 8017d7c:	d138      	bne.n	8017df0 <__gethex+0x40a>
 8017d7e:	f8d8 2000 	ldr.w	r2, [r8]
 8017d82:	3a01      	subs	r2, #1
 8017d84:	42b2      	cmp	r2, r6
 8017d86:	d10a      	bne.n	8017d9e <__gethex+0x3b8>
 8017d88:	1171      	asrs	r1, r6, #5
 8017d8a:	2201      	movs	r2, #1
 8017d8c:	f006 061f 	and.w	r6, r6, #31
 8017d90:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017d94:	fa02 f606 	lsl.w	r6, r2, r6
 8017d98:	421e      	tst	r6, r3
 8017d9a:	bf18      	it	ne
 8017d9c:	4617      	movne	r7, r2
 8017d9e:	f047 0720 	orr.w	r7, r7, #32
 8017da2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017da4:	601d      	str	r5, [r3, #0]
 8017da6:	9b06      	ldr	r3, [sp, #24]
 8017da8:	601c      	str	r4, [r3, #0]
 8017daa:	e6a4      	b.n	8017af6 <__gethex+0x110>
 8017dac:	4299      	cmp	r1, r3
 8017dae:	f843 cc04 	str.w	ip, [r3, #-4]
 8017db2:	d8d8      	bhi.n	8017d66 <__gethex+0x380>
 8017db4:	68ab      	ldr	r3, [r5, #8]
 8017db6:	4599      	cmp	r9, r3
 8017db8:	db12      	blt.n	8017de0 <__gethex+0x3fa>
 8017dba:	6869      	ldr	r1, [r5, #4]
 8017dbc:	9802      	ldr	r0, [sp, #8]
 8017dbe:	3101      	adds	r1, #1
 8017dc0:	f000 f91e 	bl	8018000 <_Balloc>
 8017dc4:	692a      	ldr	r2, [r5, #16]
 8017dc6:	3202      	adds	r2, #2
 8017dc8:	f105 010c 	add.w	r1, r5, #12
 8017dcc:	4683      	mov	fp, r0
 8017dce:	0092      	lsls	r2, r2, #2
 8017dd0:	300c      	adds	r0, #12
 8017dd2:	f7fd f90d 	bl	8014ff0 <memcpy>
 8017dd6:	4629      	mov	r1, r5
 8017dd8:	9802      	ldr	r0, [sp, #8]
 8017dda:	f000 f945 	bl	8018068 <_Bfree>
 8017dde:	465d      	mov	r5, fp
 8017de0:	692b      	ldr	r3, [r5, #16]
 8017de2:	1c5a      	adds	r2, r3, #1
 8017de4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8017de8:	612a      	str	r2, [r5, #16]
 8017dea:	2201      	movs	r2, #1
 8017dec:	615a      	str	r2, [r3, #20]
 8017dee:	e7c2      	b.n	8017d76 <__gethex+0x390>
 8017df0:	692a      	ldr	r2, [r5, #16]
 8017df2:	454a      	cmp	r2, r9
 8017df4:	dd0b      	ble.n	8017e0e <__gethex+0x428>
 8017df6:	2101      	movs	r1, #1
 8017df8:	4628      	mov	r0, r5
 8017dfa:	f7ff fda5 	bl	8017948 <rshift>
 8017dfe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017e02:	3401      	adds	r4, #1
 8017e04:	42a3      	cmp	r3, r4
 8017e06:	f6ff aed9 	blt.w	8017bbc <__gethex+0x1d6>
 8017e0a:	2701      	movs	r7, #1
 8017e0c:	e7c7      	b.n	8017d9e <__gethex+0x3b8>
 8017e0e:	f016 061f 	ands.w	r6, r6, #31
 8017e12:	d0fa      	beq.n	8017e0a <__gethex+0x424>
 8017e14:	449a      	add	sl, r3
 8017e16:	f1c6 0620 	rsb	r6, r6, #32
 8017e1a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8017e1e:	f000 f9b3 	bl	8018188 <__hi0bits>
 8017e22:	42b0      	cmp	r0, r6
 8017e24:	dbe7      	blt.n	8017df6 <__gethex+0x410>
 8017e26:	e7f0      	b.n	8017e0a <__gethex+0x424>

08017e28 <L_shift>:
 8017e28:	f1c2 0208 	rsb	r2, r2, #8
 8017e2c:	0092      	lsls	r2, r2, #2
 8017e2e:	b570      	push	{r4, r5, r6, lr}
 8017e30:	f1c2 0620 	rsb	r6, r2, #32
 8017e34:	6843      	ldr	r3, [r0, #4]
 8017e36:	6804      	ldr	r4, [r0, #0]
 8017e38:	fa03 f506 	lsl.w	r5, r3, r6
 8017e3c:	432c      	orrs	r4, r5
 8017e3e:	40d3      	lsrs	r3, r2
 8017e40:	6004      	str	r4, [r0, #0]
 8017e42:	f840 3f04 	str.w	r3, [r0, #4]!
 8017e46:	4288      	cmp	r0, r1
 8017e48:	d3f4      	bcc.n	8017e34 <L_shift+0xc>
 8017e4a:	bd70      	pop	{r4, r5, r6, pc}

08017e4c <__match>:
 8017e4c:	b530      	push	{r4, r5, lr}
 8017e4e:	6803      	ldr	r3, [r0, #0]
 8017e50:	3301      	adds	r3, #1
 8017e52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017e56:	b914      	cbnz	r4, 8017e5e <__match+0x12>
 8017e58:	6003      	str	r3, [r0, #0]
 8017e5a:	2001      	movs	r0, #1
 8017e5c:	bd30      	pop	{r4, r5, pc}
 8017e5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017e62:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8017e66:	2d19      	cmp	r5, #25
 8017e68:	bf98      	it	ls
 8017e6a:	3220      	addls	r2, #32
 8017e6c:	42a2      	cmp	r2, r4
 8017e6e:	d0f0      	beq.n	8017e52 <__match+0x6>
 8017e70:	2000      	movs	r0, #0
 8017e72:	e7f3      	b.n	8017e5c <__match+0x10>

08017e74 <__hexnan>:
 8017e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e78:	680b      	ldr	r3, [r1, #0]
 8017e7a:	6801      	ldr	r1, [r0, #0]
 8017e7c:	115f      	asrs	r7, r3, #5
 8017e7e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8017e82:	f013 031f 	ands.w	r3, r3, #31
 8017e86:	b087      	sub	sp, #28
 8017e88:	bf18      	it	ne
 8017e8a:	3704      	addne	r7, #4
 8017e8c:	2500      	movs	r5, #0
 8017e8e:	1f3e      	subs	r6, r7, #4
 8017e90:	4682      	mov	sl, r0
 8017e92:	4690      	mov	r8, r2
 8017e94:	9301      	str	r3, [sp, #4]
 8017e96:	f847 5c04 	str.w	r5, [r7, #-4]
 8017e9a:	46b1      	mov	r9, r6
 8017e9c:	4634      	mov	r4, r6
 8017e9e:	9502      	str	r5, [sp, #8]
 8017ea0:	46ab      	mov	fp, r5
 8017ea2:	784a      	ldrb	r2, [r1, #1]
 8017ea4:	1c4b      	adds	r3, r1, #1
 8017ea6:	9303      	str	r3, [sp, #12]
 8017ea8:	b342      	cbz	r2, 8017efc <__hexnan+0x88>
 8017eaa:	4610      	mov	r0, r2
 8017eac:	9105      	str	r1, [sp, #20]
 8017eae:	9204      	str	r2, [sp, #16]
 8017eb0:	f7ff fd84 	bl	80179bc <__hexdig_fun>
 8017eb4:	2800      	cmp	r0, #0
 8017eb6:	d143      	bne.n	8017f40 <__hexnan+0xcc>
 8017eb8:	9a04      	ldr	r2, [sp, #16]
 8017eba:	9905      	ldr	r1, [sp, #20]
 8017ebc:	2a20      	cmp	r2, #32
 8017ebe:	d818      	bhi.n	8017ef2 <__hexnan+0x7e>
 8017ec0:	9b02      	ldr	r3, [sp, #8]
 8017ec2:	459b      	cmp	fp, r3
 8017ec4:	dd13      	ble.n	8017eee <__hexnan+0x7a>
 8017ec6:	454c      	cmp	r4, r9
 8017ec8:	d206      	bcs.n	8017ed8 <__hexnan+0x64>
 8017eca:	2d07      	cmp	r5, #7
 8017ecc:	dc04      	bgt.n	8017ed8 <__hexnan+0x64>
 8017ece:	462a      	mov	r2, r5
 8017ed0:	4649      	mov	r1, r9
 8017ed2:	4620      	mov	r0, r4
 8017ed4:	f7ff ffa8 	bl	8017e28 <L_shift>
 8017ed8:	4544      	cmp	r4, r8
 8017eda:	d944      	bls.n	8017f66 <__hexnan+0xf2>
 8017edc:	2300      	movs	r3, #0
 8017ede:	f1a4 0904 	sub.w	r9, r4, #4
 8017ee2:	f844 3c04 	str.w	r3, [r4, #-4]
 8017ee6:	f8cd b008 	str.w	fp, [sp, #8]
 8017eea:	464c      	mov	r4, r9
 8017eec:	461d      	mov	r5, r3
 8017eee:	9903      	ldr	r1, [sp, #12]
 8017ef0:	e7d7      	b.n	8017ea2 <__hexnan+0x2e>
 8017ef2:	2a29      	cmp	r2, #41	; 0x29
 8017ef4:	d14a      	bne.n	8017f8c <__hexnan+0x118>
 8017ef6:	3102      	adds	r1, #2
 8017ef8:	f8ca 1000 	str.w	r1, [sl]
 8017efc:	f1bb 0f00 	cmp.w	fp, #0
 8017f00:	d044      	beq.n	8017f8c <__hexnan+0x118>
 8017f02:	454c      	cmp	r4, r9
 8017f04:	d206      	bcs.n	8017f14 <__hexnan+0xa0>
 8017f06:	2d07      	cmp	r5, #7
 8017f08:	dc04      	bgt.n	8017f14 <__hexnan+0xa0>
 8017f0a:	462a      	mov	r2, r5
 8017f0c:	4649      	mov	r1, r9
 8017f0e:	4620      	mov	r0, r4
 8017f10:	f7ff ff8a 	bl	8017e28 <L_shift>
 8017f14:	4544      	cmp	r4, r8
 8017f16:	d928      	bls.n	8017f6a <__hexnan+0xf6>
 8017f18:	4643      	mov	r3, r8
 8017f1a:	f854 2b04 	ldr.w	r2, [r4], #4
 8017f1e:	f843 2b04 	str.w	r2, [r3], #4
 8017f22:	42a6      	cmp	r6, r4
 8017f24:	d2f9      	bcs.n	8017f1a <__hexnan+0xa6>
 8017f26:	2200      	movs	r2, #0
 8017f28:	f843 2b04 	str.w	r2, [r3], #4
 8017f2c:	429e      	cmp	r6, r3
 8017f2e:	d2fb      	bcs.n	8017f28 <__hexnan+0xb4>
 8017f30:	6833      	ldr	r3, [r6, #0]
 8017f32:	b91b      	cbnz	r3, 8017f3c <__hexnan+0xc8>
 8017f34:	4546      	cmp	r6, r8
 8017f36:	d127      	bne.n	8017f88 <__hexnan+0x114>
 8017f38:	2301      	movs	r3, #1
 8017f3a:	6033      	str	r3, [r6, #0]
 8017f3c:	2005      	movs	r0, #5
 8017f3e:	e026      	b.n	8017f8e <__hexnan+0x11a>
 8017f40:	3501      	adds	r5, #1
 8017f42:	2d08      	cmp	r5, #8
 8017f44:	f10b 0b01 	add.w	fp, fp, #1
 8017f48:	dd06      	ble.n	8017f58 <__hexnan+0xe4>
 8017f4a:	4544      	cmp	r4, r8
 8017f4c:	d9cf      	bls.n	8017eee <__hexnan+0x7a>
 8017f4e:	2300      	movs	r3, #0
 8017f50:	f844 3c04 	str.w	r3, [r4, #-4]
 8017f54:	2501      	movs	r5, #1
 8017f56:	3c04      	subs	r4, #4
 8017f58:	6822      	ldr	r2, [r4, #0]
 8017f5a:	f000 000f 	and.w	r0, r0, #15
 8017f5e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8017f62:	6020      	str	r0, [r4, #0]
 8017f64:	e7c3      	b.n	8017eee <__hexnan+0x7a>
 8017f66:	2508      	movs	r5, #8
 8017f68:	e7c1      	b.n	8017eee <__hexnan+0x7a>
 8017f6a:	9b01      	ldr	r3, [sp, #4]
 8017f6c:	2b00      	cmp	r3, #0
 8017f6e:	d0df      	beq.n	8017f30 <__hexnan+0xbc>
 8017f70:	f04f 32ff 	mov.w	r2, #4294967295
 8017f74:	f1c3 0320 	rsb	r3, r3, #32
 8017f78:	fa22 f303 	lsr.w	r3, r2, r3
 8017f7c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8017f80:	401a      	ands	r2, r3
 8017f82:	f847 2c04 	str.w	r2, [r7, #-4]
 8017f86:	e7d3      	b.n	8017f30 <__hexnan+0xbc>
 8017f88:	3e04      	subs	r6, #4
 8017f8a:	e7d1      	b.n	8017f30 <__hexnan+0xbc>
 8017f8c:	2004      	movs	r0, #4
 8017f8e:	b007      	add	sp, #28
 8017f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017f94 <__locale_ctype_ptr_l>:
 8017f94:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8017f98:	4770      	bx	lr
	...

08017f9c <__locale_ctype_ptr>:
 8017f9c:	4b04      	ldr	r3, [pc, #16]	; (8017fb0 <__locale_ctype_ptr+0x14>)
 8017f9e:	4a05      	ldr	r2, [pc, #20]	; (8017fb4 <__locale_ctype_ptr+0x18>)
 8017fa0:	681b      	ldr	r3, [r3, #0]
 8017fa2:	6a1b      	ldr	r3, [r3, #32]
 8017fa4:	2b00      	cmp	r3, #0
 8017fa6:	bf08      	it	eq
 8017fa8:	4613      	moveq	r3, r2
 8017faa:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8017fae:	4770      	bx	lr
 8017fb0:	20000e5c 	.word	0x20000e5c
 8017fb4:	20000ec0 	.word	0x20000ec0

08017fb8 <__localeconv_l>:
 8017fb8:	30f0      	adds	r0, #240	; 0xf0
 8017fba:	4770      	bx	lr

08017fbc <_localeconv_r>:
 8017fbc:	4b04      	ldr	r3, [pc, #16]	; (8017fd0 <_localeconv_r+0x14>)
 8017fbe:	681b      	ldr	r3, [r3, #0]
 8017fc0:	6a18      	ldr	r0, [r3, #32]
 8017fc2:	4b04      	ldr	r3, [pc, #16]	; (8017fd4 <_localeconv_r+0x18>)
 8017fc4:	2800      	cmp	r0, #0
 8017fc6:	bf08      	it	eq
 8017fc8:	4618      	moveq	r0, r3
 8017fca:	30f0      	adds	r0, #240	; 0xf0
 8017fcc:	4770      	bx	lr
 8017fce:	bf00      	nop
 8017fd0:	20000e5c 	.word	0x20000e5c
 8017fd4:	20000ec0 	.word	0x20000ec0

08017fd8 <__ascii_mbtowc>:
 8017fd8:	b082      	sub	sp, #8
 8017fda:	b901      	cbnz	r1, 8017fde <__ascii_mbtowc+0x6>
 8017fdc:	a901      	add	r1, sp, #4
 8017fde:	b142      	cbz	r2, 8017ff2 <__ascii_mbtowc+0x1a>
 8017fe0:	b14b      	cbz	r3, 8017ff6 <__ascii_mbtowc+0x1e>
 8017fe2:	7813      	ldrb	r3, [r2, #0]
 8017fe4:	600b      	str	r3, [r1, #0]
 8017fe6:	7812      	ldrb	r2, [r2, #0]
 8017fe8:	1c10      	adds	r0, r2, #0
 8017fea:	bf18      	it	ne
 8017fec:	2001      	movne	r0, #1
 8017fee:	b002      	add	sp, #8
 8017ff0:	4770      	bx	lr
 8017ff2:	4610      	mov	r0, r2
 8017ff4:	e7fb      	b.n	8017fee <__ascii_mbtowc+0x16>
 8017ff6:	f06f 0001 	mvn.w	r0, #1
 8017ffa:	e7f8      	b.n	8017fee <__ascii_mbtowc+0x16>

08017ffc <__malloc_lock>:
 8017ffc:	4770      	bx	lr

08017ffe <__malloc_unlock>:
 8017ffe:	4770      	bx	lr

08018000 <_Balloc>:
 8018000:	b570      	push	{r4, r5, r6, lr}
 8018002:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8018004:	4604      	mov	r4, r0
 8018006:	460e      	mov	r6, r1
 8018008:	b93d      	cbnz	r5, 801801a <_Balloc+0x1a>
 801800a:	2010      	movs	r0, #16
 801800c:	f7fc ffe0 	bl	8014fd0 <malloc>
 8018010:	6260      	str	r0, [r4, #36]	; 0x24
 8018012:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8018016:	6005      	str	r5, [r0, #0]
 8018018:	60c5      	str	r5, [r0, #12]
 801801a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801801c:	68eb      	ldr	r3, [r5, #12]
 801801e:	b183      	cbz	r3, 8018042 <_Balloc+0x42>
 8018020:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018022:	68db      	ldr	r3, [r3, #12]
 8018024:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8018028:	b9b8      	cbnz	r0, 801805a <_Balloc+0x5a>
 801802a:	2101      	movs	r1, #1
 801802c:	fa01 f506 	lsl.w	r5, r1, r6
 8018030:	1d6a      	adds	r2, r5, #5
 8018032:	0092      	lsls	r2, r2, #2
 8018034:	4620      	mov	r0, r4
 8018036:	f000 fbe2 	bl	80187fe <_calloc_r>
 801803a:	b160      	cbz	r0, 8018056 <_Balloc+0x56>
 801803c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8018040:	e00e      	b.n	8018060 <_Balloc+0x60>
 8018042:	2221      	movs	r2, #33	; 0x21
 8018044:	2104      	movs	r1, #4
 8018046:	4620      	mov	r0, r4
 8018048:	f000 fbd9 	bl	80187fe <_calloc_r>
 801804c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801804e:	60e8      	str	r0, [r5, #12]
 8018050:	68db      	ldr	r3, [r3, #12]
 8018052:	2b00      	cmp	r3, #0
 8018054:	d1e4      	bne.n	8018020 <_Balloc+0x20>
 8018056:	2000      	movs	r0, #0
 8018058:	bd70      	pop	{r4, r5, r6, pc}
 801805a:	6802      	ldr	r2, [r0, #0]
 801805c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8018060:	2300      	movs	r3, #0
 8018062:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018066:	e7f7      	b.n	8018058 <_Balloc+0x58>

08018068 <_Bfree>:
 8018068:	b570      	push	{r4, r5, r6, lr}
 801806a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801806c:	4606      	mov	r6, r0
 801806e:	460d      	mov	r5, r1
 8018070:	b93c      	cbnz	r4, 8018082 <_Bfree+0x1a>
 8018072:	2010      	movs	r0, #16
 8018074:	f7fc ffac 	bl	8014fd0 <malloc>
 8018078:	6270      	str	r0, [r6, #36]	; 0x24
 801807a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801807e:	6004      	str	r4, [r0, #0]
 8018080:	60c4      	str	r4, [r0, #12]
 8018082:	b13d      	cbz	r5, 8018094 <_Bfree+0x2c>
 8018084:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8018086:	686a      	ldr	r2, [r5, #4]
 8018088:	68db      	ldr	r3, [r3, #12]
 801808a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801808e:	6029      	str	r1, [r5, #0]
 8018090:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8018094:	bd70      	pop	{r4, r5, r6, pc}

08018096 <__multadd>:
 8018096:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801809a:	690d      	ldr	r5, [r1, #16]
 801809c:	461f      	mov	r7, r3
 801809e:	4606      	mov	r6, r0
 80180a0:	460c      	mov	r4, r1
 80180a2:	f101 0c14 	add.w	ip, r1, #20
 80180a6:	2300      	movs	r3, #0
 80180a8:	f8dc 0000 	ldr.w	r0, [ip]
 80180ac:	b281      	uxth	r1, r0
 80180ae:	fb02 7101 	mla	r1, r2, r1, r7
 80180b2:	0c0f      	lsrs	r7, r1, #16
 80180b4:	0c00      	lsrs	r0, r0, #16
 80180b6:	fb02 7000 	mla	r0, r2, r0, r7
 80180ba:	b289      	uxth	r1, r1
 80180bc:	3301      	adds	r3, #1
 80180be:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80180c2:	429d      	cmp	r5, r3
 80180c4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80180c8:	f84c 1b04 	str.w	r1, [ip], #4
 80180cc:	dcec      	bgt.n	80180a8 <__multadd+0x12>
 80180ce:	b1d7      	cbz	r7, 8018106 <__multadd+0x70>
 80180d0:	68a3      	ldr	r3, [r4, #8]
 80180d2:	42ab      	cmp	r3, r5
 80180d4:	dc12      	bgt.n	80180fc <__multadd+0x66>
 80180d6:	6861      	ldr	r1, [r4, #4]
 80180d8:	4630      	mov	r0, r6
 80180da:	3101      	adds	r1, #1
 80180dc:	f7ff ff90 	bl	8018000 <_Balloc>
 80180e0:	6922      	ldr	r2, [r4, #16]
 80180e2:	3202      	adds	r2, #2
 80180e4:	f104 010c 	add.w	r1, r4, #12
 80180e8:	4680      	mov	r8, r0
 80180ea:	0092      	lsls	r2, r2, #2
 80180ec:	300c      	adds	r0, #12
 80180ee:	f7fc ff7f 	bl	8014ff0 <memcpy>
 80180f2:	4621      	mov	r1, r4
 80180f4:	4630      	mov	r0, r6
 80180f6:	f7ff ffb7 	bl	8018068 <_Bfree>
 80180fa:	4644      	mov	r4, r8
 80180fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018100:	3501      	adds	r5, #1
 8018102:	615f      	str	r7, [r3, #20]
 8018104:	6125      	str	r5, [r4, #16]
 8018106:	4620      	mov	r0, r4
 8018108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801810c <__s2b>:
 801810c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018110:	460c      	mov	r4, r1
 8018112:	4615      	mov	r5, r2
 8018114:	461f      	mov	r7, r3
 8018116:	2209      	movs	r2, #9
 8018118:	3308      	adds	r3, #8
 801811a:	4606      	mov	r6, r0
 801811c:	fb93 f3f2 	sdiv	r3, r3, r2
 8018120:	2100      	movs	r1, #0
 8018122:	2201      	movs	r2, #1
 8018124:	429a      	cmp	r2, r3
 8018126:	db20      	blt.n	801816a <__s2b+0x5e>
 8018128:	4630      	mov	r0, r6
 801812a:	f7ff ff69 	bl	8018000 <_Balloc>
 801812e:	9b08      	ldr	r3, [sp, #32]
 8018130:	6143      	str	r3, [r0, #20]
 8018132:	2d09      	cmp	r5, #9
 8018134:	f04f 0301 	mov.w	r3, #1
 8018138:	6103      	str	r3, [r0, #16]
 801813a:	dd19      	ble.n	8018170 <__s2b+0x64>
 801813c:	f104 0809 	add.w	r8, r4, #9
 8018140:	46c1      	mov	r9, r8
 8018142:	442c      	add	r4, r5
 8018144:	f819 3b01 	ldrb.w	r3, [r9], #1
 8018148:	4601      	mov	r1, r0
 801814a:	3b30      	subs	r3, #48	; 0x30
 801814c:	220a      	movs	r2, #10
 801814e:	4630      	mov	r0, r6
 8018150:	f7ff ffa1 	bl	8018096 <__multadd>
 8018154:	45a1      	cmp	r9, r4
 8018156:	d1f5      	bne.n	8018144 <__s2b+0x38>
 8018158:	eb08 0405 	add.w	r4, r8, r5
 801815c:	3c08      	subs	r4, #8
 801815e:	1b2d      	subs	r5, r5, r4
 8018160:	1963      	adds	r3, r4, r5
 8018162:	42bb      	cmp	r3, r7
 8018164:	db07      	blt.n	8018176 <__s2b+0x6a>
 8018166:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801816a:	0052      	lsls	r2, r2, #1
 801816c:	3101      	adds	r1, #1
 801816e:	e7d9      	b.n	8018124 <__s2b+0x18>
 8018170:	340a      	adds	r4, #10
 8018172:	2509      	movs	r5, #9
 8018174:	e7f3      	b.n	801815e <__s2b+0x52>
 8018176:	f814 3b01 	ldrb.w	r3, [r4], #1
 801817a:	4601      	mov	r1, r0
 801817c:	3b30      	subs	r3, #48	; 0x30
 801817e:	220a      	movs	r2, #10
 8018180:	4630      	mov	r0, r6
 8018182:	f7ff ff88 	bl	8018096 <__multadd>
 8018186:	e7eb      	b.n	8018160 <__s2b+0x54>

08018188 <__hi0bits>:
 8018188:	0c02      	lsrs	r2, r0, #16
 801818a:	0412      	lsls	r2, r2, #16
 801818c:	4603      	mov	r3, r0
 801818e:	b9b2      	cbnz	r2, 80181be <__hi0bits+0x36>
 8018190:	0403      	lsls	r3, r0, #16
 8018192:	2010      	movs	r0, #16
 8018194:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8018198:	bf04      	itt	eq
 801819a:	021b      	lsleq	r3, r3, #8
 801819c:	3008      	addeq	r0, #8
 801819e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80181a2:	bf04      	itt	eq
 80181a4:	011b      	lsleq	r3, r3, #4
 80181a6:	3004      	addeq	r0, #4
 80181a8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80181ac:	bf04      	itt	eq
 80181ae:	009b      	lsleq	r3, r3, #2
 80181b0:	3002      	addeq	r0, #2
 80181b2:	2b00      	cmp	r3, #0
 80181b4:	db06      	blt.n	80181c4 <__hi0bits+0x3c>
 80181b6:	005b      	lsls	r3, r3, #1
 80181b8:	d503      	bpl.n	80181c2 <__hi0bits+0x3a>
 80181ba:	3001      	adds	r0, #1
 80181bc:	4770      	bx	lr
 80181be:	2000      	movs	r0, #0
 80181c0:	e7e8      	b.n	8018194 <__hi0bits+0xc>
 80181c2:	2020      	movs	r0, #32
 80181c4:	4770      	bx	lr

080181c6 <__lo0bits>:
 80181c6:	6803      	ldr	r3, [r0, #0]
 80181c8:	f013 0207 	ands.w	r2, r3, #7
 80181cc:	4601      	mov	r1, r0
 80181ce:	d00b      	beq.n	80181e8 <__lo0bits+0x22>
 80181d0:	07da      	lsls	r2, r3, #31
 80181d2:	d423      	bmi.n	801821c <__lo0bits+0x56>
 80181d4:	0798      	lsls	r0, r3, #30
 80181d6:	bf49      	itett	mi
 80181d8:	085b      	lsrmi	r3, r3, #1
 80181da:	089b      	lsrpl	r3, r3, #2
 80181dc:	2001      	movmi	r0, #1
 80181de:	600b      	strmi	r3, [r1, #0]
 80181e0:	bf5c      	itt	pl
 80181e2:	600b      	strpl	r3, [r1, #0]
 80181e4:	2002      	movpl	r0, #2
 80181e6:	4770      	bx	lr
 80181e8:	b298      	uxth	r0, r3
 80181ea:	b9a8      	cbnz	r0, 8018218 <__lo0bits+0x52>
 80181ec:	0c1b      	lsrs	r3, r3, #16
 80181ee:	2010      	movs	r0, #16
 80181f0:	f013 0fff 	tst.w	r3, #255	; 0xff
 80181f4:	bf04      	itt	eq
 80181f6:	0a1b      	lsreq	r3, r3, #8
 80181f8:	3008      	addeq	r0, #8
 80181fa:	071a      	lsls	r2, r3, #28
 80181fc:	bf04      	itt	eq
 80181fe:	091b      	lsreq	r3, r3, #4
 8018200:	3004      	addeq	r0, #4
 8018202:	079a      	lsls	r2, r3, #30
 8018204:	bf04      	itt	eq
 8018206:	089b      	lsreq	r3, r3, #2
 8018208:	3002      	addeq	r0, #2
 801820a:	07da      	lsls	r2, r3, #31
 801820c:	d402      	bmi.n	8018214 <__lo0bits+0x4e>
 801820e:	085b      	lsrs	r3, r3, #1
 8018210:	d006      	beq.n	8018220 <__lo0bits+0x5a>
 8018212:	3001      	adds	r0, #1
 8018214:	600b      	str	r3, [r1, #0]
 8018216:	4770      	bx	lr
 8018218:	4610      	mov	r0, r2
 801821a:	e7e9      	b.n	80181f0 <__lo0bits+0x2a>
 801821c:	2000      	movs	r0, #0
 801821e:	4770      	bx	lr
 8018220:	2020      	movs	r0, #32
 8018222:	4770      	bx	lr

08018224 <__i2b>:
 8018224:	b510      	push	{r4, lr}
 8018226:	460c      	mov	r4, r1
 8018228:	2101      	movs	r1, #1
 801822a:	f7ff fee9 	bl	8018000 <_Balloc>
 801822e:	2201      	movs	r2, #1
 8018230:	6144      	str	r4, [r0, #20]
 8018232:	6102      	str	r2, [r0, #16]
 8018234:	bd10      	pop	{r4, pc}

08018236 <__multiply>:
 8018236:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801823a:	4614      	mov	r4, r2
 801823c:	690a      	ldr	r2, [r1, #16]
 801823e:	6923      	ldr	r3, [r4, #16]
 8018240:	429a      	cmp	r2, r3
 8018242:	bfb8      	it	lt
 8018244:	460b      	movlt	r3, r1
 8018246:	4688      	mov	r8, r1
 8018248:	bfbc      	itt	lt
 801824a:	46a0      	movlt	r8, r4
 801824c:	461c      	movlt	r4, r3
 801824e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8018252:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8018256:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801825a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801825e:	eb07 0609 	add.w	r6, r7, r9
 8018262:	42b3      	cmp	r3, r6
 8018264:	bfb8      	it	lt
 8018266:	3101      	addlt	r1, #1
 8018268:	f7ff feca 	bl	8018000 <_Balloc>
 801826c:	f100 0514 	add.w	r5, r0, #20
 8018270:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8018274:	462b      	mov	r3, r5
 8018276:	2200      	movs	r2, #0
 8018278:	4573      	cmp	r3, lr
 801827a:	d316      	bcc.n	80182aa <__multiply+0x74>
 801827c:	f104 0214 	add.w	r2, r4, #20
 8018280:	f108 0114 	add.w	r1, r8, #20
 8018284:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8018288:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801828c:	9300      	str	r3, [sp, #0]
 801828e:	9b00      	ldr	r3, [sp, #0]
 8018290:	9201      	str	r2, [sp, #4]
 8018292:	4293      	cmp	r3, r2
 8018294:	d80c      	bhi.n	80182b0 <__multiply+0x7a>
 8018296:	2e00      	cmp	r6, #0
 8018298:	dd03      	ble.n	80182a2 <__multiply+0x6c>
 801829a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801829e:	2b00      	cmp	r3, #0
 80182a0:	d05d      	beq.n	801835e <__multiply+0x128>
 80182a2:	6106      	str	r6, [r0, #16]
 80182a4:	b003      	add	sp, #12
 80182a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80182aa:	f843 2b04 	str.w	r2, [r3], #4
 80182ae:	e7e3      	b.n	8018278 <__multiply+0x42>
 80182b0:	f8b2 b000 	ldrh.w	fp, [r2]
 80182b4:	f1bb 0f00 	cmp.w	fp, #0
 80182b8:	d023      	beq.n	8018302 <__multiply+0xcc>
 80182ba:	4689      	mov	r9, r1
 80182bc:	46ac      	mov	ip, r5
 80182be:	f04f 0800 	mov.w	r8, #0
 80182c2:	f859 4b04 	ldr.w	r4, [r9], #4
 80182c6:	f8dc a000 	ldr.w	sl, [ip]
 80182ca:	b2a3      	uxth	r3, r4
 80182cc:	fa1f fa8a 	uxth.w	sl, sl
 80182d0:	fb0b a303 	mla	r3, fp, r3, sl
 80182d4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80182d8:	f8dc 4000 	ldr.w	r4, [ip]
 80182dc:	4443      	add	r3, r8
 80182de:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80182e2:	fb0b 840a 	mla	r4, fp, sl, r8
 80182e6:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80182ea:	46e2      	mov	sl, ip
 80182ec:	b29b      	uxth	r3, r3
 80182ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80182f2:	454f      	cmp	r7, r9
 80182f4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80182f8:	f84a 3b04 	str.w	r3, [sl], #4
 80182fc:	d82b      	bhi.n	8018356 <__multiply+0x120>
 80182fe:	f8cc 8004 	str.w	r8, [ip, #4]
 8018302:	9b01      	ldr	r3, [sp, #4]
 8018304:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8018308:	3204      	adds	r2, #4
 801830a:	f1ba 0f00 	cmp.w	sl, #0
 801830e:	d020      	beq.n	8018352 <__multiply+0x11c>
 8018310:	682b      	ldr	r3, [r5, #0]
 8018312:	4689      	mov	r9, r1
 8018314:	46a8      	mov	r8, r5
 8018316:	f04f 0b00 	mov.w	fp, #0
 801831a:	f8b9 c000 	ldrh.w	ip, [r9]
 801831e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8018322:	fb0a 440c 	mla	r4, sl, ip, r4
 8018326:	445c      	add	r4, fp
 8018328:	46c4      	mov	ip, r8
 801832a:	b29b      	uxth	r3, r3
 801832c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8018330:	f84c 3b04 	str.w	r3, [ip], #4
 8018334:	f859 3b04 	ldr.w	r3, [r9], #4
 8018338:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 801833c:	0c1b      	lsrs	r3, r3, #16
 801833e:	fb0a b303 	mla	r3, sl, r3, fp
 8018342:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8018346:	454f      	cmp	r7, r9
 8018348:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 801834c:	d805      	bhi.n	801835a <__multiply+0x124>
 801834e:	f8c8 3004 	str.w	r3, [r8, #4]
 8018352:	3504      	adds	r5, #4
 8018354:	e79b      	b.n	801828e <__multiply+0x58>
 8018356:	46d4      	mov	ip, sl
 8018358:	e7b3      	b.n	80182c2 <__multiply+0x8c>
 801835a:	46e0      	mov	r8, ip
 801835c:	e7dd      	b.n	801831a <__multiply+0xe4>
 801835e:	3e01      	subs	r6, #1
 8018360:	e799      	b.n	8018296 <__multiply+0x60>
	...

08018364 <__pow5mult>:
 8018364:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018368:	4615      	mov	r5, r2
 801836a:	f012 0203 	ands.w	r2, r2, #3
 801836e:	4606      	mov	r6, r0
 8018370:	460f      	mov	r7, r1
 8018372:	d007      	beq.n	8018384 <__pow5mult+0x20>
 8018374:	3a01      	subs	r2, #1
 8018376:	4c21      	ldr	r4, [pc, #132]	; (80183fc <__pow5mult+0x98>)
 8018378:	2300      	movs	r3, #0
 801837a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801837e:	f7ff fe8a 	bl	8018096 <__multadd>
 8018382:	4607      	mov	r7, r0
 8018384:	10ad      	asrs	r5, r5, #2
 8018386:	d035      	beq.n	80183f4 <__pow5mult+0x90>
 8018388:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801838a:	b93c      	cbnz	r4, 801839c <__pow5mult+0x38>
 801838c:	2010      	movs	r0, #16
 801838e:	f7fc fe1f 	bl	8014fd0 <malloc>
 8018392:	6270      	str	r0, [r6, #36]	; 0x24
 8018394:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018398:	6004      	str	r4, [r0, #0]
 801839a:	60c4      	str	r4, [r0, #12]
 801839c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80183a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80183a4:	b94c      	cbnz	r4, 80183ba <__pow5mult+0x56>
 80183a6:	f240 2171 	movw	r1, #625	; 0x271
 80183aa:	4630      	mov	r0, r6
 80183ac:	f7ff ff3a 	bl	8018224 <__i2b>
 80183b0:	2300      	movs	r3, #0
 80183b2:	f8c8 0008 	str.w	r0, [r8, #8]
 80183b6:	4604      	mov	r4, r0
 80183b8:	6003      	str	r3, [r0, #0]
 80183ba:	f04f 0800 	mov.w	r8, #0
 80183be:	07eb      	lsls	r3, r5, #31
 80183c0:	d50a      	bpl.n	80183d8 <__pow5mult+0x74>
 80183c2:	4639      	mov	r1, r7
 80183c4:	4622      	mov	r2, r4
 80183c6:	4630      	mov	r0, r6
 80183c8:	f7ff ff35 	bl	8018236 <__multiply>
 80183cc:	4639      	mov	r1, r7
 80183ce:	4681      	mov	r9, r0
 80183d0:	4630      	mov	r0, r6
 80183d2:	f7ff fe49 	bl	8018068 <_Bfree>
 80183d6:	464f      	mov	r7, r9
 80183d8:	106d      	asrs	r5, r5, #1
 80183da:	d00b      	beq.n	80183f4 <__pow5mult+0x90>
 80183dc:	6820      	ldr	r0, [r4, #0]
 80183de:	b938      	cbnz	r0, 80183f0 <__pow5mult+0x8c>
 80183e0:	4622      	mov	r2, r4
 80183e2:	4621      	mov	r1, r4
 80183e4:	4630      	mov	r0, r6
 80183e6:	f7ff ff26 	bl	8018236 <__multiply>
 80183ea:	6020      	str	r0, [r4, #0]
 80183ec:	f8c0 8000 	str.w	r8, [r0]
 80183f0:	4604      	mov	r4, r0
 80183f2:	e7e4      	b.n	80183be <__pow5mult+0x5a>
 80183f4:	4638      	mov	r0, r7
 80183f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80183fa:	bf00      	nop
 80183fc:	0801b4c0 	.word	0x0801b4c0

08018400 <__lshift>:
 8018400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018404:	460c      	mov	r4, r1
 8018406:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801840a:	6923      	ldr	r3, [r4, #16]
 801840c:	6849      	ldr	r1, [r1, #4]
 801840e:	eb0a 0903 	add.w	r9, sl, r3
 8018412:	68a3      	ldr	r3, [r4, #8]
 8018414:	4607      	mov	r7, r0
 8018416:	4616      	mov	r6, r2
 8018418:	f109 0501 	add.w	r5, r9, #1
 801841c:	42ab      	cmp	r3, r5
 801841e:	db32      	blt.n	8018486 <__lshift+0x86>
 8018420:	4638      	mov	r0, r7
 8018422:	f7ff fded 	bl	8018000 <_Balloc>
 8018426:	2300      	movs	r3, #0
 8018428:	4680      	mov	r8, r0
 801842a:	f100 0114 	add.w	r1, r0, #20
 801842e:	461a      	mov	r2, r3
 8018430:	4553      	cmp	r3, sl
 8018432:	db2b      	blt.n	801848c <__lshift+0x8c>
 8018434:	6920      	ldr	r0, [r4, #16]
 8018436:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801843a:	f104 0314 	add.w	r3, r4, #20
 801843e:	f016 021f 	ands.w	r2, r6, #31
 8018442:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018446:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801844a:	d025      	beq.n	8018498 <__lshift+0x98>
 801844c:	f1c2 0e20 	rsb	lr, r2, #32
 8018450:	2000      	movs	r0, #0
 8018452:	681e      	ldr	r6, [r3, #0]
 8018454:	468a      	mov	sl, r1
 8018456:	4096      	lsls	r6, r2
 8018458:	4330      	orrs	r0, r6
 801845a:	f84a 0b04 	str.w	r0, [sl], #4
 801845e:	f853 0b04 	ldr.w	r0, [r3], #4
 8018462:	459c      	cmp	ip, r3
 8018464:	fa20 f00e 	lsr.w	r0, r0, lr
 8018468:	d814      	bhi.n	8018494 <__lshift+0x94>
 801846a:	6048      	str	r0, [r1, #4]
 801846c:	b108      	cbz	r0, 8018472 <__lshift+0x72>
 801846e:	f109 0502 	add.w	r5, r9, #2
 8018472:	3d01      	subs	r5, #1
 8018474:	4638      	mov	r0, r7
 8018476:	f8c8 5010 	str.w	r5, [r8, #16]
 801847a:	4621      	mov	r1, r4
 801847c:	f7ff fdf4 	bl	8018068 <_Bfree>
 8018480:	4640      	mov	r0, r8
 8018482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018486:	3101      	adds	r1, #1
 8018488:	005b      	lsls	r3, r3, #1
 801848a:	e7c7      	b.n	801841c <__lshift+0x1c>
 801848c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8018490:	3301      	adds	r3, #1
 8018492:	e7cd      	b.n	8018430 <__lshift+0x30>
 8018494:	4651      	mov	r1, sl
 8018496:	e7dc      	b.n	8018452 <__lshift+0x52>
 8018498:	3904      	subs	r1, #4
 801849a:	f853 2b04 	ldr.w	r2, [r3], #4
 801849e:	f841 2f04 	str.w	r2, [r1, #4]!
 80184a2:	459c      	cmp	ip, r3
 80184a4:	d8f9      	bhi.n	801849a <__lshift+0x9a>
 80184a6:	e7e4      	b.n	8018472 <__lshift+0x72>

080184a8 <__mcmp>:
 80184a8:	6903      	ldr	r3, [r0, #16]
 80184aa:	690a      	ldr	r2, [r1, #16]
 80184ac:	1a9b      	subs	r3, r3, r2
 80184ae:	b530      	push	{r4, r5, lr}
 80184b0:	d10c      	bne.n	80184cc <__mcmp+0x24>
 80184b2:	0092      	lsls	r2, r2, #2
 80184b4:	3014      	adds	r0, #20
 80184b6:	3114      	adds	r1, #20
 80184b8:	1884      	adds	r4, r0, r2
 80184ba:	4411      	add	r1, r2
 80184bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80184c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80184c4:	4295      	cmp	r5, r2
 80184c6:	d003      	beq.n	80184d0 <__mcmp+0x28>
 80184c8:	d305      	bcc.n	80184d6 <__mcmp+0x2e>
 80184ca:	2301      	movs	r3, #1
 80184cc:	4618      	mov	r0, r3
 80184ce:	bd30      	pop	{r4, r5, pc}
 80184d0:	42a0      	cmp	r0, r4
 80184d2:	d3f3      	bcc.n	80184bc <__mcmp+0x14>
 80184d4:	e7fa      	b.n	80184cc <__mcmp+0x24>
 80184d6:	f04f 33ff 	mov.w	r3, #4294967295
 80184da:	e7f7      	b.n	80184cc <__mcmp+0x24>

080184dc <__mdiff>:
 80184dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80184e0:	460d      	mov	r5, r1
 80184e2:	4607      	mov	r7, r0
 80184e4:	4611      	mov	r1, r2
 80184e6:	4628      	mov	r0, r5
 80184e8:	4614      	mov	r4, r2
 80184ea:	f7ff ffdd 	bl	80184a8 <__mcmp>
 80184ee:	1e06      	subs	r6, r0, #0
 80184f0:	d108      	bne.n	8018504 <__mdiff+0x28>
 80184f2:	4631      	mov	r1, r6
 80184f4:	4638      	mov	r0, r7
 80184f6:	f7ff fd83 	bl	8018000 <_Balloc>
 80184fa:	2301      	movs	r3, #1
 80184fc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8018500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018504:	bfa4      	itt	ge
 8018506:	4623      	movge	r3, r4
 8018508:	462c      	movge	r4, r5
 801850a:	4638      	mov	r0, r7
 801850c:	6861      	ldr	r1, [r4, #4]
 801850e:	bfa6      	itte	ge
 8018510:	461d      	movge	r5, r3
 8018512:	2600      	movge	r6, #0
 8018514:	2601      	movlt	r6, #1
 8018516:	f7ff fd73 	bl	8018000 <_Balloc>
 801851a:	692b      	ldr	r3, [r5, #16]
 801851c:	60c6      	str	r6, [r0, #12]
 801851e:	6926      	ldr	r6, [r4, #16]
 8018520:	f105 0914 	add.w	r9, r5, #20
 8018524:	f104 0214 	add.w	r2, r4, #20
 8018528:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801852c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8018530:	f100 0514 	add.w	r5, r0, #20
 8018534:	f04f 0e00 	mov.w	lr, #0
 8018538:	f852 ab04 	ldr.w	sl, [r2], #4
 801853c:	f859 4b04 	ldr.w	r4, [r9], #4
 8018540:	fa1e f18a 	uxtah	r1, lr, sl
 8018544:	b2a3      	uxth	r3, r4
 8018546:	1ac9      	subs	r1, r1, r3
 8018548:	0c23      	lsrs	r3, r4, #16
 801854a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801854e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8018552:	b289      	uxth	r1, r1
 8018554:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8018558:	45c8      	cmp	r8, r9
 801855a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801855e:	4694      	mov	ip, r2
 8018560:	f845 3b04 	str.w	r3, [r5], #4
 8018564:	d8e8      	bhi.n	8018538 <__mdiff+0x5c>
 8018566:	45bc      	cmp	ip, r7
 8018568:	d304      	bcc.n	8018574 <__mdiff+0x98>
 801856a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801856e:	b183      	cbz	r3, 8018592 <__mdiff+0xb6>
 8018570:	6106      	str	r6, [r0, #16]
 8018572:	e7c5      	b.n	8018500 <__mdiff+0x24>
 8018574:	f85c 1b04 	ldr.w	r1, [ip], #4
 8018578:	fa1e f381 	uxtah	r3, lr, r1
 801857c:	141a      	asrs	r2, r3, #16
 801857e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8018582:	b29b      	uxth	r3, r3
 8018584:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018588:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801858c:	f845 3b04 	str.w	r3, [r5], #4
 8018590:	e7e9      	b.n	8018566 <__mdiff+0x8a>
 8018592:	3e01      	subs	r6, #1
 8018594:	e7e9      	b.n	801856a <__mdiff+0x8e>
	...

08018598 <__ulp>:
 8018598:	4b12      	ldr	r3, [pc, #72]	; (80185e4 <__ulp+0x4c>)
 801859a:	ee10 2a90 	vmov	r2, s1
 801859e:	401a      	ands	r2, r3
 80185a0:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 80185a4:	2b00      	cmp	r3, #0
 80185a6:	dd04      	ble.n	80185b2 <__ulp+0x1a>
 80185a8:	2000      	movs	r0, #0
 80185aa:	4619      	mov	r1, r3
 80185ac:	ec41 0b10 	vmov	d0, r0, r1
 80185b0:	4770      	bx	lr
 80185b2:	425b      	negs	r3, r3
 80185b4:	151b      	asrs	r3, r3, #20
 80185b6:	2b13      	cmp	r3, #19
 80185b8:	f04f 0000 	mov.w	r0, #0
 80185bc:	f04f 0100 	mov.w	r1, #0
 80185c0:	dc04      	bgt.n	80185cc <__ulp+0x34>
 80185c2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80185c6:	fa42 f103 	asr.w	r1, r2, r3
 80185ca:	e7ef      	b.n	80185ac <__ulp+0x14>
 80185cc:	3b14      	subs	r3, #20
 80185ce:	2b1e      	cmp	r3, #30
 80185d0:	f04f 0201 	mov.w	r2, #1
 80185d4:	bfda      	itte	le
 80185d6:	f1c3 031f 	rsble	r3, r3, #31
 80185da:	fa02 f303 	lslle.w	r3, r2, r3
 80185de:	4613      	movgt	r3, r2
 80185e0:	4618      	mov	r0, r3
 80185e2:	e7e3      	b.n	80185ac <__ulp+0x14>
 80185e4:	7ff00000 	.word	0x7ff00000

080185e8 <__b2d>:
 80185e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80185ea:	6905      	ldr	r5, [r0, #16]
 80185ec:	f100 0714 	add.w	r7, r0, #20
 80185f0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80185f4:	1f2e      	subs	r6, r5, #4
 80185f6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80185fa:	4620      	mov	r0, r4
 80185fc:	f7ff fdc4 	bl	8018188 <__hi0bits>
 8018600:	f1c0 0320 	rsb	r3, r0, #32
 8018604:	280a      	cmp	r0, #10
 8018606:	600b      	str	r3, [r1, #0]
 8018608:	f8df c074 	ldr.w	ip, [pc, #116]	; 8018680 <__b2d+0x98>
 801860c:	dc14      	bgt.n	8018638 <__b2d+0x50>
 801860e:	f1c0 0e0b 	rsb	lr, r0, #11
 8018612:	fa24 f10e 	lsr.w	r1, r4, lr
 8018616:	42b7      	cmp	r7, r6
 8018618:	ea41 030c 	orr.w	r3, r1, ip
 801861c:	bf34      	ite	cc
 801861e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018622:	2100      	movcs	r1, #0
 8018624:	3015      	adds	r0, #21
 8018626:	fa04 f000 	lsl.w	r0, r4, r0
 801862a:	fa21 f10e 	lsr.w	r1, r1, lr
 801862e:	ea40 0201 	orr.w	r2, r0, r1
 8018632:	ec43 2b10 	vmov	d0, r2, r3
 8018636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018638:	42b7      	cmp	r7, r6
 801863a:	bf3a      	itte	cc
 801863c:	f1a5 0608 	subcc.w	r6, r5, #8
 8018640:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018644:	2100      	movcs	r1, #0
 8018646:	380b      	subs	r0, #11
 8018648:	d015      	beq.n	8018676 <__b2d+0x8e>
 801864a:	4084      	lsls	r4, r0
 801864c:	f1c0 0520 	rsb	r5, r0, #32
 8018650:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8018654:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8018658:	42be      	cmp	r6, r7
 801865a:	fa21 fc05 	lsr.w	ip, r1, r5
 801865e:	ea44 030c 	orr.w	r3, r4, ip
 8018662:	bf8c      	ite	hi
 8018664:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8018668:	2400      	movls	r4, #0
 801866a:	fa01 f000 	lsl.w	r0, r1, r0
 801866e:	40ec      	lsrs	r4, r5
 8018670:	ea40 0204 	orr.w	r2, r0, r4
 8018674:	e7dd      	b.n	8018632 <__b2d+0x4a>
 8018676:	ea44 030c 	orr.w	r3, r4, ip
 801867a:	460a      	mov	r2, r1
 801867c:	e7d9      	b.n	8018632 <__b2d+0x4a>
 801867e:	bf00      	nop
 8018680:	3ff00000 	.word	0x3ff00000

08018684 <__d2b>:
 8018684:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018688:	460e      	mov	r6, r1
 801868a:	2101      	movs	r1, #1
 801868c:	ec59 8b10 	vmov	r8, r9, d0
 8018690:	4615      	mov	r5, r2
 8018692:	f7ff fcb5 	bl	8018000 <_Balloc>
 8018696:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801869a:	4607      	mov	r7, r0
 801869c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80186a0:	bb34      	cbnz	r4, 80186f0 <__d2b+0x6c>
 80186a2:	9301      	str	r3, [sp, #4]
 80186a4:	f1b8 0300 	subs.w	r3, r8, #0
 80186a8:	d027      	beq.n	80186fa <__d2b+0x76>
 80186aa:	a802      	add	r0, sp, #8
 80186ac:	f840 3d08 	str.w	r3, [r0, #-8]!
 80186b0:	f7ff fd89 	bl	80181c6 <__lo0bits>
 80186b4:	9900      	ldr	r1, [sp, #0]
 80186b6:	b1f0      	cbz	r0, 80186f6 <__d2b+0x72>
 80186b8:	9a01      	ldr	r2, [sp, #4]
 80186ba:	f1c0 0320 	rsb	r3, r0, #32
 80186be:	fa02 f303 	lsl.w	r3, r2, r3
 80186c2:	430b      	orrs	r3, r1
 80186c4:	40c2      	lsrs	r2, r0
 80186c6:	617b      	str	r3, [r7, #20]
 80186c8:	9201      	str	r2, [sp, #4]
 80186ca:	9b01      	ldr	r3, [sp, #4]
 80186cc:	61bb      	str	r3, [r7, #24]
 80186ce:	2b00      	cmp	r3, #0
 80186d0:	bf14      	ite	ne
 80186d2:	2102      	movne	r1, #2
 80186d4:	2101      	moveq	r1, #1
 80186d6:	6139      	str	r1, [r7, #16]
 80186d8:	b1c4      	cbz	r4, 801870c <__d2b+0x88>
 80186da:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80186de:	4404      	add	r4, r0
 80186e0:	6034      	str	r4, [r6, #0]
 80186e2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80186e6:	6028      	str	r0, [r5, #0]
 80186e8:	4638      	mov	r0, r7
 80186ea:	b003      	add	sp, #12
 80186ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80186f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80186f4:	e7d5      	b.n	80186a2 <__d2b+0x1e>
 80186f6:	6179      	str	r1, [r7, #20]
 80186f8:	e7e7      	b.n	80186ca <__d2b+0x46>
 80186fa:	a801      	add	r0, sp, #4
 80186fc:	f7ff fd63 	bl	80181c6 <__lo0bits>
 8018700:	9b01      	ldr	r3, [sp, #4]
 8018702:	617b      	str	r3, [r7, #20]
 8018704:	2101      	movs	r1, #1
 8018706:	6139      	str	r1, [r7, #16]
 8018708:	3020      	adds	r0, #32
 801870a:	e7e5      	b.n	80186d8 <__d2b+0x54>
 801870c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8018710:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8018714:	6030      	str	r0, [r6, #0]
 8018716:	6918      	ldr	r0, [r3, #16]
 8018718:	f7ff fd36 	bl	8018188 <__hi0bits>
 801871c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8018720:	e7e1      	b.n	80186e6 <__d2b+0x62>

08018722 <__ratio>:
 8018722:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018726:	4688      	mov	r8, r1
 8018728:	4669      	mov	r1, sp
 801872a:	4681      	mov	r9, r0
 801872c:	f7ff ff5c 	bl	80185e8 <__b2d>
 8018730:	a901      	add	r1, sp, #4
 8018732:	4640      	mov	r0, r8
 8018734:	ec57 6b10 	vmov	r6, r7, d0
 8018738:	f7ff ff56 	bl	80185e8 <__b2d>
 801873c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018740:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8018744:	eba3 0c02 	sub.w	ip, r3, r2
 8018748:	e9dd 3200 	ldrd	r3, r2, [sp]
 801874c:	1a9b      	subs	r3, r3, r2
 801874e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8018752:	ec5b ab10 	vmov	sl, fp, d0
 8018756:	2b00      	cmp	r3, #0
 8018758:	bfce      	itee	gt
 801875a:	463a      	movgt	r2, r7
 801875c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8018760:	465a      	movle	r2, fp
 8018762:	4659      	mov	r1, fp
 8018764:	463d      	mov	r5, r7
 8018766:	bfd4      	ite	le
 8018768:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 801876c:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8018770:	4630      	mov	r0, r6
 8018772:	ee10 2a10 	vmov	r2, s0
 8018776:	460b      	mov	r3, r1
 8018778:	4629      	mov	r1, r5
 801877a:	f7e8 f877 	bl	800086c <__aeabi_ddiv>
 801877e:	ec41 0b10 	vmov	d0, r0, r1
 8018782:	b003      	add	sp, #12
 8018784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018788 <__copybits>:
 8018788:	3901      	subs	r1, #1
 801878a:	b510      	push	{r4, lr}
 801878c:	1149      	asrs	r1, r1, #5
 801878e:	6914      	ldr	r4, [r2, #16]
 8018790:	3101      	adds	r1, #1
 8018792:	f102 0314 	add.w	r3, r2, #20
 8018796:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801879a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801879e:	42a3      	cmp	r3, r4
 80187a0:	4602      	mov	r2, r0
 80187a2:	d303      	bcc.n	80187ac <__copybits+0x24>
 80187a4:	2300      	movs	r3, #0
 80187a6:	428a      	cmp	r2, r1
 80187a8:	d305      	bcc.n	80187b6 <__copybits+0x2e>
 80187aa:	bd10      	pop	{r4, pc}
 80187ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80187b0:	f840 2b04 	str.w	r2, [r0], #4
 80187b4:	e7f3      	b.n	801879e <__copybits+0x16>
 80187b6:	f842 3b04 	str.w	r3, [r2], #4
 80187ba:	e7f4      	b.n	80187a6 <__copybits+0x1e>

080187bc <__any_on>:
 80187bc:	f100 0214 	add.w	r2, r0, #20
 80187c0:	6900      	ldr	r0, [r0, #16]
 80187c2:	114b      	asrs	r3, r1, #5
 80187c4:	4298      	cmp	r0, r3
 80187c6:	b510      	push	{r4, lr}
 80187c8:	db11      	blt.n	80187ee <__any_on+0x32>
 80187ca:	dd0a      	ble.n	80187e2 <__any_on+0x26>
 80187cc:	f011 011f 	ands.w	r1, r1, #31
 80187d0:	d007      	beq.n	80187e2 <__any_on+0x26>
 80187d2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80187d6:	fa24 f001 	lsr.w	r0, r4, r1
 80187da:	fa00 f101 	lsl.w	r1, r0, r1
 80187de:	428c      	cmp	r4, r1
 80187e0:	d10b      	bne.n	80187fa <__any_on+0x3e>
 80187e2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80187e6:	4293      	cmp	r3, r2
 80187e8:	d803      	bhi.n	80187f2 <__any_on+0x36>
 80187ea:	2000      	movs	r0, #0
 80187ec:	bd10      	pop	{r4, pc}
 80187ee:	4603      	mov	r3, r0
 80187f0:	e7f7      	b.n	80187e2 <__any_on+0x26>
 80187f2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80187f6:	2900      	cmp	r1, #0
 80187f8:	d0f5      	beq.n	80187e6 <__any_on+0x2a>
 80187fa:	2001      	movs	r0, #1
 80187fc:	e7f6      	b.n	80187ec <__any_on+0x30>

080187fe <_calloc_r>:
 80187fe:	b538      	push	{r3, r4, r5, lr}
 8018800:	fb02 f401 	mul.w	r4, r2, r1
 8018804:	4621      	mov	r1, r4
 8018806:	f7fc fc6d 	bl	80150e4 <_malloc_r>
 801880a:	4605      	mov	r5, r0
 801880c:	b118      	cbz	r0, 8018816 <_calloc_r+0x18>
 801880e:	4622      	mov	r2, r4
 8018810:	2100      	movs	r1, #0
 8018812:	f7fc fc11 	bl	8015038 <memset>
 8018816:	4628      	mov	r0, r5
 8018818:	bd38      	pop	{r3, r4, r5, pc}

0801881a <__ssputs_r>:
 801881a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801881e:	688e      	ldr	r6, [r1, #8]
 8018820:	429e      	cmp	r6, r3
 8018822:	4682      	mov	sl, r0
 8018824:	460c      	mov	r4, r1
 8018826:	4690      	mov	r8, r2
 8018828:	4699      	mov	r9, r3
 801882a:	d837      	bhi.n	801889c <__ssputs_r+0x82>
 801882c:	898a      	ldrh	r2, [r1, #12]
 801882e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018832:	d031      	beq.n	8018898 <__ssputs_r+0x7e>
 8018834:	6825      	ldr	r5, [r4, #0]
 8018836:	6909      	ldr	r1, [r1, #16]
 8018838:	1a6f      	subs	r7, r5, r1
 801883a:	6965      	ldr	r5, [r4, #20]
 801883c:	2302      	movs	r3, #2
 801883e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018842:	fb95 f5f3 	sdiv	r5, r5, r3
 8018846:	f109 0301 	add.w	r3, r9, #1
 801884a:	443b      	add	r3, r7
 801884c:	429d      	cmp	r5, r3
 801884e:	bf38      	it	cc
 8018850:	461d      	movcc	r5, r3
 8018852:	0553      	lsls	r3, r2, #21
 8018854:	d530      	bpl.n	80188b8 <__ssputs_r+0x9e>
 8018856:	4629      	mov	r1, r5
 8018858:	f7fc fc44 	bl	80150e4 <_malloc_r>
 801885c:	4606      	mov	r6, r0
 801885e:	b950      	cbnz	r0, 8018876 <__ssputs_r+0x5c>
 8018860:	230c      	movs	r3, #12
 8018862:	f8ca 3000 	str.w	r3, [sl]
 8018866:	89a3      	ldrh	r3, [r4, #12]
 8018868:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801886c:	81a3      	strh	r3, [r4, #12]
 801886e:	f04f 30ff 	mov.w	r0, #4294967295
 8018872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018876:	463a      	mov	r2, r7
 8018878:	6921      	ldr	r1, [r4, #16]
 801887a:	f7fc fbb9 	bl	8014ff0 <memcpy>
 801887e:	89a3      	ldrh	r3, [r4, #12]
 8018880:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018888:	81a3      	strh	r3, [r4, #12]
 801888a:	6126      	str	r6, [r4, #16]
 801888c:	6165      	str	r5, [r4, #20]
 801888e:	443e      	add	r6, r7
 8018890:	1bed      	subs	r5, r5, r7
 8018892:	6026      	str	r6, [r4, #0]
 8018894:	60a5      	str	r5, [r4, #8]
 8018896:	464e      	mov	r6, r9
 8018898:	454e      	cmp	r6, r9
 801889a:	d900      	bls.n	801889e <__ssputs_r+0x84>
 801889c:	464e      	mov	r6, r9
 801889e:	4632      	mov	r2, r6
 80188a0:	4641      	mov	r1, r8
 80188a2:	6820      	ldr	r0, [r4, #0]
 80188a4:	f7fc fbaf 	bl	8015006 <memmove>
 80188a8:	68a3      	ldr	r3, [r4, #8]
 80188aa:	1b9b      	subs	r3, r3, r6
 80188ac:	60a3      	str	r3, [r4, #8]
 80188ae:	6823      	ldr	r3, [r4, #0]
 80188b0:	441e      	add	r6, r3
 80188b2:	6026      	str	r6, [r4, #0]
 80188b4:	2000      	movs	r0, #0
 80188b6:	e7dc      	b.n	8018872 <__ssputs_r+0x58>
 80188b8:	462a      	mov	r2, r5
 80188ba:	f000 fd1a 	bl	80192f2 <_realloc_r>
 80188be:	4606      	mov	r6, r0
 80188c0:	2800      	cmp	r0, #0
 80188c2:	d1e2      	bne.n	801888a <__ssputs_r+0x70>
 80188c4:	6921      	ldr	r1, [r4, #16]
 80188c6:	4650      	mov	r0, sl
 80188c8:	f7fc fbbe 	bl	8015048 <_free_r>
 80188cc:	e7c8      	b.n	8018860 <__ssputs_r+0x46>
	...

080188d0 <_svfiprintf_r>:
 80188d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80188d4:	461d      	mov	r5, r3
 80188d6:	898b      	ldrh	r3, [r1, #12]
 80188d8:	061f      	lsls	r7, r3, #24
 80188da:	b09d      	sub	sp, #116	; 0x74
 80188dc:	4680      	mov	r8, r0
 80188de:	460c      	mov	r4, r1
 80188e0:	4616      	mov	r6, r2
 80188e2:	d50f      	bpl.n	8018904 <_svfiprintf_r+0x34>
 80188e4:	690b      	ldr	r3, [r1, #16]
 80188e6:	b96b      	cbnz	r3, 8018904 <_svfiprintf_r+0x34>
 80188e8:	2140      	movs	r1, #64	; 0x40
 80188ea:	f7fc fbfb 	bl	80150e4 <_malloc_r>
 80188ee:	6020      	str	r0, [r4, #0]
 80188f0:	6120      	str	r0, [r4, #16]
 80188f2:	b928      	cbnz	r0, 8018900 <_svfiprintf_r+0x30>
 80188f4:	230c      	movs	r3, #12
 80188f6:	f8c8 3000 	str.w	r3, [r8]
 80188fa:	f04f 30ff 	mov.w	r0, #4294967295
 80188fe:	e0c8      	b.n	8018a92 <_svfiprintf_r+0x1c2>
 8018900:	2340      	movs	r3, #64	; 0x40
 8018902:	6163      	str	r3, [r4, #20]
 8018904:	2300      	movs	r3, #0
 8018906:	9309      	str	r3, [sp, #36]	; 0x24
 8018908:	2320      	movs	r3, #32
 801890a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801890e:	2330      	movs	r3, #48	; 0x30
 8018910:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018914:	9503      	str	r5, [sp, #12]
 8018916:	f04f 0b01 	mov.w	fp, #1
 801891a:	4637      	mov	r7, r6
 801891c:	463d      	mov	r5, r7
 801891e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8018922:	b10b      	cbz	r3, 8018928 <_svfiprintf_r+0x58>
 8018924:	2b25      	cmp	r3, #37	; 0x25
 8018926:	d13e      	bne.n	80189a6 <_svfiprintf_r+0xd6>
 8018928:	ebb7 0a06 	subs.w	sl, r7, r6
 801892c:	d00b      	beq.n	8018946 <_svfiprintf_r+0x76>
 801892e:	4653      	mov	r3, sl
 8018930:	4632      	mov	r2, r6
 8018932:	4621      	mov	r1, r4
 8018934:	4640      	mov	r0, r8
 8018936:	f7ff ff70 	bl	801881a <__ssputs_r>
 801893a:	3001      	adds	r0, #1
 801893c:	f000 80a4 	beq.w	8018a88 <_svfiprintf_r+0x1b8>
 8018940:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018942:	4453      	add	r3, sl
 8018944:	9309      	str	r3, [sp, #36]	; 0x24
 8018946:	783b      	ldrb	r3, [r7, #0]
 8018948:	2b00      	cmp	r3, #0
 801894a:	f000 809d 	beq.w	8018a88 <_svfiprintf_r+0x1b8>
 801894e:	2300      	movs	r3, #0
 8018950:	f04f 32ff 	mov.w	r2, #4294967295
 8018954:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018958:	9304      	str	r3, [sp, #16]
 801895a:	9307      	str	r3, [sp, #28]
 801895c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018960:	931a      	str	r3, [sp, #104]	; 0x68
 8018962:	462f      	mov	r7, r5
 8018964:	2205      	movs	r2, #5
 8018966:	f817 1b01 	ldrb.w	r1, [r7], #1
 801896a:	4850      	ldr	r0, [pc, #320]	; (8018aac <_svfiprintf_r+0x1dc>)
 801896c:	f7e7 fc48 	bl	8000200 <memchr>
 8018970:	9b04      	ldr	r3, [sp, #16]
 8018972:	b9d0      	cbnz	r0, 80189aa <_svfiprintf_r+0xda>
 8018974:	06d9      	lsls	r1, r3, #27
 8018976:	bf44      	itt	mi
 8018978:	2220      	movmi	r2, #32
 801897a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801897e:	071a      	lsls	r2, r3, #28
 8018980:	bf44      	itt	mi
 8018982:	222b      	movmi	r2, #43	; 0x2b
 8018984:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018988:	782a      	ldrb	r2, [r5, #0]
 801898a:	2a2a      	cmp	r2, #42	; 0x2a
 801898c:	d015      	beq.n	80189ba <_svfiprintf_r+0xea>
 801898e:	9a07      	ldr	r2, [sp, #28]
 8018990:	462f      	mov	r7, r5
 8018992:	2000      	movs	r0, #0
 8018994:	250a      	movs	r5, #10
 8018996:	4639      	mov	r1, r7
 8018998:	f811 3b01 	ldrb.w	r3, [r1], #1
 801899c:	3b30      	subs	r3, #48	; 0x30
 801899e:	2b09      	cmp	r3, #9
 80189a0:	d94d      	bls.n	8018a3e <_svfiprintf_r+0x16e>
 80189a2:	b1b8      	cbz	r0, 80189d4 <_svfiprintf_r+0x104>
 80189a4:	e00f      	b.n	80189c6 <_svfiprintf_r+0xf6>
 80189a6:	462f      	mov	r7, r5
 80189a8:	e7b8      	b.n	801891c <_svfiprintf_r+0x4c>
 80189aa:	4a40      	ldr	r2, [pc, #256]	; (8018aac <_svfiprintf_r+0x1dc>)
 80189ac:	1a80      	subs	r0, r0, r2
 80189ae:	fa0b f000 	lsl.w	r0, fp, r0
 80189b2:	4318      	orrs	r0, r3
 80189b4:	9004      	str	r0, [sp, #16]
 80189b6:	463d      	mov	r5, r7
 80189b8:	e7d3      	b.n	8018962 <_svfiprintf_r+0x92>
 80189ba:	9a03      	ldr	r2, [sp, #12]
 80189bc:	1d11      	adds	r1, r2, #4
 80189be:	6812      	ldr	r2, [r2, #0]
 80189c0:	9103      	str	r1, [sp, #12]
 80189c2:	2a00      	cmp	r2, #0
 80189c4:	db01      	blt.n	80189ca <_svfiprintf_r+0xfa>
 80189c6:	9207      	str	r2, [sp, #28]
 80189c8:	e004      	b.n	80189d4 <_svfiprintf_r+0x104>
 80189ca:	4252      	negs	r2, r2
 80189cc:	f043 0302 	orr.w	r3, r3, #2
 80189d0:	9207      	str	r2, [sp, #28]
 80189d2:	9304      	str	r3, [sp, #16]
 80189d4:	783b      	ldrb	r3, [r7, #0]
 80189d6:	2b2e      	cmp	r3, #46	; 0x2e
 80189d8:	d10c      	bne.n	80189f4 <_svfiprintf_r+0x124>
 80189da:	787b      	ldrb	r3, [r7, #1]
 80189dc:	2b2a      	cmp	r3, #42	; 0x2a
 80189de:	d133      	bne.n	8018a48 <_svfiprintf_r+0x178>
 80189e0:	9b03      	ldr	r3, [sp, #12]
 80189e2:	1d1a      	adds	r2, r3, #4
 80189e4:	681b      	ldr	r3, [r3, #0]
 80189e6:	9203      	str	r2, [sp, #12]
 80189e8:	2b00      	cmp	r3, #0
 80189ea:	bfb8      	it	lt
 80189ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80189f0:	3702      	adds	r7, #2
 80189f2:	9305      	str	r3, [sp, #20]
 80189f4:	4d2e      	ldr	r5, [pc, #184]	; (8018ab0 <_svfiprintf_r+0x1e0>)
 80189f6:	7839      	ldrb	r1, [r7, #0]
 80189f8:	2203      	movs	r2, #3
 80189fa:	4628      	mov	r0, r5
 80189fc:	f7e7 fc00 	bl	8000200 <memchr>
 8018a00:	b138      	cbz	r0, 8018a12 <_svfiprintf_r+0x142>
 8018a02:	2340      	movs	r3, #64	; 0x40
 8018a04:	1b40      	subs	r0, r0, r5
 8018a06:	fa03 f000 	lsl.w	r0, r3, r0
 8018a0a:	9b04      	ldr	r3, [sp, #16]
 8018a0c:	4303      	orrs	r3, r0
 8018a0e:	3701      	adds	r7, #1
 8018a10:	9304      	str	r3, [sp, #16]
 8018a12:	7839      	ldrb	r1, [r7, #0]
 8018a14:	4827      	ldr	r0, [pc, #156]	; (8018ab4 <_svfiprintf_r+0x1e4>)
 8018a16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018a1a:	2206      	movs	r2, #6
 8018a1c:	1c7e      	adds	r6, r7, #1
 8018a1e:	f7e7 fbef 	bl	8000200 <memchr>
 8018a22:	2800      	cmp	r0, #0
 8018a24:	d038      	beq.n	8018a98 <_svfiprintf_r+0x1c8>
 8018a26:	4b24      	ldr	r3, [pc, #144]	; (8018ab8 <_svfiprintf_r+0x1e8>)
 8018a28:	bb13      	cbnz	r3, 8018a70 <_svfiprintf_r+0x1a0>
 8018a2a:	9b03      	ldr	r3, [sp, #12]
 8018a2c:	3307      	adds	r3, #7
 8018a2e:	f023 0307 	bic.w	r3, r3, #7
 8018a32:	3308      	adds	r3, #8
 8018a34:	9303      	str	r3, [sp, #12]
 8018a36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018a38:	444b      	add	r3, r9
 8018a3a:	9309      	str	r3, [sp, #36]	; 0x24
 8018a3c:	e76d      	b.n	801891a <_svfiprintf_r+0x4a>
 8018a3e:	fb05 3202 	mla	r2, r5, r2, r3
 8018a42:	2001      	movs	r0, #1
 8018a44:	460f      	mov	r7, r1
 8018a46:	e7a6      	b.n	8018996 <_svfiprintf_r+0xc6>
 8018a48:	2300      	movs	r3, #0
 8018a4a:	3701      	adds	r7, #1
 8018a4c:	9305      	str	r3, [sp, #20]
 8018a4e:	4619      	mov	r1, r3
 8018a50:	250a      	movs	r5, #10
 8018a52:	4638      	mov	r0, r7
 8018a54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018a58:	3a30      	subs	r2, #48	; 0x30
 8018a5a:	2a09      	cmp	r2, #9
 8018a5c:	d903      	bls.n	8018a66 <_svfiprintf_r+0x196>
 8018a5e:	2b00      	cmp	r3, #0
 8018a60:	d0c8      	beq.n	80189f4 <_svfiprintf_r+0x124>
 8018a62:	9105      	str	r1, [sp, #20]
 8018a64:	e7c6      	b.n	80189f4 <_svfiprintf_r+0x124>
 8018a66:	fb05 2101 	mla	r1, r5, r1, r2
 8018a6a:	2301      	movs	r3, #1
 8018a6c:	4607      	mov	r7, r0
 8018a6e:	e7f0      	b.n	8018a52 <_svfiprintf_r+0x182>
 8018a70:	ab03      	add	r3, sp, #12
 8018a72:	9300      	str	r3, [sp, #0]
 8018a74:	4622      	mov	r2, r4
 8018a76:	4b11      	ldr	r3, [pc, #68]	; (8018abc <_svfiprintf_r+0x1ec>)
 8018a78:	a904      	add	r1, sp, #16
 8018a7a:	4640      	mov	r0, r8
 8018a7c:	f7fc fc20 	bl	80152c0 <_printf_float>
 8018a80:	f1b0 3fff 	cmp.w	r0, #4294967295
 8018a84:	4681      	mov	r9, r0
 8018a86:	d1d6      	bne.n	8018a36 <_svfiprintf_r+0x166>
 8018a88:	89a3      	ldrh	r3, [r4, #12]
 8018a8a:	065b      	lsls	r3, r3, #25
 8018a8c:	f53f af35 	bmi.w	80188fa <_svfiprintf_r+0x2a>
 8018a90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018a92:	b01d      	add	sp, #116	; 0x74
 8018a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a98:	ab03      	add	r3, sp, #12
 8018a9a:	9300      	str	r3, [sp, #0]
 8018a9c:	4622      	mov	r2, r4
 8018a9e:	4b07      	ldr	r3, [pc, #28]	; (8018abc <_svfiprintf_r+0x1ec>)
 8018aa0:	a904      	add	r1, sp, #16
 8018aa2:	4640      	mov	r0, r8
 8018aa4:	f7fc fec2 	bl	801582c <_printf_i>
 8018aa8:	e7ea      	b.n	8018a80 <_svfiprintf_r+0x1b0>
 8018aaa:	bf00      	nop
 8018aac:	0801b4cc 	.word	0x0801b4cc
 8018ab0:	0801b4d2 	.word	0x0801b4d2
 8018ab4:	0801b4d6 	.word	0x0801b4d6
 8018ab8:	080152c1 	.word	0x080152c1
 8018abc:	0801881b 	.word	0x0801881b

08018ac0 <_sungetc_r>:
 8018ac0:	b538      	push	{r3, r4, r5, lr}
 8018ac2:	1c4b      	adds	r3, r1, #1
 8018ac4:	4614      	mov	r4, r2
 8018ac6:	d103      	bne.n	8018ad0 <_sungetc_r+0x10>
 8018ac8:	f04f 35ff 	mov.w	r5, #4294967295
 8018acc:	4628      	mov	r0, r5
 8018ace:	bd38      	pop	{r3, r4, r5, pc}
 8018ad0:	8993      	ldrh	r3, [r2, #12]
 8018ad2:	f023 0320 	bic.w	r3, r3, #32
 8018ad6:	8193      	strh	r3, [r2, #12]
 8018ad8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018ada:	6852      	ldr	r2, [r2, #4]
 8018adc:	b2cd      	uxtb	r5, r1
 8018ade:	b18b      	cbz	r3, 8018b04 <_sungetc_r+0x44>
 8018ae0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8018ae2:	4293      	cmp	r3, r2
 8018ae4:	dd08      	ble.n	8018af8 <_sungetc_r+0x38>
 8018ae6:	6823      	ldr	r3, [r4, #0]
 8018ae8:	1e5a      	subs	r2, r3, #1
 8018aea:	6022      	str	r2, [r4, #0]
 8018aec:	f803 5c01 	strb.w	r5, [r3, #-1]
 8018af0:	6863      	ldr	r3, [r4, #4]
 8018af2:	3301      	adds	r3, #1
 8018af4:	6063      	str	r3, [r4, #4]
 8018af6:	e7e9      	b.n	8018acc <_sungetc_r+0xc>
 8018af8:	4621      	mov	r1, r4
 8018afa:	f000 fbb3 	bl	8019264 <__submore>
 8018afe:	2800      	cmp	r0, #0
 8018b00:	d0f1      	beq.n	8018ae6 <_sungetc_r+0x26>
 8018b02:	e7e1      	b.n	8018ac8 <_sungetc_r+0x8>
 8018b04:	6921      	ldr	r1, [r4, #16]
 8018b06:	6823      	ldr	r3, [r4, #0]
 8018b08:	b151      	cbz	r1, 8018b20 <_sungetc_r+0x60>
 8018b0a:	4299      	cmp	r1, r3
 8018b0c:	d208      	bcs.n	8018b20 <_sungetc_r+0x60>
 8018b0e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8018b12:	42a9      	cmp	r1, r5
 8018b14:	d104      	bne.n	8018b20 <_sungetc_r+0x60>
 8018b16:	3b01      	subs	r3, #1
 8018b18:	3201      	adds	r2, #1
 8018b1a:	6023      	str	r3, [r4, #0]
 8018b1c:	6062      	str	r2, [r4, #4]
 8018b1e:	e7d5      	b.n	8018acc <_sungetc_r+0xc>
 8018b20:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8018b24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018b28:	6363      	str	r3, [r4, #52]	; 0x34
 8018b2a:	2303      	movs	r3, #3
 8018b2c:	63a3      	str	r3, [r4, #56]	; 0x38
 8018b2e:	4623      	mov	r3, r4
 8018b30:	f803 5f46 	strb.w	r5, [r3, #70]!
 8018b34:	6023      	str	r3, [r4, #0]
 8018b36:	2301      	movs	r3, #1
 8018b38:	e7dc      	b.n	8018af4 <_sungetc_r+0x34>

08018b3a <__ssrefill_r>:
 8018b3a:	b510      	push	{r4, lr}
 8018b3c:	460c      	mov	r4, r1
 8018b3e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8018b40:	b169      	cbz	r1, 8018b5e <__ssrefill_r+0x24>
 8018b42:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018b46:	4299      	cmp	r1, r3
 8018b48:	d001      	beq.n	8018b4e <__ssrefill_r+0x14>
 8018b4a:	f7fc fa7d 	bl	8015048 <_free_r>
 8018b4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018b50:	6063      	str	r3, [r4, #4]
 8018b52:	2000      	movs	r0, #0
 8018b54:	6360      	str	r0, [r4, #52]	; 0x34
 8018b56:	b113      	cbz	r3, 8018b5e <__ssrefill_r+0x24>
 8018b58:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8018b5a:	6023      	str	r3, [r4, #0]
 8018b5c:	bd10      	pop	{r4, pc}
 8018b5e:	6923      	ldr	r3, [r4, #16]
 8018b60:	6023      	str	r3, [r4, #0]
 8018b62:	2300      	movs	r3, #0
 8018b64:	6063      	str	r3, [r4, #4]
 8018b66:	89a3      	ldrh	r3, [r4, #12]
 8018b68:	f043 0320 	orr.w	r3, r3, #32
 8018b6c:	81a3      	strh	r3, [r4, #12]
 8018b6e:	f04f 30ff 	mov.w	r0, #4294967295
 8018b72:	e7f3      	b.n	8018b5c <__ssrefill_r+0x22>

08018b74 <__ssvfiscanf_r>:
 8018b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b78:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8018b7c:	460c      	mov	r4, r1
 8018b7e:	2100      	movs	r1, #0
 8018b80:	9144      	str	r1, [sp, #272]	; 0x110
 8018b82:	9145      	str	r1, [sp, #276]	; 0x114
 8018b84:	499f      	ldr	r1, [pc, #636]	; (8018e04 <__ssvfiscanf_r+0x290>)
 8018b86:	91a0      	str	r1, [sp, #640]	; 0x280
 8018b88:	f10d 0804 	add.w	r8, sp, #4
 8018b8c:	499e      	ldr	r1, [pc, #632]	; (8018e08 <__ssvfiscanf_r+0x294>)
 8018b8e:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8018e0c <__ssvfiscanf_r+0x298>
 8018b92:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8018b96:	4606      	mov	r6, r0
 8018b98:	4692      	mov	sl, r2
 8018b9a:	91a1      	str	r1, [sp, #644]	; 0x284
 8018b9c:	9300      	str	r3, [sp, #0]
 8018b9e:	270a      	movs	r7, #10
 8018ba0:	f89a 3000 	ldrb.w	r3, [sl]
 8018ba4:	2b00      	cmp	r3, #0
 8018ba6:	f000 812a 	beq.w	8018dfe <__ssvfiscanf_r+0x28a>
 8018baa:	4655      	mov	r5, sl
 8018bac:	f7ff f9f6 	bl	8017f9c <__locale_ctype_ptr>
 8018bb0:	f815 bb01 	ldrb.w	fp, [r5], #1
 8018bb4:	4458      	add	r0, fp
 8018bb6:	7843      	ldrb	r3, [r0, #1]
 8018bb8:	f013 0308 	ands.w	r3, r3, #8
 8018bbc:	d01c      	beq.n	8018bf8 <__ssvfiscanf_r+0x84>
 8018bbe:	6863      	ldr	r3, [r4, #4]
 8018bc0:	2b00      	cmp	r3, #0
 8018bc2:	dd12      	ble.n	8018bea <__ssvfiscanf_r+0x76>
 8018bc4:	f7ff f9ea 	bl	8017f9c <__locale_ctype_ptr>
 8018bc8:	6823      	ldr	r3, [r4, #0]
 8018bca:	781a      	ldrb	r2, [r3, #0]
 8018bcc:	4410      	add	r0, r2
 8018bce:	7842      	ldrb	r2, [r0, #1]
 8018bd0:	0712      	lsls	r2, r2, #28
 8018bd2:	d401      	bmi.n	8018bd8 <__ssvfiscanf_r+0x64>
 8018bd4:	46aa      	mov	sl, r5
 8018bd6:	e7e3      	b.n	8018ba0 <__ssvfiscanf_r+0x2c>
 8018bd8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8018bda:	3201      	adds	r2, #1
 8018bdc:	9245      	str	r2, [sp, #276]	; 0x114
 8018bde:	6862      	ldr	r2, [r4, #4]
 8018be0:	3301      	adds	r3, #1
 8018be2:	3a01      	subs	r2, #1
 8018be4:	6062      	str	r2, [r4, #4]
 8018be6:	6023      	str	r3, [r4, #0]
 8018be8:	e7e9      	b.n	8018bbe <__ssvfiscanf_r+0x4a>
 8018bea:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018bec:	4621      	mov	r1, r4
 8018bee:	4630      	mov	r0, r6
 8018bf0:	4798      	blx	r3
 8018bf2:	2800      	cmp	r0, #0
 8018bf4:	d0e6      	beq.n	8018bc4 <__ssvfiscanf_r+0x50>
 8018bf6:	e7ed      	b.n	8018bd4 <__ssvfiscanf_r+0x60>
 8018bf8:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8018bfc:	f040 8082 	bne.w	8018d04 <__ssvfiscanf_r+0x190>
 8018c00:	9343      	str	r3, [sp, #268]	; 0x10c
 8018c02:	9341      	str	r3, [sp, #260]	; 0x104
 8018c04:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8018c08:	2b2a      	cmp	r3, #42	; 0x2a
 8018c0a:	d103      	bne.n	8018c14 <__ssvfiscanf_r+0xa0>
 8018c0c:	2310      	movs	r3, #16
 8018c0e:	9341      	str	r3, [sp, #260]	; 0x104
 8018c10:	f10a 0502 	add.w	r5, sl, #2
 8018c14:	46aa      	mov	sl, r5
 8018c16:	f815 1b01 	ldrb.w	r1, [r5], #1
 8018c1a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8018c1e:	2a09      	cmp	r2, #9
 8018c20:	d922      	bls.n	8018c68 <__ssvfiscanf_r+0xf4>
 8018c22:	2203      	movs	r2, #3
 8018c24:	4879      	ldr	r0, [pc, #484]	; (8018e0c <__ssvfiscanf_r+0x298>)
 8018c26:	f7e7 faeb 	bl	8000200 <memchr>
 8018c2a:	b138      	cbz	r0, 8018c3c <__ssvfiscanf_r+0xc8>
 8018c2c:	eba0 0309 	sub.w	r3, r0, r9
 8018c30:	2001      	movs	r0, #1
 8018c32:	4098      	lsls	r0, r3
 8018c34:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018c36:	4318      	orrs	r0, r3
 8018c38:	9041      	str	r0, [sp, #260]	; 0x104
 8018c3a:	46aa      	mov	sl, r5
 8018c3c:	f89a 3000 	ldrb.w	r3, [sl]
 8018c40:	2b67      	cmp	r3, #103	; 0x67
 8018c42:	f10a 0501 	add.w	r5, sl, #1
 8018c46:	d82b      	bhi.n	8018ca0 <__ssvfiscanf_r+0x12c>
 8018c48:	2b65      	cmp	r3, #101	; 0x65
 8018c4a:	f080 809f 	bcs.w	8018d8c <__ssvfiscanf_r+0x218>
 8018c4e:	2b47      	cmp	r3, #71	; 0x47
 8018c50:	d810      	bhi.n	8018c74 <__ssvfiscanf_r+0x100>
 8018c52:	2b45      	cmp	r3, #69	; 0x45
 8018c54:	f080 809a 	bcs.w	8018d8c <__ssvfiscanf_r+0x218>
 8018c58:	2b00      	cmp	r3, #0
 8018c5a:	d06c      	beq.n	8018d36 <__ssvfiscanf_r+0x1c2>
 8018c5c:	2b25      	cmp	r3, #37	; 0x25
 8018c5e:	d051      	beq.n	8018d04 <__ssvfiscanf_r+0x190>
 8018c60:	2303      	movs	r3, #3
 8018c62:	9347      	str	r3, [sp, #284]	; 0x11c
 8018c64:	9742      	str	r7, [sp, #264]	; 0x108
 8018c66:	e027      	b.n	8018cb8 <__ssvfiscanf_r+0x144>
 8018c68:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8018c6a:	fb07 1303 	mla	r3, r7, r3, r1
 8018c6e:	3b30      	subs	r3, #48	; 0x30
 8018c70:	9343      	str	r3, [sp, #268]	; 0x10c
 8018c72:	e7cf      	b.n	8018c14 <__ssvfiscanf_r+0xa0>
 8018c74:	2b5b      	cmp	r3, #91	; 0x5b
 8018c76:	d06a      	beq.n	8018d4e <__ssvfiscanf_r+0x1da>
 8018c78:	d80c      	bhi.n	8018c94 <__ssvfiscanf_r+0x120>
 8018c7a:	2b58      	cmp	r3, #88	; 0x58
 8018c7c:	d1f0      	bne.n	8018c60 <__ssvfiscanf_r+0xec>
 8018c7e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8018c80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018c84:	9241      	str	r2, [sp, #260]	; 0x104
 8018c86:	2210      	movs	r2, #16
 8018c88:	9242      	str	r2, [sp, #264]	; 0x108
 8018c8a:	2b6e      	cmp	r3, #110	; 0x6e
 8018c8c:	bf8c      	ite	hi
 8018c8e:	2304      	movhi	r3, #4
 8018c90:	2303      	movls	r3, #3
 8018c92:	e010      	b.n	8018cb6 <__ssvfiscanf_r+0x142>
 8018c94:	2b63      	cmp	r3, #99	; 0x63
 8018c96:	d065      	beq.n	8018d64 <__ssvfiscanf_r+0x1f0>
 8018c98:	2b64      	cmp	r3, #100	; 0x64
 8018c9a:	d1e1      	bne.n	8018c60 <__ssvfiscanf_r+0xec>
 8018c9c:	9742      	str	r7, [sp, #264]	; 0x108
 8018c9e:	e7f4      	b.n	8018c8a <__ssvfiscanf_r+0x116>
 8018ca0:	2b70      	cmp	r3, #112	; 0x70
 8018ca2:	d04b      	beq.n	8018d3c <__ssvfiscanf_r+0x1c8>
 8018ca4:	d826      	bhi.n	8018cf4 <__ssvfiscanf_r+0x180>
 8018ca6:	2b6e      	cmp	r3, #110	; 0x6e
 8018ca8:	d062      	beq.n	8018d70 <__ssvfiscanf_r+0x1fc>
 8018caa:	d84c      	bhi.n	8018d46 <__ssvfiscanf_r+0x1d2>
 8018cac:	2b69      	cmp	r3, #105	; 0x69
 8018cae:	d1d7      	bne.n	8018c60 <__ssvfiscanf_r+0xec>
 8018cb0:	2300      	movs	r3, #0
 8018cb2:	9342      	str	r3, [sp, #264]	; 0x108
 8018cb4:	2303      	movs	r3, #3
 8018cb6:	9347      	str	r3, [sp, #284]	; 0x11c
 8018cb8:	6863      	ldr	r3, [r4, #4]
 8018cba:	2b00      	cmp	r3, #0
 8018cbc:	dd68      	ble.n	8018d90 <__ssvfiscanf_r+0x21c>
 8018cbe:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018cc0:	0659      	lsls	r1, r3, #25
 8018cc2:	d407      	bmi.n	8018cd4 <__ssvfiscanf_r+0x160>
 8018cc4:	f7ff f96a 	bl	8017f9c <__locale_ctype_ptr>
 8018cc8:	6823      	ldr	r3, [r4, #0]
 8018cca:	781a      	ldrb	r2, [r3, #0]
 8018ccc:	4410      	add	r0, r2
 8018cce:	7842      	ldrb	r2, [r0, #1]
 8018cd0:	0712      	lsls	r2, r2, #28
 8018cd2:	d464      	bmi.n	8018d9e <__ssvfiscanf_r+0x22a>
 8018cd4:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8018cd6:	2b02      	cmp	r3, #2
 8018cd8:	dc73      	bgt.n	8018dc2 <__ssvfiscanf_r+0x24e>
 8018cda:	466b      	mov	r3, sp
 8018cdc:	4622      	mov	r2, r4
 8018cde:	a941      	add	r1, sp, #260	; 0x104
 8018ce0:	4630      	mov	r0, r6
 8018ce2:	f000 f897 	bl	8018e14 <_scanf_chars>
 8018ce6:	2801      	cmp	r0, #1
 8018ce8:	f000 8089 	beq.w	8018dfe <__ssvfiscanf_r+0x28a>
 8018cec:	2802      	cmp	r0, #2
 8018cee:	f47f af71 	bne.w	8018bd4 <__ssvfiscanf_r+0x60>
 8018cf2:	e01d      	b.n	8018d30 <__ssvfiscanf_r+0x1bc>
 8018cf4:	2b75      	cmp	r3, #117	; 0x75
 8018cf6:	d0d1      	beq.n	8018c9c <__ssvfiscanf_r+0x128>
 8018cf8:	2b78      	cmp	r3, #120	; 0x78
 8018cfa:	d0c0      	beq.n	8018c7e <__ssvfiscanf_r+0x10a>
 8018cfc:	2b73      	cmp	r3, #115	; 0x73
 8018cfe:	d1af      	bne.n	8018c60 <__ssvfiscanf_r+0xec>
 8018d00:	2302      	movs	r3, #2
 8018d02:	e7d8      	b.n	8018cb6 <__ssvfiscanf_r+0x142>
 8018d04:	6863      	ldr	r3, [r4, #4]
 8018d06:	2b00      	cmp	r3, #0
 8018d08:	dd0c      	ble.n	8018d24 <__ssvfiscanf_r+0x1b0>
 8018d0a:	6823      	ldr	r3, [r4, #0]
 8018d0c:	781a      	ldrb	r2, [r3, #0]
 8018d0e:	455a      	cmp	r2, fp
 8018d10:	d175      	bne.n	8018dfe <__ssvfiscanf_r+0x28a>
 8018d12:	3301      	adds	r3, #1
 8018d14:	6862      	ldr	r2, [r4, #4]
 8018d16:	6023      	str	r3, [r4, #0]
 8018d18:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8018d1a:	3a01      	subs	r2, #1
 8018d1c:	3301      	adds	r3, #1
 8018d1e:	6062      	str	r2, [r4, #4]
 8018d20:	9345      	str	r3, [sp, #276]	; 0x114
 8018d22:	e757      	b.n	8018bd4 <__ssvfiscanf_r+0x60>
 8018d24:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018d26:	4621      	mov	r1, r4
 8018d28:	4630      	mov	r0, r6
 8018d2a:	4798      	blx	r3
 8018d2c:	2800      	cmp	r0, #0
 8018d2e:	d0ec      	beq.n	8018d0a <__ssvfiscanf_r+0x196>
 8018d30:	9844      	ldr	r0, [sp, #272]	; 0x110
 8018d32:	2800      	cmp	r0, #0
 8018d34:	d159      	bne.n	8018dea <__ssvfiscanf_r+0x276>
 8018d36:	f04f 30ff 	mov.w	r0, #4294967295
 8018d3a:	e05c      	b.n	8018df6 <__ssvfiscanf_r+0x282>
 8018d3c:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8018d3e:	f042 0220 	orr.w	r2, r2, #32
 8018d42:	9241      	str	r2, [sp, #260]	; 0x104
 8018d44:	e79b      	b.n	8018c7e <__ssvfiscanf_r+0x10a>
 8018d46:	2308      	movs	r3, #8
 8018d48:	9342      	str	r3, [sp, #264]	; 0x108
 8018d4a:	2304      	movs	r3, #4
 8018d4c:	e7b3      	b.n	8018cb6 <__ssvfiscanf_r+0x142>
 8018d4e:	4629      	mov	r1, r5
 8018d50:	4640      	mov	r0, r8
 8018d52:	f000 f9b7 	bl	80190c4 <__sccl>
 8018d56:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018d58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018d5c:	9341      	str	r3, [sp, #260]	; 0x104
 8018d5e:	4605      	mov	r5, r0
 8018d60:	2301      	movs	r3, #1
 8018d62:	e7a8      	b.n	8018cb6 <__ssvfiscanf_r+0x142>
 8018d64:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018d66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018d6a:	9341      	str	r3, [sp, #260]	; 0x104
 8018d6c:	2300      	movs	r3, #0
 8018d6e:	e7a2      	b.n	8018cb6 <__ssvfiscanf_r+0x142>
 8018d70:	9841      	ldr	r0, [sp, #260]	; 0x104
 8018d72:	06c3      	lsls	r3, r0, #27
 8018d74:	f53f af2e 	bmi.w	8018bd4 <__ssvfiscanf_r+0x60>
 8018d78:	9b00      	ldr	r3, [sp, #0]
 8018d7a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8018d7c:	1d19      	adds	r1, r3, #4
 8018d7e:	9100      	str	r1, [sp, #0]
 8018d80:	681b      	ldr	r3, [r3, #0]
 8018d82:	07c0      	lsls	r0, r0, #31
 8018d84:	bf4c      	ite	mi
 8018d86:	801a      	strhmi	r2, [r3, #0]
 8018d88:	601a      	strpl	r2, [r3, #0]
 8018d8a:	e723      	b.n	8018bd4 <__ssvfiscanf_r+0x60>
 8018d8c:	2305      	movs	r3, #5
 8018d8e:	e792      	b.n	8018cb6 <__ssvfiscanf_r+0x142>
 8018d90:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018d92:	4621      	mov	r1, r4
 8018d94:	4630      	mov	r0, r6
 8018d96:	4798      	blx	r3
 8018d98:	2800      	cmp	r0, #0
 8018d9a:	d090      	beq.n	8018cbe <__ssvfiscanf_r+0x14a>
 8018d9c:	e7c8      	b.n	8018d30 <__ssvfiscanf_r+0x1bc>
 8018d9e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8018da0:	3201      	adds	r2, #1
 8018da2:	9245      	str	r2, [sp, #276]	; 0x114
 8018da4:	6862      	ldr	r2, [r4, #4]
 8018da6:	3a01      	subs	r2, #1
 8018da8:	2a00      	cmp	r2, #0
 8018daa:	6062      	str	r2, [r4, #4]
 8018dac:	dd02      	ble.n	8018db4 <__ssvfiscanf_r+0x240>
 8018dae:	3301      	adds	r3, #1
 8018db0:	6023      	str	r3, [r4, #0]
 8018db2:	e787      	b.n	8018cc4 <__ssvfiscanf_r+0x150>
 8018db4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018db6:	4621      	mov	r1, r4
 8018db8:	4630      	mov	r0, r6
 8018dba:	4798      	blx	r3
 8018dbc:	2800      	cmp	r0, #0
 8018dbe:	d081      	beq.n	8018cc4 <__ssvfiscanf_r+0x150>
 8018dc0:	e7b6      	b.n	8018d30 <__ssvfiscanf_r+0x1bc>
 8018dc2:	2b04      	cmp	r3, #4
 8018dc4:	dc06      	bgt.n	8018dd4 <__ssvfiscanf_r+0x260>
 8018dc6:	466b      	mov	r3, sp
 8018dc8:	4622      	mov	r2, r4
 8018dca:	a941      	add	r1, sp, #260	; 0x104
 8018dcc:	4630      	mov	r0, r6
 8018dce:	f000 f885 	bl	8018edc <_scanf_i>
 8018dd2:	e788      	b.n	8018ce6 <__ssvfiscanf_r+0x172>
 8018dd4:	4b0e      	ldr	r3, [pc, #56]	; (8018e10 <__ssvfiscanf_r+0x29c>)
 8018dd6:	2b00      	cmp	r3, #0
 8018dd8:	f43f aefc 	beq.w	8018bd4 <__ssvfiscanf_r+0x60>
 8018ddc:	466b      	mov	r3, sp
 8018dde:	4622      	mov	r2, r4
 8018de0:	a941      	add	r1, sp, #260	; 0x104
 8018de2:	4630      	mov	r0, r6
 8018de4:	f7fc fe34 	bl	8015a50 <_scanf_float>
 8018de8:	e77d      	b.n	8018ce6 <__ssvfiscanf_r+0x172>
 8018dea:	89a3      	ldrh	r3, [r4, #12]
 8018dec:	f013 0f40 	tst.w	r3, #64	; 0x40
 8018df0:	bf18      	it	ne
 8018df2:	f04f 30ff 	movne.w	r0, #4294967295
 8018df6:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8018dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018dfe:	9844      	ldr	r0, [sp, #272]	; 0x110
 8018e00:	e7f9      	b.n	8018df6 <__ssvfiscanf_r+0x282>
 8018e02:	bf00      	nop
 8018e04:	08018ac1 	.word	0x08018ac1
 8018e08:	08018b3b 	.word	0x08018b3b
 8018e0c:	0801b4d2 	.word	0x0801b4d2
 8018e10:	08015a51 	.word	0x08015a51

08018e14 <_scanf_chars>:
 8018e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018e18:	4615      	mov	r5, r2
 8018e1a:	688a      	ldr	r2, [r1, #8]
 8018e1c:	4680      	mov	r8, r0
 8018e1e:	460c      	mov	r4, r1
 8018e20:	b932      	cbnz	r2, 8018e30 <_scanf_chars+0x1c>
 8018e22:	698a      	ldr	r2, [r1, #24]
 8018e24:	2a00      	cmp	r2, #0
 8018e26:	bf14      	ite	ne
 8018e28:	f04f 32ff 	movne.w	r2, #4294967295
 8018e2c:	2201      	moveq	r2, #1
 8018e2e:	608a      	str	r2, [r1, #8]
 8018e30:	6822      	ldr	r2, [r4, #0]
 8018e32:	06d1      	lsls	r1, r2, #27
 8018e34:	bf5f      	itttt	pl
 8018e36:	681a      	ldrpl	r2, [r3, #0]
 8018e38:	1d11      	addpl	r1, r2, #4
 8018e3a:	6019      	strpl	r1, [r3, #0]
 8018e3c:	6817      	ldrpl	r7, [r2, #0]
 8018e3e:	2600      	movs	r6, #0
 8018e40:	69a3      	ldr	r3, [r4, #24]
 8018e42:	b1db      	cbz	r3, 8018e7c <_scanf_chars+0x68>
 8018e44:	2b01      	cmp	r3, #1
 8018e46:	d107      	bne.n	8018e58 <_scanf_chars+0x44>
 8018e48:	682b      	ldr	r3, [r5, #0]
 8018e4a:	6962      	ldr	r2, [r4, #20]
 8018e4c:	781b      	ldrb	r3, [r3, #0]
 8018e4e:	5cd3      	ldrb	r3, [r2, r3]
 8018e50:	b9a3      	cbnz	r3, 8018e7c <_scanf_chars+0x68>
 8018e52:	2e00      	cmp	r6, #0
 8018e54:	d132      	bne.n	8018ebc <_scanf_chars+0xa8>
 8018e56:	e006      	b.n	8018e66 <_scanf_chars+0x52>
 8018e58:	2b02      	cmp	r3, #2
 8018e5a:	d007      	beq.n	8018e6c <_scanf_chars+0x58>
 8018e5c:	2e00      	cmp	r6, #0
 8018e5e:	d12d      	bne.n	8018ebc <_scanf_chars+0xa8>
 8018e60:	69a3      	ldr	r3, [r4, #24]
 8018e62:	2b01      	cmp	r3, #1
 8018e64:	d12a      	bne.n	8018ebc <_scanf_chars+0xa8>
 8018e66:	2001      	movs	r0, #1
 8018e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e6c:	f7ff f896 	bl	8017f9c <__locale_ctype_ptr>
 8018e70:	682b      	ldr	r3, [r5, #0]
 8018e72:	781b      	ldrb	r3, [r3, #0]
 8018e74:	4418      	add	r0, r3
 8018e76:	7843      	ldrb	r3, [r0, #1]
 8018e78:	071b      	lsls	r3, r3, #28
 8018e7a:	d4ef      	bmi.n	8018e5c <_scanf_chars+0x48>
 8018e7c:	6823      	ldr	r3, [r4, #0]
 8018e7e:	06da      	lsls	r2, r3, #27
 8018e80:	bf5e      	ittt	pl
 8018e82:	682b      	ldrpl	r3, [r5, #0]
 8018e84:	781b      	ldrbpl	r3, [r3, #0]
 8018e86:	703b      	strbpl	r3, [r7, #0]
 8018e88:	682a      	ldr	r2, [r5, #0]
 8018e8a:	686b      	ldr	r3, [r5, #4]
 8018e8c:	f102 0201 	add.w	r2, r2, #1
 8018e90:	602a      	str	r2, [r5, #0]
 8018e92:	68a2      	ldr	r2, [r4, #8]
 8018e94:	f103 33ff 	add.w	r3, r3, #4294967295
 8018e98:	f102 32ff 	add.w	r2, r2, #4294967295
 8018e9c:	606b      	str	r3, [r5, #4]
 8018e9e:	f106 0601 	add.w	r6, r6, #1
 8018ea2:	bf58      	it	pl
 8018ea4:	3701      	addpl	r7, #1
 8018ea6:	60a2      	str	r2, [r4, #8]
 8018ea8:	b142      	cbz	r2, 8018ebc <_scanf_chars+0xa8>
 8018eaa:	2b00      	cmp	r3, #0
 8018eac:	dcc8      	bgt.n	8018e40 <_scanf_chars+0x2c>
 8018eae:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8018eb2:	4629      	mov	r1, r5
 8018eb4:	4640      	mov	r0, r8
 8018eb6:	4798      	blx	r3
 8018eb8:	2800      	cmp	r0, #0
 8018eba:	d0c1      	beq.n	8018e40 <_scanf_chars+0x2c>
 8018ebc:	6823      	ldr	r3, [r4, #0]
 8018ebe:	f013 0310 	ands.w	r3, r3, #16
 8018ec2:	d105      	bne.n	8018ed0 <_scanf_chars+0xbc>
 8018ec4:	68e2      	ldr	r2, [r4, #12]
 8018ec6:	3201      	adds	r2, #1
 8018ec8:	60e2      	str	r2, [r4, #12]
 8018eca:	69a2      	ldr	r2, [r4, #24]
 8018ecc:	b102      	cbz	r2, 8018ed0 <_scanf_chars+0xbc>
 8018ece:	703b      	strb	r3, [r7, #0]
 8018ed0:	6923      	ldr	r3, [r4, #16]
 8018ed2:	441e      	add	r6, r3
 8018ed4:	6126      	str	r6, [r4, #16]
 8018ed6:	2000      	movs	r0, #0
 8018ed8:	e7c6      	b.n	8018e68 <_scanf_chars+0x54>
	...

08018edc <_scanf_i>:
 8018edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ee0:	469a      	mov	sl, r3
 8018ee2:	4b74      	ldr	r3, [pc, #464]	; (80190b4 <_scanf_i+0x1d8>)
 8018ee4:	460c      	mov	r4, r1
 8018ee6:	4683      	mov	fp, r0
 8018ee8:	4616      	mov	r6, r2
 8018eea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8018eee:	b087      	sub	sp, #28
 8018ef0:	ab03      	add	r3, sp, #12
 8018ef2:	68a7      	ldr	r7, [r4, #8]
 8018ef4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8018ef8:	4b6f      	ldr	r3, [pc, #444]	; (80190b8 <_scanf_i+0x1dc>)
 8018efa:	69a1      	ldr	r1, [r4, #24]
 8018efc:	4a6f      	ldr	r2, [pc, #444]	; (80190bc <_scanf_i+0x1e0>)
 8018efe:	2903      	cmp	r1, #3
 8018f00:	bf08      	it	eq
 8018f02:	461a      	moveq	r2, r3
 8018f04:	1e7b      	subs	r3, r7, #1
 8018f06:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8018f0a:	bf84      	itt	hi
 8018f0c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8018f10:	60a3      	strhi	r3, [r4, #8]
 8018f12:	6823      	ldr	r3, [r4, #0]
 8018f14:	9200      	str	r2, [sp, #0]
 8018f16:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8018f1a:	bf88      	it	hi
 8018f1c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8018f20:	f104 091c 	add.w	r9, r4, #28
 8018f24:	6023      	str	r3, [r4, #0]
 8018f26:	bf8c      	ite	hi
 8018f28:	197f      	addhi	r7, r7, r5
 8018f2a:	2700      	movls	r7, #0
 8018f2c:	464b      	mov	r3, r9
 8018f2e:	f04f 0800 	mov.w	r8, #0
 8018f32:	9301      	str	r3, [sp, #4]
 8018f34:	6831      	ldr	r1, [r6, #0]
 8018f36:	ab03      	add	r3, sp, #12
 8018f38:	2202      	movs	r2, #2
 8018f3a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8018f3e:	7809      	ldrb	r1, [r1, #0]
 8018f40:	f7e7 f95e 	bl	8000200 <memchr>
 8018f44:	9b01      	ldr	r3, [sp, #4]
 8018f46:	b330      	cbz	r0, 8018f96 <_scanf_i+0xba>
 8018f48:	f1b8 0f01 	cmp.w	r8, #1
 8018f4c:	d15a      	bne.n	8019004 <_scanf_i+0x128>
 8018f4e:	6862      	ldr	r2, [r4, #4]
 8018f50:	b92a      	cbnz	r2, 8018f5e <_scanf_i+0x82>
 8018f52:	6822      	ldr	r2, [r4, #0]
 8018f54:	2108      	movs	r1, #8
 8018f56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018f5a:	6061      	str	r1, [r4, #4]
 8018f5c:	6022      	str	r2, [r4, #0]
 8018f5e:	6822      	ldr	r2, [r4, #0]
 8018f60:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8018f64:	6022      	str	r2, [r4, #0]
 8018f66:	68a2      	ldr	r2, [r4, #8]
 8018f68:	1e51      	subs	r1, r2, #1
 8018f6a:	60a1      	str	r1, [r4, #8]
 8018f6c:	b19a      	cbz	r2, 8018f96 <_scanf_i+0xba>
 8018f6e:	6832      	ldr	r2, [r6, #0]
 8018f70:	1c51      	adds	r1, r2, #1
 8018f72:	6031      	str	r1, [r6, #0]
 8018f74:	7812      	ldrb	r2, [r2, #0]
 8018f76:	701a      	strb	r2, [r3, #0]
 8018f78:	1c5d      	adds	r5, r3, #1
 8018f7a:	6873      	ldr	r3, [r6, #4]
 8018f7c:	3b01      	subs	r3, #1
 8018f7e:	2b00      	cmp	r3, #0
 8018f80:	6073      	str	r3, [r6, #4]
 8018f82:	dc07      	bgt.n	8018f94 <_scanf_i+0xb8>
 8018f84:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8018f88:	4631      	mov	r1, r6
 8018f8a:	4658      	mov	r0, fp
 8018f8c:	4798      	blx	r3
 8018f8e:	2800      	cmp	r0, #0
 8018f90:	f040 8086 	bne.w	80190a0 <_scanf_i+0x1c4>
 8018f94:	462b      	mov	r3, r5
 8018f96:	f108 0801 	add.w	r8, r8, #1
 8018f9a:	f1b8 0f03 	cmp.w	r8, #3
 8018f9e:	d1c8      	bne.n	8018f32 <_scanf_i+0x56>
 8018fa0:	6862      	ldr	r2, [r4, #4]
 8018fa2:	b90a      	cbnz	r2, 8018fa8 <_scanf_i+0xcc>
 8018fa4:	220a      	movs	r2, #10
 8018fa6:	6062      	str	r2, [r4, #4]
 8018fa8:	6862      	ldr	r2, [r4, #4]
 8018faa:	4945      	ldr	r1, [pc, #276]	; (80190c0 <_scanf_i+0x1e4>)
 8018fac:	6960      	ldr	r0, [r4, #20]
 8018fae:	9301      	str	r3, [sp, #4]
 8018fb0:	1a89      	subs	r1, r1, r2
 8018fb2:	f000 f887 	bl	80190c4 <__sccl>
 8018fb6:	9b01      	ldr	r3, [sp, #4]
 8018fb8:	f04f 0800 	mov.w	r8, #0
 8018fbc:	461d      	mov	r5, r3
 8018fbe:	68a3      	ldr	r3, [r4, #8]
 8018fc0:	6822      	ldr	r2, [r4, #0]
 8018fc2:	2b00      	cmp	r3, #0
 8018fc4:	d03a      	beq.n	801903c <_scanf_i+0x160>
 8018fc6:	6831      	ldr	r1, [r6, #0]
 8018fc8:	6960      	ldr	r0, [r4, #20]
 8018fca:	f891 c000 	ldrb.w	ip, [r1]
 8018fce:	f810 000c 	ldrb.w	r0, [r0, ip]
 8018fd2:	2800      	cmp	r0, #0
 8018fd4:	d032      	beq.n	801903c <_scanf_i+0x160>
 8018fd6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8018fda:	d121      	bne.n	8019020 <_scanf_i+0x144>
 8018fdc:	0510      	lsls	r0, r2, #20
 8018fde:	d51f      	bpl.n	8019020 <_scanf_i+0x144>
 8018fe0:	f108 0801 	add.w	r8, r8, #1
 8018fe4:	b117      	cbz	r7, 8018fec <_scanf_i+0x110>
 8018fe6:	3301      	adds	r3, #1
 8018fe8:	3f01      	subs	r7, #1
 8018fea:	60a3      	str	r3, [r4, #8]
 8018fec:	6873      	ldr	r3, [r6, #4]
 8018fee:	3b01      	subs	r3, #1
 8018ff0:	2b00      	cmp	r3, #0
 8018ff2:	6073      	str	r3, [r6, #4]
 8018ff4:	dd1b      	ble.n	801902e <_scanf_i+0x152>
 8018ff6:	6833      	ldr	r3, [r6, #0]
 8018ff8:	3301      	adds	r3, #1
 8018ffa:	6033      	str	r3, [r6, #0]
 8018ffc:	68a3      	ldr	r3, [r4, #8]
 8018ffe:	3b01      	subs	r3, #1
 8019000:	60a3      	str	r3, [r4, #8]
 8019002:	e7dc      	b.n	8018fbe <_scanf_i+0xe2>
 8019004:	f1b8 0f02 	cmp.w	r8, #2
 8019008:	d1ad      	bne.n	8018f66 <_scanf_i+0x8a>
 801900a:	6822      	ldr	r2, [r4, #0]
 801900c:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8019010:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8019014:	d1bf      	bne.n	8018f96 <_scanf_i+0xba>
 8019016:	2110      	movs	r1, #16
 8019018:	6061      	str	r1, [r4, #4]
 801901a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801901e:	e7a1      	b.n	8018f64 <_scanf_i+0x88>
 8019020:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8019024:	6022      	str	r2, [r4, #0]
 8019026:	780b      	ldrb	r3, [r1, #0]
 8019028:	702b      	strb	r3, [r5, #0]
 801902a:	3501      	adds	r5, #1
 801902c:	e7de      	b.n	8018fec <_scanf_i+0x110>
 801902e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019032:	4631      	mov	r1, r6
 8019034:	4658      	mov	r0, fp
 8019036:	4798      	blx	r3
 8019038:	2800      	cmp	r0, #0
 801903a:	d0df      	beq.n	8018ffc <_scanf_i+0x120>
 801903c:	6823      	ldr	r3, [r4, #0]
 801903e:	05d9      	lsls	r1, r3, #23
 8019040:	d50c      	bpl.n	801905c <_scanf_i+0x180>
 8019042:	454d      	cmp	r5, r9
 8019044:	d908      	bls.n	8019058 <_scanf_i+0x17c>
 8019046:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801904a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801904e:	4632      	mov	r2, r6
 8019050:	4658      	mov	r0, fp
 8019052:	4798      	blx	r3
 8019054:	1e6f      	subs	r7, r5, #1
 8019056:	463d      	mov	r5, r7
 8019058:	454d      	cmp	r5, r9
 801905a:	d029      	beq.n	80190b0 <_scanf_i+0x1d4>
 801905c:	6822      	ldr	r2, [r4, #0]
 801905e:	f012 0210 	ands.w	r2, r2, #16
 8019062:	d113      	bne.n	801908c <_scanf_i+0x1b0>
 8019064:	702a      	strb	r2, [r5, #0]
 8019066:	6863      	ldr	r3, [r4, #4]
 8019068:	9e00      	ldr	r6, [sp, #0]
 801906a:	4649      	mov	r1, r9
 801906c:	4658      	mov	r0, fp
 801906e:	47b0      	blx	r6
 8019070:	f8da 3000 	ldr.w	r3, [sl]
 8019074:	6821      	ldr	r1, [r4, #0]
 8019076:	1d1a      	adds	r2, r3, #4
 8019078:	f8ca 2000 	str.w	r2, [sl]
 801907c:	f011 0f20 	tst.w	r1, #32
 8019080:	681b      	ldr	r3, [r3, #0]
 8019082:	d010      	beq.n	80190a6 <_scanf_i+0x1ca>
 8019084:	6018      	str	r0, [r3, #0]
 8019086:	68e3      	ldr	r3, [r4, #12]
 8019088:	3301      	adds	r3, #1
 801908a:	60e3      	str	r3, [r4, #12]
 801908c:	eba5 0509 	sub.w	r5, r5, r9
 8019090:	44a8      	add	r8, r5
 8019092:	6925      	ldr	r5, [r4, #16]
 8019094:	4445      	add	r5, r8
 8019096:	6125      	str	r5, [r4, #16]
 8019098:	2000      	movs	r0, #0
 801909a:	b007      	add	sp, #28
 801909c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80190a0:	f04f 0800 	mov.w	r8, #0
 80190a4:	e7ca      	b.n	801903c <_scanf_i+0x160>
 80190a6:	07ca      	lsls	r2, r1, #31
 80190a8:	bf4c      	ite	mi
 80190aa:	8018      	strhmi	r0, [r3, #0]
 80190ac:	6018      	strpl	r0, [r3, #0]
 80190ae:	e7ea      	b.n	8019086 <_scanf_i+0x1aa>
 80190b0:	2001      	movs	r0, #1
 80190b2:	e7f2      	b.n	801909a <_scanf_i+0x1be>
 80190b4:	0801b300 	.word	0x0801b300
 80190b8:	08016c99 	.word	0x08016c99
 80190bc:	08019241 	.word	0x08019241
 80190c0:	0801b4ed 	.word	0x0801b4ed

080190c4 <__sccl>:
 80190c4:	b570      	push	{r4, r5, r6, lr}
 80190c6:	780b      	ldrb	r3, [r1, #0]
 80190c8:	2b5e      	cmp	r3, #94	; 0x5e
 80190ca:	bf13      	iteet	ne
 80190cc:	1c4a      	addne	r2, r1, #1
 80190ce:	1c8a      	addeq	r2, r1, #2
 80190d0:	784b      	ldrbeq	r3, [r1, #1]
 80190d2:	2100      	movne	r1, #0
 80190d4:	bf08      	it	eq
 80190d6:	2101      	moveq	r1, #1
 80190d8:	1e44      	subs	r4, r0, #1
 80190da:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 80190de:	f804 1f01 	strb.w	r1, [r4, #1]!
 80190e2:	42ac      	cmp	r4, r5
 80190e4:	d1fb      	bne.n	80190de <__sccl+0x1a>
 80190e6:	b913      	cbnz	r3, 80190ee <__sccl+0x2a>
 80190e8:	3a01      	subs	r2, #1
 80190ea:	4610      	mov	r0, r2
 80190ec:	bd70      	pop	{r4, r5, r6, pc}
 80190ee:	f081 0401 	eor.w	r4, r1, #1
 80190f2:	54c4      	strb	r4, [r0, r3]
 80190f4:	1c51      	adds	r1, r2, #1
 80190f6:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 80190fa:	2d2d      	cmp	r5, #45	; 0x2d
 80190fc:	f101 36ff 	add.w	r6, r1, #4294967295
 8019100:	460a      	mov	r2, r1
 8019102:	d006      	beq.n	8019112 <__sccl+0x4e>
 8019104:	2d5d      	cmp	r5, #93	; 0x5d
 8019106:	d0f0      	beq.n	80190ea <__sccl+0x26>
 8019108:	b90d      	cbnz	r5, 801910e <__sccl+0x4a>
 801910a:	4632      	mov	r2, r6
 801910c:	e7ed      	b.n	80190ea <__sccl+0x26>
 801910e:	462b      	mov	r3, r5
 8019110:	e7ef      	b.n	80190f2 <__sccl+0x2e>
 8019112:	780e      	ldrb	r6, [r1, #0]
 8019114:	2e5d      	cmp	r6, #93	; 0x5d
 8019116:	d0fa      	beq.n	801910e <__sccl+0x4a>
 8019118:	42b3      	cmp	r3, r6
 801911a:	dcf8      	bgt.n	801910e <__sccl+0x4a>
 801911c:	3301      	adds	r3, #1
 801911e:	429e      	cmp	r6, r3
 8019120:	54c4      	strb	r4, [r0, r3]
 8019122:	dcfb      	bgt.n	801911c <__sccl+0x58>
 8019124:	3102      	adds	r1, #2
 8019126:	e7e6      	b.n	80190f6 <__sccl+0x32>

08019128 <strncmp>:
 8019128:	b510      	push	{r4, lr}
 801912a:	b16a      	cbz	r2, 8019148 <strncmp+0x20>
 801912c:	3901      	subs	r1, #1
 801912e:	1884      	adds	r4, r0, r2
 8019130:	f810 3b01 	ldrb.w	r3, [r0], #1
 8019134:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8019138:	4293      	cmp	r3, r2
 801913a:	d103      	bne.n	8019144 <strncmp+0x1c>
 801913c:	42a0      	cmp	r0, r4
 801913e:	d001      	beq.n	8019144 <strncmp+0x1c>
 8019140:	2b00      	cmp	r3, #0
 8019142:	d1f5      	bne.n	8019130 <strncmp+0x8>
 8019144:	1a98      	subs	r0, r3, r2
 8019146:	bd10      	pop	{r4, pc}
 8019148:	4610      	mov	r0, r2
 801914a:	e7fc      	b.n	8019146 <strncmp+0x1e>

0801914c <_strtoul_l.isra.0>:
 801914c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019150:	4680      	mov	r8, r0
 8019152:	4689      	mov	r9, r1
 8019154:	4692      	mov	sl, r2
 8019156:	461e      	mov	r6, r3
 8019158:	460f      	mov	r7, r1
 801915a:	463d      	mov	r5, r7
 801915c:	9808      	ldr	r0, [sp, #32]
 801915e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019162:	f7fe ff17 	bl	8017f94 <__locale_ctype_ptr_l>
 8019166:	4420      	add	r0, r4
 8019168:	7843      	ldrb	r3, [r0, #1]
 801916a:	f013 0308 	ands.w	r3, r3, #8
 801916e:	d130      	bne.n	80191d2 <_strtoul_l.isra.0+0x86>
 8019170:	2c2d      	cmp	r4, #45	; 0x2d
 8019172:	d130      	bne.n	80191d6 <_strtoul_l.isra.0+0x8a>
 8019174:	787c      	ldrb	r4, [r7, #1]
 8019176:	1cbd      	adds	r5, r7, #2
 8019178:	2101      	movs	r1, #1
 801917a:	2e00      	cmp	r6, #0
 801917c:	d05c      	beq.n	8019238 <_strtoul_l.isra.0+0xec>
 801917e:	2e10      	cmp	r6, #16
 8019180:	d109      	bne.n	8019196 <_strtoul_l.isra.0+0x4a>
 8019182:	2c30      	cmp	r4, #48	; 0x30
 8019184:	d107      	bne.n	8019196 <_strtoul_l.isra.0+0x4a>
 8019186:	782b      	ldrb	r3, [r5, #0]
 8019188:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801918c:	2b58      	cmp	r3, #88	; 0x58
 801918e:	d14e      	bne.n	801922e <_strtoul_l.isra.0+0xe2>
 8019190:	786c      	ldrb	r4, [r5, #1]
 8019192:	2610      	movs	r6, #16
 8019194:	3502      	adds	r5, #2
 8019196:	f04f 32ff 	mov.w	r2, #4294967295
 801919a:	2300      	movs	r3, #0
 801919c:	fbb2 f2f6 	udiv	r2, r2, r6
 80191a0:	fb06 fc02 	mul.w	ip, r6, r2
 80191a4:	ea6f 0c0c 	mvn.w	ip, ip
 80191a8:	4618      	mov	r0, r3
 80191aa:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80191ae:	2f09      	cmp	r7, #9
 80191b0:	d817      	bhi.n	80191e2 <_strtoul_l.isra.0+0x96>
 80191b2:	463c      	mov	r4, r7
 80191b4:	42a6      	cmp	r6, r4
 80191b6:	dd23      	ble.n	8019200 <_strtoul_l.isra.0+0xb4>
 80191b8:	2b00      	cmp	r3, #0
 80191ba:	db1e      	blt.n	80191fa <_strtoul_l.isra.0+0xae>
 80191bc:	4282      	cmp	r2, r0
 80191be:	d31c      	bcc.n	80191fa <_strtoul_l.isra.0+0xae>
 80191c0:	d101      	bne.n	80191c6 <_strtoul_l.isra.0+0x7a>
 80191c2:	45a4      	cmp	ip, r4
 80191c4:	db19      	blt.n	80191fa <_strtoul_l.isra.0+0xae>
 80191c6:	fb00 4006 	mla	r0, r0, r6, r4
 80191ca:	2301      	movs	r3, #1
 80191cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80191d0:	e7eb      	b.n	80191aa <_strtoul_l.isra.0+0x5e>
 80191d2:	462f      	mov	r7, r5
 80191d4:	e7c1      	b.n	801915a <_strtoul_l.isra.0+0xe>
 80191d6:	2c2b      	cmp	r4, #43	; 0x2b
 80191d8:	bf04      	itt	eq
 80191da:	1cbd      	addeq	r5, r7, #2
 80191dc:	787c      	ldrbeq	r4, [r7, #1]
 80191de:	4619      	mov	r1, r3
 80191e0:	e7cb      	b.n	801917a <_strtoul_l.isra.0+0x2e>
 80191e2:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80191e6:	2f19      	cmp	r7, #25
 80191e8:	d801      	bhi.n	80191ee <_strtoul_l.isra.0+0xa2>
 80191ea:	3c37      	subs	r4, #55	; 0x37
 80191ec:	e7e2      	b.n	80191b4 <_strtoul_l.isra.0+0x68>
 80191ee:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80191f2:	2f19      	cmp	r7, #25
 80191f4:	d804      	bhi.n	8019200 <_strtoul_l.isra.0+0xb4>
 80191f6:	3c57      	subs	r4, #87	; 0x57
 80191f8:	e7dc      	b.n	80191b4 <_strtoul_l.isra.0+0x68>
 80191fa:	f04f 33ff 	mov.w	r3, #4294967295
 80191fe:	e7e5      	b.n	80191cc <_strtoul_l.isra.0+0x80>
 8019200:	2b00      	cmp	r3, #0
 8019202:	da09      	bge.n	8019218 <_strtoul_l.isra.0+0xcc>
 8019204:	2322      	movs	r3, #34	; 0x22
 8019206:	f8c8 3000 	str.w	r3, [r8]
 801920a:	f04f 30ff 	mov.w	r0, #4294967295
 801920e:	f1ba 0f00 	cmp.w	sl, #0
 8019212:	d107      	bne.n	8019224 <_strtoul_l.isra.0+0xd8>
 8019214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019218:	b101      	cbz	r1, 801921c <_strtoul_l.isra.0+0xd0>
 801921a:	4240      	negs	r0, r0
 801921c:	f1ba 0f00 	cmp.w	sl, #0
 8019220:	d0f8      	beq.n	8019214 <_strtoul_l.isra.0+0xc8>
 8019222:	b10b      	cbz	r3, 8019228 <_strtoul_l.isra.0+0xdc>
 8019224:	f105 39ff 	add.w	r9, r5, #4294967295
 8019228:	f8ca 9000 	str.w	r9, [sl]
 801922c:	e7f2      	b.n	8019214 <_strtoul_l.isra.0+0xc8>
 801922e:	2430      	movs	r4, #48	; 0x30
 8019230:	2e00      	cmp	r6, #0
 8019232:	d1b0      	bne.n	8019196 <_strtoul_l.isra.0+0x4a>
 8019234:	2608      	movs	r6, #8
 8019236:	e7ae      	b.n	8019196 <_strtoul_l.isra.0+0x4a>
 8019238:	2c30      	cmp	r4, #48	; 0x30
 801923a:	d0a4      	beq.n	8019186 <_strtoul_l.isra.0+0x3a>
 801923c:	260a      	movs	r6, #10
 801923e:	e7aa      	b.n	8019196 <_strtoul_l.isra.0+0x4a>

08019240 <_strtoul_r>:
 8019240:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019242:	4c06      	ldr	r4, [pc, #24]	; (801925c <_strtoul_r+0x1c>)
 8019244:	4d06      	ldr	r5, [pc, #24]	; (8019260 <_strtoul_r+0x20>)
 8019246:	6824      	ldr	r4, [r4, #0]
 8019248:	6a24      	ldr	r4, [r4, #32]
 801924a:	2c00      	cmp	r4, #0
 801924c:	bf08      	it	eq
 801924e:	462c      	moveq	r4, r5
 8019250:	9400      	str	r4, [sp, #0]
 8019252:	f7ff ff7b 	bl	801914c <_strtoul_l.isra.0>
 8019256:	b003      	add	sp, #12
 8019258:	bd30      	pop	{r4, r5, pc}
 801925a:	bf00      	nop
 801925c:	20000e5c 	.word	0x20000e5c
 8019260:	20000ec0 	.word	0x20000ec0

08019264 <__submore>:
 8019264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019268:	460c      	mov	r4, r1
 801926a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801926c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019270:	4299      	cmp	r1, r3
 8019272:	d11d      	bne.n	80192b0 <__submore+0x4c>
 8019274:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8019278:	f7fb ff34 	bl	80150e4 <_malloc_r>
 801927c:	b918      	cbnz	r0, 8019286 <__submore+0x22>
 801927e:	f04f 30ff 	mov.w	r0, #4294967295
 8019282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019286:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801928a:	63a3      	str	r3, [r4, #56]	; 0x38
 801928c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8019290:	6360      	str	r0, [r4, #52]	; 0x34
 8019292:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8019296:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801929a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801929e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80192a2:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80192a6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80192aa:	6020      	str	r0, [r4, #0]
 80192ac:	2000      	movs	r0, #0
 80192ae:	e7e8      	b.n	8019282 <__submore+0x1e>
 80192b0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80192b2:	0077      	lsls	r7, r6, #1
 80192b4:	463a      	mov	r2, r7
 80192b6:	f000 f81c 	bl	80192f2 <_realloc_r>
 80192ba:	4605      	mov	r5, r0
 80192bc:	2800      	cmp	r0, #0
 80192be:	d0de      	beq.n	801927e <__submore+0x1a>
 80192c0:	eb00 0806 	add.w	r8, r0, r6
 80192c4:	4601      	mov	r1, r0
 80192c6:	4632      	mov	r2, r6
 80192c8:	4640      	mov	r0, r8
 80192ca:	f7fb fe91 	bl	8014ff0 <memcpy>
 80192ce:	f8c4 8000 	str.w	r8, [r4]
 80192d2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80192d6:	e7e9      	b.n	80192ac <__submore+0x48>

080192d8 <__ascii_wctomb>:
 80192d8:	b149      	cbz	r1, 80192ee <__ascii_wctomb+0x16>
 80192da:	2aff      	cmp	r2, #255	; 0xff
 80192dc:	bf85      	ittet	hi
 80192de:	238a      	movhi	r3, #138	; 0x8a
 80192e0:	6003      	strhi	r3, [r0, #0]
 80192e2:	700a      	strbls	r2, [r1, #0]
 80192e4:	f04f 30ff 	movhi.w	r0, #4294967295
 80192e8:	bf98      	it	ls
 80192ea:	2001      	movls	r0, #1
 80192ec:	4770      	bx	lr
 80192ee:	4608      	mov	r0, r1
 80192f0:	4770      	bx	lr

080192f2 <_realloc_r>:
 80192f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80192f4:	4607      	mov	r7, r0
 80192f6:	4614      	mov	r4, r2
 80192f8:	460e      	mov	r6, r1
 80192fa:	b921      	cbnz	r1, 8019306 <_realloc_r+0x14>
 80192fc:	4611      	mov	r1, r2
 80192fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019302:	f7fb beef 	b.w	80150e4 <_malloc_r>
 8019306:	b922      	cbnz	r2, 8019312 <_realloc_r+0x20>
 8019308:	f7fb fe9e 	bl	8015048 <_free_r>
 801930c:	4625      	mov	r5, r4
 801930e:	4628      	mov	r0, r5
 8019310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019312:	f000 f814 	bl	801933e <_malloc_usable_size_r>
 8019316:	42a0      	cmp	r0, r4
 8019318:	d20f      	bcs.n	801933a <_realloc_r+0x48>
 801931a:	4621      	mov	r1, r4
 801931c:	4638      	mov	r0, r7
 801931e:	f7fb fee1 	bl	80150e4 <_malloc_r>
 8019322:	4605      	mov	r5, r0
 8019324:	2800      	cmp	r0, #0
 8019326:	d0f2      	beq.n	801930e <_realloc_r+0x1c>
 8019328:	4631      	mov	r1, r6
 801932a:	4622      	mov	r2, r4
 801932c:	f7fb fe60 	bl	8014ff0 <memcpy>
 8019330:	4631      	mov	r1, r6
 8019332:	4638      	mov	r0, r7
 8019334:	f7fb fe88 	bl	8015048 <_free_r>
 8019338:	e7e9      	b.n	801930e <_realloc_r+0x1c>
 801933a:	4635      	mov	r5, r6
 801933c:	e7e7      	b.n	801930e <_realloc_r+0x1c>

0801933e <_malloc_usable_size_r>:
 801933e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019342:	1f18      	subs	r0, r3, #4
 8019344:	2b00      	cmp	r3, #0
 8019346:	bfbc      	itt	lt
 8019348:	580b      	ldrlt	r3, [r1, r0]
 801934a:	18c0      	addlt	r0, r0, r3
 801934c:	4770      	bx	lr
	...

08019350 <ceil>:
 8019350:	ec51 0b10 	vmov	r0, r1, d0
 8019354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019358:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801935c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8019360:	2e13      	cmp	r6, #19
 8019362:	460c      	mov	r4, r1
 8019364:	ee10 5a10 	vmov	r5, s0
 8019368:	4680      	mov	r8, r0
 801936a:	dc30      	bgt.n	80193ce <ceil+0x7e>
 801936c:	2e00      	cmp	r6, #0
 801936e:	da12      	bge.n	8019396 <ceil+0x46>
 8019370:	a333      	add	r3, pc, #204	; (adr r3, 8019440 <ceil+0xf0>)
 8019372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019376:	f7e6 ff99 	bl	80002ac <__adddf3>
 801937a:	2200      	movs	r2, #0
 801937c:	2300      	movs	r3, #0
 801937e:	f7e7 fbdb 	bl	8000b38 <__aeabi_dcmpgt>
 8019382:	b128      	cbz	r0, 8019390 <ceil+0x40>
 8019384:	2c00      	cmp	r4, #0
 8019386:	db55      	blt.n	8019434 <ceil+0xe4>
 8019388:	432c      	orrs	r4, r5
 801938a:	d057      	beq.n	801943c <ceil+0xec>
 801938c:	4c2e      	ldr	r4, [pc, #184]	; (8019448 <ceil+0xf8>)
 801938e:	2500      	movs	r5, #0
 8019390:	4621      	mov	r1, r4
 8019392:	4628      	mov	r0, r5
 8019394:	e025      	b.n	80193e2 <ceil+0x92>
 8019396:	4f2d      	ldr	r7, [pc, #180]	; (801944c <ceil+0xfc>)
 8019398:	4137      	asrs	r7, r6
 801939a:	ea01 0307 	and.w	r3, r1, r7
 801939e:	4303      	orrs	r3, r0
 80193a0:	d01f      	beq.n	80193e2 <ceil+0x92>
 80193a2:	a327      	add	r3, pc, #156	; (adr r3, 8019440 <ceil+0xf0>)
 80193a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80193a8:	f7e6 ff80 	bl	80002ac <__adddf3>
 80193ac:	2200      	movs	r2, #0
 80193ae:	2300      	movs	r3, #0
 80193b0:	f7e7 fbc2 	bl	8000b38 <__aeabi_dcmpgt>
 80193b4:	2800      	cmp	r0, #0
 80193b6:	d0eb      	beq.n	8019390 <ceil+0x40>
 80193b8:	2c00      	cmp	r4, #0
 80193ba:	bfc2      	ittt	gt
 80193bc:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 80193c0:	fa43 f606 	asrgt.w	r6, r3, r6
 80193c4:	19a4      	addgt	r4, r4, r6
 80193c6:	ea24 0407 	bic.w	r4, r4, r7
 80193ca:	2500      	movs	r5, #0
 80193cc:	e7e0      	b.n	8019390 <ceil+0x40>
 80193ce:	2e33      	cmp	r6, #51	; 0x33
 80193d0:	dd0b      	ble.n	80193ea <ceil+0x9a>
 80193d2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80193d6:	d104      	bne.n	80193e2 <ceil+0x92>
 80193d8:	ee10 2a10 	vmov	r2, s0
 80193dc:	460b      	mov	r3, r1
 80193de:	f7e6 ff65 	bl	80002ac <__adddf3>
 80193e2:	ec41 0b10 	vmov	d0, r0, r1
 80193e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80193ea:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80193ee:	f04f 33ff 	mov.w	r3, #4294967295
 80193f2:	fa23 f707 	lsr.w	r7, r3, r7
 80193f6:	4207      	tst	r7, r0
 80193f8:	d0f3      	beq.n	80193e2 <ceil+0x92>
 80193fa:	a311      	add	r3, pc, #68	; (adr r3, 8019440 <ceil+0xf0>)
 80193fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019400:	f7e6 ff54 	bl	80002ac <__adddf3>
 8019404:	2200      	movs	r2, #0
 8019406:	2300      	movs	r3, #0
 8019408:	f7e7 fb96 	bl	8000b38 <__aeabi_dcmpgt>
 801940c:	2800      	cmp	r0, #0
 801940e:	d0bf      	beq.n	8019390 <ceil+0x40>
 8019410:	2c00      	cmp	r4, #0
 8019412:	dd02      	ble.n	801941a <ceil+0xca>
 8019414:	2e14      	cmp	r6, #20
 8019416:	d103      	bne.n	8019420 <ceil+0xd0>
 8019418:	3401      	adds	r4, #1
 801941a:	ea25 0507 	bic.w	r5, r5, r7
 801941e:	e7b7      	b.n	8019390 <ceil+0x40>
 8019420:	2301      	movs	r3, #1
 8019422:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8019426:	fa03 f606 	lsl.w	r6, r3, r6
 801942a:	4435      	add	r5, r6
 801942c:	4545      	cmp	r5, r8
 801942e:	bf38      	it	cc
 8019430:	18e4      	addcc	r4, r4, r3
 8019432:	e7f2      	b.n	801941a <ceil+0xca>
 8019434:	2500      	movs	r5, #0
 8019436:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801943a:	e7a9      	b.n	8019390 <ceil+0x40>
 801943c:	4625      	mov	r5, r4
 801943e:	e7a7      	b.n	8019390 <ceil+0x40>
 8019440:	8800759c 	.word	0x8800759c
 8019444:	7e37e43c 	.word	0x7e37e43c
 8019448:	3ff00000 	.word	0x3ff00000
 801944c:	000fffff 	.word	0x000fffff

08019450 <cos>:
 8019450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019452:	ec51 0b10 	vmov	r0, r1, d0
 8019456:	4a1e      	ldr	r2, [pc, #120]	; (80194d0 <cos+0x80>)
 8019458:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801945c:	4293      	cmp	r3, r2
 801945e:	dc06      	bgt.n	801946e <cos+0x1e>
 8019460:	ed9f 1b19 	vldr	d1, [pc, #100]	; 80194c8 <cos+0x78>
 8019464:	f000 fcec 	bl	8019e40 <__kernel_cos>
 8019468:	ec51 0b10 	vmov	r0, r1, d0
 801946c:	e007      	b.n	801947e <cos+0x2e>
 801946e:	4a19      	ldr	r2, [pc, #100]	; (80194d4 <cos+0x84>)
 8019470:	4293      	cmp	r3, r2
 8019472:	dd09      	ble.n	8019488 <cos+0x38>
 8019474:	ee10 2a10 	vmov	r2, s0
 8019478:	460b      	mov	r3, r1
 801947a:	f7e6 ff15 	bl	80002a8 <__aeabi_dsub>
 801947e:	ec41 0b10 	vmov	d0, r0, r1
 8019482:	b005      	add	sp, #20
 8019484:	f85d fb04 	ldr.w	pc, [sp], #4
 8019488:	4668      	mov	r0, sp
 801948a:	f000 fa35 	bl	80198f8 <__ieee754_rem_pio2>
 801948e:	f000 0003 	and.w	r0, r0, #3
 8019492:	2801      	cmp	r0, #1
 8019494:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019498:	ed9d 0b00 	vldr	d0, [sp]
 801949c:	d007      	beq.n	80194ae <cos+0x5e>
 801949e:	2802      	cmp	r0, #2
 80194a0:	d00e      	beq.n	80194c0 <cos+0x70>
 80194a2:	2800      	cmp	r0, #0
 80194a4:	d0de      	beq.n	8019464 <cos+0x14>
 80194a6:	2001      	movs	r0, #1
 80194a8:	f001 f8d2 	bl	801a650 <__kernel_sin>
 80194ac:	e7dc      	b.n	8019468 <cos+0x18>
 80194ae:	f001 f8cf 	bl	801a650 <__kernel_sin>
 80194b2:	ec53 2b10 	vmov	r2, r3, d0
 80194b6:	ee10 0a10 	vmov	r0, s0
 80194ba:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80194be:	e7de      	b.n	801947e <cos+0x2e>
 80194c0:	f000 fcbe 	bl	8019e40 <__kernel_cos>
 80194c4:	e7f5      	b.n	80194b2 <cos+0x62>
 80194c6:	bf00      	nop
	...
 80194d0:	3fe921fb 	.word	0x3fe921fb
 80194d4:	7fefffff 	.word	0x7fefffff

080194d8 <round>:
 80194d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80194da:	ec57 6b10 	vmov	r6, r7, d0
 80194de:	f3c7 500a 	ubfx	r0, r7, #20, #11
 80194e2:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 80194e6:	2c13      	cmp	r4, #19
 80194e8:	463b      	mov	r3, r7
 80194ea:	463d      	mov	r5, r7
 80194ec:	dc17      	bgt.n	801951e <round+0x46>
 80194ee:	2c00      	cmp	r4, #0
 80194f0:	da09      	bge.n	8019506 <round+0x2e>
 80194f2:	3401      	adds	r4, #1
 80194f4:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 80194f8:	d103      	bne.n	8019502 <round+0x2a>
 80194fa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80194fe:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8019502:	2100      	movs	r1, #0
 8019504:	e02c      	b.n	8019560 <round+0x88>
 8019506:	4a18      	ldr	r2, [pc, #96]	; (8019568 <round+0x90>)
 8019508:	4122      	asrs	r2, r4
 801950a:	4217      	tst	r7, r2
 801950c:	d100      	bne.n	8019510 <round+0x38>
 801950e:	b19e      	cbz	r6, 8019538 <round+0x60>
 8019510:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8019514:	4123      	asrs	r3, r4
 8019516:	442b      	add	r3, r5
 8019518:	ea23 0302 	bic.w	r3, r3, r2
 801951c:	e7f1      	b.n	8019502 <round+0x2a>
 801951e:	2c33      	cmp	r4, #51	; 0x33
 8019520:	dd0d      	ble.n	801953e <round+0x66>
 8019522:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8019526:	d107      	bne.n	8019538 <round+0x60>
 8019528:	4630      	mov	r0, r6
 801952a:	4639      	mov	r1, r7
 801952c:	ee10 2a10 	vmov	r2, s0
 8019530:	f7e6 febc 	bl	80002ac <__adddf3>
 8019534:	4606      	mov	r6, r0
 8019536:	460f      	mov	r7, r1
 8019538:	ec47 6b10 	vmov	d0, r6, r7
 801953c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801953e:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 8019542:	f04f 30ff 	mov.w	r0, #4294967295
 8019546:	40d0      	lsrs	r0, r2
 8019548:	4206      	tst	r6, r0
 801954a:	d0f5      	beq.n	8019538 <round+0x60>
 801954c:	2201      	movs	r2, #1
 801954e:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8019552:	fa02 f404 	lsl.w	r4, r2, r4
 8019556:	1931      	adds	r1, r6, r4
 8019558:	bf28      	it	cs
 801955a:	189b      	addcs	r3, r3, r2
 801955c:	ea21 0100 	bic.w	r1, r1, r0
 8019560:	461f      	mov	r7, r3
 8019562:	460e      	mov	r6, r1
 8019564:	e7e8      	b.n	8019538 <round+0x60>
 8019566:	bf00      	nop
 8019568:	000fffff 	.word	0x000fffff
 801956c:	00000000 	.word	0x00000000

08019570 <sin>:
 8019570:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019572:	ec51 0b10 	vmov	r0, r1, d0
 8019576:	4a20      	ldr	r2, [pc, #128]	; (80195f8 <sin+0x88>)
 8019578:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801957c:	4293      	cmp	r3, r2
 801957e:	dc07      	bgt.n	8019590 <sin+0x20>
 8019580:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80195f0 <sin+0x80>
 8019584:	2000      	movs	r0, #0
 8019586:	f001 f863 	bl	801a650 <__kernel_sin>
 801958a:	ec51 0b10 	vmov	r0, r1, d0
 801958e:	e007      	b.n	80195a0 <sin+0x30>
 8019590:	4a1a      	ldr	r2, [pc, #104]	; (80195fc <sin+0x8c>)
 8019592:	4293      	cmp	r3, r2
 8019594:	dd09      	ble.n	80195aa <sin+0x3a>
 8019596:	ee10 2a10 	vmov	r2, s0
 801959a:	460b      	mov	r3, r1
 801959c:	f7e6 fe84 	bl	80002a8 <__aeabi_dsub>
 80195a0:	ec41 0b10 	vmov	d0, r0, r1
 80195a4:	b005      	add	sp, #20
 80195a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80195aa:	4668      	mov	r0, sp
 80195ac:	f000 f9a4 	bl	80198f8 <__ieee754_rem_pio2>
 80195b0:	f000 0003 	and.w	r0, r0, #3
 80195b4:	2801      	cmp	r0, #1
 80195b6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80195ba:	ed9d 0b00 	vldr	d0, [sp]
 80195be:	d004      	beq.n	80195ca <sin+0x5a>
 80195c0:	2802      	cmp	r0, #2
 80195c2:	d005      	beq.n	80195d0 <sin+0x60>
 80195c4:	b970      	cbnz	r0, 80195e4 <sin+0x74>
 80195c6:	2001      	movs	r0, #1
 80195c8:	e7dd      	b.n	8019586 <sin+0x16>
 80195ca:	f000 fc39 	bl	8019e40 <__kernel_cos>
 80195ce:	e7dc      	b.n	801958a <sin+0x1a>
 80195d0:	2001      	movs	r0, #1
 80195d2:	f001 f83d 	bl	801a650 <__kernel_sin>
 80195d6:	ec53 2b10 	vmov	r2, r3, d0
 80195da:	ee10 0a10 	vmov	r0, s0
 80195de:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80195e2:	e7dd      	b.n	80195a0 <sin+0x30>
 80195e4:	f000 fc2c 	bl	8019e40 <__kernel_cos>
 80195e8:	e7f5      	b.n	80195d6 <sin+0x66>
 80195ea:	bf00      	nop
 80195ec:	f3af 8000 	nop.w
	...
 80195f8:	3fe921fb 	.word	0x3fe921fb
 80195fc:	7fefffff 	.word	0x7fefffff

08019600 <ceilf>:
 8019600:	ee10 3a10 	vmov	r3, s0
 8019604:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8019608:	0dca      	lsrs	r2, r1, #23
 801960a:	3a7f      	subs	r2, #127	; 0x7f
 801960c:	2a16      	cmp	r2, #22
 801960e:	dc2a      	bgt.n	8019666 <ceilf+0x66>
 8019610:	2a00      	cmp	r2, #0
 8019612:	da11      	bge.n	8019638 <ceilf+0x38>
 8019614:	eddf 7a18 	vldr	s15, [pc, #96]	; 8019678 <ceilf+0x78>
 8019618:	ee30 0a27 	vadd.f32	s0, s0, s15
 801961c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8019620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019624:	dd05      	ble.n	8019632 <ceilf+0x32>
 8019626:	2b00      	cmp	r3, #0
 8019628:	db23      	blt.n	8019672 <ceilf+0x72>
 801962a:	2900      	cmp	r1, #0
 801962c:	bf18      	it	ne
 801962e:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 8019632:	ee00 3a10 	vmov	s0, r3
 8019636:	4770      	bx	lr
 8019638:	4910      	ldr	r1, [pc, #64]	; (801967c <ceilf+0x7c>)
 801963a:	4111      	asrs	r1, r2
 801963c:	420b      	tst	r3, r1
 801963e:	d0fa      	beq.n	8019636 <ceilf+0x36>
 8019640:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8019678 <ceilf+0x78>
 8019644:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019648:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801964c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019650:	ddef      	ble.n	8019632 <ceilf+0x32>
 8019652:	2b00      	cmp	r3, #0
 8019654:	bfc2      	ittt	gt
 8019656:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 801965a:	fa40 f202 	asrgt.w	r2, r0, r2
 801965e:	189b      	addgt	r3, r3, r2
 8019660:	ea23 0301 	bic.w	r3, r3, r1
 8019664:	e7e5      	b.n	8019632 <ceilf+0x32>
 8019666:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801966a:	d3e4      	bcc.n	8019636 <ceilf+0x36>
 801966c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019670:	4770      	bx	lr
 8019672:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8019676:	e7dc      	b.n	8019632 <ceilf+0x32>
 8019678:	7149f2ca 	.word	0x7149f2ca
 801967c:	007fffff 	.word	0x007fffff

08019680 <atan2>:
 8019680:	f000 b85a 	b.w	8019738 <__ieee754_atan2>

08019684 <sqrt>:
 8019684:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019688:	ed2d 8b02 	vpush	{d8}
 801968c:	b08b      	sub	sp, #44	; 0x2c
 801968e:	ec55 4b10 	vmov	r4, r5, d0
 8019692:	f000 fb23 	bl	8019cdc <__ieee754_sqrt>
 8019696:	4b26      	ldr	r3, [pc, #152]	; (8019730 <sqrt+0xac>)
 8019698:	eeb0 8a40 	vmov.f32	s16, s0
 801969c:	eef0 8a60 	vmov.f32	s17, s1
 80196a0:	f993 6000 	ldrsb.w	r6, [r3]
 80196a4:	1c73      	adds	r3, r6, #1
 80196a6:	d02a      	beq.n	80196fe <sqrt+0x7a>
 80196a8:	4622      	mov	r2, r4
 80196aa:	462b      	mov	r3, r5
 80196ac:	4620      	mov	r0, r4
 80196ae:	4629      	mov	r1, r5
 80196b0:	f7e7 fa4c 	bl	8000b4c <__aeabi_dcmpun>
 80196b4:	4607      	mov	r7, r0
 80196b6:	bb10      	cbnz	r0, 80196fe <sqrt+0x7a>
 80196b8:	f04f 0800 	mov.w	r8, #0
 80196bc:	f04f 0900 	mov.w	r9, #0
 80196c0:	4642      	mov	r2, r8
 80196c2:	464b      	mov	r3, r9
 80196c4:	4620      	mov	r0, r4
 80196c6:	4629      	mov	r1, r5
 80196c8:	f7e7 fa18 	bl	8000afc <__aeabi_dcmplt>
 80196cc:	b1b8      	cbz	r0, 80196fe <sqrt+0x7a>
 80196ce:	2301      	movs	r3, #1
 80196d0:	9300      	str	r3, [sp, #0]
 80196d2:	4b18      	ldr	r3, [pc, #96]	; (8019734 <sqrt+0xb0>)
 80196d4:	9301      	str	r3, [sp, #4]
 80196d6:	9708      	str	r7, [sp, #32]
 80196d8:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80196dc:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80196e0:	b9b6      	cbnz	r6, 8019710 <sqrt+0x8c>
 80196e2:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80196e6:	4668      	mov	r0, sp
 80196e8:	f001 fa9e 	bl	801ac28 <matherr>
 80196ec:	b1d0      	cbz	r0, 8019724 <sqrt+0xa0>
 80196ee:	9b08      	ldr	r3, [sp, #32]
 80196f0:	b11b      	cbz	r3, 80196fa <sqrt+0x76>
 80196f2:	f7fb fc43 	bl	8014f7c <__errno>
 80196f6:	9b08      	ldr	r3, [sp, #32]
 80196f8:	6003      	str	r3, [r0, #0]
 80196fa:	ed9d 8b06 	vldr	d8, [sp, #24]
 80196fe:	eeb0 0a48 	vmov.f32	s0, s16
 8019702:	eef0 0a68 	vmov.f32	s1, s17
 8019706:	b00b      	add	sp, #44	; 0x2c
 8019708:	ecbd 8b02 	vpop	{d8}
 801970c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019710:	4642      	mov	r2, r8
 8019712:	464b      	mov	r3, r9
 8019714:	4640      	mov	r0, r8
 8019716:	4649      	mov	r1, r9
 8019718:	f7e7 f8a8 	bl	800086c <__aeabi_ddiv>
 801971c:	2e02      	cmp	r6, #2
 801971e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8019722:	d1e0      	bne.n	80196e6 <sqrt+0x62>
 8019724:	f7fb fc2a 	bl	8014f7c <__errno>
 8019728:	2321      	movs	r3, #33	; 0x21
 801972a:	6003      	str	r3, [r0, #0]
 801972c:	e7df      	b.n	80196ee <sqrt+0x6a>
 801972e:	bf00      	nop
 8019730:	2000102c 	.word	0x2000102c
 8019734:	0801b65c 	.word	0x0801b65c

08019738 <__ieee754_atan2>:
 8019738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801973c:	ec57 6b11 	vmov	r6, r7, d1
 8019740:	4273      	negs	r3, r6
 8019742:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8019746:	4333      	orrs	r3, r6
 8019748:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80198f0 <__ieee754_atan2+0x1b8>
 801974c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8019750:	4573      	cmp	r3, lr
 8019752:	ec51 0b10 	vmov	r0, r1, d0
 8019756:	ee11 8a10 	vmov	r8, s2
 801975a:	d80a      	bhi.n	8019772 <__ieee754_atan2+0x3a>
 801975c:	4244      	negs	r4, r0
 801975e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019762:	4304      	orrs	r4, r0
 8019764:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8019768:	4574      	cmp	r4, lr
 801976a:	468c      	mov	ip, r1
 801976c:	ee10 9a10 	vmov	r9, s0
 8019770:	d907      	bls.n	8019782 <__ieee754_atan2+0x4a>
 8019772:	4632      	mov	r2, r6
 8019774:	463b      	mov	r3, r7
 8019776:	f7e6 fd99 	bl	80002ac <__adddf3>
 801977a:	ec41 0b10 	vmov	d0, r0, r1
 801977e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019782:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8019786:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801978a:	4334      	orrs	r4, r6
 801978c:	d103      	bne.n	8019796 <__ieee754_atan2+0x5e>
 801978e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019792:	f001 b819 	b.w	801a7c8 <atan>
 8019796:	17bc      	asrs	r4, r7, #30
 8019798:	f004 0402 	and.w	r4, r4, #2
 801979c:	ea53 0909 	orrs.w	r9, r3, r9
 80197a0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80197a4:	d107      	bne.n	80197b6 <__ieee754_atan2+0x7e>
 80197a6:	2c02      	cmp	r4, #2
 80197a8:	d073      	beq.n	8019892 <__ieee754_atan2+0x15a>
 80197aa:	2c03      	cmp	r4, #3
 80197ac:	d1e5      	bne.n	801977a <__ieee754_atan2+0x42>
 80197ae:	a13e      	add	r1, pc, #248	; (adr r1, 80198a8 <__ieee754_atan2+0x170>)
 80197b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80197b4:	e7e1      	b.n	801977a <__ieee754_atan2+0x42>
 80197b6:	ea52 0808 	orrs.w	r8, r2, r8
 80197ba:	d106      	bne.n	80197ca <__ieee754_atan2+0x92>
 80197bc:	f1bc 0f00 	cmp.w	ip, #0
 80197c0:	da6b      	bge.n	801989a <__ieee754_atan2+0x162>
 80197c2:	a13b      	add	r1, pc, #236	; (adr r1, 80198b0 <__ieee754_atan2+0x178>)
 80197c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80197c8:	e7d7      	b.n	801977a <__ieee754_atan2+0x42>
 80197ca:	4572      	cmp	r2, lr
 80197cc:	d120      	bne.n	8019810 <__ieee754_atan2+0xd8>
 80197ce:	4293      	cmp	r3, r2
 80197d0:	d111      	bne.n	80197f6 <__ieee754_atan2+0xbe>
 80197d2:	2c02      	cmp	r4, #2
 80197d4:	d007      	beq.n	80197e6 <__ieee754_atan2+0xae>
 80197d6:	2c03      	cmp	r4, #3
 80197d8:	d009      	beq.n	80197ee <__ieee754_atan2+0xb6>
 80197da:	2c01      	cmp	r4, #1
 80197dc:	d155      	bne.n	801988a <__ieee754_atan2+0x152>
 80197de:	a136      	add	r1, pc, #216	; (adr r1, 80198b8 <__ieee754_atan2+0x180>)
 80197e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80197e4:	e7c9      	b.n	801977a <__ieee754_atan2+0x42>
 80197e6:	a136      	add	r1, pc, #216	; (adr r1, 80198c0 <__ieee754_atan2+0x188>)
 80197e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80197ec:	e7c5      	b.n	801977a <__ieee754_atan2+0x42>
 80197ee:	a136      	add	r1, pc, #216	; (adr r1, 80198c8 <__ieee754_atan2+0x190>)
 80197f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80197f4:	e7c1      	b.n	801977a <__ieee754_atan2+0x42>
 80197f6:	2c02      	cmp	r4, #2
 80197f8:	d04b      	beq.n	8019892 <__ieee754_atan2+0x15a>
 80197fa:	2c03      	cmp	r4, #3
 80197fc:	d0d7      	beq.n	80197ae <__ieee754_atan2+0x76>
 80197fe:	2c01      	cmp	r4, #1
 8019800:	f04f 0000 	mov.w	r0, #0
 8019804:	d102      	bne.n	801980c <__ieee754_atan2+0xd4>
 8019806:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801980a:	e7b6      	b.n	801977a <__ieee754_atan2+0x42>
 801980c:	2100      	movs	r1, #0
 801980e:	e7b4      	b.n	801977a <__ieee754_atan2+0x42>
 8019810:	4573      	cmp	r3, lr
 8019812:	d0d3      	beq.n	80197bc <__ieee754_atan2+0x84>
 8019814:	1a9b      	subs	r3, r3, r2
 8019816:	151b      	asrs	r3, r3, #20
 8019818:	2b3c      	cmp	r3, #60	; 0x3c
 801981a:	dc1e      	bgt.n	801985a <__ieee754_atan2+0x122>
 801981c:	2f00      	cmp	r7, #0
 801981e:	da01      	bge.n	8019824 <__ieee754_atan2+0xec>
 8019820:	333c      	adds	r3, #60	; 0x3c
 8019822:	db1e      	blt.n	8019862 <__ieee754_atan2+0x12a>
 8019824:	4632      	mov	r2, r6
 8019826:	463b      	mov	r3, r7
 8019828:	f7e7 f820 	bl	800086c <__aeabi_ddiv>
 801982c:	ec41 0b10 	vmov	d0, r0, r1
 8019830:	f001 f96a 	bl	801ab08 <fabs>
 8019834:	f000 ffc8 	bl	801a7c8 <atan>
 8019838:	ec51 0b10 	vmov	r0, r1, d0
 801983c:	2c01      	cmp	r4, #1
 801983e:	d013      	beq.n	8019868 <__ieee754_atan2+0x130>
 8019840:	2c02      	cmp	r4, #2
 8019842:	d015      	beq.n	8019870 <__ieee754_atan2+0x138>
 8019844:	2c00      	cmp	r4, #0
 8019846:	d098      	beq.n	801977a <__ieee754_atan2+0x42>
 8019848:	a321      	add	r3, pc, #132	; (adr r3, 80198d0 <__ieee754_atan2+0x198>)
 801984a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801984e:	f7e6 fd2b 	bl	80002a8 <__aeabi_dsub>
 8019852:	a321      	add	r3, pc, #132	; (adr r3, 80198d8 <__ieee754_atan2+0x1a0>)
 8019854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019858:	e014      	b.n	8019884 <__ieee754_atan2+0x14c>
 801985a:	a121      	add	r1, pc, #132	; (adr r1, 80198e0 <__ieee754_atan2+0x1a8>)
 801985c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019860:	e7ec      	b.n	801983c <__ieee754_atan2+0x104>
 8019862:	2000      	movs	r0, #0
 8019864:	2100      	movs	r1, #0
 8019866:	e7e9      	b.n	801983c <__ieee754_atan2+0x104>
 8019868:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801986c:	4619      	mov	r1, r3
 801986e:	e784      	b.n	801977a <__ieee754_atan2+0x42>
 8019870:	a317      	add	r3, pc, #92	; (adr r3, 80198d0 <__ieee754_atan2+0x198>)
 8019872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019876:	f7e6 fd17 	bl	80002a8 <__aeabi_dsub>
 801987a:	4602      	mov	r2, r0
 801987c:	460b      	mov	r3, r1
 801987e:	a116      	add	r1, pc, #88	; (adr r1, 80198d8 <__ieee754_atan2+0x1a0>)
 8019880:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019884:	f7e6 fd10 	bl	80002a8 <__aeabi_dsub>
 8019888:	e777      	b.n	801977a <__ieee754_atan2+0x42>
 801988a:	a117      	add	r1, pc, #92	; (adr r1, 80198e8 <__ieee754_atan2+0x1b0>)
 801988c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019890:	e773      	b.n	801977a <__ieee754_atan2+0x42>
 8019892:	a111      	add	r1, pc, #68	; (adr r1, 80198d8 <__ieee754_atan2+0x1a0>)
 8019894:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019898:	e76f      	b.n	801977a <__ieee754_atan2+0x42>
 801989a:	a111      	add	r1, pc, #68	; (adr r1, 80198e0 <__ieee754_atan2+0x1a8>)
 801989c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80198a0:	e76b      	b.n	801977a <__ieee754_atan2+0x42>
 80198a2:	bf00      	nop
 80198a4:	f3af 8000 	nop.w
 80198a8:	54442d18 	.word	0x54442d18
 80198ac:	c00921fb 	.word	0xc00921fb
 80198b0:	54442d18 	.word	0x54442d18
 80198b4:	bff921fb 	.word	0xbff921fb
 80198b8:	54442d18 	.word	0x54442d18
 80198bc:	bfe921fb 	.word	0xbfe921fb
 80198c0:	7f3321d2 	.word	0x7f3321d2
 80198c4:	4002d97c 	.word	0x4002d97c
 80198c8:	7f3321d2 	.word	0x7f3321d2
 80198cc:	c002d97c 	.word	0xc002d97c
 80198d0:	33145c07 	.word	0x33145c07
 80198d4:	3ca1a626 	.word	0x3ca1a626
 80198d8:	54442d18 	.word	0x54442d18
 80198dc:	400921fb 	.word	0x400921fb
 80198e0:	54442d18 	.word	0x54442d18
 80198e4:	3ff921fb 	.word	0x3ff921fb
 80198e8:	54442d18 	.word	0x54442d18
 80198ec:	3fe921fb 	.word	0x3fe921fb
 80198f0:	7ff00000 	.word	0x7ff00000
 80198f4:	00000000 	.word	0x00000000

080198f8 <__ieee754_rem_pio2>:
 80198f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80198fc:	ec57 6b10 	vmov	r6, r7, d0
 8019900:	4bc3      	ldr	r3, [pc, #780]	; (8019c10 <__ieee754_rem_pio2+0x318>)
 8019902:	b08d      	sub	sp, #52	; 0x34
 8019904:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8019908:	4598      	cmp	r8, r3
 801990a:	4604      	mov	r4, r0
 801990c:	9704      	str	r7, [sp, #16]
 801990e:	dc07      	bgt.n	8019920 <__ieee754_rem_pio2+0x28>
 8019910:	2200      	movs	r2, #0
 8019912:	2300      	movs	r3, #0
 8019914:	ed84 0b00 	vstr	d0, [r4]
 8019918:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801991c:	2500      	movs	r5, #0
 801991e:	e027      	b.n	8019970 <__ieee754_rem_pio2+0x78>
 8019920:	4bbc      	ldr	r3, [pc, #752]	; (8019c14 <__ieee754_rem_pio2+0x31c>)
 8019922:	4598      	cmp	r8, r3
 8019924:	dc75      	bgt.n	8019a12 <__ieee754_rem_pio2+0x11a>
 8019926:	9b04      	ldr	r3, [sp, #16]
 8019928:	4dbb      	ldr	r5, [pc, #748]	; (8019c18 <__ieee754_rem_pio2+0x320>)
 801992a:	2b00      	cmp	r3, #0
 801992c:	ee10 0a10 	vmov	r0, s0
 8019930:	a3a9      	add	r3, pc, #676	; (adr r3, 8019bd8 <__ieee754_rem_pio2+0x2e0>)
 8019932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019936:	4639      	mov	r1, r7
 8019938:	dd36      	ble.n	80199a8 <__ieee754_rem_pio2+0xb0>
 801993a:	f7e6 fcb5 	bl	80002a8 <__aeabi_dsub>
 801993e:	45a8      	cmp	r8, r5
 8019940:	4606      	mov	r6, r0
 8019942:	460f      	mov	r7, r1
 8019944:	d018      	beq.n	8019978 <__ieee754_rem_pio2+0x80>
 8019946:	a3a6      	add	r3, pc, #664	; (adr r3, 8019be0 <__ieee754_rem_pio2+0x2e8>)
 8019948:	e9d3 2300 	ldrd	r2, r3, [r3]
 801994c:	f7e6 fcac 	bl	80002a8 <__aeabi_dsub>
 8019950:	4602      	mov	r2, r0
 8019952:	460b      	mov	r3, r1
 8019954:	e9c4 2300 	strd	r2, r3, [r4]
 8019958:	4630      	mov	r0, r6
 801995a:	4639      	mov	r1, r7
 801995c:	f7e6 fca4 	bl	80002a8 <__aeabi_dsub>
 8019960:	a39f      	add	r3, pc, #636	; (adr r3, 8019be0 <__ieee754_rem_pio2+0x2e8>)
 8019962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019966:	f7e6 fc9f 	bl	80002a8 <__aeabi_dsub>
 801996a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801996e:	2501      	movs	r5, #1
 8019970:	4628      	mov	r0, r5
 8019972:	b00d      	add	sp, #52	; 0x34
 8019974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019978:	a39b      	add	r3, pc, #620	; (adr r3, 8019be8 <__ieee754_rem_pio2+0x2f0>)
 801997a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801997e:	f7e6 fc93 	bl	80002a8 <__aeabi_dsub>
 8019982:	a39b      	add	r3, pc, #620	; (adr r3, 8019bf0 <__ieee754_rem_pio2+0x2f8>)
 8019984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019988:	4606      	mov	r6, r0
 801998a:	460f      	mov	r7, r1
 801998c:	f7e6 fc8c 	bl	80002a8 <__aeabi_dsub>
 8019990:	4602      	mov	r2, r0
 8019992:	460b      	mov	r3, r1
 8019994:	e9c4 2300 	strd	r2, r3, [r4]
 8019998:	4630      	mov	r0, r6
 801999a:	4639      	mov	r1, r7
 801999c:	f7e6 fc84 	bl	80002a8 <__aeabi_dsub>
 80199a0:	a393      	add	r3, pc, #588	; (adr r3, 8019bf0 <__ieee754_rem_pio2+0x2f8>)
 80199a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199a6:	e7de      	b.n	8019966 <__ieee754_rem_pio2+0x6e>
 80199a8:	f7e6 fc80 	bl	80002ac <__adddf3>
 80199ac:	45a8      	cmp	r8, r5
 80199ae:	4606      	mov	r6, r0
 80199b0:	460f      	mov	r7, r1
 80199b2:	d016      	beq.n	80199e2 <__ieee754_rem_pio2+0xea>
 80199b4:	a38a      	add	r3, pc, #552	; (adr r3, 8019be0 <__ieee754_rem_pio2+0x2e8>)
 80199b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199ba:	f7e6 fc77 	bl	80002ac <__adddf3>
 80199be:	4602      	mov	r2, r0
 80199c0:	460b      	mov	r3, r1
 80199c2:	e9c4 2300 	strd	r2, r3, [r4]
 80199c6:	4630      	mov	r0, r6
 80199c8:	4639      	mov	r1, r7
 80199ca:	f7e6 fc6d 	bl	80002a8 <__aeabi_dsub>
 80199ce:	a384      	add	r3, pc, #528	; (adr r3, 8019be0 <__ieee754_rem_pio2+0x2e8>)
 80199d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199d4:	f7e6 fc6a 	bl	80002ac <__adddf3>
 80199d8:	f04f 35ff 	mov.w	r5, #4294967295
 80199dc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80199e0:	e7c6      	b.n	8019970 <__ieee754_rem_pio2+0x78>
 80199e2:	a381      	add	r3, pc, #516	; (adr r3, 8019be8 <__ieee754_rem_pio2+0x2f0>)
 80199e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199e8:	f7e6 fc60 	bl	80002ac <__adddf3>
 80199ec:	a380      	add	r3, pc, #512	; (adr r3, 8019bf0 <__ieee754_rem_pio2+0x2f8>)
 80199ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199f2:	4606      	mov	r6, r0
 80199f4:	460f      	mov	r7, r1
 80199f6:	f7e6 fc59 	bl	80002ac <__adddf3>
 80199fa:	4602      	mov	r2, r0
 80199fc:	460b      	mov	r3, r1
 80199fe:	e9c4 2300 	strd	r2, r3, [r4]
 8019a02:	4630      	mov	r0, r6
 8019a04:	4639      	mov	r1, r7
 8019a06:	f7e6 fc4f 	bl	80002a8 <__aeabi_dsub>
 8019a0a:	a379      	add	r3, pc, #484	; (adr r3, 8019bf0 <__ieee754_rem_pio2+0x2f8>)
 8019a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a10:	e7e0      	b.n	80199d4 <__ieee754_rem_pio2+0xdc>
 8019a12:	4b82      	ldr	r3, [pc, #520]	; (8019c1c <__ieee754_rem_pio2+0x324>)
 8019a14:	4598      	cmp	r8, r3
 8019a16:	f300 80d0 	bgt.w	8019bba <__ieee754_rem_pio2+0x2c2>
 8019a1a:	f001 f875 	bl	801ab08 <fabs>
 8019a1e:	ec57 6b10 	vmov	r6, r7, d0
 8019a22:	ee10 0a10 	vmov	r0, s0
 8019a26:	a374      	add	r3, pc, #464	; (adr r3, 8019bf8 <__ieee754_rem_pio2+0x300>)
 8019a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a2c:	4639      	mov	r1, r7
 8019a2e:	f7e6 fdf3 	bl	8000618 <__aeabi_dmul>
 8019a32:	2200      	movs	r2, #0
 8019a34:	4b7a      	ldr	r3, [pc, #488]	; (8019c20 <__ieee754_rem_pio2+0x328>)
 8019a36:	f7e6 fc39 	bl	80002ac <__adddf3>
 8019a3a:	f7e7 f89d 	bl	8000b78 <__aeabi_d2iz>
 8019a3e:	4605      	mov	r5, r0
 8019a40:	f7e6 fd80 	bl	8000544 <__aeabi_i2d>
 8019a44:	a364      	add	r3, pc, #400	; (adr r3, 8019bd8 <__ieee754_rem_pio2+0x2e0>)
 8019a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019a4e:	f7e6 fde3 	bl	8000618 <__aeabi_dmul>
 8019a52:	4602      	mov	r2, r0
 8019a54:	460b      	mov	r3, r1
 8019a56:	4630      	mov	r0, r6
 8019a58:	4639      	mov	r1, r7
 8019a5a:	f7e6 fc25 	bl	80002a8 <__aeabi_dsub>
 8019a5e:	a360      	add	r3, pc, #384	; (adr r3, 8019be0 <__ieee754_rem_pio2+0x2e8>)
 8019a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a64:	4682      	mov	sl, r0
 8019a66:	468b      	mov	fp, r1
 8019a68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019a6c:	f7e6 fdd4 	bl	8000618 <__aeabi_dmul>
 8019a70:	2d1f      	cmp	r5, #31
 8019a72:	4606      	mov	r6, r0
 8019a74:	460f      	mov	r7, r1
 8019a76:	dc0c      	bgt.n	8019a92 <__ieee754_rem_pio2+0x19a>
 8019a78:	1e6a      	subs	r2, r5, #1
 8019a7a:	4b6a      	ldr	r3, [pc, #424]	; (8019c24 <__ieee754_rem_pio2+0x32c>)
 8019a7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019a80:	4543      	cmp	r3, r8
 8019a82:	d006      	beq.n	8019a92 <__ieee754_rem_pio2+0x19a>
 8019a84:	4632      	mov	r2, r6
 8019a86:	463b      	mov	r3, r7
 8019a88:	4650      	mov	r0, sl
 8019a8a:	4659      	mov	r1, fp
 8019a8c:	f7e6 fc0c 	bl	80002a8 <__aeabi_dsub>
 8019a90:	e00e      	b.n	8019ab0 <__ieee754_rem_pio2+0x1b8>
 8019a92:	4632      	mov	r2, r6
 8019a94:	463b      	mov	r3, r7
 8019a96:	4650      	mov	r0, sl
 8019a98:	4659      	mov	r1, fp
 8019a9a:	f7e6 fc05 	bl	80002a8 <__aeabi_dsub>
 8019a9e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8019aa2:	9305      	str	r3, [sp, #20]
 8019aa4:	9a05      	ldr	r2, [sp, #20]
 8019aa6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8019aaa:	1ad3      	subs	r3, r2, r3
 8019aac:	2b10      	cmp	r3, #16
 8019aae:	dc02      	bgt.n	8019ab6 <__ieee754_rem_pio2+0x1be>
 8019ab0:	e9c4 0100 	strd	r0, r1, [r4]
 8019ab4:	e039      	b.n	8019b2a <__ieee754_rem_pio2+0x232>
 8019ab6:	a34c      	add	r3, pc, #304	; (adr r3, 8019be8 <__ieee754_rem_pio2+0x2f0>)
 8019ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019abc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019ac0:	f7e6 fdaa 	bl	8000618 <__aeabi_dmul>
 8019ac4:	4606      	mov	r6, r0
 8019ac6:	460f      	mov	r7, r1
 8019ac8:	4602      	mov	r2, r0
 8019aca:	460b      	mov	r3, r1
 8019acc:	4650      	mov	r0, sl
 8019ace:	4659      	mov	r1, fp
 8019ad0:	f7e6 fbea 	bl	80002a8 <__aeabi_dsub>
 8019ad4:	4602      	mov	r2, r0
 8019ad6:	460b      	mov	r3, r1
 8019ad8:	4680      	mov	r8, r0
 8019ada:	4689      	mov	r9, r1
 8019adc:	4650      	mov	r0, sl
 8019ade:	4659      	mov	r1, fp
 8019ae0:	f7e6 fbe2 	bl	80002a8 <__aeabi_dsub>
 8019ae4:	4632      	mov	r2, r6
 8019ae6:	463b      	mov	r3, r7
 8019ae8:	f7e6 fbde 	bl	80002a8 <__aeabi_dsub>
 8019aec:	a340      	add	r3, pc, #256	; (adr r3, 8019bf0 <__ieee754_rem_pio2+0x2f8>)
 8019aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019af2:	4606      	mov	r6, r0
 8019af4:	460f      	mov	r7, r1
 8019af6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019afa:	f7e6 fd8d 	bl	8000618 <__aeabi_dmul>
 8019afe:	4632      	mov	r2, r6
 8019b00:	463b      	mov	r3, r7
 8019b02:	f7e6 fbd1 	bl	80002a8 <__aeabi_dsub>
 8019b06:	4602      	mov	r2, r0
 8019b08:	460b      	mov	r3, r1
 8019b0a:	4606      	mov	r6, r0
 8019b0c:	460f      	mov	r7, r1
 8019b0e:	4640      	mov	r0, r8
 8019b10:	4649      	mov	r1, r9
 8019b12:	f7e6 fbc9 	bl	80002a8 <__aeabi_dsub>
 8019b16:	9a05      	ldr	r2, [sp, #20]
 8019b18:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8019b1c:	1ad3      	subs	r3, r2, r3
 8019b1e:	2b31      	cmp	r3, #49	; 0x31
 8019b20:	dc20      	bgt.n	8019b64 <__ieee754_rem_pio2+0x26c>
 8019b22:	e9c4 0100 	strd	r0, r1, [r4]
 8019b26:	46c2      	mov	sl, r8
 8019b28:	46cb      	mov	fp, r9
 8019b2a:	e9d4 8900 	ldrd	r8, r9, [r4]
 8019b2e:	4650      	mov	r0, sl
 8019b30:	4642      	mov	r2, r8
 8019b32:	464b      	mov	r3, r9
 8019b34:	4659      	mov	r1, fp
 8019b36:	f7e6 fbb7 	bl	80002a8 <__aeabi_dsub>
 8019b3a:	463b      	mov	r3, r7
 8019b3c:	4632      	mov	r2, r6
 8019b3e:	f7e6 fbb3 	bl	80002a8 <__aeabi_dsub>
 8019b42:	9b04      	ldr	r3, [sp, #16]
 8019b44:	2b00      	cmp	r3, #0
 8019b46:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8019b4a:	f6bf af11 	bge.w	8019970 <__ieee754_rem_pio2+0x78>
 8019b4e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8019b52:	6063      	str	r3, [r4, #4]
 8019b54:	f8c4 8000 	str.w	r8, [r4]
 8019b58:	60a0      	str	r0, [r4, #8]
 8019b5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019b5e:	60e3      	str	r3, [r4, #12]
 8019b60:	426d      	negs	r5, r5
 8019b62:	e705      	b.n	8019970 <__ieee754_rem_pio2+0x78>
 8019b64:	a326      	add	r3, pc, #152	; (adr r3, 8019c00 <__ieee754_rem_pio2+0x308>)
 8019b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019b6e:	f7e6 fd53 	bl	8000618 <__aeabi_dmul>
 8019b72:	4606      	mov	r6, r0
 8019b74:	460f      	mov	r7, r1
 8019b76:	4602      	mov	r2, r0
 8019b78:	460b      	mov	r3, r1
 8019b7a:	4640      	mov	r0, r8
 8019b7c:	4649      	mov	r1, r9
 8019b7e:	f7e6 fb93 	bl	80002a8 <__aeabi_dsub>
 8019b82:	4602      	mov	r2, r0
 8019b84:	460b      	mov	r3, r1
 8019b86:	4682      	mov	sl, r0
 8019b88:	468b      	mov	fp, r1
 8019b8a:	4640      	mov	r0, r8
 8019b8c:	4649      	mov	r1, r9
 8019b8e:	f7e6 fb8b 	bl	80002a8 <__aeabi_dsub>
 8019b92:	4632      	mov	r2, r6
 8019b94:	463b      	mov	r3, r7
 8019b96:	f7e6 fb87 	bl	80002a8 <__aeabi_dsub>
 8019b9a:	a31b      	add	r3, pc, #108	; (adr r3, 8019c08 <__ieee754_rem_pio2+0x310>)
 8019b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ba0:	4606      	mov	r6, r0
 8019ba2:	460f      	mov	r7, r1
 8019ba4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019ba8:	f7e6 fd36 	bl	8000618 <__aeabi_dmul>
 8019bac:	4632      	mov	r2, r6
 8019bae:	463b      	mov	r3, r7
 8019bb0:	f7e6 fb7a 	bl	80002a8 <__aeabi_dsub>
 8019bb4:	4606      	mov	r6, r0
 8019bb6:	460f      	mov	r7, r1
 8019bb8:	e764      	b.n	8019a84 <__ieee754_rem_pio2+0x18c>
 8019bba:	4b1b      	ldr	r3, [pc, #108]	; (8019c28 <__ieee754_rem_pio2+0x330>)
 8019bbc:	4598      	cmp	r8, r3
 8019bbe:	dd35      	ble.n	8019c2c <__ieee754_rem_pio2+0x334>
 8019bc0:	ee10 2a10 	vmov	r2, s0
 8019bc4:	463b      	mov	r3, r7
 8019bc6:	4630      	mov	r0, r6
 8019bc8:	4639      	mov	r1, r7
 8019bca:	f7e6 fb6d 	bl	80002a8 <__aeabi_dsub>
 8019bce:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8019bd2:	e9c4 0100 	strd	r0, r1, [r4]
 8019bd6:	e6a1      	b.n	801991c <__ieee754_rem_pio2+0x24>
 8019bd8:	54400000 	.word	0x54400000
 8019bdc:	3ff921fb 	.word	0x3ff921fb
 8019be0:	1a626331 	.word	0x1a626331
 8019be4:	3dd0b461 	.word	0x3dd0b461
 8019be8:	1a600000 	.word	0x1a600000
 8019bec:	3dd0b461 	.word	0x3dd0b461
 8019bf0:	2e037073 	.word	0x2e037073
 8019bf4:	3ba3198a 	.word	0x3ba3198a
 8019bf8:	6dc9c883 	.word	0x6dc9c883
 8019bfc:	3fe45f30 	.word	0x3fe45f30
 8019c00:	2e000000 	.word	0x2e000000
 8019c04:	3ba3198a 	.word	0x3ba3198a
 8019c08:	252049c1 	.word	0x252049c1
 8019c0c:	397b839a 	.word	0x397b839a
 8019c10:	3fe921fb 	.word	0x3fe921fb
 8019c14:	4002d97b 	.word	0x4002d97b
 8019c18:	3ff921fb 	.word	0x3ff921fb
 8019c1c:	413921fb 	.word	0x413921fb
 8019c20:	3fe00000 	.word	0x3fe00000
 8019c24:	0801b664 	.word	0x0801b664
 8019c28:	7fefffff 	.word	0x7fefffff
 8019c2c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8019c30:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8019c34:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8019c38:	4630      	mov	r0, r6
 8019c3a:	460f      	mov	r7, r1
 8019c3c:	f7e6 ff9c 	bl	8000b78 <__aeabi_d2iz>
 8019c40:	f7e6 fc80 	bl	8000544 <__aeabi_i2d>
 8019c44:	4602      	mov	r2, r0
 8019c46:	460b      	mov	r3, r1
 8019c48:	4630      	mov	r0, r6
 8019c4a:	4639      	mov	r1, r7
 8019c4c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8019c50:	f7e6 fb2a 	bl	80002a8 <__aeabi_dsub>
 8019c54:	2200      	movs	r2, #0
 8019c56:	4b1f      	ldr	r3, [pc, #124]	; (8019cd4 <__ieee754_rem_pio2+0x3dc>)
 8019c58:	f7e6 fcde 	bl	8000618 <__aeabi_dmul>
 8019c5c:	460f      	mov	r7, r1
 8019c5e:	4606      	mov	r6, r0
 8019c60:	f7e6 ff8a 	bl	8000b78 <__aeabi_d2iz>
 8019c64:	f7e6 fc6e 	bl	8000544 <__aeabi_i2d>
 8019c68:	4602      	mov	r2, r0
 8019c6a:	460b      	mov	r3, r1
 8019c6c:	4630      	mov	r0, r6
 8019c6e:	4639      	mov	r1, r7
 8019c70:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8019c74:	f7e6 fb18 	bl	80002a8 <__aeabi_dsub>
 8019c78:	2200      	movs	r2, #0
 8019c7a:	4b16      	ldr	r3, [pc, #88]	; (8019cd4 <__ieee754_rem_pio2+0x3dc>)
 8019c7c:	f7e6 fccc 	bl	8000618 <__aeabi_dmul>
 8019c80:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8019c84:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8019c88:	f04f 0803 	mov.w	r8, #3
 8019c8c:	2600      	movs	r6, #0
 8019c8e:	2700      	movs	r7, #0
 8019c90:	4632      	mov	r2, r6
 8019c92:	463b      	mov	r3, r7
 8019c94:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8019c98:	f108 3aff 	add.w	sl, r8, #4294967295
 8019c9c:	f7e6 ff24 	bl	8000ae8 <__aeabi_dcmpeq>
 8019ca0:	b9b0      	cbnz	r0, 8019cd0 <__ieee754_rem_pio2+0x3d8>
 8019ca2:	4b0d      	ldr	r3, [pc, #52]	; (8019cd8 <__ieee754_rem_pio2+0x3e0>)
 8019ca4:	9301      	str	r3, [sp, #4]
 8019ca6:	2302      	movs	r3, #2
 8019ca8:	9300      	str	r3, [sp, #0]
 8019caa:	462a      	mov	r2, r5
 8019cac:	4643      	mov	r3, r8
 8019cae:	4621      	mov	r1, r4
 8019cb0:	a806      	add	r0, sp, #24
 8019cb2:	f000 f98d 	bl	8019fd0 <__kernel_rem_pio2>
 8019cb6:	9b04      	ldr	r3, [sp, #16]
 8019cb8:	2b00      	cmp	r3, #0
 8019cba:	4605      	mov	r5, r0
 8019cbc:	f6bf ae58 	bge.w	8019970 <__ieee754_rem_pio2+0x78>
 8019cc0:	6863      	ldr	r3, [r4, #4]
 8019cc2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8019cc6:	6063      	str	r3, [r4, #4]
 8019cc8:	68e3      	ldr	r3, [r4, #12]
 8019cca:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8019cce:	e746      	b.n	8019b5e <__ieee754_rem_pio2+0x266>
 8019cd0:	46d0      	mov	r8, sl
 8019cd2:	e7dd      	b.n	8019c90 <__ieee754_rem_pio2+0x398>
 8019cd4:	41700000 	.word	0x41700000
 8019cd8:	0801b6e4 	.word	0x0801b6e4

08019cdc <__ieee754_sqrt>:
 8019cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019ce0:	4955      	ldr	r1, [pc, #340]	; (8019e38 <__ieee754_sqrt+0x15c>)
 8019ce2:	ec55 4b10 	vmov	r4, r5, d0
 8019ce6:	43a9      	bics	r1, r5
 8019ce8:	462b      	mov	r3, r5
 8019cea:	462a      	mov	r2, r5
 8019cec:	d112      	bne.n	8019d14 <__ieee754_sqrt+0x38>
 8019cee:	ee10 2a10 	vmov	r2, s0
 8019cf2:	ee10 0a10 	vmov	r0, s0
 8019cf6:	4629      	mov	r1, r5
 8019cf8:	f7e6 fc8e 	bl	8000618 <__aeabi_dmul>
 8019cfc:	4602      	mov	r2, r0
 8019cfe:	460b      	mov	r3, r1
 8019d00:	4620      	mov	r0, r4
 8019d02:	4629      	mov	r1, r5
 8019d04:	f7e6 fad2 	bl	80002ac <__adddf3>
 8019d08:	4604      	mov	r4, r0
 8019d0a:	460d      	mov	r5, r1
 8019d0c:	ec45 4b10 	vmov	d0, r4, r5
 8019d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019d14:	2d00      	cmp	r5, #0
 8019d16:	ee10 0a10 	vmov	r0, s0
 8019d1a:	4621      	mov	r1, r4
 8019d1c:	dc0f      	bgt.n	8019d3e <__ieee754_sqrt+0x62>
 8019d1e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8019d22:	4330      	orrs	r0, r6
 8019d24:	d0f2      	beq.n	8019d0c <__ieee754_sqrt+0x30>
 8019d26:	b155      	cbz	r5, 8019d3e <__ieee754_sqrt+0x62>
 8019d28:	ee10 2a10 	vmov	r2, s0
 8019d2c:	4620      	mov	r0, r4
 8019d2e:	4629      	mov	r1, r5
 8019d30:	f7e6 faba 	bl	80002a8 <__aeabi_dsub>
 8019d34:	4602      	mov	r2, r0
 8019d36:	460b      	mov	r3, r1
 8019d38:	f7e6 fd98 	bl	800086c <__aeabi_ddiv>
 8019d3c:	e7e4      	b.n	8019d08 <__ieee754_sqrt+0x2c>
 8019d3e:	151b      	asrs	r3, r3, #20
 8019d40:	d073      	beq.n	8019e2a <__ieee754_sqrt+0x14e>
 8019d42:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8019d46:	07dd      	lsls	r5, r3, #31
 8019d48:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8019d4c:	bf48      	it	mi
 8019d4e:	0fc8      	lsrmi	r0, r1, #31
 8019d50:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8019d54:	bf44      	itt	mi
 8019d56:	0049      	lslmi	r1, r1, #1
 8019d58:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8019d5c:	2500      	movs	r5, #0
 8019d5e:	1058      	asrs	r0, r3, #1
 8019d60:	0fcb      	lsrs	r3, r1, #31
 8019d62:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8019d66:	0049      	lsls	r1, r1, #1
 8019d68:	2316      	movs	r3, #22
 8019d6a:	462c      	mov	r4, r5
 8019d6c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8019d70:	19a7      	adds	r7, r4, r6
 8019d72:	4297      	cmp	r7, r2
 8019d74:	bfde      	ittt	le
 8019d76:	19bc      	addle	r4, r7, r6
 8019d78:	1bd2      	suble	r2, r2, r7
 8019d7a:	19ad      	addle	r5, r5, r6
 8019d7c:	0fcf      	lsrs	r7, r1, #31
 8019d7e:	3b01      	subs	r3, #1
 8019d80:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8019d84:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8019d88:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8019d8c:	d1f0      	bne.n	8019d70 <__ieee754_sqrt+0x94>
 8019d8e:	f04f 0c20 	mov.w	ip, #32
 8019d92:	469e      	mov	lr, r3
 8019d94:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8019d98:	42a2      	cmp	r2, r4
 8019d9a:	eb06 070e 	add.w	r7, r6, lr
 8019d9e:	dc02      	bgt.n	8019da6 <__ieee754_sqrt+0xca>
 8019da0:	d112      	bne.n	8019dc8 <__ieee754_sqrt+0xec>
 8019da2:	428f      	cmp	r7, r1
 8019da4:	d810      	bhi.n	8019dc8 <__ieee754_sqrt+0xec>
 8019da6:	2f00      	cmp	r7, #0
 8019da8:	eb07 0e06 	add.w	lr, r7, r6
 8019dac:	da42      	bge.n	8019e34 <__ieee754_sqrt+0x158>
 8019dae:	f1be 0f00 	cmp.w	lr, #0
 8019db2:	db3f      	blt.n	8019e34 <__ieee754_sqrt+0x158>
 8019db4:	f104 0801 	add.w	r8, r4, #1
 8019db8:	1b12      	subs	r2, r2, r4
 8019dba:	428f      	cmp	r7, r1
 8019dbc:	bf88      	it	hi
 8019dbe:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8019dc2:	1bc9      	subs	r1, r1, r7
 8019dc4:	4433      	add	r3, r6
 8019dc6:	4644      	mov	r4, r8
 8019dc8:	0052      	lsls	r2, r2, #1
 8019dca:	f1bc 0c01 	subs.w	ip, ip, #1
 8019dce:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8019dd2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8019dd6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8019dda:	d1dd      	bne.n	8019d98 <__ieee754_sqrt+0xbc>
 8019ddc:	430a      	orrs	r2, r1
 8019dde:	d006      	beq.n	8019dee <__ieee754_sqrt+0x112>
 8019de0:	1c5c      	adds	r4, r3, #1
 8019de2:	bf13      	iteet	ne
 8019de4:	3301      	addne	r3, #1
 8019de6:	3501      	addeq	r5, #1
 8019de8:	4663      	moveq	r3, ip
 8019dea:	f023 0301 	bicne.w	r3, r3, #1
 8019dee:	106a      	asrs	r2, r5, #1
 8019df0:	085b      	lsrs	r3, r3, #1
 8019df2:	07e9      	lsls	r1, r5, #31
 8019df4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8019df8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8019dfc:	bf48      	it	mi
 8019dfe:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8019e02:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8019e06:	461c      	mov	r4, r3
 8019e08:	e780      	b.n	8019d0c <__ieee754_sqrt+0x30>
 8019e0a:	0aca      	lsrs	r2, r1, #11
 8019e0c:	3815      	subs	r0, #21
 8019e0e:	0549      	lsls	r1, r1, #21
 8019e10:	2a00      	cmp	r2, #0
 8019e12:	d0fa      	beq.n	8019e0a <__ieee754_sqrt+0x12e>
 8019e14:	02d6      	lsls	r6, r2, #11
 8019e16:	d50a      	bpl.n	8019e2e <__ieee754_sqrt+0x152>
 8019e18:	f1c3 0420 	rsb	r4, r3, #32
 8019e1c:	fa21 f404 	lsr.w	r4, r1, r4
 8019e20:	1e5d      	subs	r5, r3, #1
 8019e22:	4099      	lsls	r1, r3
 8019e24:	4322      	orrs	r2, r4
 8019e26:	1b43      	subs	r3, r0, r5
 8019e28:	e78b      	b.n	8019d42 <__ieee754_sqrt+0x66>
 8019e2a:	4618      	mov	r0, r3
 8019e2c:	e7f0      	b.n	8019e10 <__ieee754_sqrt+0x134>
 8019e2e:	0052      	lsls	r2, r2, #1
 8019e30:	3301      	adds	r3, #1
 8019e32:	e7ef      	b.n	8019e14 <__ieee754_sqrt+0x138>
 8019e34:	46a0      	mov	r8, r4
 8019e36:	e7bf      	b.n	8019db8 <__ieee754_sqrt+0xdc>
 8019e38:	7ff00000 	.word	0x7ff00000
 8019e3c:	00000000 	.word	0x00000000

08019e40 <__kernel_cos>:
 8019e40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e44:	ec59 8b10 	vmov	r8, r9, d0
 8019e48:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8019e4c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8019e50:	ed2d 8b02 	vpush	{d8}
 8019e54:	eeb0 8a41 	vmov.f32	s16, s2
 8019e58:	eef0 8a61 	vmov.f32	s17, s3
 8019e5c:	da07      	bge.n	8019e6e <__kernel_cos+0x2e>
 8019e5e:	ee10 0a10 	vmov	r0, s0
 8019e62:	4649      	mov	r1, r9
 8019e64:	f7e6 fe88 	bl	8000b78 <__aeabi_d2iz>
 8019e68:	2800      	cmp	r0, #0
 8019e6a:	f000 8089 	beq.w	8019f80 <__kernel_cos+0x140>
 8019e6e:	4642      	mov	r2, r8
 8019e70:	464b      	mov	r3, r9
 8019e72:	4640      	mov	r0, r8
 8019e74:	4649      	mov	r1, r9
 8019e76:	f7e6 fbcf 	bl	8000618 <__aeabi_dmul>
 8019e7a:	2200      	movs	r2, #0
 8019e7c:	4b4e      	ldr	r3, [pc, #312]	; (8019fb8 <__kernel_cos+0x178>)
 8019e7e:	4604      	mov	r4, r0
 8019e80:	460d      	mov	r5, r1
 8019e82:	f7e6 fbc9 	bl	8000618 <__aeabi_dmul>
 8019e86:	a340      	add	r3, pc, #256	; (adr r3, 8019f88 <__kernel_cos+0x148>)
 8019e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e8c:	4682      	mov	sl, r0
 8019e8e:	468b      	mov	fp, r1
 8019e90:	4620      	mov	r0, r4
 8019e92:	4629      	mov	r1, r5
 8019e94:	f7e6 fbc0 	bl	8000618 <__aeabi_dmul>
 8019e98:	a33d      	add	r3, pc, #244	; (adr r3, 8019f90 <__kernel_cos+0x150>)
 8019e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e9e:	f7e6 fa05 	bl	80002ac <__adddf3>
 8019ea2:	4622      	mov	r2, r4
 8019ea4:	462b      	mov	r3, r5
 8019ea6:	f7e6 fbb7 	bl	8000618 <__aeabi_dmul>
 8019eaa:	a33b      	add	r3, pc, #236	; (adr r3, 8019f98 <__kernel_cos+0x158>)
 8019eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019eb0:	f7e6 f9fa 	bl	80002a8 <__aeabi_dsub>
 8019eb4:	4622      	mov	r2, r4
 8019eb6:	462b      	mov	r3, r5
 8019eb8:	f7e6 fbae 	bl	8000618 <__aeabi_dmul>
 8019ebc:	a338      	add	r3, pc, #224	; (adr r3, 8019fa0 <__kernel_cos+0x160>)
 8019ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ec2:	f7e6 f9f3 	bl	80002ac <__adddf3>
 8019ec6:	4622      	mov	r2, r4
 8019ec8:	462b      	mov	r3, r5
 8019eca:	f7e6 fba5 	bl	8000618 <__aeabi_dmul>
 8019ece:	a336      	add	r3, pc, #216	; (adr r3, 8019fa8 <__kernel_cos+0x168>)
 8019ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ed4:	f7e6 f9e8 	bl	80002a8 <__aeabi_dsub>
 8019ed8:	4622      	mov	r2, r4
 8019eda:	462b      	mov	r3, r5
 8019edc:	f7e6 fb9c 	bl	8000618 <__aeabi_dmul>
 8019ee0:	a333      	add	r3, pc, #204	; (adr r3, 8019fb0 <__kernel_cos+0x170>)
 8019ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ee6:	f7e6 f9e1 	bl	80002ac <__adddf3>
 8019eea:	4622      	mov	r2, r4
 8019eec:	462b      	mov	r3, r5
 8019eee:	f7e6 fb93 	bl	8000618 <__aeabi_dmul>
 8019ef2:	4622      	mov	r2, r4
 8019ef4:	462b      	mov	r3, r5
 8019ef6:	f7e6 fb8f 	bl	8000618 <__aeabi_dmul>
 8019efa:	ec53 2b18 	vmov	r2, r3, d8
 8019efe:	4604      	mov	r4, r0
 8019f00:	460d      	mov	r5, r1
 8019f02:	4640      	mov	r0, r8
 8019f04:	4649      	mov	r1, r9
 8019f06:	f7e6 fb87 	bl	8000618 <__aeabi_dmul>
 8019f0a:	460b      	mov	r3, r1
 8019f0c:	4602      	mov	r2, r0
 8019f0e:	4629      	mov	r1, r5
 8019f10:	4620      	mov	r0, r4
 8019f12:	f7e6 f9c9 	bl	80002a8 <__aeabi_dsub>
 8019f16:	4b29      	ldr	r3, [pc, #164]	; (8019fbc <__kernel_cos+0x17c>)
 8019f18:	429e      	cmp	r6, r3
 8019f1a:	4680      	mov	r8, r0
 8019f1c:	4689      	mov	r9, r1
 8019f1e:	dc11      	bgt.n	8019f44 <__kernel_cos+0x104>
 8019f20:	4602      	mov	r2, r0
 8019f22:	460b      	mov	r3, r1
 8019f24:	4650      	mov	r0, sl
 8019f26:	4659      	mov	r1, fp
 8019f28:	f7e6 f9be 	bl	80002a8 <__aeabi_dsub>
 8019f2c:	460b      	mov	r3, r1
 8019f2e:	4924      	ldr	r1, [pc, #144]	; (8019fc0 <__kernel_cos+0x180>)
 8019f30:	4602      	mov	r2, r0
 8019f32:	2000      	movs	r0, #0
 8019f34:	f7e6 f9b8 	bl	80002a8 <__aeabi_dsub>
 8019f38:	ecbd 8b02 	vpop	{d8}
 8019f3c:	ec41 0b10 	vmov	d0, r0, r1
 8019f40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019f44:	4b1f      	ldr	r3, [pc, #124]	; (8019fc4 <__kernel_cos+0x184>)
 8019f46:	491e      	ldr	r1, [pc, #120]	; (8019fc0 <__kernel_cos+0x180>)
 8019f48:	429e      	cmp	r6, r3
 8019f4a:	bfcc      	ite	gt
 8019f4c:	4d1e      	ldrgt	r5, [pc, #120]	; (8019fc8 <__kernel_cos+0x188>)
 8019f4e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8019f52:	2400      	movs	r4, #0
 8019f54:	4622      	mov	r2, r4
 8019f56:	462b      	mov	r3, r5
 8019f58:	2000      	movs	r0, #0
 8019f5a:	f7e6 f9a5 	bl	80002a8 <__aeabi_dsub>
 8019f5e:	4622      	mov	r2, r4
 8019f60:	4606      	mov	r6, r0
 8019f62:	460f      	mov	r7, r1
 8019f64:	462b      	mov	r3, r5
 8019f66:	4650      	mov	r0, sl
 8019f68:	4659      	mov	r1, fp
 8019f6a:	f7e6 f99d 	bl	80002a8 <__aeabi_dsub>
 8019f6e:	4642      	mov	r2, r8
 8019f70:	464b      	mov	r3, r9
 8019f72:	f7e6 f999 	bl	80002a8 <__aeabi_dsub>
 8019f76:	4602      	mov	r2, r0
 8019f78:	460b      	mov	r3, r1
 8019f7a:	4630      	mov	r0, r6
 8019f7c:	4639      	mov	r1, r7
 8019f7e:	e7d9      	b.n	8019f34 <__kernel_cos+0xf4>
 8019f80:	2000      	movs	r0, #0
 8019f82:	490f      	ldr	r1, [pc, #60]	; (8019fc0 <__kernel_cos+0x180>)
 8019f84:	e7d8      	b.n	8019f38 <__kernel_cos+0xf8>
 8019f86:	bf00      	nop
 8019f88:	be8838d4 	.word	0xbe8838d4
 8019f8c:	bda8fae9 	.word	0xbda8fae9
 8019f90:	bdb4b1c4 	.word	0xbdb4b1c4
 8019f94:	3e21ee9e 	.word	0x3e21ee9e
 8019f98:	809c52ad 	.word	0x809c52ad
 8019f9c:	3e927e4f 	.word	0x3e927e4f
 8019fa0:	19cb1590 	.word	0x19cb1590
 8019fa4:	3efa01a0 	.word	0x3efa01a0
 8019fa8:	16c15177 	.word	0x16c15177
 8019fac:	3f56c16c 	.word	0x3f56c16c
 8019fb0:	5555554c 	.word	0x5555554c
 8019fb4:	3fa55555 	.word	0x3fa55555
 8019fb8:	3fe00000 	.word	0x3fe00000
 8019fbc:	3fd33332 	.word	0x3fd33332
 8019fc0:	3ff00000 	.word	0x3ff00000
 8019fc4:	3fe90000 	.word	0x3fe90000
 8019fc8:	3fd20000 	.word	0x3fd20000
 8019fcc:	00000000 	.word	0x00000000

08019fd0 <__kernel_rem_pio2>:
 8019fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019fd4:	ed2d 8b02 	vpush	{d8}
 8019fd8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8019fdc:	1ed4      	subs	r4, r2, #3
 8019fde:	9308      	str	r3, [sp, #32]
 8019fe0:	9101      	str	r1, [sp, #4]
 8019fe2:	4bc5      	ldr	r3, [pc, #788]	; (801a2f8 <__kernel_rem_pio2+0x328>)
 8019fe4:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8019fe6:	9009      	str	r0, [sp, #36]	; 0x24
 8019fe8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8019fec:	9304      	str	r3, [sp, #16]
 8019fee:	9b08      	ldr	r3, [sp, #32]
 8019ff0:	3b01      	subs	r3, #1
 8019ff2:	9307      	str	r3, [sp, #28]
 8019ff4:	2318      	movs	r3, #24
 8019ff6:	fb94 f4f3 	sdiv	r4, r4, r3
 8019ffa:	f06f 0317 	mvn.w	r3, #23
 8019ffe:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801a002:	fb04 3303 	mla	r3, r4, r3, r3
 801a006:	eb03 0a02 	add.w	sl, r3, r2
 801a00a:	9b04      	ldr	r3, [sp, #16]
 801a00c:	9a07      	ldr	r2, [sp, #28]
 801a00e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 801a2e8 <__kernel_rem_pio2+0x318>
 801a012:	eb03 0802 	add.w	r8, r3, r2
 801a016:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801a018:	1aa7      	subs	r7, r4, r2
 801a01a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801a01e:	ae22      	add	r6, sp, #136	; 0x88
 801a020:	2500      	movs	r5, #0
 801a022:	4545      	cmp	r5, r8
 801a024:	dd13      	ble.n	801a04e <__kernel_rem_pio2+0x7e>
 801a026:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 801a2e8 <__kernel_rem_pio2+0x318>
 801a02a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801a02e:	2600      	movs	r6, #0
 801a030:	9b04      	ldr	r3, [sp, #16]
 801a032:	429e      	cmp	r6, r3
 801a034:	dc32      	bgt.n	801a09c <__kernel_rem_pio2+0xcc>
 801a036:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a038:	9302      	str	r3, [sp, #8]
 801a03a:	9b08      	ldr	r3, [sp, #32]
 801a03c:	199d      	adds	r5, r3, r6
 801a03e:	ab22      	add	r3, sp, #136	; 0x88
 801a040:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801a044:	9306      	str	r3, [sp, #24]
 801a046:	ec59 8b18 	vmov	r8, r9, d8
 801a04a:	2700      	movs	r7, #0
 801a04c:	e01f      	b.n	801a08e <__kernel_rem_pio2+0xbe>
 801a04e:	42ef      	cmn	r7, r5
 801a050:	d407      	bmi.n	801a062 <__kernel_rem_pio2+0x92>
 801a052:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801a056:	f7e6 fa75 	bl	8000544 <__aeabi_i2d>
 801a05a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801a05e:	3501      	adds	r5, #1
 801a060:	e7df      	b.n	801a022 <__kernel_rem_pio2+0x52>
 801a062:	ec51 0b18 	vmov	r0, r1, d8
 801a066:	e7f8      	b.n	801a05a <__kernel_rem_pio2+0x8a>
 801a068:	9906      	ldr	r1, [sp, #24]
 801a06a:	9d02      	ldr	r5, [sp, #8]
 801a06c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 801a070:	9106      	str	r1, [sp, #24]
 801a072:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 801a076:	9502      	str	r5, [sp, #8]
 801a078:	f7e6 face 	bl	8000618 <__aeabi_dmul>
 801a07c:	4602      	mov	r2, r0
 801a07e:	460b      	mov	r3, r1
 801a080:	4640      	mov	r0, r8
 801a082:	4649      	mov	r1, r9
 801a084:	f7e6 f912 	bl	80002ac <__adddf3>
 801a088:	3701      	adds	r7, #1
 801a08a:	4680      	mov	r8, r0
 801a08c:	4689      	mov	r9, r1
 801a08e:	9b07      	ldr	r3, [sp, #28]
 801a090:	429f      	cmp	r7, r3
 801a092:	dde9      	ble.n	801a068 <__kernel_rem_pio2+0x98>
 801a094:	e8eb 8902 	strd	r8, r9, [fp], #8
 801a098:	3601      	adds	r6, #1
 801a09a:	e7c9      	b.n	801a030 <__kernel_rem_pio2+0x60>
 801a09c:	9b04      	ldr	r3, [sp, #16]
 801a09e:	aa0e      	add	r2, sp, #56	; 0x38
 801a0a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a0a4:	930c      	str	r3, [sp, #48]	; 0x30
 801a0a6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801a0a8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801a0ac:	9c04      	ldr	r4, [sp, #16]
 801a0ae:	930b      	str	r3, [sp, #44]	; 0x2c
 801a0b0:	ab9a      	add	r3, sp, #616	; 0x268
 801a0b2:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 801a0b6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801a0ba:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a0be:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 801a0c2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801a0c6:	ab9a      	add	r3, sp, #616	; 0x268
 801a0c8:	445b      	add	r3, fp
 801a0ca:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 801a0ce:	2500      	movs	r5, #0
 801a0d0:	1b63      	subs	r3, r4, r5
 801a0d2:	2b00      	cmp	r3, #0
 801a0d4:	dc78      	bgt.n	801a1c8 <__kernel_rem_pio2+0x1f8>
 801a0d6:	4650      	mov	r0, sl
 801a0d8:	ec49 8b10 	vmov	d0, r8, r9
 801a0dc:	f000 fda8 	bl	801ac30 <scalbn>
 801a0e0:	ec57 6b10 	vmov	r6, r7, d0
 801a0e4:	2200      	movs	r2, #0
 801a0e6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801a0ea:	ee10 0a10 	vmov	r0, s0
 801a0ee:	4639      	mov	r1, r7
 801a0f0:	f7e6 fa92 	bl	8000618 <__aeabi_dmul>
 801a0f4:	ec41 0b10 	vmov	d0, r0, r1
 801a0f8:	f000 fd12 	bl	801ab20 <floor>
 801a0fc:	2200      	movs	r2, #0
 801a0fe:	ec51 0b10 	vmov	r0, r1, d0
 801a102:	4b7e      	ldr	r3, [pc, #504]	; (801a2fc <__kernel_rem_pio2+0x32c>)
 801a104:	f7e6 fa88 	bl	8000618 <__aeabi_dmul>
 801a108:	4602      	mov	r2, r0
 801a10a:	460b      	mov	r3, r1
 801a10c:	4630      	mov	r0, r6
 801a10e:	4639      	mov	r1, r7
 801a110:	f7e6 f8ca 	bl	80002a8 <__aeabi_dsub>
 801a114:	460f      	mov	r7, r1
 801a116:	4606      	mov	r6, r0
 801a118:	f7e6 fd2e 	bl	8000b78 <__aeabi_d2iz>
 801a11c:	9006      	str	r0, [sp, #24]
 801a11e:	f7e6 fa11 	bl	8000544 <__aeabi_i2d>
 801a122:	4602      	mov	r2, r0
 801a124:	460b      	mov	r3, r1
 801a126:	4630      	mov	r0, r6
 801a128:	4639      	mov	r1, r7
 801a12a:	f7e6 f8bd 	bl	80002a8 <__aeabi_dsub>
 801a12e:	f1ba 0f00 	cmp.w	sl, #0
 801a132:	4606      	mov	r6, r0
 801a134:	460f      	mov	r7, r1
 801a136:	dd6c      	ble.n	801a212 <__kernel_rem_pio2+0x242>
 801a138:	1e62      	subs	r2, r4, #1
 801a13a:	ab0e      	add	r3, sp, #56	; 0x38
 801a13c:	f1ca 0118 	rsb	r1, sl, #24
 801a140:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801a144:	9d06      	ldr	r5, [sp, #24]
 801a146:	fa40 f301 	asr.w	r3, r0, r1
 801a14a:	441d      	add	r5, r3
 801a14c:	408b      	lsls	r3, r1
 801a14e:	1ac0      	subs	r0, r0, r3
 801a150:	ab0e      	add	r3, sp, #56	; 0x38
 801a152:	9506      	str	r5, [sp, #24]
 801a154:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 801a158:	f1ca 0317 	rsb	r3, sl, #23
 801a15c:	fa40 f303 	asr.w	r3, r0, r3
 801a160:	9302      	str	r3, [sp, #8]
 801a162:	9b02      	ldr	r3, [sp, #8]
 801a164:	2b00      	cmp	r3, #0
 801a166:	dd62      	ble.n	801a22e <__kernel_rem_pio2+0x25e>
 801a168:	9b06      	ldr	r3, [sp, #24]
 801a16a:	2200      	movs	r2, #0
 801a16c:	3301      	adds	r3, #1
 801a16e:	9306      	str	r3, [sp, #24]
 801a170:	4615      	mov	r5, r2
 801a172:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801a176:	4294      	cmp	r4, r2
 801a178:	f300 8095 	bgt.w	801a2a6 <__kernel_rem_pio2+0x2d6>
 801a17c:	f1ba 0f00 	cmp.w	sl, #0
 801a180:	dd07      	ble.n	801a192 <__kernel_rem_pio2+0x1c2>
 801a182:	f1ba 0f01 	cmp.w	sl, #1
 801a186:	f000 80a2 	beq.w	801a2ce <__kernel_rem_pio2+0x2fe>
 801a18a:	f1ba 0f02 	cmp.w	sl, #2
 801a18e:	f000 80c1 	beq.w	801a314 <__kernel_rem_pio2+0x344>
 801a192:	9b02      	ldr	r3, [sp, #8]
 801a194:	2b02      	cmp	r3, #2
 801a196:	d14a      	bne.n	801a22e <__kernel_rem_pio2+0x25e>
 801a198:	4632      	mov	r2, r6
 801a19a:	463b      	mov	r3, r7
 801a19c:	2000      	movs	r0, #0
 801a19e:	4958      	ldr	r1, [pc, #352]	; (801a300 <__kernel_rem_pio2+0x330>)
 801a1a0:	f7e6 f882 	bl	80002a8 <__aeabi_dsub>
 801a1a4:	4606      	mov	r6, r0
 801a1a6:	460f      	mov	r7, r1
 801a1a8:	2d00      	cmp	r5, #0
 801a1aa:	d040      	beq.n	801a22e <__kernel_rem_pio2+0x25e>
 801a1ac:	4650      	mov	r0, sl
 801a1ae:	ed9f 0b50 	vldr	d0, [pc, #320]	; 801a2f0 <__kernel_rem_pio2+0x320>
 801a1b2:	f000 fd3d 	bl	801ac30 <scalbn>
 801a1b6:	4630      	mov	r0, r6
 801a1b8:	4639      	mov	r1, r7
 801a1ba:	ec53 2b10 	vmov	r2, r3, d0
 801a1be:	f7e6 f873 	bl	80002a8 <__aeabi_dsub>
 801a1c2:	4606      	mov	r6, r0
 801a1c4:	460f      	mov	r7, r1
 801a1c6:	e032      	b.n	801a22e <__kernel_rem_pio2+0x25e>
 801a1c8:	2200      	movs	r2, #0
 801a1ca:	4b4e      	ldr	r3, [pc, #312]	; (801a304 <__kernel_rem_pio2+0x334>)
 801a1cc:	4640      	mov	r0, r8
 801a1ce:	4649      	mov	r1, r9
 801a1d0:	f7e6 fa22 	bl	8000618 <__aeabi_dmul>
 801a1d4:	f7e6 fcd0 	bl	8000b78 <__aeabi_d2iz>
 801a1d8:	f7e6 f9b4 	bl	8000544 <__aeabi_i2d>
 801a1dc:	2200      	movs	r2, #0
 801a1de:	4b4a      	ldr	r3, [pc, #296]	; (801a308 <__kernel_rem_pio2+0x338>)
 801a1e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a1e4:	f7e6 fa18 	bl	8000618 <__aeabi_dmul>
 801a1e8:	4602      	mov	r2, r0
 801a1ea:	460b      	mov	r3, r1
 801a1ec:	4640      	mov	r0, r8
 801a1ee:	4649      	mov	r1, r9
 801a1f0:	f7e6 f85a 	bl	80002a8 <__aeabi_dsub>
 801a1f4:	f7e6 fcc0 	bl	8000b78 <__aeabi_d2iz>
 801a1f8:	ab0e      	add	r3, sp, #56	; 0x38
 801a1fa:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 801a1fe:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801a202:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a206:	f7e6 f851 	bl	80002ac <__adddf3>
 801a20a:	3501      	adds	r5, #1
 801a20c:	4680      	mov	r8, r0
 801a20e:	4689      	mov	r9, r1
 801a210:	e75e      	b.n	801a0d0 <__kernel_rem_pio2+0x100>
 801a212:	d105      	bne.n	801a220 <__kernel_rem_pio2+0x250>
 801a214:	1e63      	subs	r3, r4, #1
 801a216:	aa0e      	add	r2, sp, #56	; 0x38
 801a218:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801a21c:	15c3      	asrs	r3, r0, #23
 801a21e:	e79f      	b.n	801a160 <__kernel_rem_pio2+0x190>
 801a220:	2200      	movs	r2, #0
 801a222:	4b3a      	ldr	r3, [pc, #232]	; (801a30c <__kernel_rem_pio2+0x33c>)
 801a224:	f7e6 fc7e 	bl	8000b24 <__aeabi_dcmpge>
 801a228:	2800      	cmp	r0, #0
 801a22a:	d139      	bne.n	801a2a0 <__kernel_rem_pio2+0x2d0>
 801a22c:	9002      	str	r0, [sp, #8]
 801a22e:	2200      	movs	r2, #0
 801a230:	2300      	movs	r3, #0
 801a232:	4630      	mov	r0, r6
 801a234:	4639      	mov	r1, r7
 801a236:	f7e6 fc57 	bl	8000ae8 <__aeabi_dcmpeq>
 801a23a:	2800      	cmp	r0, #0
 801a23c:	f000 80c7 	beq.w	801a3ce <__kernel_rem_pio2+0x3fe>
 801a240:	1e65      	subs	r5, r4, #1
 801a242:	462b      	mov	r3, r5
 801a244:	2200      	movs	r2, #0
 801a246:	9904      	ldr	r1, [sp, #16]
 801a248:	428b      	cmp	r3, r1
 801a24a:	da6a      	bge.n	801a322 <__kernel_rem_pio2+0x352>
 801a24c:	2a00      	cmp	r2, #0
 801a24e:	f000 8088 	beq.w	801a362 <__kernel_rem_pio2+0x392>
 801a252:	ab0e      	add	r3, sp, #56	; 0x38
 801a254:	f1aa 0a18 	sub.w	sl, sl, #24
 801a258:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801a25c:	2b00      	cmp	r3, #0
 801a25e:	f000 80b4 	beq.w	801a3ca <__kernel_rem_pio2+0x3fa>
 801a262:	4650      	mov	r0, sl
 801a264:	ed9f 0b22 	vldr	d0, [pc, #136]	; 801a2f0 <__kernel_rem_pio2+0x320>
 801a268:	f000 fce2 	bl	801ac30 <scalbn>
 801a26c:	00ec      	lsls	r4, r5, #3
 801a26e:	ab72      	add	r3, sp, #456	; 0x1c8
 801a270:	191e      	adds	r6, r3, r4
 801a272:	ec59 8b10 	vmov	r8, r9, d0
 801a276:	f106 0a08 	add.w	sl, r6, #8
 801a27a:	462f      	mov	r7, r5
 801a27c:	2f00      	cmp	r7, #0
 801a27e:	f280 80df 	bge.w	801a440 <__kernel_rem_pio2+0x470>
 801a282:	ed9f 8b19 	vldr	d8, [pc, #100]	; 801a2e8 <__kernel_rem_pio2+0x318>
 801a286:	f04f 0a00 	mov.w	sl, #0
 801a28a:	eba5 030a 	sub.w	r3, r5, sl
 801a28e:	2b00      	cmp	r3, #0
 801a290:	f2c0 810a 	blt.w	801a4a8 <__kernel_rem_pio2+0x4d8>
 801a294:	f8df b078 	ldr.w	fp, [pc, #120]	; 801a310 <__kernel_rem_pio2+0x340>
 801a298:	ec59 8b18 	vmov	r8, r9, d8
 801a29c:	2700      	movs	r7, #0
 801a29e:	e0f5      	b.n	801a48c <__kernel_rem_pio2+0x4bc>
 801a2a0:	2302      	movs	r3, #2
 801a2a2:	9302      	str	r3, [sp, #8]
 801a2a4:	e760      	b.n	801a168 <__kernel_rem_pio2+0x198>
 801a2a6:	ab0e      	add	r3, sp, #56	; 0x38
 801a2a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a2ac:	b94d      	cbnz	r5, 801a2c2 <__kernel_rem_pio2+0x2f2>
 801a2ae:	b12b      	cbz	r3, 801a2bc <__kernel_rem_pio2+0x2ec>
 801a2b0:	a80e      	add	r0, sp, #56	; 0x38
 801a2b2:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801a2b6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801a2ba:	2301      	movs	r3, #1
 801a2bc:	3201      	adds	r2, #1
 801a2be:	461d      	mov	r5, r3
 801a2c0:	e759      	b.n	801a176 <__kernel_rem_pio2+0x1a6>
 801a2c2:	a80e      	add	r0, sp, #56	; 0x38
 801a2c4:	1acb      	subs	r3, r1, r3
 801a2c6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801a2ca:	462b      	mov	r3, r5
 801a2cc:	e7f6      	b.n	801a2bc <__kernel_rem_pio2+0x2ec>
 801a2ce:	1e62      	subs	r2, r4, #1
 801a2d0:	ab0e      	add	r3, sp, #56	; 0x38
 801a2d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a2d6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801a2da:	a90e      	add	r1, sp, #56	; 0x38
 801a2dc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801a2e0:	e757      	b.n	801a192 <__kernel_rem_pio2+0x1c2>
 801a2e2:	bf00      	nop
 801a2e4:	f3af 8000 	nop.w
	...
 801a2f4:	3ff00000 	.word	0x3ff00000
 801a2f8:	0801b830 	.word	0x0801b830
 801a2fc:	40200000 	.word	0x40200000
 801a300:	3ff00000 	.word	0x3ff00000
 801a304:	3e700000 	.word	0x3e700000
 801a308:	41700000 	.word	0x41700000
 801a30c:	3fe00000 	.word	0x3fe00000
 801a310:	0801b7f0 	.word	0x0801b7f0
 801a314:	1e62      	subs	r2, r4, #1
 801a316:	ab0e      	add	r3, sp, #56	; 0x38
 801a318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a31c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801a320:	e7db      	b.n	801a2da <__kernel_rem_pio2+0x30a>
 801a322:	a90e      	add	r1, sp, #56	; 0x38
 801a324:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801a328:	3b01      	subs	r3, #1
 801a32a:	430a      	orrs	r2, r1
 801a32c:	e78b      	b.n	801a246 <__kernel_rem_pio2+0x276>
 801a32e:	3301      	adds	r3, #1
 801a330:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801a334:	2900      	cmp	r1, #0
 801a336:	d0fa      	beq.n	801a32e <__kernel_rem_pio2+0x35e>
 801a338:	9a08      	ldr	r2, [sp, #32]
 801a33a:	4422      	add	r2, r4
 801a33c:	00d2      	lsls	r2, r2, #3
 801a33e:	a922      	add	r1, sp, #136	; 0x88
 801a340:	18e3      	adds	r3, r4, r3
 801a342:	9206      	str	r2, [sp, #24]
 801a344:	440a      	add	r2, r1
 801a346:	9302      	str	r3, [sp, #8]
 801a348:	f10b 0108 	add.w	r1, fp, #8
 801a34c:	f102 0308 	add.w	r3, r2, #8
 801a350:	1c66      	adds	r6, r4, #1
 801a352:	910a      	str	r1, [sp, #40]	; 0x28
 801a354:	2500      	movs	r5, #0
 801a356:	930d      	str	r3, [sp, #52]	; 0x34
 801a358:	9b02      	ldr	r3, [sp, #8]
 801a35a:	42b3      	cmp	r3, r6
 801a35c:	da04      	bge.n	801a368 <__kernel_rem_pio2+0x398>
 801a35e:	461c      	mov	r4, r3
 801a360:	e6a6      	b.n	801a0b0 <__kernel_rem_pio2+0xe0>
 801a362:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a364:	2301      	movs	r3, #1
 801a366:	e7e3      	b.n	801a330 <__kernel_rem_pio2+0x360>
 801a368:	9b06      	ldr	r3, [sp, #24]
 801a36a:	18ef      	adds	r7, r5, r3
 801a36c:	ab22      	add	r3, sp, #136	; 0x88
 801a36e:	441f      	add	r7, r3
 801a370:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a372:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801a376:	f7e6 f8e5 	bl	8000544 <__aeabi_i2d>
 801a37a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a37c:	461c      	mov	r4, r3
 801a37e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a380:	e9c7 0100 	strd	r0, r1, [r7]
 801a384:	eb03 0b05 	add.w	fp, r3, r5
 801a388:	2700      	movs	r7, #0
 801a38a:	f04f 0800 	mov.w	r8, #0
 801a38e:	f04f 0900 	mov.w	r9, #0
 801a392:	9b07      	ldr	r3, [sp, #28]
 801a394:	429f      	cmp	r7, r3
 801a396:	dd08      	ble.n	801a3aa <__kernel_rem_pio2+0x3da>
 801a398:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a39a:	aa72      	add	r2, sp, #456	; 0x1c8
 801a39c:	18eb      	adds	r3, r5, r3
 801a39e:	4413      	add	r3, r2
 801a3a0:	e9c3 8902 	strd	r8, r9, [r3, #8]
 801a3a4:	3601      	adds	r6, #1
 801a3a6:	3508      	adds	r5, #8
 801a3a8:	e7d6      	b.n	801a358 <__kernel_rem_pio2+0x388>
 801a3aa:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801a3ae:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801a3b2:	f7e6 f931 	bl	8000618 <__aeabi_dmul>
 801a3b6:	4602      	mov	r2, r0
 801a3b8:	460b      	mov	r3, r1
 801a3ba:	4640      	mov	r0, r8
 801a3bc:	4649      	mov	r1, r9
 801a3be:	f7e5 ff75 	bl	80002ac <__adddf3>
 801a3c2:	3701      	adds	r7, #1
 801a3c4:	4680      	mov	r8, r0
 801a3c6:	4689      	mov	r9, r1
 801a3c8:	e7e3      	b.n	801a392 <__kernel_rem_pio2+0x3c2>
 801a3ca:	3d01      	subs	r5, #1
 801a3cc:	e741      	b.n	801a252 <__kernel_rem_pio2+0x282>
 801a3ce:	f1ca 0000 	rsb	r0, sl, #0
 801a3d2:	ec47 6b10 	vmov	d0, r6, r7
 801a3d6:	f000 fc2b 	bl	801ac30 <scalbn>
 801a3da:	ec57 6b10 	vmov	r6, r7, d0
 801a3de:	2200      	movs	r2, #0
 801a3e0:	4b99      	ldr	r3, [pc, #612]	; (801a648 <__kernel_rem_pio2+0x678>)
 801a3e2:	ee10 0a10 	vmov	r0, s0
 801a3e6:	4639      	mov	r1, r7
 801a3e8:	f7e6 fb9c 	bl	8000b24 <__aeabi_dcmpge>
 801a3ec:	b1f8      	cbz	r0, 801a42e <__kernel_rem_pio2+0x45e>
 801a3ee:	2200      	movs	r2, #0
 801a3f0:	4b96      	ldr	r3, [pc, #600]	; (801a64c <__kernel_rem_pio2+0x67c>)
 801a3f2:	4630      	mov	r0, r6
 801a3f4:	4639      	mov	r1, r7
 801a3f6:	f7e6 f90f 	bl	8000618 <__aeabi_dmul>
 801a3fa:	f7e6 fbbd 	bl	8000b78 <__aeabi_d2iz>
 801a3fe:	4680      	mov	r8, r0
 801a400:	f7e6 f8a0 	bl	8000544 <__aeabi_i2d>
 801a404:	2200      	movs	r2, #0
 801a406:	4b90      	ldr	r3, [pc, #576]	; (801a648 <__kernel_rem_pio2+0x678>)
 801a408:	f7e6 f906 	bl	8000618 <__aeabi_dmul>
 801a40c:	460b      	mov	r3, r1
 801a40e:	4602      	mov	r2, r0
 801a410:	4639      	mov	r1, r7
 801a412:	4630      	mov	r0, r6
 801a414:	f7e5 ff48 	bl	80002a8 <__aeabi_dsub>
 801a418:	f7e6 fbae 	bl	8000b78 <__aeabi_d2iz>
 801a41c:	1c65      	adds	r5, r4, #1
 801a41e:	ab0e      	add	r3, sp, #56	; 0x38
 801a420:	f10a 0a18 	add.w	sl, sl, #24
 801a424:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801a428:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801a42c:	e719      	b.n	801a262 <__kernel_rem_pio2+0x292>
 801a42e:	4630      	mov	r0, r6
 801a430:	4639      	mov	r1, r7
 801a432:	f7e6 fba1 	bl	8000b78 <__aeabi_d2iz>
 801a436:	ab0e      	add	r3, sp, #56	; 0x38
 801a438:	4625      	mov	r5, r4
 801a43a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801a43e:	e710      	b.n	801a262 <__kernel_rem_pio2+0x292>
 801a440:	ab0e      	add	r3, sp, #56	; 0x38
 801a442:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801a446:	f7e6 f87d 	bl	8000544 <__aeabi_i2d>
 801a44a:	4642      	mov	r2, r8
 801a44c:	464b      	mov	r3, r9
 801a44e:	f7e6 f8e3 	bl	8000618 <__aeabi_dmul>
 801a452:	2200      	movs	r2, #0
 801a454:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 801a458:	4b7c      	ldr	r3, [pc, #496]	; (801a64c <__kernel_rem_pio2+0x67c>)
 801a45a:	4640      	mov	r0, r8
 801a45c:	4649      	mov	r1, r9
 801a45e:	f7e6 f8db 	bl	8000618 <__aeabi_dmul>
 801a462:	3f01      	subs	r7, #1
 801a464:	4680      	mov	r8, r0
 801a466:	4689      	mov	r9, r1
 801a468:	e708      	b.n	801a27c <__kernel_rem_pio2+0x2ac>
 801a46a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 801a46e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a472:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 801a476:	f7e6 f8cf 	bl	8000618 <__aeabi_dmul>
 801a47a:	4602      	mov	r2, r0
 801a47c:	460b      	mov	r3, r1
 801a47e:	4640      	mov	r0, r8
 801a480:	4649      	mov	r1, r9
 801a482:	f7e5 ff13 	bl	80002ac <__adddf3>
 801a486:	3701      	adds	r7, #1
 801a488:	4680      	mov	r8, r0
 801a48a:	4689      	mov	r9, r1
 801a48c:	9b04      	ldr	r3, [sp, #16]
 801a48e:	429f      	cmp	r7, r3
 801a490:	dc01      	bgt.n	801a496 <__kernel_rem_pio2+0x4c6>
 801a492:	45ba      	cmp	sl, r7
 801a494:	dae9      	bge.n	801a46a <__kernel_rem_pio2+0x49a>
 801a496:	ab4a      	add	r3, sp, #296	; 0x128
 801a498:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801a49c:	e9c3 8900 	strd	r8, r9, [r3]
 801a4a0:	f10a 0a01 	add.w	sl, sl, #1
 801a4a4:	3e08      	subs	r6, #8
 801a4a6:	e6f0      	b.n	801a28a <__kernel_rem_pio2+0x2ba>
 801a4a8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801a4aa:	2b03      	cmp	r3, #3
 801a4ac:	d85b      	bhi.n	801a566 <__kernel_rem_pio2+0x596>
 801a4ae:	e8df f003 	tbb	[pc, r3]
 801a4b2:	264a      	.short	0x264a
 801a4b4:	0226      	.short	0x0226
 801a4b6:	ab9a      	add	r3, sp, #616	; 0x268
 801a4b8:	441c      	add	r4, r3
 801a4ba:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801a4be:	46a2      	mov	sl, r4
 801a4c0:	46ab      	mov	fp, r5
 801a4c2:	f1bb 0f00 	cmp.w	fp, #0
 801a4c6:	dc6c      	bgt.n	801a5a2 <__kernel_rem_pio2+0x5d2>
 801a4c8:	46a2      	mov	sl, r4
 801a4ca:	46ab      	mov	fp, r5
 801a4cc:	f1bb 0f01 	cmp.w	fp, #1
 801a4d0:	f300 8086 	bgt.w	801a5e0 <__kernel_rem_pio2+0x610>
 801a4d4:	2000      	movs	r0, #0
 801a4d6:	2100      	movs	r1, #0
 801a4d8:	2d01      	cmp	r5, #1
 801a4da:	f300 80a0 	bgt.w	801a61e <__kernel_rem_pio2+0x64e>
 801a4de:	9b02      	ldr	r3, [sp, #8]
 801a4e0:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 801a4e4:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 801a4e8:	2b00      	cmp	r3, #0
 801a4ea:	f040 809e 	bne.w	801a62a <__kernel_rem_pio2+0x65a>
 801a4ee:	9b01      	ldr	r3, [sp, #4]
 801a4f0:	e9c3 7800 	strd	r7, r8, [r3]
 801a4f4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801a4f8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801a4fc:	e033      	b.n	801a566 <__kernel_rem_pio2+0x596>
 801a4fe:	3408      	adds	r4, #8
 801a500:	ab4a      	add	r3, sp, #296	; 0x128
 801a502:	441c      	add	r4, r3
 801a504:	462e      	mov	r6, r5
 801a506:	2000      	movs	r0, #0
 801a508:	2100      	movs	r1, #0
 801a50a:	2e00      	cmp	r6, #0
 801a50c:	da3a      	bge.n	801a584 <__kernel_rem_pio2+0x5b4>
 801a50e:	9b02      	ldr	r3, [sp, #8]
 801a510:	2b00      	cmp	r3, #0
 801a512:	d03d      	beq.n	801a590 <__kernel_rem_pio2+0x5c0>
 801a514:	4602      	mov	r2, r0
 801a516:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a51a:	9c01      	ldr	r4, [sp, #4]
 801a51c:	e9c4 2300 	strd	r2, r3, [r4]
 801a520:	4602      	mov	r2, r0
 801a522:	460b      	mov	r3, r1
 801a524:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 801a528:	f7e5 febe 	bl	80002a8 <__aeabi_dsub>
 801a52c:	ae4c      	add	r6, sp, #304	; 0x130
 801a52e:	2401      	movs	r4, #1
 801a530:	42a5      	cmp	r5, r4
 801a532:	da30      	bge.n	801a596 <__kernel_rem_pio2+0x5c6>
 801a534:	9b02      	ldr	r3, [sp, #8]
 801a536:	b113      	cbz	r3, 801a53e <__kernel_rem_pio2+0x56e>
 801a538:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a53c:	4619      	mov	r1, r3
 801a53e:	9b01      	ldr	r3, [sp, #4]
 801a540:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801a544:	e00f      	b.n	801a566 <__kernel_rem_pio2+0x596>
 801a546:	ab9a      	add	r3, sp, #616	; 0x268
 801a548:	441c      	add	r4, r3
 801a54a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801a54e:	2000      	movs	r0, #0
 801a550:	2100      	movs	r1, #0
 801a552:	2d00      	cmp	r5, #0
 801a554:	da10      	bge.n	801a578 <__kernel_rem_pio2+0x5a8>
 801a556:	9b02      	ldr	r3, [sp, #8]
 801a558:	b113      	cbz	r3, 801a560 <__kernel_rem_pio2+0x590>
 801a55a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a55e:	4619      	mov	r1, r3
 801a560:	9b01      	ldr	r3, [sp, #4]
 801a562:	e9c3 0100 	strd	r0, r1, [r3]
 801a566:	9b06      	ldr	r3, [sp, #24]
 801a568:	f003 0007 	and.w	r0, r3, #7
 801a56c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 801a570:	ecbd 8b02 	vpop	{d8}
 801a574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a578:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801a57c:	f7e5 fe96 	bl	80002ac <__adddf3>
 801a580:	3d01      	subs	r5, #1
 801a582:	e7e6      	b.n	801a552 <__kernel_rem_pio2+0x582>
 801a584:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801a588:	f7e5 fe90 	bl	80002ac <__adddf3>
 801a58c:	3e01      	subs	r6, #1
 801a58e:	e7bc      	b.n	801a50a <__kernel_rem_pio2+0x53a>
 801a590:	4602      	mov	r2, r0
 801a592:	460b      	mov	r3, r1
 801a594:	e7c1      	b.n	801a51a <__kernel_rem_pio2+0x54a>
 801a596:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801a59a:	f7e5 fe87 	bl	80002ac <__adddf3>
 801a59e:	3401      	adds	r4, #1
 801a5a0:	e7c6      	b.n	801a530 <__kernel_rem_pio2+0x560>
 801a5a2:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 801a5a6:	ed3a 7b02 	vldmdb	sl!, {d7}
 801a5aa:	4640      	mov	r0, r8
 801a5ac:	ec53 2b17 	vmov	r2, r3, d7
 801a5b0:	4649      	mov	r1, r9
 801a5b2:	ed8d 7b04 	vstr	d7, [sp, #16]
 801a5b6:	f7e5 fe79 	bl	80002ac <__adddf3>
 801a5ba:	4602      	mov	r2, r0
 801a5bc:	460b      	mov	r3, r1
 801a5be:	4606      	mov	r6, r0
 801a5c0:	460f      	mov	r7, r1
 801a5c2:	4640      	mov	r0, r8
 801a5c4:	4649      	mov	r1, r9
 801a5c6:	f7e5 fe6f 	bl	80002a8 <__aeabi_dsub>
 801a5ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a5ce:	f7e5 fe6d 	bl	80002ac <__adddf3>
 801a5d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a5d6:	e9ca 0100 	strd	r0, r1, [sl]
 801a5da:	e94a 6702 	strd	r6, r7, [sl, #-8]
 801a5de:	e770      	b.n	801a4c2 <__kernel_rem_pio2+0x4f2>
 801a5e0:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 801a5e4:	ed3a 7b02 	vldmdb	sl!, {d7}
 801a5e8:	4630      	mov	r0, r6
 801a5ea:	ec53 2b17 	vmov	r2, r3, d7
 801a5ee:	4639      	mov	r1, r7
 801a5f0:	ed8d 7b04 	vstr	d7, [sp, #16]
 801a5f4:	f7e5 fe5a 	bl	80002ac <__adddf3>
 801a5f8:	4602      	mov	r2, r0
 801a5fa:	460b      	mov	r3, r1
 801a5fc:	4680      	mov	r8, r0
 801a5fe:	4689      	mov	r9, r1
 801a600:	4630      	mov	r0, r6
 801a602:	4639      	mov	r1, r7
 801a604:	f7e5 fe50 	bl	80002a8 <__aeabi_dsub>
 801a608:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a60c:	f7e5 fe4e 	bl	80002ac <__adddf3>
 801a610:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a614:	e9ca 0100 	strd	r0, r1, [sl]
 801a618:	e94a 8902 	strd	r8, r9, [sl, #-8]
 801a61c:	e756      	b.n	801a4cc <__kernel_rem_pio2+0x4fc>
 801a61e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801a622:	f7e5 fe43 	bl	80002ac <__adddf3>
 801a626:	3d01      	subs	r5, #1
 801a628:	e756      	b.n	801a4d8 <__kernel_rem_pio2+0x508>
 801a62a:	9b01      	ldr	r3, [sp, #4]
 801a62c:	9a01      	ldr	r2, [sp, #4]
 801a62e:	601f      	str	r7, [r3, #0]
 801a630:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 801a634:	605c      	str	r4, [r3, #4]
 801a636:	609d      	str	r5, [r3, #8]
 801a638:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801a63c:	60d3      	str	r3, [r2, #12]
 801a63e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a642:	6110      	str	r0, [r2, #16]
 801a644:	6153      	str	r3, [r2, #20]
 801a646:	e78e      	b.n	801a566 <__kernel_rem_pio2+0x596>
 801a648:	41700000 	.word	0x41700000
 801a64c:	3e700000 	.word	0x3e700000

0801a650 <__kernel_sin>:
 801a650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a654:	ec55 4b10 	vmov	r4, r5, d0
 801a658:	b085      	sub	sp, #20
 801a65a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801a65e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801a662:	ed8d 1b00 	vstr	d1, [sp]
 801a666:	9002      	str	r0, [sp, #8]
 801a668:	da06      	bge.n	801a678 <__kernel_sin+0x28>
 801a66a:	ee10 0a10 	vmov	r0, s0
 801a66e:	4629      	mov	r1, r5
 801a670:	f7e6 fa82 	bl	8000b78 <__aeabi_d2iz>
 801a674:	2800      	cmp	r0, #0
 801a676:	d051      	beq.n	801a71c <__kernel_sin+0xcc>
 801a678:	4622      	mov	r2, r4
 801a67a:	462b      	mov	r3, r5
 801a67c:	4620      	mov	r0, r4
 801a67e:	4629      	mov	r1, r5
 801a680:	f7e5 ffca 	bl	8000618 <__aeabi_dmul>
 801a684:	4682      	mov	sl, r0
 801a686:	468b      	mov	fp, r1
 801a688:	4602      	mov	r2, r0
 801a68a:	460b      	mov	r3, r1
 801a68c:	4620      	mov	r0, r4
 801a68e:	4629      	mov	r1, r5
 801a690:	f7e5 ffc2 	bl	8000618 <__aeabi_dmul>
 801a694:	a341      	add	r3, pc, #260	; (adr r3, 801a79c <__kernel_sin+0x14c>)
 801a696:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a69a:	4680      	mov	r8, r0
 801a69c:	4689      	mov	r9, r1
 801a69e:	4650      	mov	r0, sl
 801a6a0:	4659      	mov	r1, fp
 801a6a2:	f7e5 ffb9 	bl	8000618 <__aeabi_dmul>
 801a6a6:	a33f      	add	r3, pc, #252	; (adr r3, 801a7a4 <__kernel_sin+0x154>)
 801a6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6ac:	f7e5 fdfc 	bl	80002a8 <__aeabi_dsub>
 801a6b0:	4652      	mov	r2, sl
 801a6b2:	465b      	mov	r3, fp
 801a6b4:	f7e5 ffb0 	bl	8000618 <__aeabi_dmul>
 801a6b8:	a33c      	add	r3, pc, #240	; (adr r3, 801a7ac <__kernel_sin+0x15c>)
 801a6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6be:	f7e5 fdf5 	bl	80002ac <__adddf3>
 801a6c2:	4652      	mov	r2, sl
 801a6c4:	465b      	mov	r3, fp
 801a6c6:	f7e5 ffa7 	bl	8000618 <__aeabi_dmul>
 801a6ca:	a33a      	add	r3, pc, #232	; (adr r3, 801a7b4 <__kernel_sin+0x164>)
 801a6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6d0:	f7e5 fdea 	bl	80002a8 <__aeabi_dsub>
 801a6d4:	4652      	mov	r2, sl
 801a6d6:	465b      	mov	r3, fp
 801a6d8:	f7e5 ff9e 	bl	8000618 <__aeabi_dmul>
 801a6dc:	a337      	add	r3, pc, #220	; (adr r3, 801a7bc <__kernel_sin+0x16c>)
 801a6de:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6e2:	f7e5 fde3 	bl	80002ac <__adddf3>
 801a6e6:	9b02      	ldr	r3, [sp, #8]
 801a6e8:	4606      	mov	r6, r0
 801a6ea:	460f      	mov	r7, r1
 801a6ec:	b9db      	cbnz	r3, 801a726 <__kernel_sin+0xd6>
 801a6ee:	4602      	mov	r2, r0
 801a6f0:	460b      	mov	r3, r1
 801a6f2:	4650      	mov	r0, sl
 801a6f4:	4659      	mov	r1, fp
 801a6f6:	f7e5 ff8f 	bl	8000618 <__aeabi_dmul>
 801a6fa:	a325      	add	r3, pc, #148	; (adr r3, 801a790 <__kernel_sin+0x140>)
 801a6fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a700:	f7e5 fdd2 	bl	80002a8 <__aeabi_dsub>
 801a704:	4642      	mov	r2, r8
 801a706:	464b      	mov	r3, r9
 801a708:	f7e5 ff86 	bl	8000618 <__aeabi_dmul>
 801a70c:	4602      	mov	r2, r0
 801a70e:	460b      	mov	r3, r1
 801a710:	4620      	mov	r0, r4
 801a712:	4629      	mov	r1, r5
 801a714:	f7e5 fdca 	bl	80002ac <__adddf3>
 801a718:	4604      	mov	r4, r0
 801a71a:	460d      	mov	r5, r1
 801a71c:	ec45 4b10 	vmov	d0, r4, r5
 801a720:	b005      	add	sp, #20
 801a722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a726:	2200      	movs	r2, #0
 801a728:	4b1b      	ldr	r3, [pc, #108]	; (801a798 <__kernel_sin+0x148>)
 801a72a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a72e:	f7e5 ff73 	bl	8000618 <__aeabi_dmul>
 801a732:	4632      	mov	r2, r6
 801a734:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a738:	463b      	mov	r3, r7
 801a73a:	4640      	mov	r0, r8
 801a73c:	4649      	mov	r1, r9
 801a73e:	f7e5 ff6b 	bl	8000618 <__aeabi_dmul>
 801a742:	4602      	mov	r2, r0
 801a744:	460b      	mov	r3, r1
 801a746:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a74a:	f7e5 fdad 	bl	80002a8 <__aeabi_dsub>
 801a74e:	4652      	mov	r2, sl
 801a750:	465b      	mov	r3, fp
 801a752:	f7e5 ff61 	bl	8000618 <__aeabi_dmul>
 801a756:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a75a:	f7e5 fda5 	bl	80002a8 <__aeabi_dsub>
 801a75e:	a30c      	add	r3, pc, #48	; (adr r3, 801a790 <__kernel_sin+0x140>)
 801a760:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a764:	4606      	mov	r6, r0
 801a766:	460f      	mov	r7, r1
 801a768:	4640      	mov	r0, r8
 801a76a:	4649      	mov	r1, r9
 801a76c:	f7e5 ff54 	bl	8000618 <__aeabi_dmul>
 801a770:	4602      	mov	r2, r0
 801a772:	460b      	mov	r3, r1
 801a774:	4630      	mov	r0, r6
 801a776:	4639      	mov	r1, r7
 801a778:	f7e5 fd98 	bl	80002ac <__adddf3>
 801a77c:	4602      	mov	r2, r0
 801a77e:	460b      	mov	r3, r1
 801a780:	4620      	mov	r0, r4
 801a782:	4629      	mov	r1, r5
 801a784:	f7e5 fd90 	bl	80002a8 <__aeabi_dsub>
 801a788:	e7c6      	b.n	801a718 <__kernel_sin+0xc8>
 801a78a:	bf00      	nop
 801a78c:	f3af 8000 	nop.w
 801a790:	55555549 	.word	0x55555549
 801a794:	3fc55555 	.word	0x3fc55555
 801a798:	3fe00000 	.word	0x3fe00000
 801a79c:	5acfd57c 	.word	0x5acfd57c
 801a7a0:	3de5d93a 	.word	0x3de5d93a
 801a7a4:	8a2b9ceb 	.word	0x8a2b9ceb
 801a7a8:	3e5ae5e6 	.word	0x3e5ae5e6
 801a7ac:	57b1fe7d 	.word	0x57b1fe7d
 801a7b0:	3ec71de3 	.word	0x3ec71de3
 801a7b4:	19c161d5 	.word	0x19c161d5
 801a7b8:	3f2a01a0 	.word	0x3f2a01a0
 801a7bc:	1110f8a6 	.word	0x1110f8a6
 801a7c0:	3f811111 	.word	0x3f811111
 801a7c4:	00000000 	.word	0x00000000

0801a7c8 <atan>:
 801a7c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a7cc:	ec55 4b10 	vmov	r4, r5, d0
 801a7d0:	4bc3      	ldr	r3, [pc, #780]	; (801aae0 <atan+0x318>)
 801a7d2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801a7d6:	429e      	cmp	r6, r3
 801a7d8:	46ab      	mov	fp, r5
 801a7da:	dd18      	ble.n	801a80e <atan+0x46>
 801a7dc:	4bc1      	ldr	r3, [pc, #772]	; (801aae4 <atan+0x31c>)
 801a7de:	429e      	cmp	r6, r3
 801a7e0:	dc01      	bgt.n	801a7e6 <atan+0x1e>
 801a7e2:	d109      	bne.n	801a7f8 <atan+0x30>
 801a7e4:	b144      	cbz	r4, 801a7f8 <atan+0x30>
 801a7e6:	4622      	mov	r2, r4
 801a7e8:	462b      	mov	r3, r5
 801a7ea:	4620      	mov	r0, r4
 801a7ec:	4629      	mov	r1, r5
 801a7ee:	f7e5 fd5d 	bl	80002ac <__adddf3>
 801a7f2:	4604      	mov	r4, r0
 801a7f4:	460d      	mov	r5, r1
 801a7f6:	e006      	b.n	801a806 <atan+0x3e>
 801a7f8:	f1bb 0f00 	cmp.w	fp, #0
 801a7fc:	f340 8131 	ble.w	801aa62 <atan+0x29a>
 801a800:	a59b      	add	r5, pc, #620	; (adr r5, 801aa70 <atan+0x2a8>)
 801a802:	e9d5 4500 	ldrd	r4, r5, [r5]
 801a806:	ec45 4b10 	vmov	d0, r4, r5
 801a80a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a80e:	4bb6      	ldr	r3, [pc, #728]	; (801aae8 <atan+0x320>)
 801a810:	429e      	cmp	r6, r3
 801a812:	dc14      	bgt.n	801a83e <atan+0x76>
 801a814:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 801a818:	429e      	cmp	r6, r3
 801a81a:	dc0d      	bgt.n	801a838 <atan+0x70>
 801a81c:	a396      	add	r3, pc, #600	; (adr r3, 801aa78 <atan+0x2b0>)
 801a81e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a822:	ee10 0a10 	vmov	r0, s0
 801a826:	4629      	mov	r1, r5
 801a828:	f7e5 fd40 	bl	80002ac <__adddf3>
 801a82c:	2200      	movs	r2, #0
 801a82e:	4baf      	ldr	r3, [pc, #700]	; (801aaec <atan+0x324>)
 801a830:	f7e6 f982 	bl	8000b38 <__aeabi_dcmpgt>
 801a834:	2800      	cmp	r0, #0
 801a836:	d1e6      	bne.n	801a806 <atan+0x3e>
 801a838:	f04f 3aff 	mov.w	sl, #4294967295
 801a83c:	e02b      	b.n	801a896 <atan+0xce>
 801a83e:	f000 f963 	bl	801ab08 <fabs>
 801a842:	4bab      	ldr	r3, [pc, #684]	; (801aaf0 <atan+0x328>)
 801a844:	429e      	cmp	r6, r3
 801a846:	ec55 4b10 	vmov	r4, r5, d0
 801a84a:	f300 80bf 	bgt.w	801a9cc <atan+0x204>
 801a84e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801a852:	429e      	cmp	r6, r3
 801a854:	f300 80a0 	bgt.w	801a998 <atan+0x1d0>
 801a858:	ee10 2a10 	vmov	r2, s0
 801a85c:	ee10 0a10 	vmov	r0, s0
 801a860:	462b      	mov	r3, r5
 801a862:	4629      	mov	r1, r5
 801a864:	f7e5 fd22 	bl	80002ac <__adddf3>
 801a868:	2200      	movs	r2, #0
 801a86a:	4ba0      	ldr	r3, [pc, #640]	; (801aaec <atan+0x324>)
 801a86c:	f7e5 fd1c 	bl	80002a8 <__aeabi_dsub>
 801a870:	2200      	movs	r2, #0
 801a872:	4606      	mov	r6, r0
 801a874:	460f      	mov	r7, r1
 801a876:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801a87a:	4620      	mov	r0, r4
 801a87c:	4629      	mov	r1, r5
 801a87e:	f7e5 fd15 	bl	80002ac <__adddf3>
 801a882:	4602      	mov	r2, r0
 801a884:	460b      	mov	r3, r1
 801a886:	4630      	mov	r0, r6
 801a888:	4639      	mov	r1, r7
 801a88a:	f7e5 ffef 	bl	800086c <__aeabi_ddiv>
 801a88e:	f04f 0a00 	mov.w	sl, #0
 801a892:	4604      	mov	r4, r0
 801a894:	460d      	mov	r5, r1
 801a896:	4622      	mov	r2, r4
 801a898:	462b      	mov	r3, r5
 801a89a:	4620      	mov	r0, r4
 801a89c:	4629      	mov	r1, r5
 801a89e:	f7e5 febb 	bl	8000618 <__aeabi_dmul>
 801a8a2:	4602      	mov	r2, r0
 801a8a4:	460b      	mov	r3, r1
 801a8a6:	4680      	mov	r8, r0
 801a8a8:	4689      	mov	r9, r1
 801a8aa:	f7e5 feb5 	bl	8000618 <__aeabi_dmul>
 801a8ae:	a374      	add	r3, pc, #464	; (adr r3, 801aa80 <atan+0x2b8>)
 801a8b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a8b4:	4606      	mov	r6, r0
 801a8b6:	460f      	mov	r7, r1
 801a8b8:	f7e5 feae 	bl	8000618 <__aeabi_dmul>
 801a8bc:	a372      	add	r3, pc, #456	; (adr r3, 801aa88 <atan+0x2c0>)
 801a8be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a8c2:	f7e5 fcf3 	bl	80002ac <__adddf3>
 801a8c6:	4632      	mov	r2, r6
 801a8c8:	463b      	mov	r3, r7
 801a8ca:	f7e5 fea5 	bl	8000618 <__aeabi_dmul>
 801a8ce:	a370      	add	r3, pc, #448	; (adr r3, 801aa90 <atan+0x2c8>)
 801a8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a8d4:	f7e5 fcea 	bl	80002ac <__adddf3>
 801a8d8:	4632      	mov	r2, r6
 801a8da:	463b      	mov	r3, r7
 801a8dc:	f7e5 fe9c 	bl	8000618 <__aeabi_dmul>
 801a8e0:	a36d      	add	r3, pc, #436	; (adr r3, 801aa98 <atan+0x2d0>)
 801a8e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a8e6:	f7e5 fce1 	bl	80002ac <__adddf3>
 801a8ea:	4632      	mov	r2, r6
 801a8ec:	463b      	mov	r3, r7
 801a8ee:	f7e5 fe93 	bl	8000618 <__aeabi_dmul>
 801a8f2:	a36b      	add	r3, pc, #428	; (adr r3, 801aaa0 <atan+0x2d8>)
 801a8f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a8f8:	f7e5 fcd8 	bl	80002ac <__adddf3>
 801a8fc:	4632      	mov	r2, r6
 801a8fe:	463b      	mov	r3, r7
 801a900:	f7e5 fe8a 	bl	8000618 <__aeabi_dmul>
 801a904:	a368      	add	r3, pc, #416	; (adr r3, 801aaa8 <atan+0x2e0>)
 801a906:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a90a:	f7e5 fccf 	bl	80002ac <__adddf3>
 801a90e:	4642      	mov	r2, r8
 801a910:	464b      	mov	r3, r9
 801a912:	f7e5 fe81 	bl	8000618 <__aeabi_dmul>
 801a916:	a366      	add	r3, pc, #408	; (adr r3, 801aab0 <atan+0x2e8>)
 801a918:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a91c:	4680      	mov	r8, r0
 801a91e:	4689      	mov	r9, r1
 801a920:	4630      	mov	r0, r6
 801a922:	4639      	mov	r1, r7
 801a924:	f7e5 fe78 	bl	8000618 <__aeabi_dmul>
 801a928:	a363      	add	r3, pc, #396	; (adr r3, 801aab8 <atan+0x2f0>)
 801a92a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a92e:	f7e5 fcbb 	bl	80002a8 <__aeabi_dsub>
 801a932:	4632      	mov	r2, r6
 801a934:	463b      	mov	r3, r7
 801a936:	f7e5 fe6f 	bl	8000618 <__aeabi_dmul>
 801a93a:	a361      	add	r3, pc, #388	; (adr r3, 801aac0 <atan+0x2f8>)
 801a93c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a940:	f7e5 fcb2 	bl	80002a8 <__aeabi_dsub>
 801a944:	4632      	mov	r2, r6
 801a946:	463b      	mov	r3, r7
 801a948:	f7e5 fe66 	bl	8000618 <__aeabi_dmul>
 801a94c:	a35e      	add	r3, pc, #376	; (adr r3, 801aac8 <atan+0x300>)
 801a94e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a952:	f7e5 fca9 	bl	80002a8 <__aeabi_dsub>
 801a956:	4632      	mov	r2, r6
 801a958:	463b      	mov	r3, r7
 801a95a:	f7e5 fe5d 	bl	8000618 <__aeabi_dmul>
 801a95e:	a35c      	add	r3, pc, #368	; (adr r3, 801aad0 <atan+0x308>)
 801a960:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a964:	f7e5 fca0 	bl	80002a8 <__aeabi_dsub>
 801a968:	4632      	mov	r2, r6
 801a96a:	463b      	mov	r3, r7
 801a96c:	f7e5 fe54 	bl	8000618 <__aeabi_dmul>
 801a970:	4602      	mov	r2, r0
 801a972:	460b      	mov	r3, r1
 801a974:	4640      	mov	r0, r8
 801a976:	4649      	mov	r1, r9
 801a978:	f7e5 fc98 	bl	80002ac <__adddf3>
 801a97c:	4622      	mov	r2, r4
 801a97e:	462b      	mov	r3, r5
 801a980:	f7e5 fe4a 	bl	8000618 <__aeabi_dmul>
 801a984:	f1ba 3fff 	cmp.w	sl, #4294967295
 801a988:	4602      	mov	r2, r0
 801a98a:	460b      	mov	r3, r1
 801a98c:	d14b      	bne.n	801aa26 <atan+0x25e>
 801a98e:	4620      	mov	r0, r4
 801a990:	4629      	mov	r1, r5
 801a992:	f7e5 fc89 	bl	80002a8 <__aeabi_dsub>
 801a996:	e72c      	b.n	801a7f2 <atan+0x2a>
 801a998:	ee10 0a10 	vmov	r0, s0
 801a99c:	2200      	movs	r2, #0
 801a99e:	4b53      	ldr	r3, [pc, #332]	; (801aaec <atan+0x324>)
 801a9a0:	4629      	mov	r1, r5
 801a9a2:	f7e5 fc81 	bl	80002a8 <__aeabi_dsub>
 801a9a6:	2200      	movs	r2, #0
 801a9a8:	4606      	mov	r6, r0
 801a9aa:	460f      	mov	r7, r1
 801a9ac:	4b4f      	ldr	r3, [pc, #316]	; (801aaec <atan+0x324>)
 801a9ae:	4620      	mov	r0, r4
 801a9b0:	4629      	mov	r1, r5
 801a9b2:	f7e5 fc7b 	bl	80002ac <__adddf3>
 801a9b6:	4602      	mov	r2, r0
 801a9b8:	460b      	mov	r3, r1
 801a9ba:	4630      	mov	r0, r6
 801a9bc:	4639      	mov	r1, r7
 801a9be:	f7e5 ff55 	bl	800086c <__aeabi_ddiv>
 801a9c2:	f04f 0a01 	mov.w	sl, #1
 801a9c6:	4604      	mov	r4, r0
 801a9c8:	460d      	mov	r5, r1
 801a9ca:	e764      	b.n	801a896 <atan+0xce>
 801a9cc:	4b49      	ldr	r3, [pc, #292]	; (801aaf4 <atan+0x32c>)
 801a9ce:	429e      	cmp	r6, r3
 801a9d0:	dc1d      	bgt.n	801aa0e <atan+0x246>
 801a9d2:	ee10 0a10 	vmov	r0, s0
 801a9d6:	2200      	movs	r2, #0
 801a9d8:	4b47      	ldr	r3, [pc, #284]	; (801aaf8 <atan+0x330>)
 801a9da:	4629      	mov	r1, r5
 801a9dc:	f7e5 fc64 	bl	80002a8 <__aeabi_dsub>
 801a9e0:	2200      	movs	r2, #0
 801a9e2:	4606      	mov	r6, r0
 801a9e4:	460f      	mov	r7, r1
 801a9e6:	4b44      	ldr	r3, [pc, #272]	; (801aaf8 <atan+0x330>)
 801a9e8:	4620      	mov	r0, r4
 801a9ea:	4629      	mov	r1, r5
 801a9ec:	f7e5 fe14 	bl	8000618 <__aeabi_dmul>
 801a9f0:	2200      	movs	r2, #0
 801a9f2:	4b3e      	ldr	r3, [pc, #248]	; (801aaec <atan+0x324>)
 801a9f4:	f7e5 fc5a 	bl	80002ac <__adddf3>
 801a9f8:	4602      	mov	r2, r0
 801a9fa:	460b      	mov	r3, r1
 801a9fc:	4630      	mov	r0, r6
 801a9fe:	4639      	mov	r1, r7
 801aa00:	f7e5 ff34 	bl	800086c <__aeabi_ddiv>
 801aa04:	f04f 0a02 	mov.w	sl, #2
 801aa08:	4604      	mov	r4, r0
 801aa0a:	460d      	mov	r5, r1
 801aa0c:	e743      	b.n	801a896 <atan+0xce>
 801aa0e:	462b      	mov	r3, r5
 801aa10:	ee10 2a10 	vmov	r2, s0
 801aa14:	2000      	movs	r0, #0
 801aa16:	4939      	ldr	r1, [pc, #228]	; (801aafc <atan+0x334>)
 801aa18:	f7e5 ff28 	bl	800086c <__aeabi_ddiv>
 801aa1c:	f04f 0a03 	mov.w	sl, #3
 801aa20:	4604      	mov	r4, r0
 801aa22:	460d      	mov	r5, r1
 801aa24:	e737      	b.n	801a896 <atan+0xce>
 801aa26:	4b36      	ldr	r3, [pc, #216]	; (801ab00 <atan+0x338>)
 801aa28:	4e36      	ldr	r6, [pc, #216]	; (801ab04 <atan+0x33c>)
 801aa2a:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 801aa2e:	4456      	add	r6, sl
 801aa30:	449a      	add	sl, r3
 801aa32:	e9da 2300 	ldrd	r2, r3, [sl]
 801aa36:	f7e5 fc37 	bl	80002a8 <__aeabi_dsub>
 801aa3a:	4622      	mov	r2, r4
 801aa3c:	462b      	mov	r3, r5
 801aa3e:	f7e5 fc33 	bl	80002a8 <__aeabi_dsub>
 801aa42:	4602      	mov	r2, r0
 801aa44:	460b      	mov	r3, r1
 801aa46:	e9d6 0100 	ldrd	r0, r1, [r6]
 801aa4a:	f7e5 fc2d 	bl	80002a8 <__aeabi_dsub>
 801aa4e:	f1bb 0f00 	cmp.w	fp, #0
 801aa52:	4604      	mov	r4, r0
 801aa54:	460d      	mov	r5, r1
 801aa56:	f6bf aed6 	bge.w	801a806 <atan+0x3e>
 801aa5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801aa5e:	461d      	mov	r5, r3
 801aa60:	e6d1      	b.n	801a806 <atan+0x3e>
 801aa62:	a51d      	add	r5, pc, #116	; (adr r5, 801aad8 <atan+0x310>)
 801aa64:	e9d5 4500 	ldrd	r4, r5, [r5]
 801aa68:	e6cd      	b.n	801a806 <atan+0x3e>
 801aa6a:	bf00      	nop
 801aa6c:	f3af 8000 	nop.w
 801aa70:	54442d18 	.word	0x54442d18
 801aa74:	3ff921fb 	.word	0x3ff921fb
 801aa78:	8800759c 	.word	0x8800759c
 801aa7c:	7e37e43c 	.word	0x7e37e43c
 801aa80:	e322da11 	.word	0xe322da11
 801aa84:	3f90ad3a 	.word	0x3f90ad3a
 801aa88:	24760deb 	.word	0x24760deb
 801aa8c:	3fa97b4b 	.word	0x3fa97b4b
 801aa90:	a0d03d51 	.word	0xa0d03d51
 801aa94:	3fb10d66 	.word	0x3fb10d66
 801aa98:	c54c206e 	.word	0xc54c206e
 801aa9c:	3fb745cd 	.word	0x3fb745cd
 801aaa0:	920083ff 	.word	0x920083ff
 801aaa4:	3fc24924 	.word	0x3fc24924
 801aaa8:	5555550d 	.word	0x5555550d
 801aaac:	3fd55555 	.word	0x3fd55555
 801aab0:	2c6a6c2f 	.word	0x2c6a6c2f
 801aab4:	bfa2b444 	.word	0xbfa2b444
 801aab8:	52defd9a 	.word	0x52defd9a
 801aabc:	3fadde2d 	.word	0x3fadde2d
 801aac0:	af749a6d 	.word	0xaf749a6d
 801aac4:	3fb3b0f2 	.word	0x3fb3b0f2
 801aac8:	fe231671 	.word	0xfe231671
 801aacc:	3fbc71c6 	.word	0x3fbc71c6
 801aad0:	9998ebc4 	.word	0x9998ebc4
 801aad4:	3fc99999 	.word	0x3fc99999
 801aad8:	54442d18 	.word	0x54442d18
 801aadc:	bff921fb 	.word	0xbff921fb
 801aae0:	440fffff 	.word	0x440fffff
 801aae4:	7ff00000 	.word	0x7ff00000
 801aae8:	3fdbffff 	.word	0x3fdbffff
 801aaec:	3ff00000 	.word	0x3ff00000
 801aaf0:	3ff2ffff 	.word	0x3ff2ffff
 801aaf4:	40037fff 	.word	0x40037fff
 801aaf8:	3ff80000 	.word	0x3ff80000
 801aafc:	bff00000 	.word	0xbff00000
 801ab00:	0801b860 	.word	0x0801b860
 801ab04:	0801b840 	.word	0x0801b840

0801ab08 <fabs>:
 801ab08:	ec51 0b10 	vmov	r0, r1, d0
 801ab0c:	ee10 2a10 	vmov	r2, s0
 801ab10:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801ab14:	ec43 2b10 	vmov	d0, r2, r3
 801ab18:	4770      	bx	lr
 801ab1a:	0000      	movs	r0, r0
 801ab1c:	0000      	movs	r0, r0
	...

0801ab20 <floor>:
 801ab20:	ec51 0b10 	vmov	r0, r1, d0
 801ab24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ab28:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801ab2c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801ab30:	2e13      	cmp	r6, #19
 801ab32:	460c      	mov	r4, r1
 801ab34:	ee10 5a10 	vmov	r5, s0
 801ab38:	4680      	mov	r8, r0
 801ab3a:	dc34      	bgt.n	801aba6 <floor+0x86>
 801ab3c:	2e00      	cmp	r6, #0
 801ab3e:	da16      	bge.n	801ab6e <floor+0x4e>
 801ab40:	a335      	add	r3, pc, #212	; (adr r3, 801ac18 <floor+0xf8>)
 801ab42:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab46:	f7e5 fbb1 	bl	80002ac <__adddf3>
 801ab4a:	2200      	movs	r2, #0
 801ab4c:	2300      	movs	r3, #0
 801ab4e:	f7e5 fff3 	bl	8000b38 <__aeabi_dcmpgt>
 801ab52:	b148      	cbz	r0, 801ab68 <floor+0x48>
 801ab54:	2c00      	cmp	r4, #0
 801ab56:	da59      	bge.n	801ac0c <floor+0xec>
 801ab58:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801ab5c:	4a30      	ldr	r2, [pc, #192]	; (801ac20 <floor+0x100>)
 801ab5e:	432b      	orrs	r3, r5
 801ab60:	2500      	movs	r5, #0
 801ab62:	42ab      	cmp	r3, r5
 801ab64:	bf18      	it	ne
 801ab66:	4614      	movne	r4, r2
 801ab68:	4621      	mov	r1, r4
 801ab6a:	4628      	mov	r0, r5
 801ab6c:	e025      	b.n	801abba <floor+0x9a>
 801ab6e:	4f2d      	ldr	r7, [pc, #180]	; (801ac24 <floor+0x104>)
 801ab70:	4137      	asrs	r7, r6
 801ab72:	ea01 0307 	and.w	r3, r1, r7
 801ab76:	4303      	orrs	r3, r0
 801ab78:	d01f      	beq.n	801abba <floor+0x9a>
 801ab7a:	a327      	add	r3, pc, #156	; (adr r3, 801ac18 <floor+0xf8>)
 801ab7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab80:	f7e5 fb94 	bl	80002ac <__adddf3>
 801ab84:	2200      	movs	r2, #0
 801ab86:	2300      	movs	r3, #0
 801ab88:	f7e5 ffd6 	bl	8000b38 <__aeabi_dcmpgt>
 801ab8c:	2800      	cmp	r0, #0
 801ab8e:	d0eb      	beq.n	801ab68 <floor+0x48>
 801ab90:	2c00      	cmp	r4, #0
 801ab92:	bfbe      	ittt	lt
 801ab94:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801ab98:	fa43 f606 	asrlt.w	r6, r3, r6
 801ab9c:	19a4      	addlt	r4, r4, r6
 801ab9e:	ea24 0407 	bic.w	r4, r4, r7
 801aba2:	2500      	movs	r5, #0
 801aba4:	e7e0      	b.n	801ab68 <floor+0x48>
 801aba6:	2e33      	cmp	r6, #51	; 0x33
 801aba8:	dd0b      	ble.n	801abc2 <floor+0xa2>
 801abaa:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801abae:	d104      	bne.n	801abba <floor+0x9a>
 801abb0:	ee10 2a10 	vmov	r2, s0
 801abb4:	460b      	mov	r3, r1
 801abb6:	f7e5 fb79 	bl	80002ac <__adddf3>
 801abba:	ec41 0b10 	vmov	d0, r0, r1
 801abbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801abc2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801abc6:	f04f 33ff 	mov.w	r3, #4294967295
 801abca:	fa23 f707 	lsr.w	r7, r3, r7
 801abce:	4207      	tst	r7, r0
 801abd0:	d0f3      	beq.n	801abba <floor+0x9a>
 801abd2:	a311      	add	r3, pc, #68	; (adr r3, 801ac18 <floor+0xf8>)
 801abd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abd8:	f7e5 fb68 	bl	80002ac <__adddf3>
 801abdc:	2200      	movs	r2, #0
 801abde:	2300      	movs	r3, #0
 801abe0:	f7e5 ffaa 	bl	8000b38 <__aeabi_dcmpgt>
 801abe4:	2800      	cmp	r0, #0
 801abe6:	d0bf      	beq.n	801ab68 <floor+0x48>
 801abe8:	2c00      	cmp	r4, #0
 801abea:	da02      	bge.n	801abf2 <floor+0xd2>
 801abec:	2e14      	cmp	r6, #20
 801abee:	d103      	bne.n	801abf8 <floor+0xd8>
 801abf0:	3401      	adds	r4, #1
 801abf2:	ea25 0507 	bic.w	r5, r5, r7
 801abf6:	e7b7      	b.n	801ab68 <floor+0x48>
 801abf8:	2301      	movs	r3, #1
 801abfa:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801abfe:	fa03 f606 	lsl.w	r6, r3, r6
 801ac02:	4435      	add	r5, r6
 801ac04:	4545      	cmp	r5, r8
 801ac06:	bf38      	it	cc
 801ac08:	18e4      	addcc	r4, r4, r3
 801ac0a:	e7f2      	b.n	801abf2 <floor+0xd2>
 801ac0c:	2500      	movs	r5, #0
 801ac0e:	462c      	mov	r4, r5
 801ac10:	e7aa      	b.n	801ab68 <floor+0x48>
 801ac12:	bf00      	nop
 801ac14:	f3af 8000 	nop.w
 801ac18:	8800759c 	.word	0x8800759c
 801ac1c:	7e37e43c 	.word	0x7e37e43c
 801ac20:	bff00000 	.word	0xbff00000
 801ac24:	000fffff 	.word	0x000fffff

0801ac28 <matherr>:
 801ac28:	2000      	movs	r0, #0
 801ac2a:	4770      	bx	lr
 801ac2c:	0000      	movs	r0, r0
	...

0801ac30 <scalbn>:
 801ac30:	b570      	push	{r4, r5, r6, lr}
 801ac32:	ec55 4b10 	vmov	r4, r5, d0
 801ac36:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801ac3a:	4606      	mov	r6, r0
 801ac3c:	462b      	mov	r3, r5
 801ac3e:	b9aa      	cbnz	r2, 801ac6c <scalbn+0x3c>
 801ac40:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801ac44:	4323      	orrs	r3, r4
 801ac46:	d03b      	beq.n	801acc0 <scalbn+0x90>
 801ac48:	4b31      	ldr	r3, [pc, #196]	; (801ad10 <scalbn+0xe0>)
 801ac4a:	4629      	mov	r1, r5
 801ac4c:	2200      	movs	r2, #0
 801ac4e:	ee10 0a10 	vmov	r0, s0
 801ac52:	f7e5 fce1 	bl	8000618 <__aeabi_dmul>
 801ac56:	4b2f      	ldr	r3, [pc, #188]	; (801ad14 <scalbn+0xe4>)
 801ac58:	429e      	cmp	r6, r3
 801ac5a:	4604      	mov	r4, r0
 801ac5c:	460d      	mov	r5, r1
 801ac5e:	da12      	bge.n	801ac86 <scalbn+0x56>
 801ac60:	a327      	add	r3, pc, #156	; (adr r3, 801ad00 <scalbn+0xd0>)
 801ac62:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac66:	f7e5 fcd7 	bl	8000618 <__aeabi_dmul>
 801ac6a:	e009      	b.n	801ac80 <scalbn+0x50>
 801ac6c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801ac70:	428a      	cmp	r2, r1
 801ac72:	d10c      	bne.n	801ac8e <scalbn+0x5e>
 801ac74:	ee10 2a10 	vmov	r2, s0
 801ac78:	4620      	mov	r0, r4
 801ac7a:	4629      	mov	r1, r5
 801ac7c:	f7e5 fb16 	bl	80002ac <__adddf3>
 801ac80:	4604      	mov	r4, r0
 801ac82:	460d      	mov	r5, r1
 801ac84:	e01c      	b.n	801acc0 <scalbn+0x90>
 801ac86:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801ac8a:	460b      	mov	r3, r1
 801ac8c:	3a36      	subs	r2, #54	; 0x36
 801ac8e:	4432      	add	r2, r6
 801ac90:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801ac94:	428a      	cmp	r2, r1
 801ac96:	dd0b      	ble.n	801acb0 <scalbn+0x80>
 801ac98:	ec45 4b11 	vmov	d1, r4, r5
 801ac9c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 801ad08 <scalbn+0xd8>
 801aca0:	f000 f83c 	bl	801ad1c <copysign>
 801aca4:	a318      	add	r3, pc, #96	; (adr r3, 801ad08 <scalbn+0xd8>)
 801aca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acaa:	ec51 0b10 	vmov	r0, r1, d0
 801acae:	e7da      	b.n	801ac66 <scalbn+0x36>
 801acb0:	2a00      	cmp	r2, #0
 801acb2:	dd08      	ble.n	801acc6 <scalbn+0x96>
 801acb4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801acb8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801acbc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801acc0:	ec45 4b10 	vmov	d0, r4, r5
 801acc4:	bd70      	pop	{r4, r5, r6, pc}
 801acc6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801acca:	da0d      	bge.n	801ace8 <scalbn+0xb8>
 801accc:	f24c 3350 	movw	r3, #50000	; 0xc350
 801acd0:	429e      	cmp	r6, r3
 801acd2:	ec45 4b11 	vmov	d1, r4, r5
 801acd6:	dce1      	bgt.n	801ac9c <scalbn+0x6c>
 801acd8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 801ad00 <scalbn+0xd0>
 801acdc:	f000 f81e 	bl	801ad1c <copysign>
 801ace0:	a307      	add	r3, pc, #28	; (adr r3, 801ad00 <scalbn+0xd0>)
 801ace2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ace6:	e7e0      	b.n	801acaa <scalbn+0x7a>
 801ace8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801acec:	3236      	adds	r2, #54	; 0x36
 801acee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801acf2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801acf6:	4620      	mov	r0, r4
 801acf8:	4629      	mov	r1, r5
 801acfa:	2200      	movs	r2, #0
 801acfc:	4b06      	ldr	r3, [pc, #24]	; (801ad18 <scalbn+0xe8>)
 801acfe:	e7b2      	b.n	801ac66 <scalbn+0x36>
 801ad00:	c2f8f359 	.word	0xc2f8f359
 801ad04:	01a56e1f 	.word	0x01a56e1f
 801ad08:	8800759c 	.word	0x8800759c
 801ad0c:	7e37e43c 	.word	0x7e37e43c
 801ad10:	43500000 	.word	0x43500000
 801ad14:	ffff3cb0 	.word	0xffff3cb0
 801ad18:	3c900000 	.word	0x3c900000

0801ad1c <copysign>:
 801ad1c:	ec51 0b10 	vmov	r0, r1, d0
 801ad20:	ee11 0a90 	vmov	r0, s3
 801ad24:	ee10 2a10 	vmov	r2, s0
 801ad28:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801ad2c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 801ad30:	ea41 0300 	orr.w	r3, r1, r0
 801ad34:	ec43 2b10 	vmov	d0, r2, r3
 801ad38:	4770      	bx	lr
	...

0801ad3c <_init>:
 801ad3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ad3e:	bf00      	nop
 801ad40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ad42:	bc08      	pop	{r3}
 801ad44:	469e      	mov	lr, r3
 801ad46:	4770      	bx	lr

0801ad48 <_fini>:
 801ad48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ad4a:	bf00      	nop
 801ad4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ad4e:	bc08      	pop	{r3}
 801ad50:	469e      	mov	lr, r3
 801ad52:	4770      	bx	lr
